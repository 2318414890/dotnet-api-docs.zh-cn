<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541640" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供高性能的 API，以便提供 UTF-8 编码 JSON 文本的只进和非缓存编写权限。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

`Utf8JsonWriter` 写入的文本按顺序不使用缓存并默认情况下遵循[JSON RFC](https://tools.ietf.org/html/rfc8259)，除了编写注释。

尝试编写无效的 JSON 验证时的方法已启用，则会引发<xref:System.InvalidOperationException>使用特定于上下文的错误消息。
由于此类型是 ref 结构，它不直接支持异步。 但是，它提供对可重入性编写部分数据，若要继续在区块中编写的支持。
若要在格式化输出缩进和空白区域或跳过验证，创建的实例<xref:System.Text.Json.JsonWriterState>并将其在传递到编写器。

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><see cref="T:System.Buffers.IBufferWriter`1" /> 的实例，用作编写 JSON 文本的目标。</param>
        <param name="state">包含读取器状态的结构。 第一次调用构造函数时，它应反映默认状态；否则，它应从 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的上一个实例捕获状态并传递回去。</param>
        <summary>使用指定的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 初始化 <paramref name="bufferWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

由于此类型是 ref 结构，它是仅限堆栈的类型，并向其应用的 ref 结构的所有限制。
这是为什么构造函数接受的原因<xref:System.Text.Json.JsonWriterState>。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bufferWriter" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取目前为止 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 为 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的当前实例提交到输出的字节总数。
这指示 <see cref="T:System.Buffers.IBufferWriter`1" /> 的升级程度。</summary>
        <value>总字节数的已提交到由输出<see cref="T:System.Text.Json.Utf8JsonWriter" />到目前为止。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取目前 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 为 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的实例编写的字节总数。
这包括除了已提交的内容之外编写的数据。</summary>
        <value>写入的字节总数<see cref="T:System.Text.Json.Utf8JsonWriter" />到目前为止。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前标记的深度。</summary>
        <value>当前标记的深度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

`CurrentDepth`属性跟踪嵌套对象的递归深度 / 当前编写的 JSON 文本中的数组。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><see langword="true" /> 指示不会编写更多数据；否则为 <see langword="false" />。 这用于验证在没有更多要关注的数据情况下，编写的 JSON 在结构上是否有效。</param>
        <summary>根据目前已编写的内容提升基础 <see cref="T:System.Buffers.IBufferWriter`1" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">编写了不完整的 JSON，并且 <paramref name="isFinalBlock" /> 为 <see langword="true" />。 例如，需要关闭打开的对象或数组时。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 状态的当前快照，该状态必须由调用方捕获并传递回包含更多数据的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 构造函数。</summary>
        <returns><see cref="T:System.Text.Json.Utf8JsonWriter" /> 状态的当前快照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

与不同<xref:System.Text.Json.Utf8JsonWriter>、 这是 ref 结构、 状态可以经受得住跨异步/等待边界和因此需要此类型提供支持的更多数据然后再继续进行的新实例以异步方式读取<xref:System.Text.Json.Utf8JsonWriter>。

获取用于创建新的状态<see cref="T:System.Text.Json.Utf8JsonWriter" />结构而无需第一个提交已写入的数据会导致不一致的状态。 调用<xref:System.Text.Json.Utf8JsonWriter.Flush%2A>之前获取的当前状态。  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已对 JSON 数据进行编写和缓冲，但尚未刷新到 <see cref="T:System.Buffers.IBufferWriter`1" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要编写为 JSON 文本“true”或“false”且作为 JSON 数组元素的值。</param>
        <summary>编写 <see cref="T:System.Boolean" /> 值（编写为 JSON 文本“true”或“false”）作为 JSON 数组的元素。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value">要编写为 JSON 注释的 UTF-8 编码值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>将 UTF-8 文本值编写为 JSON 注释（在 <c>/../</c> 内）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8Value" /> 太大。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>编写 UTF-16 文本值作为 JSON 注释（在 <c>/../</c> 内）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> 太大。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>编写字符串文本值作为 JSON 注释（在 <c>/../</c> 内）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> 太大。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>编写 JSON 数组的结尾。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>编写 JSON 对象的结尾。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 JSON 文本“NULL”作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 JSON 文本“NULL”作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 JSON 文本“NULL”作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>编写 JSON 文本“NULL”作为 JSON 数组的元素。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 数字形式作为 JSON 数组的元素写入的值。</param>
        <summary>编写 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。 例如，32767。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>编写 JSON 数组的开头。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

如果这将导致要编写的 JSON 无效（启用验证时）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 数组的 UTF-8 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写 JSON 数组的开头，且带有一个用作键的属性名称。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写 JSON 数组的开头，且带有一个用作键的属性名称。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写 JSON 数组的开头，且带有一个用作键的属性名称。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>编写 JSON 对象的开头。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写 JSON 对象的开头，将属性名称作为键。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写 JSON 对象的开头，将属性名称作为键。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写 JSON 对象的开头，将属性名称作为键。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">JSON 的深度超过最大深度 1000。

- 或 -

要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。 例如，2017年-06-12T05:30:45.7680000。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。 例如，2017年-06-12T05:30:45.7680000-07:00。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="utf8Value">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写 UTF-8 属性名称和 UTF-8 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写 UTF-8 属性名称和 UTF-16 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
        <param name="value">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写 UTF-8 属性名称和字符串文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。 例如，2017年-06-12T05:30:45.7680000。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。 例如，2017年-06-12T05:30:45.7680000-07:00。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="utf8Value">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写 UTF-16 属性名称和 UTF-8 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写 UTF-16 属性名称和 UTF-16 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写 UTF-16 属性名称和字符串文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。 例如，2017年-06-12T05:30:45.7680000。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。 例如，2017年-06-12T05:30:45.7680000-07:00。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数；其默认值为 <see langword="true" />。</param>
        <summary>编写属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="utf8Value">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写属性名称和 UTF-8 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写属性名称和 UTF-16 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
        <param name="value">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
        <param name="escape">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。
始终对该值进行转义</param>
        <summary>编写属性名称和字符串文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">指定的属性名称或值太大时引发。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。 例如，2017年-06-12T05:30:45.7680000。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" />。 例如，2017年-06-12T05:30:45.7680000-07:00。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</param>
        <summary>编写 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 数组的元素。</summary>
        <remarks>将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</remarks>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value">要编写为 JSON 数组的 JSON 字符串元素的 UTF-8 编码值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>编写 UTF-8 文本值（作为 JSON 字符串）作为 JSON 数组的元素。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8Value" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>编写 UTF-16 文本值（作为 JSON 字符串）作为 JSON 数组的元素。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</param>
        <param name="escape">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。 这是可选参数，其默认值为 <see langword="true" />。</param>
        <summary>编写字符串文本值（作为 JSON 字符串）作为 JSON 数组的元素。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> 太大。</exception>
        <exception cref="T:System.InvalidOperationException">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
