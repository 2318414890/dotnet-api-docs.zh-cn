<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95f9a243133d9579a5ca29531196e3a51c19a98d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610114" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <TypeSignature Language="F#" Value="type TextFragment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>通过语音合成引擎包含消耗的文本和语音特性信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 语音平台基础结构将解压的 SSML 输入和构造基于 XML 结构<xref:System.Speech.Synthesis.TtsEngine.TextFragment>对象。  
  
 语音内容可通过<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>， <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，并<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>的属性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例。  
  
 语音特性信息，如强调、 音调、 和速度，获取从<xref:System.Speech.Synthesis.TtsEngine.FragmentState>返回的对象<xref:System.Speech.Synthesis.TtsEngine.TextFragment><xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>属性。  
  
   
  
## Examples  
 下面的示例是继承的自定义语音合成实现的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，并使用利用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例，并创建一个新的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例将传递给`Speak`基础的合成引擎上的方法。  
  
     特别注意用于遵守<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>上原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>创建时<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>的新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>枚举值由从中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>返回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每个属性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，实现  
  
    -   要朗读的文本中，将转换到 Britishisms Americanism。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>接口提供实现支持<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件类型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例用于创建将事件与创建合成器进度条的驱动器。  
  
3.  然后调用语音呈现引擎使用已修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>数组。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>构造 <see langword="TextFragment" /> 的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认构造函数<xref:System.Speech.Synthesis.TtsEngine.TextFragment>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.TtsEngine.FragmentState with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see langword="TextFragment" /> 的语音特性信息。</summary>
        <value>返回或使用 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" /> 实例来为 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 设置语音特性信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的默认值为 `null`。  
  
 可以从实例获取诗体论信息<xref:System.Speech.Synthesis.TtsEngine.Prosody>返回的<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A>的实例上的属性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>返回的<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取片段中的语音文本的长度。</summary>
        <value>返回或使用 <see langword="int" /> 以字符设置与此要朗读的片段相关联的文本字符串的长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的默认值为 0。  
  
   
  
## Examples  
 下面的示例是继承的自定义语音合成实现的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，并使用利用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例，并创建一个新的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例将传递给`Speak`基础的合成引擎上的方法。  
  
     特别注意用于遵守<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>上原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>创建时<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>的新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>枚举值由从中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>返回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每个属性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，实现  
  
    -   要朗读的文本中，将转换到 Britishisms Americanism。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>接口提供实现支持<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件类型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例用于创建将事件与创建合成器进度条的驱动器。  
  
3.  然后调用语音呈现引擎使用已修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>数组。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextOffset : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取片段中的文本的起始位置。</summary>
        <value>返回或使用 <see langword="int" /> 以字符设置与此要朗读的片段相关联的部分文本字符串的开始位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的默认值为 0。  
  
   
  
## Examples  
 下面的示例是继承的自定义语音合成实现的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，并使用利用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例，并创建一个新的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例将传递给`Speak`基础的合成引擎上的方法。  
  
     特别注意用于遵守<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>上原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>创建时<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>的新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>枚举值由从中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>返回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每个属性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，实现  
  
    -   要朗读的文本中，将转换到 Britishisms Americanism。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>接口提供实现支持<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件类型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例用于创建将事件与创建合成器进度条的驱动器。  
  
3.  然后调用语音呈现引擎使用已修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>数组。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextToSpeak : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取片段的语音文本。</summary>
        <value>返回或使用 <see langword="System.String" /> 来设置语音合成引擎用来生成音频输出的语音文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的默认值为 `System.String.Empty`。  
  
 应用程序可随意的值完全更改<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>。  
  
 值重置<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>不会更改的值<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>和<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>。  
  
   
  
## Examples  
 下面的示例是继承的自定义语音合成实现的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，并使用利用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例，并创建一个新的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例将传递给`Speak`基础的合成引擎上的方法。  
  
     特别注意用于遵守<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>上原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>创建时<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>的新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>枚举值由从中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>返回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每个属性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，实现  
  
    -   要朗读的文本中，将转换到 Britishisms Americanism。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>接口提供实现支持<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件类型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例用于创建将事件与创建合成器进度条的驱动器。  
  
3.  然后调用语音呈现引擎使用已修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>数组。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>