<Type Name="SayAs" FullName="System.Speech.Synthesis.TtsEngine.SayAs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8128f5e4a29cd39063cc30944f2dccb7f74c7990" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408772" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SayAs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit SayAs extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.SayAs" />
  <TypeSignature Language="VB.NET" Value="Public Class SayAs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SayAs" />
  <TypeSignature Language="F#" Value="type SayAs = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含有关内容类型（例如货币、日期或地址）或确定文本应如何发音的语言构造的信息。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SayAs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SayAs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SayAs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <c>SayAs</c> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性<xref:System.Speech.Synthesis.TtsEngine.SayAs>类用于获取或设置的属性的值`say-as`SSML 标记中的元素。 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A>属性使用<xref:System.Speech.Synthesis.TtsEngine.SayAs>实例以通知<xref:System.Speech.Synthesis.SpeechSynthesizer>如何说话中包含的文本<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>属性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Detail">
      <MemberSignature Language="C#" Value="public string Detail { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Detail" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SayAs.Detail" />
      <MemberSignature Language="VB.NET" Value="Public Property Detail As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Detail { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Detail : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.SayAs.Detail" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置提示的 SSML 标记语言中的 <c>say-as</c> 元素的 <c>detail</c> 特性值。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A?displayProperty=nameWithType>属性获取或设置的值<xref:System.Speech.Synthesis.TtsEngine.SayAs.Detail%2A>中的属性<xref:System.Speech.Synthesis.TtsEngine.SayAs>实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Format" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SayAs.Format" />
      <MemberSignature Language="VB.NET" Value="Public Property Format As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Format { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Format : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.SayAs.Format" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置提示的 SSML 标记语言中的 <c>say-as</c> 元素的 <c>format</c> 特性值。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A?displayProperty=nameWithType>属性获取或设置的值<xref:System.Speech.Synthesis.TtsEngine.SayAs.Format%2A>中的属性<xref:System.Speech.Synthesis.TtsEngine.SayAs>实例。  
  
 例如，一条提示可能包含短语"的时间是`<say-as interpret-as="time"> 05:00 </say-as>`"。  在此示例中，`05:00`可能就读作"点钟五个"或"五 AM"或"噢五百个"。 <xref:System.Speech.Synthesis.TtsEngine.SayAs.Format%2A>属性允许的值`interpret-as`属性来进行扩展以指定要朗读的时间格式。 如果值`interpret-as`属性为"时间： 24 小时"，<xref:System.Speech.Synthesis.SpeechSynthesizer>说出"噢五百个"。 如果值`interpret-as`属性是"时间： 12 hour"、<xref:System.Speech.Synthesis.SpeechSynthesizer>说出"的 M 的五个"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpretAs">
      <MemberSignature Language="C#" Value="public string InterpretAs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InterpretAs" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SayAs.InterpretAs" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpretAs As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InterpretAs { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InterpretAs : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.SayAs.InterpretAs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置提示的 SSML 标记语言中的 <c>say-as</c> 元素的 <c>interpret-as</c> 特性值。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.SayAs%2A?displayProperty=nameWithType>属性获取或设置的值<xref:System.Speech.Synthesis.TtsEngine.SayAs.InterpretAs%2A>中的属性<xref:System.Speech.Synthesis.TtsEngine.SayAs>实例。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>使用指示的内容类型<xref:System.Speech.Synthesis.TtsEngine.SayAs.InterpretAs%2A>属性来确定如何呈现指定的文本。  
  
 例如，爱可能就读作名称的名称:"我的名称是爱"。 或它无法以字母，指定与拼`interpret-as`该句中的属性:"我的姓名`<say-as interpret-as="spell-out"> Edgar </say-as>`。" 在这种情况下，<xref:System.Speech.Synthesis.SpeechSynthesizer>讲话时为"E D G R"爱。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>