<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b765715336071fac18d19ee7869b7e334c65c323" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610127" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>所有的语音合成引擎文字可实现的抽象基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要构造一个自定义文本到语音转换引擎，应用程序必须始终实现派生自抽象基类的类<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>。  
  
 已正确注册的实现<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>然后用作通过合成语音<xref:System.Speech.Synthesis>基于应用程序的命名空间。  
  
 对象继承自<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>必须重写以下成员： <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>， <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>， <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>，<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>和<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>。  
  
 最重要的成员<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>类来实现是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>方法。  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>接收基础结构文本分析器调用方法：  
  
1.  对引用<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>接口，它提供了对如甚至队列和写入音频输出的系统服务的访问。  
  
2.  一个数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>从语音合成标记语言 (SSML) 输入生成的实例。 除了要作为语音呈现的文本，之外的 SSML 分析存储中的语音的信息请求的属性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>与每个传入关联实例<xref:System.Speech.Synthesis.TtsEngine.TextFragment>对象。  
  
 语音合成器应用程序可以通过实现可以选择使指定的输出格式的请求<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>尝试提供正确的音频输出时，平台调用。  
  
 实施者还可以用于管理其实现的外部定义的发音或词典，提供支持<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>和<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">与 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实现相关的语音标记的注册表项的全名。 引擎。</param>
        <summary>基于相应的语音标记注册表项构建新的 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此构造函数通常都由<xref:System.Speech.Synthesis>基于选择合成语音的应用程序的实例使用<xref:System.Speech.Synthesis.SpeechSynthesizer>。  
  
 一个<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>必须是下 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens 寄存器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">指示词典信息位置的 <see langword="System.Uri" /> 的有效实例。</param>
        <param name="mediaType">一个包含该词典的媒体类型的字符串。 媒体类型要区分大小写。</param>
        <param name="site">对用于与平台基础结构进行交互的 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 接口的引。</param>
        <summary>添加词典到当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实例实现的 <see langword="Synthesizer" /><see langword="Voice" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 发音词典是字词或短语以及指定使用适当的发音字母及其发音的集合。  
  
 此方法通常称为平台基础结构以响应<xref:System.Speech.Synthesis>基于调用的应用程序<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>并使用由当前实现的语音合成器<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>实例。  
  
 值`mediaType`通常是一种 MIME 规范，因为 SSML 规范使用 MIME 媒体规范。  
  
   
  
## Examples  
 实现<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>使用<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>接口传入的要从资源加载词典。 然后将存储`System.IO.Stream`到字典中`System.Collections.Generic.Dictionary`实例，按词典 URI 进行索引。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>它负责实现，以完全熟悉并能处理存储在词典<paramref name="uri" />。实现还必须跟踪和管理的所有词典，它将添加的生存期。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">指示请求的音频输出格式的类型 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> 枚举的有效成员。</param>
        <param name="targetWaveFormat">指向音频格式类型中包含由 <c>speakOutputFormat</c> 参数请求的详细信息设置的 <see langword="struct" /> 的指针。</param>
        <summary>返回对向合成器引擎请求支持特定输出格式的给定合成引擎响应支持的最佳匹配音频输出。</summary>
        <returns>返回引用包含有关输出格式的详细信息 <see langword="IntPtr" /> 的有效 <see langword="struct" /> 实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 结构用作`targetWaveFormat`并返回该方法应与兼容`WAVEFORMATEX`下 SAPI、 提供和返回的值应使用分配`CoTaskMemAlloc`。  
  
 `struct`必须提供与等效的功能：  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 下面的示例实现验证所选的输入，它们是否在容差内使用它们，否则使用默认值。  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>对象继承自<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />应检查由指定的请求的输出格式<paramref name="targetWaveFormat" />并返回它支持的最接近格式。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">指示词典信息位置的 <see langword="System.Uri" /> 的有效实例。</param>
        <param name="site">对由平台基础结构传入以允许访问基础结构资源的 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 接口的引用。</param>
        <summary>移除由当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 实例实现的 <see langword="Synthesizer" /><see langword="Voice" /> 当前加载的字典。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 发音词典是字词或短语以及指定使用适当的发音字母及其发音的集合。  
  
 此方法通常在响应中调用<xref:System.Speech.Synthesis>基于调用的应用程序<xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>并使用由当前实现的语音合成器<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>实例。  
  
   
  
## Examples  
 实现<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>词典 URI 用于查询实例`System.Collections.Generic.Dictionary`为`System.IO.Stream`，关闭流，并删除引用到字典的 uri。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>它负责实现，以完全熟悉并能处理存储在词典<paramref name="uri" />。实现还必须跟踪和管理它会删除所有词典的生存期。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">包含呈现在语音中的文本的 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 实例数组。</param>
        <param name="waveHeader">指向包含音频输出格式结构的 <see langword="IntPtr" />。</param>
        <param name="site">对由平台基础结构传入以允许访问基础结构资源的 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 接口的引用。</param>
        <summary>在指定的输出格式呈现指定的 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 数组。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为使用的结构`waveHeader`并返回该方法应与兼容`WAVEFORMATEX`SAPI 下可用。  
  
 `struct`必须提供与等效的功能：  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 下面的示例是继承的自定义语音合成实现的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，并使用利用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 实现 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例，并创建一个新的数组<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例将传递给`Speak`基础的合成引擎上的方法。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>枚举值由从中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>返回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每个属性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>实例是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，实现  
  
    -   要朗读的文本中，将转换到 Britishisms Americanism。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的属性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>接口提供实现支持<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件类型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例用于创建将事件与创建合成器进度条的驱动器。  
  
3.  然后调用语音呈现引擎使用已修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>数组。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>使用自定义语音合成器实现<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />并<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />皆用作筛选器或合成器应用程序使用的平台基础结构的成员通过构造之间的媒介<see cref="N:System.Speech.Synthesis" />命名空间和系统语音合成引擎的基础。一个<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />实现： 1。捕获或修改传入的各个方面<see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />对象 2。生成任何必需的事件使用的站点引用<see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />实例 3。生成实际的合成的语音。生成语音最通常是通过调用<c>Speak</c>语音呈现引擎提供的操作系统之一上。如果用语音呈现引擎之一未使用，继承的对象<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />必须创建自己的语音呈现引擎。访问权限<c>Speak</c>上获得使用注册表和反射的方法。继承自<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />，必须重写以下成员： <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />， <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />， <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />， <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />，并<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>