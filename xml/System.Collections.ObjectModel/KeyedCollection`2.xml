<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="081a8839059eeefd055349f66dc042fca18a52a4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36644940" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="96e61-101">集合中的键的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="96e61-101">The type of keys in the collection.</span>
      </span>
    </typeparam>
    <typeparam name="TItem">
      <span data-ttu-id="96e61-102">集合中的项的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="96e61-102">The type of items in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="96e61-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96e61-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-104"><xref:System.Collections.ObjectModel.KeyedCollection%602>类提供两个 o （1） 的索引检索和键控接近 o （1） 的检索。</span><span class="sxs-lookup"><span data-stu-id="96e61-104">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</span></span> <span data-ttu-id="96e61-105">它是抽象类型，或更准确地无限设置的抽象类型，因为每个构造的泛型类型是一个抽象基类。</span><span class="sxs-lookup"><span data-stu-id="96e61-105">It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</span></span> <span data-ttu-id="96e61-106">若要使用<xref:System.Collections.ObjectModel.KeyedCollection%602>，派生自的适当的构造类型的集合类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-106">To use <xref:System.Collections.ObjectModel.KeyedCollection%602>, derive your collection type from the appropriate constructed type.</span></span>  
  
 <span data-ttu-id="96e61-107"><xref:System.Collections.ObjectModel.KeyedCollection%602>类是基于集合的结合<xref:System.Collections.Generic.IList%601>泛型接口和集合基于<xref:System.Collections.Generic.IDictionary%602>泛型接口。</span><span class="sxs-lookup"><span data-stu-id="96e61-107">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface.</span></span> <span data-ttu-id="96e61-108">集合基于一样<xref:System.Collections.Generic.IList%601>泛型接口，<xref:System.Collections.ObjectModel.KeyedCollection%602>是项的索引的列表。</span><span class="sxs-lookup"><span data-stu-id="96e61-108">Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> is an indexed list of items.</span></span> <span data-ttu-id="96e61-109">集合基于一样<xref:System.Collections.Generic.IDictionary%602>泛型接口，<xref:System.Collections.ObjectModel.KeyedCollection%602>具有与每个元素相关联的密钥。</span><span class="sxs-lookup"><span data-stu-id="96e61-109">Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> has a key associated with each element.</span></span>  
  
 <span data-ttu-id="96e61-110">与字典的元素不同<xref:System.Collections.ObjectModel.KeyedCollection%602>不是键/值对; 相反，整个元素为值和密钥嵌入的值中。</span><span class="sxs-lookup"><span data-stu-id="96e61-110">Unlike dictionaries, an element of <xref:System.Collections.ObjectModel.KeyedCollection%602> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</span></span>  <span data-ttu-id="96e61-111">例如，集合的元素派生自`KeyedCollection\<String,String>`(`KeyedCollection(Of String, String)`在 Visual Basic 中) 可能是"John Doe Jr。"</span><span class="sxs-lookup"><span data-stu-id="96e61-111">For example, an element of a collection derived from `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be "John Doe Jr."</span></span> <span data-ttu-id="96e61-112">其中的值是"John Doe Jr。"</span><span class="sxs-lookup"><span data-stu-id="96e61-112">where the value is "John Doe Jr."</span></span> <span data-ttu-id="96e61-113">键为"Doe";无法从派生的员工记录包含整数键的集合或`KeyedCollection\<int,Employee>`。</span><span class="sxs-lookup"><span data-stu-id="96e61-113">and the key is "Doe"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\<int,Employee>`.</span></span> <span data-ttu-id="96e61-114">抽象<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法从元素提取的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-114">The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.</span></span>  
  
 <span data-ttu-id="96e61-115">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括你可以获取与查找字典<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-115">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.</span></span>  <span data-ttu-id="96e61-116">当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-116">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="96e61-117">通过在创建时指定字典创建阈值重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-117">This behavior is overridden by specifying a dictionary creation threshold when you create the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="96e61-118">创建查找字典的元素数超过该阈值的第一个时间。</span><span class="sxs-lookup"><span data-stu-id="96e61-118">The lookup dictionary is created the first time the number of elements exceeds that threshold.</span></span>  <span data-ttu-id="96e61-119">如果您指定为-1 作为阈值，永远不会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-119">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e61-120">当使用内部查找字典时，它包含到集合中的所有项的引用，如果`TItem`是引用类型，或如果在集合中的所有项将复制`TItem`是值类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-120">When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type.</span></span> <span data-ttu-id="96e61-121">因此，使用查找字典可能不合适如果`TItem`是值类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-121">Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.</span></span>  
  
 <span data-ttu-id="96e61-122">你可以通过访问其索引或键项<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-122">You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="96e61-123">你可以将项目添加没有键，但随后可以仅通过索引访问这些项。</span><span class="sxs-lookup"><span data-stu-id="96e61-123">You can add items without a key, but these items can subsequently be accessed only by index.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-124">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="96e61-124">This section contains two code examples.</span></span> <span data-ttu-id="96e61-125">第一个示例演示派生自所需的最小代码<xref:System.Collections.ObjectModel.KeyedCollection%602>，并演示了许多继承的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-125">The first example shows the minimum code required to derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and demonstrates many of the inherited methods.</span></span> <span data-ttu-id="96e61-126">第二个示例演示如何重写的受保护的方法<xref:System.Collections.ObjectModel.KeyedCollection%602>以提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="96e61-126">The second example shows how to override the protected methods of <xref:System.Collections.ObjectModel.KeyedCollection%602> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="96e61-127">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="96e61-127">**Example 1**</span></span>  
  
 <span data-ttu-id="96e61-128">此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-128">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="96e61-129">下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="96e61-129">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="96e61-130">`SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="96e61-130">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="96e61-131">键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-131">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="96e61-132">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-132">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 <span data-ttu-id="96e61-133">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="96e61-133">**Example 2**</span></span>  
  
 <span data-ttu-id="96e61-134">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="96e61-134">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="96e61-135">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="96e61-135">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="96e61-136">此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。</span><span class="sxs-lookup"><span data-stu-id="96e61-136">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="96e61-137">订购窗体包含`OrderItem`对象表示的项排序。</span><span class="sxs-lookup"><span data-stu-id="96e61-137">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="96e61-138">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-138">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="96e61-139">该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-139">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="96e61-140">此代码示例使用具有不可变的键的对象。</span><span class="sxs-lookup"><span data-stu-id="96e61-140">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="96e61-141">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-141">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96e61-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96e61-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-144">A<xref:System.Collections.ObjectModel.KeyedCollection%602>创建与此构造函数使用默认泛型相等比较器的一种密钥，来获取从<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="96e61-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="96e61-145">若要指定不同的泛型相等比较器，使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>构造函数或<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-145">To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="96e61-146">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-146">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="96e61-147">当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-147">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="96e61-148">可以通过重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数并指定字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-148">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e61-149">因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，你必须从它派生才能使用它。</span><span class="sxs-lookup"><span data-stu-id="96e61-149">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="96e61-150">在派生类型的构造函数，调用相应<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-150">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="96e61-151">不需要公开功能，例如的相等比较器或在你的构造函数中的字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-151">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="96e61-152">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="96e61-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-153">此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-153">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="96e61-154">下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="96e61-154">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="96e61-155">`SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="96e61-155">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="96e61-156">键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-156">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="96e61-157">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-157">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="96e61-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-160">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-160">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="96e61-161">当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-161">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="96e61-162">可以通过重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数并指定字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-162">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e61-163">因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，你必须从它派生才能使用它。</span><span class="sxs-lookup"><span data-stu-id="96e61-163">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="96e61-164">在派生类型的构造函数，调用相应<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-164">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="96e61-165">不需要公开功能，例如的相等比较器或在你的构造函数中的字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-165">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="96e61-166">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="96e61-166">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="96e61-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <param name="dictionaryCreationThreshold">
          <span data-ttu-id="96e61-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-170">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-170">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="96e61-171">当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-171">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="96e61-172">此构造函数，可重写该行为。</span><span class="sxs-lookup"><span data-stu-id="96e61-172">This constructor allows you to override that behavior.</span></span> <span data-ttu-id="96e61-173">指定 0，则创建时添加的第一个元素的字典、 1 以便添加第二个元素，创建字典等。</span><span class="sxs-lookup"><span data-stu-id="96e61-173">Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</span></span> <span data-ttu-id="96e61-174">如果您指定为-1 作为阈值，永远不会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-174">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
 <span data-ttu-id="96e61-175">对于非常小的集合中提供的查找字典检索速度的改进不可能与字典所需的额外内存值得。</span><span class="sxs-lookup"><span data-stu-id="96e61-175">For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</span></span> <span data-ttu-id="96e61-176">设置阈值让你能够决定何时进行该权衡。</span><span class="sxs-lookup"><span data-stu-id="96e61-176">Setting a threshold allows you to decide when to make that tradeoff.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e61-177">因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，你必须从它派生才能使用它。</span><span class="sxs-lookup"><span data-stu-id="96e61-177">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="96e61-178">在派生类型的构造函数，调用相应<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-178">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="96e61-179">不需要公开功能，例如的相等比较器或在你的构造函数中的字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-179">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="96e61-180">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="96e61-180">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-181">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="96e61-181">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="96e61-182">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="96e61-182">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="96e61-183">此代码示例使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>阈值为 0，构造函数，以便内部字典创建第一次一个的对象添加到集合。</span><span class="sxs-lookup"><span data-stu-id="96e61-183">The code example uses the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</span></span>  
  
 <span data-ttu-id="96e61-184">此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。</span><span class="sxs-lookup"><span data-stu-id="96e61-184">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="96e61-185">订购窗体包含`OrderItem`对象表示的项排序。</span><span class="sxs-lookup"><span data-stu-id="96e61-185">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="96e61-186">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-186">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="96e61-187">该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-187">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="96e61-188">此代码示例使用具有不可变的键的对象。</span><span class="sxs-lookup"><span data-stu-id="96e61-188">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="96e61-189">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-189">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="96e61-190">
            <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-190">
              <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="96e61-191">The element to change the key of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-191">The element to change the key of.</span>
          </span>
        </param>
        <param name="newKey">
          <span data-ttu-id="96e61-192">The new key for <c>item</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-192">The new key for <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-194">此方法不会修改中嵌入的密钥`item`; 它只需将替换为保存在查找字典的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-194">This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.</span></span>  <span data-ttu-id="96e61-195">因此，如果`newKey`中嵌入的密钥不同`item`，不能访问`item`使用返回的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-195">Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="96e61-196">此方法不执行任何操作如果<xref:System.Collections.ObjectModel.KeyedCollection%602>没有查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-196">This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.</span></span>  
  
 <span data-ttu-id="96e61-197">中的所有键<xref:System.Collections.ObjectModel.KeyedCollection%602>必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="96e61-197">Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique.</span></span> <span data-ttu-id="96e61-198">密钥不能为`null`。</span><span class="sxs-lookup"><span data-stu-id="96e61-198">A key cannot be `null`.</span></span>  
  
 <span data-ttu-id="96e61-199">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="96e61-199">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="96e61-200">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="96e61-200">Notes for Implementers</span></span>  
 <span data-ttu-id="96e61-201">修改键嵌入在项中之前，必须调用此方法来更新中查找字典的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-201">Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</span></span> <span data-ttu-id="96e61-202">如果字典创建阈值为 – 1，则不需要调用此方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-202">If the dictionary creation threshold is –1, calling this method is not necessary.</span></span>  
  
 <span data-ttu-id="96e61-203">不会公开<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>作为派生类的公共方法的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-203">Do not expose the <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method as a public method of a derived class.</span></span> <span data-ttu-id="96e61-204">此方法使用不当将同步的与项的键查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-204">Misuse of this method puts the lookup dictionary out of sync with item keys.</span></span> <span data-ttu-id="96e61-205">例如，将密钥设置为`null`和又将其设置为其他值将一个项的多个键添加到查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-205">For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary.</span></span> <span data-ttu-id="96e61-206">公开此方法在内部以允许可变项密钥： 当项的键更改时，此方法用于更改中查找字典的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-206">Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-207">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="96e61-207">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="96e61-208">此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-208">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="96e61-209">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-209">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="96e61-210">如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-210">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="96e61-211">如果是这样，将引发异常，且未更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="96e61-211">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="96e61-212">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="96e61-212">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="96e61-213">此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-213">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="96e61-214">该字段时添加到集合的项并且将其清除时移除的项设置。</span><span class="sxs-lookup"><span data-stu-id="96e61-214">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96e61-215">
            <paramref name="item" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-215">
              <paramref name="item" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96e61-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96e61-217">
            <paramref name="item" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-217">
              <paramref name="item" /> is not found.</span>
          </span>
          <span data-ttu-id="96e61-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96e61-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-220">如果没有查找字典，此方法将清除它，但不删除它。</span><span class="sxs-lookup"><span data-stu-id="96e61-220">If there is a lookup dictionary, this method clears it but does not delete it.</span></span>  
  
 <span data-ttu-id="96e61-221">如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查找字典，它将继续使用查找字典，即使元素的数目再次低于阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-221">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="96e61-222">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-222">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="96e61-223">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="96e61-223">Notes for Implementers</span></span>  
 <span data-ttu-id="96e61-224">重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="96e61-224">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="96e61-225">调用此方法来清除基础集合并清除查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="96e61-225">Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-226">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>方法以用于清除集合中的所有对象提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="96e61-226">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection.</span></span> <span data-ttu-id="96e61-227">第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="96e61-227">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="96e61-228">示例 1</span><span class="sxs-lookup"><span data-stu-id="96e61-228">Example 1</span></span>  
  
 <span data-ttu-id="96e61-229">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="96e61-229">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="96e61-230">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="96e61-230">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="96e61-231">此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。</span><span class="sxs-lookup"><span data-stu-id="96e61-231">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="96e61-232">订购窗体包含`OrderItem`对象表示的项排序。</span><span class="sxs-lookup"><span data-stu-id="96e61-232">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="96e61-233">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-233">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="96e61-234">该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-234">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="96e61-235">此代码示例使用具有不可变的键的对象。</span><span class="sxs-lookup"><span data-stu-id="96e61-235">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="96e61-236">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-236">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="96e61-237">示例 2</span><span class="sxs-lookup"><span data-stu-id="96e61-237">Example 2</span></span>  
  
 <span data-ttu-id="96e61-238">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="96e61-238">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="96e61-239">此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-239">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="96e61-240">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-240">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="96e61-241">如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-241">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="96e61-242">如果是这样，将引发异常，且未更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="96e61-242">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="96e61-243">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="96e61-243">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="96e61-244">此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-244">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="96e61-245">该字段时添加到集合的项并且将其清除时移除的项设置。</span><span class="sxs-lookup"><span data-stu-id="96e61-245">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96e61-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96e61-247">实现<see cref="T:System.Collections.Generic.IEqualityComparer`1" />用于确定集合中的键是否相等的泛型接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-247">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-248">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="96e61-248">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="96e61-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-250">Determines whether the collection contains an element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-250">Determines whether the collection contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96e61-251">
            <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-251">
              <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-252">如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典，`key`用于搜索的字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-252">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary.</span></span> <span data-ttu-id="96e61-253">如果没有任何查找字典，使用提取每个元素的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并与指定的键进行比较。</span><span class="sxs-lookup"><span data-stu-id="96e61-253">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="96e61-254">此方法为 o （1） 运算，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典; 否则它是 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-254">This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-255">此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-255">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="96e61-256">下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="96e61-256">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="96e61-257">`SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="96e61-257">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="96e61-258">键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-258">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="96e61-259">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-259">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96e61-260">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-260">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96e61-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96e61-262">查找字典的<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />，如果它存在; 否则为<see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-262">The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-263">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-263">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="96e61-264">当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-264">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="96e61-265">可以通过重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数并指定字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-265">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
 <span data-ttu-id="96e61-266">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="96e61-266">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-267">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="96e61-267">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="96e61-268">此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-268">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="96e61-269">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-269">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="96e61-270">如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-270">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="96e61-271">如果是这样，将引发异常，且未更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="96e61-271">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="96e61-272">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="96e61-272">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="96e61-273">此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-273">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="96e61-274">该字段时添加到集合的项并且将其清除时移除的项设置。</span><span class="sxs-lookup"><span data-stu-id="96e61-274">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="96e61-275">The element from which to extract the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-275">The element from which to extract the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-276">When implemented in a derived class, extracts the key from the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-276">When implemented in a derived class, extracts the key from the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96e61-277">The key for the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-277">The key for the specified element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-278">如果查找字典中的键是从中嵌入的密钥不同`item`，不能访问`item`使用返回的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-278">If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="96e61-279">你可以实现此方法以返回`null`包含没有键的项的集合，这种情况下访问的项可以仅通过它们的索引。</span><span class="sxs-lookup"><span data-stu-id="96e61-279">You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index.</span></span> <span data-ttu-id="96e61-280">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="96e61-280">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="96e61-281">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="96e61-281">Notes for Implementers</span></span>  
 <span data-ttu-id="96e61-282">你必须重写该方法以提供了一种方法从字典中的项中提取键的字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-282">You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</span></span>  
  
 <span data-ttu-id="96e61-283">此方法在内部调用。</span><span class="sxs-lookup"><span data-stu-id="96e61-283">This method is called internally.</span></span> <span data-ttu-id="96e61-284">不需要为其是公共的。</span><span class="sxs-lookup"><span data-stu-id="96e61-284">It is not necessary for it to be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-285">此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-285">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="96e61-286">下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="96e61-286">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="96e61-287">`SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="96e61-287">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="96e61-288">键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-288">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="96e61-289">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-289">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="96e61-290">The zero-based index at which <c>item</c> should be inserted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-290">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="96e61-291">The object to insert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-291">The object to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-293">如果`index`等同于<xref:System.Collections.ObjectModel.Collection%601.Count%2A>，`item`添加到末尾<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-293">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span>  
  
 <span data-ttu-id="96e61-294">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-294">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="96e61-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 由调用<xref:System.Collections.ObjectModel.Collection%601.Add%2A>和<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="96e61-296">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="96e61-296">Notes for Implementers</span></span>  
 <span data-ttu-id="96e61-297">重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>和<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="96e61-297">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="96e61-298">调用此方法可以向基础集合插入项，并更新查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="96e61-298">Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-299">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法以提供用于添加或将对象插入到集合的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="96e61-299">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method to provide custom behavior for adding or inserting objects into the collection.</span></span> <span data-ttu-id="96e61-300">第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="96e61-300">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="96e61-301">示例 1</span><span class="sxs-lookup"><span data-stu-id="96e61-301">Example 1</span></span>  
  
 <span data-ttu-id="96e61-302">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="96e61-302">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="96e61-303">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="96e61-303">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="96e61-304">此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。</span><span class="sxs-lookup"><span data-stu-id="96e61-304">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="96e61-305">订购窗体包含`OrderItem`对象表示的项排序。</span><span class="sxs-lookup"><span data-stu-id="96e61-305">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="96e61-306">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-306">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="96e61-307">该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-307">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="96e61-308">此代码示例使用具有不可变的键的对象。</span><span class="sxs-lookup"><span data-stu-id="96e61-308">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="96e61-309">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-309">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="96e61-310">示例 2</span><span class="sxs-lookup"><span data-stu-id="96e61-310">Example 2</span></span>  
  
 <span data-ttu-id="96e61-311">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="96e61-311">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="96e61-312">此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-312">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="96e61-313">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-313">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="96e61-314">如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-314">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="96e61-315">如果是这样，将引发异常，且未更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="96e61-315">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="96e61-316">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="96e61-316">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="96e61-317">此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-317">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="96e61-318">该字段时添加到集合的项并且将其清除时移除的项设置。</span><span class="sxs-lookup"><span data-stu-id="96e61-318">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="96e61-319">
            <paramref name="index" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-319">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="96e61-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="96e61-321">The key of the element to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-321">The key of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-322">Gets the element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-322">Gets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96e61-323">带有指定键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-323">The element with the specified key.</span>
          </span>
          <span data-ttu-id="96e61-324">如果未找到具有指定键的元素，则引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-324">If an element with the specified key is not found, an exception is thrown.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-325">此属性提供能够通过使用以下语法访问集合中的特定元素： `myCollection[key]` (`myCollection(key)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="96e61-325">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e61-326">此属性是不同于继承<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性，用于获取和设置的数字索引的元素。</span><span class="sxs-lookup"><span data-stu-id="96e61-326">This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which gets and sets elements by numeric index.</span></span> <span data-ttu-id="96e61-327">但是，如果`TKey`属于类型<xref:System.Int32>，此属性将屏蔽继承的属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-327">However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property.</span></span> <span data-ttu-id="96e61-328">在这种情况下，你可以通过强制转换为访问继承的属性<xref:System.Collections.ObjectModel.KeyedCollection%602>与其基类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-328">In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type.</span></span> <span data-ttu-id="96e61-329">例如， `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)`在 Visual Basic 中， `KeyedCollection<int, MyType^>` c + + 中) 可以强制转换为`Collection<MyType>`(`Collection(Of MyType)`在 Visual Basic 中， `Collection<MyType^>` c + + 中)。</span><span class="sxs-lookup"><span data-stu-id="96e61-329">For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).</span></span>  
  
 <span data-ttu-id="96e61-330">如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典，`key`用于从字典中检索的元素。</span><span class="sxs-lookup"><span data-stu-id="96e61-330">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.</span></span>  <span data-ttu-id="96e61-331">如果没有任何查找字典，使用提取每个元素的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并与指定的键进行比较。</span><span class="sxs-lookup"><span data-stu-id="96e61-331">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="96e61-332">C# 语言使用关键字进行定义而不是实现索引器<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-332">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="96e61-333">Visual Basic 将 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="96e61-333">Visual Basic implements <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="96e61-334">检索此属性的值是一项 o （1） 操作，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典; 否则它是 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-334">Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-335">此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-335">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="96e61-336">下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="96e61-336">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="96e61-337">代码示例同时调用<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>属性，它是只读的并检索密钥，与<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性，这是可设置并且按索引进行检索。</span><span class="sxs-lookup"><span data-stu-id="96e61-337">The code example calls both the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which is settable and retrieves by index.</span></span> <span data-ttu-id="96e61-338">它演示如何访问后一个属性，如果派生的集合中的对象具有整数键，用于索引检索整数与无法加以区分。</span><span class="sxs-lookup"><span data-stu-id="96e61-338">It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</span></span>  
  
 <span data-ttu-id="96e61-339">`SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="96e61-339">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="96e61-340">键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-340">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="96e61-341">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-341">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96e61-342">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-342">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="96e61-343">An element with the specified key does not exist in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-343">An element with the specified key does not exist in the collection.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="96e61-344">The key of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-344">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96e61-346">
            <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-346">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="96e61-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-348">也将从查找字典移除元素的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-348">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="96e61-349">如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查找字典，它将继续使用查找字典，即使元素的数目再次低于阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-349">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e61-350">若要自定义此方法的行为，请重写<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-350">To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.</span></span>  
  
 <span data-ttu-id="96e61-351">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-351">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-352">此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="96e61-352">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="96e61-353">下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="96e61-353">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="96e61-354">示例演示了<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>，其中中移除具有指定键的项以及<xref:System.Collections.ObjectModel.Collection%601.Remove%2A>和<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A>方法继承自<xref:System.Collections.ObjectModel.Collection%601>，其中分别删除由对象和索引。</span><span class="sxs-lookup"><span data-stu-id="96e61-354">The example demonstrates <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.</span></span>  
  
 <span data-ttu-id="96e61-355">`SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="96e61-355">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="96e61-356">键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="96e61-356">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="96e61-357">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-357">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96e61-358">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-358">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="96e61-359">The index of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-359">The index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-361">也将从查找字典移除元素的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-361">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="96e61-362">如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查找字典，它将继续使用查找字典，即使元素的数目再次低于阈值。</span><span class="sxs-lookup"><span data-stu-id="96e61-362">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="96e61-363">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-363">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="96e61-364">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="96e61-364">Notes for Implementers</span></span>  
 <span data-ttu-id="96e61-365">重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29>和<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类，与<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-365">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.</span></span>  
  
 <span data-ttu-id="96e61-366">调用此方法可以从基础集合删除项，并更新查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="96e61-366">Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-367">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法以提供自定义行为以从集合中删除对象。</span><span class="sxs-lookup"><span data-stu-id="96e61-367">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method to provide custom behavior for removing objects from the collection.</span></span> <span data-ttu-id="96e61-368">第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="96e61-368">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="96e61-369">示例 1</span><span class="sxs-lookup"><span data-stu-id="96e61-369">Example 1</span></span>  
  
 <span data-ttu-id="96e61-370">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="96e61-370">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="96e61-371">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="96e61-371">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="96e61-372">此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。</span><span class="sxs-lookup"><span data-stu-id="96e61-372">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="96e61-373">订购窗体包含`OrderItem`对象表示的项排序。</span><span class="sxs-lookup"><span data-stu-id="96e61-373">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="96e61-374">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-374">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="96e61-375">该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-375">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="96e61-376">此代码示例使用具有不可变的键的对象。</span><span class="sxs-lookup"><span data-stu-id="96e61-376">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="96e61-377">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-377">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="96e61-378">示例 2</span><span class="sxs-lookup"><span data-stu-id="96e61-378">Example 2</span></span>  
  
 <span data-ttu-id="96e61-379">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="96e61-379">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="96e61-380">此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-380">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="96e61-381">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-381">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="96e61-382">如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-382">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="96e61-383">如果是这样，将引发异常，且未更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="96e61-383">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="96e61-384">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="96e61-384">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="96e61-385">此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-385">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="96e61-386">该字段时添加到集合的项并且将其清除时移除的项设置。</span><span class="sxs-lookup"><span data-stu-id="96e61-386">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="96e61-387">The zero-based index of the item to be replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-387">The zero-based index of the item to be replaced.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="96e61-388">The new item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-388">The new item.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96e61-389">Replaces the item at the specified index with the specified item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96e61-389">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e61-390">将相应地更新查找字典。</span><span class="sxs-lookup"><span data-stu-id="96e61-390">The lookup dictionary is updated accordingly.</span></span> <span data-ttu-id="96e61-391">即，从查找字典中，删除将被替换的项的键，并添加新项的键。</span><span class="sxs-lookup"><span data-stu-id="96e61-391">That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</span></span>  
  
 <span data-ttu-id="96e61-392">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="96e61-392">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="96e61-393">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="96e61-393">Notes for Implementers</span></span>  
 <span data-ttu-id="96e61-394">重写此方法以提供自定义的行为设置<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性从继承<xref:System.Collections.ObjectModel.Collection%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="96e61-394">Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e61-395">此方法不会影响的行为<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>属性，它是只读的。</span><span class="sxs-lookup"><span data-stu-id="96e61-395">This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only.</span></span>  
  
 <span data-ttu-id="96e61-396">调用此方法以设置基础集合中的项并更新查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="96e61-396">Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e61-397">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以提供设置的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-397">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="96e61-398">第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="96e61-398">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="96e61-399">示例 1</span><span class="sxs-lookup"><span data-stu-id="96e61-399">Example 1</span></span>  
  
 <span data-ttu-id="96e61-400">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="96e61-400">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="96e61-401">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="96e61-401">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="96e61-402">此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。</span><span class="sxs-lookup"><span data-stu-id="96e61-402">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="96e61-403">订购窗体包含`OrderItem`对象表示的项排序。</span><span class="sxs-lookup"><span data-stu-id="96e61-403">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="96e61-404">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="96e61-404">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="96e61-405">该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-405">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="96e61-406">此代码示例使用具有不可变的键的对象。</span><span class="sxs-lookup"><span data-stu-id="96e61-406">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="96e61-407">有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="96e61-407">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="96e61-408">示例 2</span><span class="sxs-lookup"><span data-stu-id="96e61-408">Example 2</span></span>  
  
 <span data-ttu-id="96e61-409">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="96e61-409">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="96e61-410">此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="96e61-410">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="96e61-411">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="96e61-411">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="96e61-412">如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-412">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="96e61-413">如果是这样，将引发异常，且未更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="96e61-413">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="96e61-414">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="96e61-414">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="96e61-415">此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="96e61-415">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="96e61-416">该字段时添加到集合的项并且将其清除时移除的项设置。</span><span class="sxs-lookup"><span data-stu-id="96e61-416">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>