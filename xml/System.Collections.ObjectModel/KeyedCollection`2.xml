<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea360e85ebfc5e60951e9ca94053f3de29a9871a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701206" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="cea56-101">集合中的键的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cea56-101">The type of keys in the collection.</span>
      </span>
    </typeparam>
    <typeparam name="TItem">
      <span data-ttu-id="cea56-102">集合中的项的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cea56-102">The type of items in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="cea56-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cea56-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-104"><xref:System.Collections.ObjectModel.KeyedCollection%602>类提供了这两个 o （1） 的索引检索和键控检索接近 o （1）。</span><span class="sxs-lookup"><span data-stu-id="cea56-104">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</span></span> <span data-ttu-id="cea56-105">它是抽象类型，或者更准确地无限设置的抽象类型，因为其构造的泛型类型的每个都是一个抽象基类。</span><span class="sxs-lookup"><span data-stu-id="cea56-105">It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</span></span> <span data-ttu-id="cea56-106">若要使用<xref:System.Collections.ObjectModel.KeyedCollection%602>，集合类型派生自相应的构造类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-106">To use <xref:System.Collections.ObjectModel.KeyedCollection%602>, derive your collection type from the appropriate constructed type.</span></span>  
  
 <span data-ttu-id="cea56-107"><xref:System.Collections.ObjectModel.KeyedCollection%602>类是基于集合的结合<xref:System.Collections.Generic.IList%601>泛型接口和一组基于<xref:System.Collections.Generic.IDictionary%602>泛型接口。</span><span class="sxs-lookup"><span data-stu-id="cea56-107">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface.</span></span> <span data-ttu-id="cea56-108">基于集合一样<xref:System.Collections.Generic.IList%601>泛型接口，<xref:System.Collections.ObjectModel.KeyedCollection%602>是项的索引的列表。</span><span class="sxs-lookup"><span data-stu-id="cea56-108">Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> is an indexed list of items.</span></span> <span data-ttu-id="cea56-109">基于集合一样<xref:System.Collections.Generic.IDictionary%602>泛型接口，<xref:System.Collections.ObjectModel.KeyedCollection%602>具有每个元素与关联的键。</span><span class="sxs-lookup"><span data-stu-id="cea56-109">Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> has a key associated with each element.</span></span>  
  
 <span data-ttu-id="cea56-110">与字典的元素不同<xref:System.Collections.ObjectModel.KeyedCollection%602>不是键/值对; 相反，整个元素是值，该密钥嵌入在值内。</span><span class="sxs-lookup"><span data-stu-id="cea56-110">Unlike dictionaries, an element of <xref:System.Collections.ObjectModel.KeyedCollection%602> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</span></span>  <span data-ttu-id="cea56-111">例如，集合的元素派生自`KeyedCollection\<String,String>`(`KeyedCollection(Of String, String)`在 Visual Basic 中) 可能是"John Doe Jr。"</span><span class="sxs-lookup"><span data-stu-id="cea56-111">For example, an element of a collection derived from `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be "John Doe Jr."</span></span> <span data-ttu-id="cea56-112">其中的值是"John Doe Jr。"</span><span class="sxs-lookup"><span data-stu-id="cea56-112">where the value is "John Doe Jr."</span></span> <span data-ttu-id="cea56-113">键为"Doe";无法从派生的员工记录包含整数键的集合或`KeyedCollection\<int,Employee>`。</span><span class="sxs-lookup"><span data-stu-id="cea56-113">and the key is "Doe"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\<int,Employee>`.</span></span> <span data-ttu-id="cea56-114">抽象<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法从元素提取键。</span><span class="sxs-lookup"><span data-stu-id="cea56-114">The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.</span></span>  
  
 <span data-ttu-id="cea56-115">默认情况下<xref:System.Collections.ObjectModel.KeyedCollection%602>包括一个查找字典，其中你可以获取与<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-115">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.</span></span>  <span data-ttu-id="cea56-116">当某项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快速的搜索的查找字典中项的键。</span><span class="sxs-lookup"><span data-stu-id="cea56-116">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="cea56-117">通过在创建时指定字典创建阈值重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-117">This behavior is overridden by specifying a dictionary creation threshold when you create the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="cea56-118">第一次的元素数超过该阈值创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-118">The lookup dictionary is created the first time the number of elements exceeds that threshold.</span></span>  <span data-ttu-id="cea56-119">如果指定的阈值为-1，永远不会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-119">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cea56-120">使用内部查找字典时，它包含对集合中的所有项的引用，如果`TItem`是引用类型，或如果在集合中的所有项的复制`TItem`是值类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-120">When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type.</span></span> <span data-ttu-id="cea56-121">因此，使用的查找字典可能不适合如果`TItem`是值类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-121">Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.</span></span>  
  
 <span data-ttu-id="cea56-122">可以使用访问由其索引或键的项<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-122">You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="cea56-123">您可以添加没有键的项，但随后可以仅按索引访问这些项。</span><span class="sxs-lookup"><span data-stu-id="cea56-123">You can add items without a key, but these items can subsequently be accessed only by index.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-124">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="cea56-124">This section contains two code examples.</span></span> <span data-ttu-id="cea56-125">第一个示例显示了派生自所需的最小代码<xref:System.Collections.ObjectModel.KeyedCollection%602>，并且演示了许多继承的方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-125">The first example shows the minimum code required to derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and demonstrates many of the inherited methods.</span></span> <span data-ttu-id="cea56-126">第二个示例演示如何重写的受保护的方法<xref:System.Collections.ObjectModel.KeyedCollection%602>以提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="cea56-126">The second example shows how to override the protected methods of <xref:System.Collections.ObjectModel.KeyedCollection%602> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="cea56-127">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="cea56-127">**Example 1**</span></span>  
  
 <span data-ttu-id="cea56-128">此代码示例显示了最少的代码所派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供一个公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-128">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="cea56-129">代码示例还演示了许多属性和方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="cea56-129">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="cea56-130">`SimpleOrder`类是非常简单的请求列表，其中包含`OrderItem`对象，其中每个表示行项的顺序。</span><span class="sxs-lookup"><span data-stu-id="cea56-130">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="cea56-131">键`OrderItem`是固定不变，派生的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-131">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="cea56-132">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-132">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 <span data-ttu-id="cea56-133">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="cea56-133">**Example 2**</span></span>  
  
 <span data-ttu-id="cea56-134">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="cea56-134">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="cea56-135">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="cea56-135">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="cea56-136">该代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="cea56-136">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="cea56-137">订单窗体包含`OrderItem`对象表示已排序项。</span><span class="sxs-lookup"><span data-stu-id="cea56-137">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="cea56-138">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-138">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="cea56-139">代码示例演示通过在调用的属性和方法的派生类中，自定义行为`Main`方法的`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-139">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="cea56-140">此代码示例使用具有不可变的键对象。</span><span class="sxs-lookup"><span data-stu-id="cea56-140">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="cea56-141">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-141">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cea56-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cea56-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-144">一个<xref:System.Collections.ObjectModel.KeyedCollection%602>创建与此构造函数使用默认泛型相等比较器，用于从获取的密钥类型<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="cea56-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cea56-145">若要指定不同的泛型相等比较器，请使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>构造函数或<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-145">To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="cea56-146">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时，创建一个查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-146">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="cea56-147">当某项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快速的搜索的查找字典中项的键。</span><span class="sxs-lookup"><span data-stu-id="cea56-147">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="cea56-148">重写此行为，只需使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数和指定字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="cea56-148">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cea56-149">因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，必须从其派生以便使用它。</span><span class="sxs-lookup"><span data-stu-id="cea56-149">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="cea56-150">您的派生类型的构造函数中调用适当<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-150">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="cea56-151">不需要公开的相等比较器或构造函数中的字典创建阈值等功能。</span><span class="sxs-lookup"><span data-stu-id="cea56-151">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="cea56-152">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cea56-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-153">此代码示例显示了最少的代码所派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供一个公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-153">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="cea56-154">代码示例还演示了许多属性和方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="cea56-154">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="cea56-155">`SimpleOrder`类是非常简单的请求列表，其中包含`OrderItem`对象，其中每个表示行项的顺序。</span><span class="sxs-lookup"><span data-stu-id="cea56-155">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="cea56-156">键`OrderItem`是固定不变，派生的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-156">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="cea56-157">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-157">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="cea56-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-160">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时，创建一个查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-160">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="cea56-161">当某项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快速的搜索的查找字典中项的键。</span><span class="sxs-lookup"><span data-stu-id="cea56-161">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="cea56-162">重写此行为，只需使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数和指定字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="cea56-162">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cea56-163">因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，必须从其派生以便使用它。</span><span class="sxs-lookup"><span data-stu-id="cea56-163">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="cea56-164">您的派生类型的构造函数中调用适当<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-164">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="cea56-165">不需要公开的相等比较器或构造函数中的字典创建阈值等功能。</span><span class="sxs-lookup"><span data-stu-id="cea56-165">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="cea56-166">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cea56-166">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="cea56-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <param name="dictionaryCreationThreshold">
          <span data-ttu-id="cea56-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-170">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时，创建一个查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-170">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="cea56-171">当某项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快速的搜索的查找字典中项的键。</span><span class="sxs-lookup"><span data-stu-id="cea56-171">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="cea56-172">此构造函数，可重写该行为。</span><span class="sxs-lookup"><span data-stu-id="cea56-172">This constructor allows you to override that behavior.</span></span> <span data-ttu-id="cea56-173">指定 0 若要添加的第一个元素时，创建字典，1 创建字典添加第二个元素，依此类推。</span><span class="sxs-lookup"><span data-stu-id="cea56-173">Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</span></span> <span data-ttu-id="cea56-174">如果指定的阈值为-1，永远不会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-174">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
 <span data-ttu-id="cea56-175">对于非常小的集合中提供的查找字典检索速度的改进可能不值得字典所需的额外内存。</span><span class="sxs-lookup"><span data-stu-id="cea56-175">For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</span></span> <span data-ttu-id="cea56-176">设置阈值，可以决定何时进行的权衡。</span><span class="sxs-lookup"><span data-stu-id="cea56-176">Setting a threshold allows you to decide when to make that tradeoff.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cea56-177">因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，必须从其派生以便使用它。</span><span class="sxs-lookup"><span data-stu-id="cea56-177">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="cea56-178">您的派生类型的构造函数中调用适当<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-178">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="cea56-179">不需要公开的相等比较器或构造函数中的字典创建阈值等功能。</span><span class="sxs-lookup"><span data-stu-id="cea56-179">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="cea56-180">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cea56-180">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-181">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="cea56-181">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="cea56-182">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="cea56-182">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="cea56-183">代码示例使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>阈值为 0，具有构造函数，以便创建第一次一个的对象内部字典添加到集合。</span><span class="sxs-lookup"><span data-stu-id="cea56-183">The code example uses the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</span></span>  
  
 <span data-ttu-id="cea56-184">该代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="cea56-184">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="cea56-185">订单窗体包含`OrderItem`对象表示已排序项。</span><span class="sxs-lookup"><span data-stu-id="cea56-185">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="cea56-186">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-186">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="cea56-187">代码示例演示通过在调用的属性和方法的派生类中，自定义行为`Main`方法的`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-187">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="cea56-188">此代码示例使用具有不可变的键对象。</span><span class="sxs-lookup"><span data-stu-id="cea56-188">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="cea56-189">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-189">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cea56-190">
            <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-190">
              <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="cea56-191">The element to change the key of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-191">The element to change the key of.</span>
          </span>
        </param>
        <param name="newKey">
          <span data-ttu-id="cea56-192">The new key for <c>item</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-192">The new key for <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-194">此方法不会修改中嵌入的密钥`item`; 它只需将替换的查找字典中保存的密钥。</span><span class="sxs-lookup"><span data-stu-id="cea56-194">This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.</span></span>  <span data-ttu-id="cea56-195">因此，如果`newKey`中嵌入的密钥不同`item`，不能访问`item`通过返回的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-195">Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="cea56-196">此方法不执行任何操作如果<xref:System.Collections.ObjectModel.KeyedCollection%602>不具有一个查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-196">This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.</span></span>  
  
 <span data-ttu-id="cea56-197">中的所有密钥<xref:System.Collections.ObjectModel.KeyedCollection%602>必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="cea56-197">Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique.</span></span> <span data-ttu-id="cea56-198">密钥不能为`null`。</span><span class="sxs-lookup"><span data-stu-id="cea56-198">A key cannot be `null`.</span></span>  
  
 <span data-ttu-id="cea56-199">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cea56-199">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="cea56-200">实施者的说明</span><span class="sxs-lookup"><span data-stu-id="cea56-200">Notes for Implementers</span></span>  
 <span data-ttu-id="cea56-201">修改键嵌入在项中之前，必须调用此方法以更新中的查找字典的密钥。</span><span class="sxs-lookup"><span data-stu-id="cea56-201">Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</span></span> <span data-ttu-id="cea56-202">如果字典创建阈值为 – 1，则不需要调用此方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-202">If the dictionary creation threshold is –1, calling this method is not necessary.</span></span>  
  
 <span data-ttu-id="cea56-203">不会公开<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法作为派生类的公共方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-203">Do not expose the <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method as a public method of a derived class.</span></span> <span data-ttu-id="cea56-204">此方法使用不当将同步的与项的键的查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-204">Misuse of this method puts the lookup dictionary out of sync with item keys.</span></span> <span data-ttu-id="cea56-205">例如，将密钥设置为`null`，然后将其设置为另一个值将多个键的项添加到的查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-205">For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary.</span></span> <span data-ttu-id="cea56-206">公开此方法在内部以允许可变项密钥： 当项的键更改时，此方法用于更改的查找字典中的密钥。</span><span class="sxs-lookup"><span data-stu-id="cea56-206">Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-207">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以保持密钥完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="cea56-207">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="cea56-208">该代码示例创建`MutableKeys`集合，它派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-208">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="cea56-209">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-209">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="cea56-210">当新的密钥分配给属性时，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`要测试是否与现有密钥冲突的新键的集合的方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-210">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="cea56-211">如果是这样，将引发异常，并且不更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="cea56-211">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="cea56-212">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合`MutableKey`类有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="cea56-212">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="cea56-213">此字段由用于添加和删除项从集合中，如提供自定义行为的受保护方法维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-213">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="cea56-214">该字段时添加到集合的项并且当删除项时，清除设置。</span><span class="sxs-lookup"><span data-stu-id="cea56-214">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cea56-215">
            <paramref name="item" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-215">
              <paramref name="item" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="cea56-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cea56-217">
            <paramref name="item" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-217">
              <paramref name="item" /> is not found.</span>
          </span>
          <span data-ttu-id="cea56-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cea56-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-220">如果有一个查找字典，此方法将清除它，但不会删除它。</span><span class="sxs-lookup"><span data-stu-id="cea56-220">If there is a lookup dictionary, this method clears it but does not delete it.</span></span>  
  
 <span data-ttu-id="cea56-221">如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用一个查找字典，它将继续使用一个查找字典，即使的元素数再次低于阈值。</span><span class="sxs-lookup"><span data-stu-id="cea56-221">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="cea56-222">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-222">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="cea56-223">实施者的说明</span><span class="sxs-lookup"><span data-stu-id="cea56-223">Notes for Implementers</span></span>  
 <span data-ttu-id="cea56-224">重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="cea56-224">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="cea56-225">调用此方法来清除基础集合并清除的查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="cea56-225">Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-226">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>方法，以用于清除集合中的所有对象提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="cea56-226">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection.</span></span> <span data-ttu-id="cea56-227">第一个示例将添加自定义通知事件，并第二个具有可变键的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="cea56-227">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="cea56-228">示例 1</span><span class="sxs-lookup"><span data-stu-id="cea56-228">Example 1</span></span>  
  
 <span data-ttu-id="cea56-229">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="cea56-229">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="cea56-230">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="cea56-230">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="cea56-231">该代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="cea56-231">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="cea56-232">订单窗体包含`OrderItem`对象表示已排序项。</span><span class="sxs-lookup"><span data-stu-id="cea56-232">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="cea56-233">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-233">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="cea56-234">代码示例演示通过在调用的属性和方法的派生类中，自定义行为`Main`方法的`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-234">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="cea56-235">此代码示例使用具有不可变的键对象。</span><span class="sxs-lookup"><span data-stu-id="cea56-235">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="cea56-236">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-236">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="cea56-237">示例 2</span><span class="sxs-lookup"><span data-stu-id="cea56-237">Example 2</span></span>  
  
 <span data-ttu-id="cea56-238">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以保持密钥完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="cea56-238">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="cea56-239">该代码示例创建`MutableKeys`集合，它派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-239">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="cea56-240">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-240">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="cea56-241">当新的密钥分配给属性时，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`要测试是否与现有密钥冲突的新键的集合的方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-241">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="cea56-242">如果是这样，将引发异常，并且不更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="cea56-242">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="cea56-243">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合`MutableKey`类有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="cea56-243">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="cea56-244">此字段由用于添加和删除项从集合中，如提供自定义行为的受保护方法维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-244">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="cea56-245">该字段时添加到集合的项并且当删除项时，清除设置。</span><span class="sxs-lookup"><span data-stu-id="cea56-245">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cea56-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cea56-247">实现<see cref="T:System.Collections.Generic.IEqualityComparer`1" />用于确定集合中的键是否相等的泛型接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-247">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-248">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cea56-248">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="cea56-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-250">Determines whether the collection contains an element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-250">Determines whether the collection contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cea56-251">
            <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-251">
              <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-252">如果<xref:System.Collections.ObjectModel.KeyedCollection%602>都有一个查找字典，`key`用于搜索的字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-252">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary.</span></span> <span data-ttu-id="cea56-253">如果没有查找字典，每个元素的键为使用提取<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并与指定键进行比较。</span><span class="sxs-lookup"><span data-stu-id="cea56-253">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="cea56-254">此方法为 o （1） 运算，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>都有一个查找字典; 否则它是 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-254">This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-255">此代码示例显示了最少的代码所派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供一个公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-255">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="cea56-256">代码示例还演示了许多属性和方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="cea56-256">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="cea56-257">`SimpleOrder`类是非常简单的请求列表，其中包含`OrderItem`对象，其中每个表示行项的顺序。</span><span class="sxs-lookup"><span data-stu-id="cea56-257">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="cea56-258">键`OrderItem`是固定不变，派生的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-258">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="cea56-259">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-259">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cea56-260">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-260">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cea56-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cea56-262">查找字典<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />，如果存在; 否则为<see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-262">The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-263">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时，创建一个查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-263">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="cea56-264">当某项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快速的搜索的查找字典中项的键。</span><span class="sxs-lookup"><span data-stu-id="cea56-264">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="cea56-265">重写此行为，只需使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数和指定字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="cea56-265">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
 <span data-ttu-id="cea56-266">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cea56-266">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-267">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以保持密钥完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="cea56-267">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="cea56-268">该代码示例创建`MutableKeys`集合，它派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-268">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="cea56-269">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-269">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="cea56-270">当新的密钥分配给属性时，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`要测试是否与现有密钥冲突的新键的集合的方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-270">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="cea56-271">如果是这样，将引发异常，并且不更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="cea56-271">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="cea56-272">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合`MutableKey`类有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="cea56-272">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="cea56-273">此字段由用于添加和删除项从集合中，如提供自定义行为的受保护方法维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-273">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="cea56-274">该字段时添加到集合的项并且当删除项时，清除设置。</span><span class="sxs-lookup"><span data-stu-id="cea56-274">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="cea56-275">The element from which to extract the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-275">The element from which to extract the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-276">When implemented in a derived class, extracts the key from the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-276">When implemented in a derived class, extracts the key from the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cea56-277">The key for the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-277">The key for the specified element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-278">如果不同于在嵌入的密钥中的查找字典的键`item`，不能访问`item`通过使用返回的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-278">If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="cea56-279">您可以实现此方法以返回`null`包含没有密钥的项目集合，这种情况下访问的项可以仅通过它们的索引。</span><span class="sxs-lookup"><span data-stu-id="cea56-279">You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index.</span></span> <span data-ttu-id="cea56-280">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cea56-280">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="cea56-281">实施者的说明</span><span class="sxs-lookup"><span data-stu-id="cea56-281">Notes for Implementers</span></span>  
 <span data-ttu-id="cea56-282">必须重写此方法以提供一种方法来提取密钥从字典中项的字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-282">You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</span></span>  
  
 <span data-ttu-id="cea56-283">在内部调用此方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-283">This method is called internally.</span></span> <span data-ttu-id="cea56-284">不需要为它都是公共的。</span><span class="sxs-lookup"><span data-stu-id="cea56-284">It is not necessary for it to be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-285">此代码示例显示了最少的代码所派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供一个公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-285">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="cea56-286">代码示例还演示了许多属性和方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="cea56-286">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="cea56-287">`SimpleOrder`类是非常简单的请求列表，其中包含`OrderItem`对象，其中每个表示行项的顺序。</span><span class="sxs-lookup"><span data-stu-id="cea56-287">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="cea56-288">键`OrderItem`是固定不变，派生的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-288">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="cea56-289">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-289">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="cea56-290">The zero-based index at which <c>item</c> should be inserted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-290">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="cea56-291">The object to insert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-291">The object to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-293">如果`index`等同于<xref:System.Collections.ObjectModel.Collection%601.Count%2A>，`item`添加到末尾<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-293">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span>  
  
 <span data-ttu-id="cea56-294">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-294">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="cea56-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 调用<xref:System.Collections.ObjectModel.Collection%601.Add%2A>和<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="cea56-296">实施者的说明</span><span class="sxs-lookup"><span data-stu-id="cea56-296">Notes for Implementers</span></span>  
 <span data-ttu-id="cea56-297">重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>并<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="cea56-297">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="cea56-298">调用此方法将该项插入到基础集合和更新的查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="cea56-298">Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-299">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法以提供用于添加或将对象插入到集合的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="cea56-299">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method to provide custom behavior for adding or inserting objects into the collection.</span></span> <span data-ttu-id="cea56-300">第一个示例将添加自定义通知事件，并第二个具有可变键的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="cea56-300">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="cea56-301">示例 1</span><span class="sxs-lookup"><span data-stu-id="cea56-301">Example 1</span></span>  
  
 <span data-ttu-id="cea56-302">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="cea56-302">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="cea56-303">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="cea56-303">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="cea56-304">该代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="cea56-304">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="cea56-305">订单窗体包含`OrderItem`对象表示已排序项。</span><span class="sxs-lookup"><span data-stu-id="cea56-305">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="cea56-306">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-306">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="cea56-307">代码示例演示通过在调用的属性和方法的派生类中，自定义行为`Main`方法的`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-307">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="cea56-308">此代码示例使用具有不可变的键对象。</span><span class="sxs-lookup"><span data-stu-id="cea56-308">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="cea56-309">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-309">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="cea56-310">示例 2</span><span class="sxs-lookup"><span data-stu-id="cea56-310">Example 2</span></span>  
  
 <span data-ttu-id="cea56-311">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以保持密钥完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="cea56-311">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="cea56-312">该代码示例创建`MutableKeys`集合，它派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-312">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="cea56-313">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-313">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="cea56-314">当新的密钥分配给属性时，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`要测试是否与现有密钥冲突的新键的集合的方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-314">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="cea56-315">如果是这样，将引发异常，并且不更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="cea56-315">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="cea56-316">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合`MutableKey`类有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="cea56-316">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="cea56-317">此字段由用于添加和删除项从集合中，如提供自定义行为的受保护方法维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-317">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="cea56-318">该字段时添加到集合的项并且当删除项时，清除设置。</span><span class="sxs-lookup"><span data-stu-id="cea56-318">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cea56-319">
            <paramref name="index" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-319">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="cea56-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="cea56-321">The key of the element to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-321">The key of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-322">Gets the element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-322">Gets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cea56-323">带有指定键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-323">The element with the specified key.</span>
          </span>
          <span data-ttu-id="cea56-324">如果未找到具有指定键的元素，则引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-324">If an element with the specified key is not found, an exception is thrown.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-325">此属性，可以通过使用以下语法访问集合中的特定元素： `myCollection[key]` (`myCollection(key)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="cea56-325">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cea56-326">此属性是不同于继承<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性，用于获取和设置的数字索引的元素。</span><span class="sxs-lookup"><span data-stu-id="cea56-326">This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which gets and sets elements by numeric index.</span></span> <span data-ttu-id="cea56-327">但是，如果`TKey`属于类型<xref:System.Int32>，此属性将屏蔽所继承的属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-327">However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property.</span></span> <span data-ttu-id="cea56-328">在这种情况下，可以通过强制转换访问继承的属性<xref:System.Collections.ObjectModel.KeyedCollection%602>与其基类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-328">In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type.</span></span> <span data-ttu-id="cea56-329">例如， `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)`在 Visual Basic `KeyedCollection<int, MyType^>` c + + 中) 可以强制转换为`Collection<MyType>`(`Collection(Of MyType)`在 Visual Basic 中`Collection<MyType^>`c + + 中)。</span><span class="sxs-lookup"><span data-stu-id="cea56-329">For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).</span></span>  
  
 <span data-ttu-id="cea56-330">如果<xref:System.Collections.ObjectModel.KeyedCollection%602>都有一个查找字典，`key`用于从字典中检索的元素。</span><span class="sxs-lookup"><span data-stu-id="cea56-330">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.</span></span>  <span data-ttu-id="cea56-331">如果没有查找字典，每个元素的键为使用提取<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并与指定键进行比较。</span><span class="sxs-lookup"><span data-stu-id="cea56-331">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="cea56-332">C# 语言使用关键字来定义而不是实现索引器<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-332">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="cea56-333">Visual Basic 将 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="cea56-333">Visual Basic implements <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="cea56-334">检索此属性的值是 o （1） 的操作，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>都有一个查找字典; 否则它是 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-334">Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-335">此代码示例显示了最少的代码所派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供一个公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-335">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="cea56-336">代码示例还演示了许多属性和方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="cea56-336">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="cea56-337">此代码示例调用两<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>属性，它是只读的并检索密钥，并<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性，它可设置并按索引检索。</span><span class="sxs-lookup"><span data-stu-id="cea56-337">The code example calls both the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which is settable and retrieves by index.</span></span> <span data-ttu-id="cea56-338">它演示如何访问后一种属性，如果派生集合中的对象具有整数键，使用索引检索的整数没有区别。</span><span class="sxs-lookup"><span data-stu-id="cea56-338">It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</span></span>  
  
 <span data-ttu-id="cea56-339">`SimpleOrder`类是非常简单的请求列表，其中包含`OrderItem`对象，其中每个表示行项的顺序。</span><span class="sxs-lookup"><span data-stu-id="cea56-339">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="cea56-340">键`OrderItem`是固定不变，派生的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-340">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="cea56-341">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-341">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cea56-342">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-342">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="cea56-343">An element with the specified key does not exist in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-343">An element with the specified key does not exist in the collection.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="cea56-344">The key of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-344">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cea56-346">
            <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-346">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="cea56-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-348">此外从查找字典中删除的元素键。</span><span class="sxs-lookup"><span data-stu-id="cea56-348">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="cea56-349">如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用一个查找字典，它将继续使用一个查找字典，即使的元素数再次低于阈值。</span><span class="sxs-lookup"><span data-stu-id="cea56-349">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cea56-350">若要自定义此方法的行为，请重写<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-350">To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.</span></span>  
  
 <span data-ttu-id="cea56-351">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-351">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-352">此代码示例显示了最少的代码所派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供一个公共构造函数的委托给基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="cea56-352">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="cea56-353">代码示例还演示了许多属性和方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。</span><span class="sxs-lookup"><span data-stu-id="cea56-353">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="cea56-354">示例演示了<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>，其中移除具有指定键的项以及<xref:System.Collections.ObjectModel.Collection%601.Remove%2A>并<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A>方法继承自<xref:System.Collections.ObjectModel.Collection%601>，其中分别删除对象和索引。</span><span class="sxs-lookup"><span data-stu-id="cea56-354">The example demonstrates <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.</span></span>  
  
 <span data-ttu-id="cea56-355">`SimpleOrder`类是非常简单的请求列表，其中包含`OrderItem`对象，其中每个表示行项的顺序。</span><span class="sxs-lookup"><span data-stu-id="cea56-355">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="cea56-356">键`OrderItem`是固定不变，派生的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。</span><span class="sxs-lookup"><span data-stu-id="cea56-356">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="cea56-357">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-357">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cea56-358">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-358">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="cea56-359">The index of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-359">The index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-361">此外从查找字典中删除的元素键。</span><span class="sxs-lookup"><span data-stu-id="cea56-361">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="cea56-362">如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用一个查找字典，它将继续使用一个查找字典，即使的元素数再次低于阈值。</span><span class="sxs-lookup"><span data-stu-id="cea56-362">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="cea56-363">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-363">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="cea56-364">实施者的说明</span><span class="sxs-lookup"><span data-stu-id="cea56-364">Notes for Implementers</span></span>  
 <span data-ttu-id="cea56-365">重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29>并<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类和<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-365">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.</span></span>  
  
 <span data-ttu-id="cea56-366">调用此方法从基础集合删除项和更新的查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="cea56-366">Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-367">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法以便为从集合中删除对象提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="cea56-367">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method to provide custom behavior for removing objects from the collection.</span></span> <span data-ttu-id="cea56-368">第一个示例将添加自定义通知事件，并第二个具有可变键的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="cea56-368">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="cea56-369">示例 1</span><span class="sxs-lookup"><span data-stu-id="cea56-369">Example 1</span></span>  
  
 <span data-ttu-id="cea56-370">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="cea56-370">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="cea56-371">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="cea56-371">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="cea56-372">该代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="cea56-372">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="cea56-373">订单窗体包含`OrderItem`对象表示已排序项。</span><span class="sxs-lookup"><span data-stu-id="cea56-373">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="cea56-374">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-374">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="cea56-375">代码示例演示通过在调用的属性和方法的派生类中，自定义行为`Main`方法的`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-375">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="cea56-376">此代码示例使用具有不可变的键对象。</span><span class="sxs-lookup"><span data-stu-id="cea56-376">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="cea56-377">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-377">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="cea56-378">示例 2</span><span class="sxs-lookup"><span data-stu-id="cea56-378">Example 2</span></span>  
  
 <span data-ttu-id="cea56-379">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以保持密钥完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="cea56-379">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="cea56-380">该代码示例创建`MutableKeys`集合，它派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-380">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="cea56-381">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-381">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="cea56-382">当新的密钥分配给属性时，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`要测试是否与现有密钥冲突的新键的集合的方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-382">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="cea56-383">如果是这样，将引发异常，并且不更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="cea56-383">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="cea56-384">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合`MutableKey`类有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="cea56-384">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="cea56-385">此字段由用于添加和删除项从集合中，如提供自定义行为的受保护方法维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-385">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="cea56-386">该字段时添加到集合的项并且当删除项时，清除设置。</span><span class="sxs-lookup"><span data-stu-id="cea56-386">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="cea56-387">The zero-based index of the item to be replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-387">The zero-based index of the item to be replaced.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="cea56-388">The new item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-388">The new item.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cea56-389">Replaces the item at the specified index with the specified item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cea56-389">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cea56-390">相应地更新的查找字典。</span><span class="sxs-lookup"><span data-stu-id="cea56-390">The lookup dictionary is updated accordingly.</span></span> <span data-ttu-id="cea56-391">也就是说，要替换的项的密钥已从查找字典中，并添加新项的键。</span><span class="sxs-lookup"><span data-stu-id="cea56-391">That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</span></span>  
  
 <span data-ttu-id="cea56-392">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cea56-392">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="cea56-393">实施者的说明</span><span class="sxs-lookup"><span data-stu-id="cea56-393">Notes for Implementers</span></span>  
 <span data-ttu-id="cea56-394">重写此方法以提供自定义设置的行为<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="cea56-394">Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cea56-395">此方法不会影响的行为<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>属性，它是只读的。</span><span class="sxs-lookup"><span data-stu-id="cea56-395">This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only.</span></span>  
  
 <span data-ttu-id="cea56-396">调用此方法以设置基础集合中的项并更新的查找字典的基类实现。</span><span class="sxs-lookup"><span data-stu-id="cea56-396">Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cea56-397">本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以提供设置的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-397">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cea56-398">第一个示例将添加自定义通知事件，并第二个具有可变键的对象的集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="cea56-398">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="cea56-399">示例 1</span><span class="sxs-lookup"><span data-stu-id="cea56-399">Example 1</span></span>  
  
 <span data-ttu-id="cea56-400">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="cea56-400">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="cea56-401">在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。</span><span class="sxs-lookup"><span data-stu-id="cea56-401">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="cea56-402">该代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="cea56-402">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="cea56-403">订单窗体包含`OrderItem`对象表示已排序项。</span><span class="sxs-lookup"><span data-stu-id="cea56-403">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="cea56-404">此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。</span><span class="sxs-lookup"><span data-stu-id="cea56-404">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="cea56-405">代码示例演示通过在调用的属性和方法的派生类中，自定义行为`Main`方法的`Demo`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-405">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="cea56-406">此代码示例使用具有不可变的键对象。</span><span class="sxs-lookup"><span data-stu-id="cea56-406">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="cea56-407">使用可变键的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="cea56-407">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="cea56-408">示例 2</span><span class="sxs-lookup"><span data-stu-id="cea56-408">Example 2</span></span>  
  
 <span data-ttu-id="cea56-409">下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以保持密钥完整性和集合中。</span><span class="sxs-lookup"><span data-stu-id="cea56-409">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="cea56-410">该代码示例创建`MutableKeys`集合，它派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。</span><span class="sxs-lookup"><span data-stu-id="cea56-410">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="cea56-411">`MutableKey`类具有一个可设置`Key`属性。</span><span class="sxs-lookup"><span data-stu-id="cea56-411">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="cea56-412">当新的密钥分配给属性时，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`要测试是否与现有密钥冲突的新键的集合的方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-412">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="cea56-413">如果是这样，将引发异常，并且不更改的属性值。</span><span class="sxs-lookup"><span data-stu-id="cea56-413">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="cea56-414">为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合`MutableKey`类有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。</span><span class="sxs-lookup"><span data-stu-id="cea56-414">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="cea56-415">此字段由用于添加和删除项从集合中，如提供自定义行为的受保护方法维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cea56-415">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="cea56-416">该字段时添加到集合的项并且当删除项时，清除设置。</span><span class="sxs-lookup"><span data-stu-id="cea56-416">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>