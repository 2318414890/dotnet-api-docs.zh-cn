<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3375080ab008f35379a851d18f700db732edfd23" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30370801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">集合中的键的类型。</typeparam>
    <typeparam name="TItem">集合中的项的类型。</typeparam>
    <summary>提供键嵌入在值中的集合的抽象基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ObjectModel.KeyedCollection%602>类提供两个 o （1） 的索引检索和键控接近 o （1） 的检索。 它是抽象类型，或更准确地无限设置的抽象类型，因为每个构造的泛型类型是一个抽象基类。 若要使用<xref:System.Collections.ObjectModel.KeyedCollection%602>，派生自的适当的构造类型的集合类型。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602>类是基于集合的结合<xref:System.Collections.Generic.IList%601>泛型接口和集合基于<xref:System.Collections.Generic.IDictionary%602>泛型接口。 集合基于一样<xref:System.Collections.Generic.IList%601>泛型接口，<xref:System.Collections.ObjectModel.KeyedCollection%602>是项的索引的列表。 集合基于一样<xref:System.Collections.Generic.IDictionary%602>泛型接口，<xref:System.Collections.ObjectModel.KeyedCollection%602>具有与每个元素相关联的密钥。  
  
 与字典的元素不同<xref:System.Collections.ObjectModel.KeyedCollection%602>不是键/值对; 相反，整个元素为值和密钥嵌入的值中。  例如，集合的元素派生自`KeyedCollection\<String,String>`(`KeyedCollection(Of String, String)`在 Visual Basic 中) 可能是"John Doe Jr。" 其中的值是"John Doe Jr。" 键为"Doe";无法从派生的员工记录包含整数键的集合或`KeyedCollection\<int,Employee>`。 抽象<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法从元素提取的键。  
  
 默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括你可以获取与查找字典<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A>属性。  当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。 通过在创建时指定字典创建阈值重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602>。 创建查找字典的元素数超过该阈值的第一个时间。  如果您指定为-1 作为阈值，永远不会创建查找字典。  
  
> [!NOTE]
>  当使用内部查找字典时，它包含到集合中的所有项的引用，如果`TItem`是引用类型，或如果在集合中的所有项将复制`TItem`是值类型。 因此，使用查找字典可能不合适如果`TItem`是值类型。  
  
 你可以通过访问其索引或键项<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>属性。 你可以将项目添加没有键，但随后可以仅通过索引访问这些项。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个示例演示派生自所需的最小代码<xref:System.Collections.ObjectModel.KeyedCollection%602>，并演示了许多继承的方法。 第二个示例演示如何重写的受保护的方法<xref:System.Collections.ObjectModel.KeyedCollection%602>以提供自定义行为。  
  
 **示例 1**  
  
 此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。 下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。  
  
 `SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。 键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 **示例 2**  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。 在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。  
  
 此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。 订购窗体包含`OrderItem`对象表示的项排序。 此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。  
  
 该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。  
  
 此代码示例使用具有不可变的键的对象。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化使用默认相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Collections.ObjectModel.KeyedCollection%602>创建与此构造函数使用默认泛型相等比较器的一种密钥，来获取从<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>。 若要指定不同的泛型相等比较器，使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>构造函数或<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数。  
  
 默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。 当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。 可以通过重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数并指定字典创建阈值。  
  
> [!NOTE]
>  因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，你必须从它派生才能使用它。 在派生类型的构造函数，调用相应<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。 不需要公开功能，例如的相等比较器或在你的构造函数中的字典创建阈值。  
  
 此构造函数是 o （1） 操作。  
  
   
  
## Examples  
 此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。 下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。  
  
 `SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。 键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现，如果为 <see langword="null" />，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> 获取的该类型的键的默认相等比较器。</param>
        <summary>初始化使用指定相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。 当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。 可以通过重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数并指定字典创建阈值。  
  
> [!NOTE]
>  因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，你必须从它派生才能使用它。 在派生类型的构造函数，调用相应<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。 不需要公开功能，例如的相等比较器或在你的构造函数中的字典创建阈值。  
  
 此构造函数是 o （1） 操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现，如果为 <see langword="null" />，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> 获取的该类型的键的默认相等比较器。</param>
        <param name="dictionaryCreationThreshold">在不创建查找字典的情况下集合可容纳的元素的数目（0 表示添加第一项时创建查找字典）；或者为 -1，表示指定永远不会创建查找字典。</param>
        <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例，该新实例使用指定的相等比较器并在超过指定阈值时创建一个查找字典。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。 当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。 此构造函数，可重写该行为。 指定 0，则创建时添加的第一个元素的字典、 1 以便添加第二个元素，创建字典等。 如果您指定为-1 作为阈值，永远不会创建查找字典。  
  
 对于非常小的集合中提供的查找字典检索速度的改进不可能与字典所需的额外内存值得。 设置阈值让你能够决定何时进行该权衡。  
  
> [!NOTE]
>  因为<xref:System.Collections.ObjectModel.KeyedCollection%602>类为抽象类 (`MustInherit`在 Visual Basic 中)，你必须从它派生才能使用它。 在派生类型的构造函数，调用相应<xref:System.Collections.ObjectModel.KeyedCollection%602>构造函数。 不需要公开功能，例如的相等比较器或在你的构造函数中的字典创建阈值。  
  
 此构造函数是 o （1） 操作。  
  
   
  
## Examples  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。 在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。  
  
 此代码示例使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>阈值为 0，构造函数，以便内部字典创建第一次一个的对象添加到集合。  
  
 此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。 订购窗体包含`OrderItem`对象表示的项排序。 此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。  
  
 该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。  
  
 此代码示例使用具有不可变的键的对象。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dictionaryCreationThreshold" /> 小于 1。</exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">要更改其键的元素。</param>
        <param name="newKey">
          <c>item</c> 的新键。</param>
        <summary>更改与查找字典中指定元素相关联的键。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会修改中嵌入的密钥`item`; 它只需将替换为保存在查找字典的键。  因此，如果`newKey`中嵌入的密钥不同`item`，不能访问`item`使用返回的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。  
  
 此方法不执行任何操作如果<xref:System.Collections.ObjectModel.KeyedCollection%602>没有查找字典。  
  
 中的所有键<xref:System.Collections.ObjectModel.KeyedCollection%602>必须是唯一的。 密钥不能为`null`。  
  
 此方法为 o （1） 运算。  
  
## <a name="notes-for-implementers"></a>实施者注意事项  
 修改键嵌入在项中之前，必须调用此方法来更新中查找字典的键。 如果字典创建阈值为 – 1，则不需要调用此方法。  
  
 不会公开<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>作为派生类的公共方法的方法。 此方法使用不当将同步的与项的键查找字典。 例如，将密钥设置为`null`和又将其设置为其他值将一个项的多个键添加到查找字典。 公开此方法在内部以允许可变项密钥： 当项的键更改时，此方法用于更改中查找字典的键。  
  
   
  
## Examples  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。  
  
 此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。 `MutableKey`类具有一个可设置`Key`属性。 如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。 如果是这样，将引发异常，且未更改的属性值。  
  
 为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。 此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 该字段时添加到集合的项并且将其清除时移除的项设置。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="key" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> 未找到。  
  
 或  
  
 <paramref name="key" /> 在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中已存在。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中移除所有元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有查找字典，此方法将清除它，但不删除它。  
  
 如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查找字典，它将继续使用查找字典，即使元素的数目再次低于阈值。  
  
 此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
## <a name="notes-for-implementers"></a>实施者注意事项  
 重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类。  
  
 调用此方法来清除基础集合并清除查找字典的基类实现。  
  
   
  
## Examples  
 本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>方法以用于清除集合中的所有对象提供自定义行为。 第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。  
  
 示例 1  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。 在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。  
  
 此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。 订购窗体包含`OrderItem`对象表示的项排序。 此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。  
  
 该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。  
  
 此代码示例使用具有不可变的键的对象。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 示例 2  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。  
  
 此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。 `MutableKey`类具有一个可设置`Key`属性。 如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。 如果是这样，将引发异常，且未更改的属性值。  
  
 为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。 此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 该字段时添加到集合的项并且将其清除时移除的项设置。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于确定集合中的键是否相等的泛型相等比较器。</summary>
        <value>用于确定集合中的键是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 检索此属性的值的运算复杂度为 O(1)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">要在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中定位的键。</param>
        <summary>确定集合是否包含具有指定键的元素。</summary>
        <returns>
          如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典，`key`用于搜索的字典。 如果没有任何查找字典，使用提取每个元素的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并与指定的键进行比较。  
  
 此方法为 o （1） 运算，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典; 否则它是 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
   
  
## Examples  
 此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。 下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。  
  
 `SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。 键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查找字典。</summary>
        <value>
          <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查找字典（如果存在），否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602>包括添加的第一项时创建查找字典。 当将项添加到<xref:System.Collections.ObjectModel.KeyedCollection%602>，一次提取并保存在更快的搜索查找字典项的键。 可以通过重写此行为<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>构造函数并指定字典创建阈值。  
  
 检索此属性的值的运算复杂度为 O(1)。  
  
   
  
## Examples  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。  
  
 此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。 `MutableKey`类具有一个可设置`Key`属性。 如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。 如果是这样，将引发异常，且未更改的属性值。  
  
 为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。 此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 该字段时添加到集合的项并且将其清除时移除的项设置。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">从中提取键的元素。</param>
        <summary>在派生类中实现时，将从指定元素提取键。</summary>
        <returns>指定元素的键。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果查找字典中的键是从中嵌入的密钥不同`item`，不能访问`item`使用返回的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。  
  
 你可以实现此方法以返回`null`包含没有键的项的集合，这种情况下访问的项可以仅通过它们的索引。 此方法为 o （1） 运算。  
  
## <a name="notes-for-implementers"></a>实施者注意事项  
 你必须重写该方法以提供了一种方法从字典中的项中提取键的字典。  
  
 此方法在内部调用。 不需要为其是公共的。  
  
   
  
## Examples  
 此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。 下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。  
  
 `SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。 键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">从零开始的索引，应在该位置插入 <c>item</c>。</param>
        <param name="item">要插入的对象。</param>
        <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的指定索引处。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`index`等同于<xref:System.Collections.ObjectModel.Collection%601.Count%2A>，`item`添加到末尾<xref:System.Collections.ObjectModel.KeyedCollection%602>。  
  
 此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 由调用<xref:System.Collections.ObjectModel.Collection%601.Add%2A>和<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法。  
  
## <a name="notes-for-implementers"></a>实施者注意事项  
 重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>和<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类。  
  
 调用此方法可以向基础集合插入项，并更新查找字典的基类实现。  
  
   
  
## Examples  
 本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法以提供用于添加或将对象插入到集合的自定义行为。 第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。  
  
 示例 1  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。 在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。  
  
 此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。 订购窗体包含`OrderItem`对象表示的项排序。 此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。  
  
 该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。  
  
 此代码示例使用具有不可变的键的对象。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 示例 2  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。  
  
 此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。 `MutableKey`类具有一个可设置`Key`属性。 如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。 如果是这样，将引发异常，且未更改的属性值。  
  
 为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。 此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 该字段时添加到集合的项并且将其清除时移除的项设置。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小于 0。  
  
 或  
  
 <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">要获取的元素的键。</param>
        <summary>获取具有指定键的元素。</summary>
        <value>带有指定键的元素。 如果未找到具有指定键的元素，则引发异常。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性提供能够通过使用以下语法访问集合中的特定元素： `myCollection[key]` (`myCollection(key)`在 Visual Basic 中)。  
  
> [!NOTE]
>  此属性是不同于继承<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性，用于获取和设置的数字索引的元素。 但是，如果`TKey`属于类型<xref:System.Int32>，此属性将屏蔽继承的属性。 在这种情况下，你可以通过强制转换为访问继承的属性<xref:System.Collections.ObjectModel.KeyedCollection%602>与其基类型。 例如， `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)`在 Visual Basic 中， `KeyedCollection<int, MyType^>` c + + 中) 可以强制转换为`Collection<MyType>`(`Collection(Of MyType)`在 Visual Basic 中， `Collection<MyType^>` c + + 中)。  
  
 如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典，`key`用于从字典中检索的元素。  如果没有任何查找字典，使用提取每个元素的键<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并与指定的键进行比较。  
  
 C# 语言使用关键字进行定义而不是实现索引器<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>属性。 Visual Basic 将 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 实现为默认属性，该属性提供相同的索引功能。  
  
 检索此属性的值是一项 o （1） 操作，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>具有查找字典; 否则它是 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
   
  
## Examples  
 此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。 下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。  
  
 代码示例同时调用<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>属性，它是只读的并检索密钥，与<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性，这是可设置并且按索引进行检索。 它演示如何访问后一个属性，如果派生的集合中的对象具有整数键，用于索引检索整数与无法加以区分。  
  
 `SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。 键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">集合中不存在具有指定键的元素。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">要移除的元素的键。</param>
        <summary>从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中移除带有指定键的元素。</summary>
        <returns>
          如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。  如果在 <see langword="false" /> 中没有找到 <paramref name="key" />，则此方法也会返回 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 也将从查找字典移除元素的键。  
  
 如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查找字典，它将继续使用查找字典，即使元素的数目再次低于阈值。  
  
> [!NOTE]
>  若要自定义此方法的行为，请重写<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法。  
  
 此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
   
  
## Examples  
 此代码示例演示的最少代码需要派生集合类从<xref:System.Collections.ObjectModel.KeyedCollection%602>： 重写<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法并提供的公共构造函数的委托给基类构造函数。 下面的代码示例还演示了许多属性和方法继承<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>类。  
  
 示例演示了<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>方法继承自<xref:System.Collections.ObjectModel.KeyedCollection%602>，其中中移除具有指定键的项以及<xref:System.Collections.ObjectModel.Collection%601.Remove%2A>和<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A>方法继承自<xref:System.Collections.ObjectModel.Collection%601>，其中分别删除由对象和索引。  
  
 `SimpleOrder`类是包含一个非常简单的请求列表`OrderItem`对象，其中每个表示顺序中的行项。 键`OrderItem`不可变，派生自的类的重要考虑事项<xref:System.Collections.ObjectModel.KeyedCollection%602>。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要移除的元素的索引。</param>
        <summary>移除 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的指定索引处的元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 也将从查找字典移除元素的键。  
  
 如果元素的数目超出了字典创建阈值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查找字典，它将继续使用查找字典，即使元素的数目再次低于阈值。  
  
 此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
## <a name="notes-for-implementers"></a>实施者注意事项  
 重写此方法以提供自定义的行为<xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29>和<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29>方法，继承自<xref:System.Collections.ObjectModel.Collection%601>泛型类，与<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29>方法。  
  
 调用此方法可以从基础集合删除项，并更新查找字典的基类实现。  
  
   
  
## Examples  
 本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法以提供自定义行为以从集合中删除对象。 第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。  
  
 示例 1  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。 在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。  
  
 此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。 订购窗体包含`OrderItem`对象表示的项排序。 此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。  
  
 该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。  
  
 此代码示例使用具有不可变的键的对象。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 示例 2  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。  
  
 此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。 `MutableKey`类具有一个可设置`Key`属性。 如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。 如果是这样，将引发异常，且未更改的属性值。  
  
 为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。 此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 该字段时添加到集合的项并且将其清除时移除的项设置。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">要替换的项的从零开始的索引。</param>
        <param name="item">新项目。</param>
        <summary>使用指定项替换指定索引处的项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将相应地更新查找字典。 即，从查找字典中，删除将被替换的项的键，并添加新项的键。  
  
 此方法为 o （1） 运算。  
  
## <a name="notes-for-implementers"></a>实施者注意事项  
 重写此方法以提供自定义的行为设置<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性从继承<xref:System.Collections.ObjectModel.Collection%601>泛型类。  
  
> [!NOTE]
>  此方法不会影响的行为<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>属性，它是只读的。  
  
 调用此方法以设置基础集合中的项并更新查找字典的基类实现。  
  
   
  
## Examples  
 本部分包含两个代码示例演示如何重写<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以提供设置的自定义行为<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>属性。 第一个示例中添加自定义通知事件并第二个具有可变键为的对象的集合提供支持。  
  
 示例 1  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自定义行为<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及设置默认<xref:System.Collections.ObjectModel.Collection%601.Item%2A>属性 （C# 中的索引器）。 在此示例中提供的自定义行为是名为的通知事件`Changed`，这在每个重写方法结束时引发。  
  
 此代码示例创建`SimpleOrder`类，该类派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和表示简单订购窗体。 订购窗体包含`OrderItem`对象表示的项排序。 此代码示例还创建`SimpleOrderChangedEventArgs`类，以包含事件信息和使用枚举标识的更改的类型。  
  
 该代码示例演示自定义行为通过调用的属性和方法的派生类中，在`Main`方法`Demo`类。  
  
 此代码示例使用具有不可变的键的对象。 有关使用可变密钥的代码示例，请参阅<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 示例 2  
  
 下面的代码示例演示如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支持可变键，以及如何重写受保护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法以维护的键的完整性和集合中。  
  
 此代码示例创建`MutableKeys`集合，派生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`类。 `MutableKey`类具有一个可设置`Key`属性。 如果新的密钥分配给该属性，属性 setter 调用`internal`(`Friend`在 Visual Basic 中)`ChangeKey`的集合以测试是否新密钥会与现有密钥冲突的方法。 如果是这样，将引发异常，且未更改的属性值。  
  
 为了维护之间的连接`MutableKey`对象和`MutableKeys`集合并防止对象插入到两个集合：`MutableKey`类具有`internal`(`Friend`在 Visual Basic 中) `Collection`字段。 此字段由受保护的方法，它提供用于添加和从集合中，如移除项的自定义行为维护<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 该字段时添加到集合的项并且将其清除时移除的项设置。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>