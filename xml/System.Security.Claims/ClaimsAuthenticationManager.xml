<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="42a1e9b2af0b0e21944401ffe335af36234324db" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36627188" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthenticationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义身份验证管理器的基本实现。 声明验证管理器在声明处理管道中提供某一位置以便将处理逻辑（筛选、验证、扩展）在执行到达您的应用程序代码之前应用于传入主体的声明集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证管理器提供了在应用程序的一个扩展点声明处理管道，它可用于验证、 筛选、 修改的声明，传入声明，或将新的声明注入到提供的声明集<xref:System.Security.Claims.ClaimsPrincipal>RP 之前执行应用程序代码。 你甚至可以返回的自定义实现<xref:System.Security.Claims.ClaimsPrincipal>如果 RP 应用程序需要它。 提供的默认实现<xref:System.Security.Claims.ClaimsAuthenticationManager>类返回中的声明<xref:System.Security.Claims.ClaimsPrincipal>未修改的形式; 但是，您可以从此类派生并重写<xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>方法来修改中的声明<xref:System.Security.Claims.ClaimsPrincipal>（或返回一个自定义<xref:System.Security.Claims.ClaimsPrincipal>).  
  
 创建自定义声明身份验证管理器的典型原因是要添加、 删除或转换声明基于仅通过已知或更好地，这样一来，维持信赖方应用程序的信息。 例如，在购物车应用程序中的客户购买情况的历史记录可能保留在数据库维护的信赖方应用程序，然后添加到返回的声明身份验证管理器根据名称声明中找到的值的声明主体传入主体。  
  
 可以配置应用程序以使用`ClaimsAuthenticationManager`以编程方式通过使用<xref:System.IdentityModel.Configuration.IdentityConfiguration>类或在配置中通过[ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)元素 (这是子元素的[ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)元素)。 您可以重写<xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>方法以提供的自定义的子元素的处理`<claimsAuthenticationManager>`元素可以通过其配置自定义管理器。 基实现<xref:System.Security.Claims.ClaimsAuthenticationManager>不处理任何子元素。  
  
 配置应用程序以使用声明身份验证管理器可确保，它将调用 Windows Identity Foundation (WIF) 从请求管道。  
  
   
  
## Examples  
 下面的代码演示简单的声明身份验证添加到传入主体的角色声明，而不执行任何检查传入声明上的管理器...  
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 下面的 XML 演示`<claimsAuthenticationManager>`元素。  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberSignature Language="F#" Value="abstract member Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal&#xA;override this.Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal" Usage="claimsAuthenticationManager.Authenticate (resourceName, incomingPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">请求的资源的地址。</param>
        <param name="incomingPrincipal">表示正在尝试访问资源的经过身份验证的用户的声明主体。</param>
        <summary>在派生中重写时，将返回与 RP 应用程序的要求一致的 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 对象。 默认实现未修改传入的 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。</summary>
        <returns>包含 RP 应用程序所需任何修改的声明主体。 默认实现返回未被修改的传入声明主体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>调用方法可以重写此方法在派生类进行筛选的请求处理管道，从修改，或将声明注入到根据你的信赖方应用程序的策略的声明主体。 具体取决于信赖方应用程序的要求，甚至可以返回的自定义实现<xref:System.Security.Claims.ClaimsPrincipal>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthenticationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">自定义配置元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
        <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>配置基础结构调用方法。 调用此方法时，`nodelist`将包含的顶级子元素[ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)配置文件中的元素。 每个元素可能反过来，还包含属性或子元素，具体取决于为您派生的类定义的配置架构。 如果没有子元素出现在`<claimsAuthenticationManager>`配置文件中的元素，不调用此方法。  
  
 默认实现会引发<xref:System.NotImplementedException>。 重写此方法以启用对配置文件中声明身份验证管理器的初始化派生类中。 例如，配置元素可能描述了用于进行身份验证的声明主体; 时遵循的策略或者它们可能用于点到是要添加到主体其他声明的属性存储。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>