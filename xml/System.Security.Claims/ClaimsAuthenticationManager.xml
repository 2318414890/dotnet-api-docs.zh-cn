<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19d0027b7a929a454eabf2814d8a208ed8f72ee0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="ce270-101">定义身份验证管理器的基本实现。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce270-101">Defines the base implementation for a claims authentication manager.</span>
      </span>
      <span data-ttu-id="ce270-102">声明验证管理器在声明处理管道中提供某一位置以便将处理逻辑（筛选、验证、扩展）在执行到达您的应用程序代码之前应用于传入主体的声明集合。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce270-102">The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce270-103">身份验证管理器提供一个扩展点，在应用程序的声明可用于验证、 筛选、 修改的处理管道的声明，传入声明，或将新声明注入到提供的声明集<xref:System.Security.Claims.ClaimsPrincipal>之前 RP执行应用程序代码。</span><span class="sxs-lookup"><span data-stu-id="ce270-103">The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed.</span></span> <span data-ttu-id="ce270-104">你甚至可以返回的自定义实现<xref:System.Security.Claims.ClaimsPrincipal>如果 RP 应用程序需要它。</span><span class="sxs-lookup"><span data-stu-id="ce270-104">You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it.</span></span> <span data-ttu-id="ce270-105">由提供的默认实现<xref:System.Security.Claims.ClaimsAuthenticationManager>类返回中的声明<xref:System.Security.Claims.ClaimsPrincipal>不做任何修改; 但是，您可以从此类派生，然后重写<xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>方法可以修改中的声明<xref:System.Security.Claims.ClaimsPrincipal>（或以返回自定义<xref:System.Security.Claims.ClaimsPrincipal>).</span><span class="sxs-lookup"><span data-stu-id="ce270-105">The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthenticationManager> class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>).</span></span>  
  
 <span data-ttu-id="ce270-106">用于创建自定义声明的身份验证管理器的典型原因是添加、 删除或转换为基础的信息仅通过已知或由 RP 应用程序可能，更好地维护声明。</span><span class="sxs-lookup"><span data-stu-id="ce270-106">A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application.</span></span> <span data-ttu-id="ce270-107">例如，可能由 RP 应用程序维护并随后添加到声明身份验证管理器中找到的名称声明的值返回的声明主体的基本数据保留在购物车应用程序中的客户购买情况的历史记录传入的主体。</span><span class="sxs-lookup"><span data-stu-id="ce270-107">For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.</span></span>  
  
 <span data-ttu-id="ce270-108">你可以配置应用程序使用`ClaimsAuthenticationManager`以编程方式通过使用<xref:System.IdentityModel.Configuration.IdentityConfiguration>类或通过配置中[ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)元素 (这是的子元素[ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)元素)。</span><span class="sxs-lookup"><span data-stu-id="ce270-108">You can configure your application to use a `ClaimsAuthenticationManager` either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or in configuration through the [&lt;claimsAuthenticationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element (which is a child element of the [&lt;identityConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) element).</span></span> <span data-ttu-id="ce270-109">您可以重写<xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>方法以提供的自定义的子元素的处理`<claimsAuthenticationManager>`可以通过该配置自定义的管理器的元素。</span><span class="sxs-lookup"><span data-stu-id="ce270-109">You can override the <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method to provide processing for custom child elements of the `<claimsAuthenticationManager>` element through which your custom manager can be configured.</span></span> <span data-ttu-id="ce270-110">基实现<xref:System.Security.Claims.ClaimsAuthenticationManager>不处理任何子元素。</span><span class="sxs-lookup"><span data-stu-id="ce270-110">The base implementation of <xref:System.Security.Claims.ClaimsAuthenticationManager> does not handle any child elements.</span></span>  
  
 <span data-ttu-id="ce270-111">配置应用程序使用声明身份验证管理器可确保，它将通过 Windows Identity Foundation (WIF) 从调用请求管道。</span><span class="sxs-lookup"><span data-stu-id="ce270-111">Configuring your application to use a claims authentication manager ensures that it will be invoked by Windows Identity Foundation (WIF) from the request pipeline.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce270-112">下面的代码演示简单声明的身份验证而不执行任何检查对传入声明添加到传入主体角色声明的管理器...</span><span class="sxs-lookup"><span data-stu-id="ce270-112">The following code shows a simple claims authentication manager that adds a role claim to the incoming principal without performing any check on the incoming claims..</span></span>  
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 <span data-ttu-id="ce270-113">下面的 XML 演示`<claimsAuthenticationManager>`元素。</span><span class="sxs-lookup"><span data-stu-id="ce270-113">The following XML shows the `<claimsAuthenticationManager>` element.</span></span>  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ce270-114">初始化 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-114">Initializes a new instance of the <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">
          <span data-ttu-id="ce270-115">请求的资源的地址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-115">The address of the resource that is being requested.</span>
          </span>
        </param>
        <param name="incomingPrincipal">
          <span data-ttu-id="ce270-116">表示正在尝试访问资源的经过身份验证的用户的声明主体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-116">The claims principal that represents the authenticated user that is attempting to access the resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce270-117">在派生中重写时，将返回与 RP 应用程序的要求一致的 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-117">When overridden in a derived class, returns a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> object consistent with the requirements of the RP application.</span>
          </span>
          <span data-ttu-id="ce270-118">默认实现未修改传入的 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-118">The default implementation does not modify the incoming <see cref="T:System.Security.Claims.ClaimsPrincipal" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce270-119">包含 RP 应用程序所需任何修改的声明主体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-119">A claims principal that contains any modifications necessary for the RP application.</span>
          </span>
          <span data-ttu-id="ce270-120">默认实现返回未被修改的传入声明主体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-120">The default implementation returns the incoming claims principal unmodified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce270-121"><xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>调用方法可以重写此方法在派生类来筛选请求处理管道，从修改，或将声明注入到根据 RP 应用程序策略的声明主体。</span><span class="sxs-lookup"><span data-stu-id="ce270-121">The <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application.</span></span> <span data-ttu-id="ce270-122">根据 RP 应用程序的要求，你甚至可以返回的自定义实现<xref:System.Security.Claims.ClaimsPrincipal>。</span><span class="sxs-lookup"><span data-stu-id="ce270-122">Depending on the requirements of the RP application, you can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">
          <span data-ttu-id="ce270-123">自定义配置元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-123">The custom configuration elements.</span>
          </span>
          <span data-ttu-id="ce270-124">列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-124">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce270-125">在派生类中重写时，将从 XML 中加载自定义配置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce270-125">When overridden in a derived class, loads custom configuration from XML.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce270-126"><xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>配置基础结构调用方法。</span><span class="sxs-lookup"><span data-stu-id="ce270-126">The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="ce270-127">当调用此方法时，`nodelist`将包含的顶级子元素[ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="ce270-127">When this method is called, the `nodelist` will contain the top-level child elements of the [&lt;claimsAuthenticationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element from the configuration file.</span></span> <span data-ttu-id="ce270-128">每个元素可能反过来，还包含属性或子元素，具体取决于您为您派生的类定义的配置架构。</span><span class="sxs-lookup"><span data-stu-id="ce270-128">Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span> <span data-ttu-id="ce270-129">如果没有子元素出现在`<claimsAuthenticationManager>`配置文件中的元素，不调用此方法。</span><span class="sxs-lookup"><span data-stu-id="ce270-129">If no child elements appear under the `<claimsAuthenticationManager>` element in the configuration file, this method is not called.</span></span>  
  
 <span data-ttu-id="ce270-130">默认实现将引发<xref:System.NotImplementedException>。</span><span class="sxs-lookup"><span data-stu-id="ce270-130">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="ce270-131">重写此方法在派生类以启用初始化声明身份验证管理器从配置文件中。</span><span class="sxs-lookup"><span data-stu-id="ce270-131">Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file.</span></span> <span data-ttu-id="ce270-132">例如，配置元素可能描述进行身份验证声明主体; 时遵循的策略或者它们可能用于点到个要添加到主体其他声明的属性存储。</span><span class="sxs-lookup"><span data-stu-id="ce270-132">For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>