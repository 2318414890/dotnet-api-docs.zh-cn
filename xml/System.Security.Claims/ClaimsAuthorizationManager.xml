<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36531905" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义身份验证管理器的基本实现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>类提供了声明授权管理器的基实现。 可以在以下两种方案中使用声明授权管理器：  
  
-   在基于 web 的应用程序和服务中，声明授权管理器可以添加到处理管道来提供一个扩展点，可以从其授权的应用程序代码的前面的传入声明值根据资源的访问权限实际实现所请求的资源调用。  
  
-   当你使用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>类来执行命令性或声明性的基于声明的访问权限检查在代码中，为应用程序配置的声明授权管理器由执行系统调用检查。 可以在基于 web 的应用程序和桌面应用程序中执行基于声明的访问检查。  
  
 提供的默认实现<xref:System.Security.Claims.ClaimsAuthorizationManager>类授予每个声明提供的访问权限; 但是，您可以从此类派生并重写<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法以提供您自己的授权逻辑。  
  
 声明授权管理器的使用是可选的。 可以配置应用程序以使用声明授权管理器以编程方式通过使用<xref:System.IdentityModel.Configuration.IdentityConfiguration>类或以声明方式，通过指定[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素，它是子元素的[ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)应用程序配置文件中的元素。 如果你的应用程序是 web 站点或在 Internet 信息服务 (IIS) 承载的 web 应用程序，您还必须添加<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>ASP.NET HTTP 模块集合中。  
  
> [!IMPORTANT]
>  当你使用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>类，用于执行访问检查的声明授权管理器是在下的标识配置中指定的那个<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>属性。 在配置文件中，它是`<identityConfiguration>`从默认值引用的部分`<federationConfiguration>`元素。 这是即使对于 Windows Communication Foundation (WCF) 服务和桌面应用程序，则返回 true。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>基类不采用任何额外的配置; 但是，您可以重写<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>中派生类，以提供从子元素的声明授权管理器的初始化`<claimsAuthorizationElement>`。 典型方案是使用这些子元素来指定用于确定需要哪些声明类型和值对哪个资源访问授权策略。 这不是一项硬性要求，不过你可以自由地定义的任何使用情况和语法意义根据实现的。  
  
   
  
## Examples  
 在中使用的代码示例<xref:System.Security.Claims.ClaimsAuthorizationManager>主题取自`Claims Based Authorization`示例。 此示例提供的自定义声明授权管理器，可授权主体根据在配置中指定的策略。 自定义声明授权管理器包含三个基本组件： 一个类派生自<xref:System.Security.Claims.ClaimsAuthorizationManager>实现管理器中，`ResourceAction`类对资源和操作，并读取和编译是策略的策略读取器配置文件中指定。 此编译的策略可能，然后通过声明授权管理器用于评估一个主体，以便授予对资源的访问权限。 为了简洁起见，并显示不是所有元素。 有关此示例，并提供其他示例的 WIF 和有关在何处下载它们，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下面的代码显示了自定义声明授权管理器的实现。 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法读取，并通过使用策略读取器帮助程序类 （未显示） 编译从配置的策略和<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法授予或拒绝访问基于此策略。  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 下面的代码演示`ResourceAction`自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 下面的 XML 演示如何配置声明授权管理器在 IIS 7.5 中托管的 web 应用程序如上所示。 显示仅特定于声明授权管理器的配置元素。 请注意，对引用<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>必须将类添加到下管道`<system.Webserver>`元素。 站点和版本的 IIS 7 之前的 IIS 中托管的应用程序的这些模块可以添加到下管道`<system.Web>`元素。 此配置时显示，但被注释掉。  
  
 使用声明授权管理器的策略指定由自定义`<policy>`下的元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素。 在第一个策略中，主体必须拥有一个指定的声明，以便在指定资源上执行指定的操作。 在第二个策略中，主体必须拥有两个声明，以便能够指定资源执行指定的操作。 在所有其他主体会自动授予访问权限，而不考虑它拥有的声明。  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">包含要为其检查身份授权的主题、资源和操作。</param>
        <summary>在派生类中实现时，检查对指定上下文中的主题的授权，以在指定资源上执行指定操作。</summary>
        <returns>如果授权该主题在指定的资源上执行指定操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现始终返回`true`，其中授予的访问权限。 您可以重写此方法在派生类来授予访问权限基于信赖方应用程序的要求。 如果此方法返回`false`，Windows Identity Foundation (WIF) 给调用方返回一个未经授权的错误; 否则，将执行传递给信赖方应用程序。  
  
   
  
## Examples  
 在中使用的代码示例<xref:System.Security.Claims.ClaimsAuthorizationManager>主题取自`Claims Based Authorization`示例。 此示例提供的自定义声明授权管理器，可授权主体根据在配置中指定的策略。 自定义声明授权管理器包含三个基本组件： 一个类派生自<xref:System.Security.Claims.ClaimsAuthorizationManager>实现管理器中，`ResourceAction`类对资源和操作，并读取和编译是策略的策略读取器配置文件中指定。 此编译的策略可能，然后通过声明授权管理器用于评估一个主体，以便授予对资源的访问权限。 为了简洁起见，并显示不是所有元素。 有关此示例，并提供其他示例的 WIF 和有关在何处下载它们，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下面的代码演示的重写<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法。 此方法授予或拒绝访问基于策略读取和编译，从配置文件。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 下面的代码演示`ResourceAction`自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 使用声明授权管理器的策略指定由自定义`<policy>`下的元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素。 此策略是读取和编译的<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 在第一个策略中，主体必须拥有一个指定的声明，以便在指定资源上执行指定的操作。 在第二个策略中，主体必须拥有两个声明，以便能够指定资源执行指定的操作。 在所有其他主体会自动授予访问权限，而不考虑它拥有的声明。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">自定义配置元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
        <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>配置基础结构调用方法。 调用此方法时，`nodelist`将包含的顶级子元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)配置文件中的元素。 每个元素可能反过来，还包含属性或子元素，具体取决于为您派生的类定义的配置架构。 如果没有子元素出现在`<claimsAuthorizationManager>`配置文件中的元素，不调用此方法。  
  
 默认实现会引发<xref:System.NotImplementedException>。 重写此方法以启用声明授权管理器配置文件中的初始化派生类中。 通常情况下，使用配置元素来表示授权策略;但是，可以定义元素，并根据你的应用程序的要求有意义的任何方式使用它们。  
  
   
  
## Examples  
 在中使用的代码示例<xref:System.Security.Claims.ClaimsAuthorizationManager>主题取自`Claims Based Authorization`示例。 此示例提供的自定义声明授权管理器，可授权主体根据在配置中指定的策略。 自定义声明授权管理器包含三个基本组件： 一个类派生自<xref:System.Security.Claims.ClaimsAuthorizationManager>实现管理器中，`ResourceAction`类对资源和操作，并读取和编译是策略的策略读取器配置文件中指定。 此编译的策略可能，然后通过声明授权管理器用于评估一个主体，以便授予对资源的访问权限。 为了简洁起见，并显示不是所有元素。 有关此示例，并提供其他示例的 WIF 和有关在何处下载它们，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下面的代码演示的重写<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 此方法使用 （未显示） 的帮助器策略读取器类读取和编译配置文件中指定的授权策略。 策略被添加到一个字典，并由访问`ResourceAction`从它们所针对的资源和操作创建的键对象。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 下面的代码演示`ResourceAction`自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 使用声明授权管理器的策略指定由自定义`<policy>`下的元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素。 此策略是读取和编译的<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 在第一个策略中，主体必须拥有一个指定的声明，以便在指定资源上执行指定的操作。 在第二个策略中，主体必须拥有两个声明，以便能够指定资源执行指定的操作。 在所有其他主体会自动授予访问权限，而不考虑它拥有的声明。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>