<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fe203cb2b223a3ac68111978dbba00b7d0fb80ef" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489891" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义身份验证管理器的基本实现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>类提供的声明授权管理器的基实现。 在以下两个方案，可以使用声明授权管理器：  
  
-   在基于 web 的应用程序和服务，声明授权管理器可以添加到处理管道，以提供一个扩展点，从中可以授权对应用程序代码之前的传入声明的值根据资源的访问实际实现请求的资源调用的。  
  
-   当你使用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>类执行命令性或声明性的基于声明的访问将检查在代码中，为你的应用程序配置的声明授权管理器由执行系统调用检查。 可以在基于 web 的应用程序和桌面应用程序中执行基于声明的访问检查。  
  
 由提供的默认实现<xref:System.Security.Claims.ClaimsAuthorizationManager>类授权提供每个声明的访问; 但是，您可以从此类派生，然后重写<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法以提供您自己的授权逻辑。  
  
 使用声明授权管理器是可选的。 你可以配置应用程序使用声明授权管理器以编程方式通过使用<xref:System.IdentityModel.Configuration.IdentityConfiguration>类或以声明方式，通过指定[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素，它是子元素的[ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)应用程序配置文件中的元素。 如果你的应用程序是网站或 web 应用程序在 Internet 信息服务 (IIS) 承载，还必须添加<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>ASP.NET HTTP 模块集合中。  
  
> [!IMPORTANT]
>  当你使用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>类或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>类，用于执行访问检查的声明授权管理器是在下的标识配置中指定的一个<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>属性。 在配置文件中，它是`<identityConfiguration>`从默认值引用的部分`<federationConfiguration>`元素。 这适用于 Windows Communication Foundation (WCF) 服务和桌面应用程序甚至。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>基类不采用任何附加配置; 但是，你可以重写<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>在派生类中以提供从子元素的声明授权管理器的初始化`<claimsAuthorizationElement>`。 典型情况是要使用这些子元素来指定这些扩展名决定了哪些声明类型和值，才能访问其资源授权策略。 这不是硬要求，不过你可以自由地定义所需的使用情况，语法有你的实施有关的意义。  
  
   
  
## Examples  
 在中使用的代码示例<xref:System.Security.Claims.ClaimsAuthorizationManager>主题，将从`Claims Based Authorization`示例。 此示例提供的自定义声明授权管理器，可以授权基于策略在配置中指定的主题。 自定义声明授权管理器包括三个基本组件： 派生自该类<xref:System.Security.Claims.ClaimsAuthorizationManager>实现管理器中，`ResourceAction`对资源和操作的类和策略读取器读取，并编译为的策略配置文件中指定。 此编译的策略可能然后声明授权管理器用于评估来为对资源的访问授权的主体。 不是所有元素都均出现由于篇幅所限。 有关此示例，并提供其他示例的 WIF 和有关从哪里下载它们，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下面的代码演示自定义声明授权管理器的实现。 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法读取并使用策略读取器帮助程序类 （未显示） 来编译来自配置的策略和<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法授予或拒绝基于此策略的访问。  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 下面的代码演示`ResourceAction`自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 下面的 XML 演示如何配置声明授权管理器在 IIS 7.5 中托管的 web 应用程序上面所示。 显示仅特定于声明授权管理器的配置元素。 请注意，对引用<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>类必须添加到在管道`<system.Webserver>`元素。 有关站点和应用程序版本的 IIS 7 之前的 IIS 中承载这些模块可以添加向下管道`<system.Web>`元素。 此配置时显示，但注释掉。  
  
 使用声明授权管理器的策略指定由自定义`<policy>`下的元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素。 在第一个策略中，主体必须具有一个指定的声明，以对指定资源执行指定的操作。 在第二个策略中，主体必须具有两个声明要能够指定资源执行指定的操作。 所有其他情况下，主体是自动授予访问权限而不考虑它拥有的声明。  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">包含要为其检查身份授权的主题、资源和操作。</param>
        <summary>在派生类中实现时，检查对指定上下文中的主题的授权，以在指定资源上执行指定操作。</summary>
        <returns>
          如果授权该主题在指定的资源上执行指定操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现始终返回`true`，其中授予的访问权限。 你可以重写此方法在派生类来授予访问权限基于 RP 应用程序的要求。 如果此方法返回`false`，Windows Identity Foundation (WIF) 将未经授权的错误返回到调用方; 否则，将执行传递给 RP 应用程序。  
  
   
  
## Examples  
 在中使用的代码示例<xref:System.Security.Claims.ClaimsAuthorizationManager>主题，将从`Claims Based Authorization`示例。 此示例提供的自定义声明授权管理器，可以授权基于策略在配置中指定的主题。 自定义声明授权管理器包括三个基本组件： 派生自该类<xref:System.Security.Claims.ClaimsAuthorizationManager>实现管理器中，`ResourceAction`对资源和操作的类和策略读取器读取，并编译为的策略配置文件中指定。 此编译的策略可能然后声明授权管理器用于评估来为对资源的访问授权的主体。 不是所有元素都均出现由于篇幅所限。 有关此示例，并提供其他示例的 WIF 和有关从哪里下载它们，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下面的代码演示的替代<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法。 此方法授予或拒绝访问基于策略阅读和编译从配置文件。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 下面的代码演示`ResourceAction`自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 使用声明授权管理器的策略指定由自定义`<policy>`下的元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素。 读取此策略并将其编译的<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 在第一个策略中，主体必须具有一个指定的声明，以对指定资源执行指定的操作。 在第二个策略中，主体必须具有两个声明要能够指定资源执行指定的操作。 所有其他情况下，主体是自动授予访问权限而不考虑它拥有的声明。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">自定义配置元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
        <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>配置基础结构调用方法。 当调用此方法时，`nodelist`将包含的顶级子元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)配置文件中的元素。 每个元素可能反过来，还包含属性或子元素，具体取决于您为您派生的类定义的配置架构。 如果没有子元素出现在`<claimsAuthorizationManager>`配置文件中的元素，不调用此方法。  
  
 默认实现将引发<xref:System.NotImplementedException>。 重写此方法在派生类以启用初始化声明授权管理器从配置文件中。 通常情况下，使用的配置元素来表示授权策略;但是，你可以定义元素，并将其用于任何基于你的应用程序的要求有意义的方式。  
  
   
  
## Examples  
 在中使用的代码示例<xref:System.Security.Claims.ClaimsAuthorizationManager>主题，将从`Claims Based Authorization`示例。 此示例提供的自定义声明授权管理器，可以授权基于策略在配置中指定的主题。 自定义声明授权管理器包括三个基本组件： 派生自该类<xref:System.Security.Claims.ClaimsAuthorizationManager>实现管理器中，`ResourceAction`对资源和操作的类和策略读取器读取，并编译为的策略配置文件中指定。 此编译的策略可能然后声明授权管理器用于评估来为对资源的访问授权的主体。 不是所有元素都均出现由于篇幅所限。 有关此示例，并提供其他示例的 WIF 和有关从哪里下载它们，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下面的代码演示的替代<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 此方法使用 （未显示） 的帮助程序策略读取器类以读取和编译配置文件中指定的授权策略。 策略添加到一个字典，并通过访问`ResourceAction`从为其应将它们的资源和操作创建的密钥对象。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 下面的代码演示`ResourceAction`自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 使用声明授权管理器的策略指定由自定义`<policy>`下的元素[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)元素。 读取此策略并将其编译的<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 在第一个策略中，主体必须具有一个指定的声明，以对指定资源执行指定的操作。 在第二个策略中，主体必须具有两个声明要能够指定资源执行指定的操作。 所有其他情况下，主体是自动授予访问权限而不考虑它拥有的声明。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>