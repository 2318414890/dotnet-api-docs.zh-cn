<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResourceSet.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a1c004c2cbe90a3788b82697a631822576eef92f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c004c2cbe90a3788b82697a631822576eef92f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.</source>
          <target state="translated">存储已针对某个特定区域性进行了本地化的所有资源，忽略所有其他区域性（包括任何代用规则）。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated">安全说明：带有不受信任的数据的此类中的调用数据方法存在安全风险。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">仅在受信任的数据类中调用方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">有关详细信息，请参阅 <bpt id="p1">[</bpt>不受信任数据的安全风险<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> class enumerates over an <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph>, loading every name and value, and storing them in a <ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>类枚举<ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph>，加载每个名称和值，并将它们存储在<ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>A custom <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph> can be used.</source>
          <target state="translated">自定义<ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>可用。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> object that represents the resources of a specific culture by calling the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">可以实例化<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>对象，表示特定区域性的资源通过调用<ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此类型实现<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">在使用完类型后，您应直接或间接释放类型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>中的方法<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>块。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，请使用 <ph id="ph1">`using`</ph>（在 C# 中）或 <ph id="ph2">`Using`</ph>（在 Visual Basic 中）等语言构造。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口主题。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> that use their own resource reader and writer should override <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>, to provide the appropriate functionality for interpreting the resource set.</source>
          <target state="translated">派生类的<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>使用其自己的资源读取器和编写器应重写<ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>，和<ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>，用于解释资源集提供适当的功能。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class.</source>
          <target state="translated">创建 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class with default properties.</source>
          <target state="translated">使用默认属性初始化 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> of resources to be read.</source>
          <target state="translated">要读取的资源的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The stream should refer to an existing resources file.</source>
          <target state="translated">流应引用现有的资源文件。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class using the system default <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> that reads resources from the given stream.</source>
          <target state="translated">使用从给定流中读取资源的系统默认的 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 来创建 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is not readable.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 不可读。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>for providing serialization services.</source>
          <target state="translated">用于提供序列化服务。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>Associated enumeration:   <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">关联的枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>安全操作： <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>The reader that will be used.</source>
          <target state="translated">将使用的读取器。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class using the specified resource reader.</source>
          <target state="translated">使用指定的资源阅读器创建 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>You can use this constructor to support custom resource formats using a user-provided <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>.</source>
          <target state="translated">你可以使用此构造函数以支持使用用户提供的自定义资源格式<ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>The <ph id="ph1">&lt;paramref name="reader" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>Resource file to read.</source>
          <target state="translated">要读取的资源文件。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class using the system default <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> that opens and reads resources from the given file.</source>
          <target state="translated">使用从给定文件打开并读取资源的系统默认的 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 来创建 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>The following code example defines a new instance of the <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> class for a specific file, iterates through the resources used by that file, and displays their contents to the console.</source>
          <target state="translated">下面的代码示例定义的新实例<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>针对特定文件，类循环访问该文件中，使用的资源，并向控制台显示其内容。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Close">
          <source>Closes and releases any resources used by this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">通过此 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 来关闭和释放所有资源。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source>All calls to methods on the <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> after a call to this method might fail.</source>
          <target state="translated">对方法的所有调用<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>后对此方法的调用可能会失败。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> can be safely called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> 可以安全地调用多次。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source>The current implementation of <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> (<ph id="ph3">`true`</ph>).</source>
          <target state="translated">当前实现<ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph>调用<ph id="ph2">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph>(<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> method to release all resources used by the calling <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> instance.</source>
          <target state="translated">下面的代码示例使用<ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph>方法来释放通过调用使用的所有资源<ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Releases resources used by the current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> instance.</source>
          <target state="translated">释放由当前 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 实例使用的资源。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Dispose">
          <source>Disposes of the resources (other than memory) used by the current instance of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">处置由 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 的当前实例使用的资源（内存除外）。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>.</source>
          <target state="translated">在完成使用 <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> 后，应调用 <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> 方法使 <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> 处于不可用状态。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> so the memory it was occupying can be reclaimed by garbage collection.</source>
          <target state="translated">在调用<ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph>，必须释放对所有引用<ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>以便可以通过垃圾回收回收其占用的内存。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>The current method is the implementation of <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">当前方法是实现<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>This implementation calls <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> (<ph id="ph2">`true`</ph>).</source>
          <target state="translated">此实现中调用<ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph>(<ph id="ph2">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>Indicates whether the objects contained in the current instance should be explicitly closed.</source>
          <target state="translated">指示是否应显式关闭当前实例中包含的对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.</source>
          <target state="translated">释放与当前实例关联的资源（内存除外），并关闭内部托管对象（如果请求这样做）。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>If the <ph id="ph1">`dispose`</ph> parameter is <ph id="ph2">`true`</ph>, the current method frees all the resources associated with it as well as with all objects associated with it.</source>
          <target state="translated">如果<ph id="ph1">`dispose`</ph>参数是<ph id="ph2">`true`</ph>，当前方法释放关联与它以及与之关联的所有对象的所有资源。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>If <ph id="ph1">`dispose`</ph> is <ph id="ph2">`false`</ph>, the current method frees only the resources allocated to it, and ignores any objects associated with it.</source>
          <target state="translated">如果<ph id="ph1">`dispose`</ph>是<ph id="ph2">`false`</ph>，当前方法只释放资源分配给它，并忽略与之关联的任何对象。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultReader">
          <source>Returns the preferred resource reader class for this kind of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">返回此类 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 的首选资源读取器类。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultReader">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the preferred resource reader for this kind of <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">返回这类 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 的首选资源阅读器的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetDefaultReader">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> using their own resource reader should override <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>.</source>
          <target state="translated">派生类的<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>使用其自己的资源读取器应重写<ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>，和<ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultWriter">
          <source>Returns the preferred resource writer class for this kind of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">返回此类 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 的首选资源编写器类。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultWriter">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the preferred resource writer for this kind of <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">返回这类 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 的首选资源编写器的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetDefaultWriter">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> using their own resource reader should override <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>.</source>
          <target state="translated">派生类的<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>使用其自己的资源读取器应重写<ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>，和<ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> that can iterate through the <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph>，它可以循环访问 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">该 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Enumerators only allow reading the data in the collection.</source>
          <target state="translated">枚举器只允许读取集合中的数据。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Enumerators cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 也会将枚举器放回此位置。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>At this position, calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">在此位置，调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>引发异常。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 之前，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 返回同一对象。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">在传递到集合的末尾之后，枚举数放在集合中最后一个元素后面，且调用 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 会返回 <ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, calling <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，则调用<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>引发异常。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">若要再次将 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为集合的第一个元素，可以调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 并接着调用 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复，并且下一个调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>引发<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>If the collection is modified between <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> will return the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">如果在 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 和 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 之间修改集合，那么即使枚举数已经无效，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 也将返回它所设置成的元素。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>You can use the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=nameWithType&gt;</ph> property to access the value stored in the current element.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=nameWithType&gt;</ph>属性来访问存储在当前元素的值。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property to access the key of the current element.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph>属性来访问当前元素的键。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property to access the value of the current element.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>属性来访问当前元素的值。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph><ph id="ph2">`rs`</ph> for the file <ph id="ph3">`items.resources`</ph>.</source>
          <target state="translated">下面的示例演示如何创建<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph><ph id="ph2">`rs`</ph>文件<ph id="ph3">`items.resources`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Next, the <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetEnumerator%2A&gt;</ph> method is used to create an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> for <ph id="ph3">`rs`</ph>.</source>
          <target state="translated">接下来，<ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetEnumerator%2A&gt;</ph>方法用于创建<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph>为<ph id="ph3">`rs`</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> iterates through <ph id="ph2">`rs`</ph> and displays the contents to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph>循环访问<ph id="ph2">`rs`</ph>并向控制台显示内容。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The resource set has been closed or disposed.</source>
          <target state="translated">资源集已关闭或已释放。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Returns a resource object with the specified name.</source>
          <target state="translated">返回具有指定名称的资源对象。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>Case-sensitive name of the resource to search for.</source>
          <target state="translated">要搜索的资源的区分大小写的名称。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>Searches for a resource object with the specified name.</source>
          <target state="translated">搜索具有指定名称的资源对象。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The requested resource.</source>
          <target state="translated">所请求的资源。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The name of the resource object is case sensitive.</source>
          <target state="translated">资源对象的名称是区分大小写。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>For a case-insensitive search, use <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetObject%2A&gt;</ph>.</source>
          <target state="translated">对于不区分大小写的搜索，使用<ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetObject%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">对象已关闭或已释放。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Name of the resource to search for.</source>
          <target state="translated">要搜索的资源的名称。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Indicates whether the case of the specified name should be ignored.</source>
          <target state="translated">指示是否应忽略指定名称的大小写。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Searches for a resource object with the specified name in a case-insensitive manner, if requested.</source>
          <target state="translated">如果请求的话，按照不区分大小写的方式搜索具有指定名称的资源对象。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The requested resource.</source>
          <target state="translated">所请求的资源。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ignoreCase`</ph> parameter is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
          <target state="translated">如果值<ph id="ph1">`ignoreCase`</ph>参数是<ph id="ph2">`true`</ph>，具有名称"资源"的资源相当于具有名称"资源"的资源。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Note, however, that this method always performs case-insensitive string comparisons using <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">但请注意，此方法始终执行不区分大小写的字符串比较使用<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.</source>
          <target state="translated">优点是，此方法执行不区分大小写的字符串比较的结果是无论区域性的所有计算机上相同。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
          <target state="translated">其缺点在于结果不一致的所有区域性的大小写规则。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
          <target state="translated">例如，在土耳其语字母表具有字符 i： 一个带有圆点的两个版本，另一个不带点。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
          <target state="translated">在土耳其语字符我 (Unicode 0049) 被视为不同的字符 ı (Unicode 0131) 的大写版本。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
          <target state="translated">I (Unicode 0069) 的字符被视为另一种字符 İ (Unicode 0130) 的小写形式。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
          <target state="translated">根据这些大小写规则，不区分大小写的字符串比较的字符 i (Unicode 0069) 和我 (Unicode 0049) 应失败区域性"TR-TR"（土耳其中的土耳其语）。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Using the <ph id="ph1">`GetObject`</ph> method with <ph id="ph2">`ignoreCase`</ph> set to <ph id="ph3">`true`</ph>, this comparison succeeds.</source>
          <target state="translated">使用<ph id="ph1">`GetObject`</ph>方法替换<ph id="ph2">`ignoreCase`</ph>设置为<ph id="ph3">`true`</ph>，这种比较成功。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">对象已关闭或已释放。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> resource with a specified name.</source>
          <target state="translated">返回具有指定名称的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 资源。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>Name of the resource to search for.</source>
          <target state="translated">要搜索的资源的名称。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>Searches for a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> resource with the specified name.</source>
          <target state="translated">搜索具有指定名称的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 资源。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The value of a resource, if the value is a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">当值是 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 时为资源的值。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The resource specified by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 指定的资源不是 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">对象已关闭或已释放。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Name of the resource to search for.</source>
          <target state="translated">要搜索的资源的名称。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Indicates whether the case of the case of the specified name should be ignored.</source>
          <target state="translated">指示是否应忽略指定名称的大小写。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Searches for a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> resource with the specified name in a case-insensitive manner, if requested.</source>
          <target state="translated">如果请求的话，按照不区分大小写的方式搜索具有指定名称的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 资源。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The value of a resource, if the value is a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">当值是 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 时为资源的值。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ignoreCase`</ph> parameter is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
          <target state="translated">如果值<ph id="ph1">`ignoreCase`</ph>参数是<ph id="ph2">`true`</ph>，具有名称"资源"的资源相当于具有名称"资源"的资源。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Note, however, that this method always performs case-insensitive string comparisons using <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">但请注意，此方法始终执行不区分大小写的字符串比较使用<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.</source>
          <target state="translated">优点是，此方法执行不区分大小写的字符串比较的结果是无论区域性的所有计算机上相同。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
          <target state="translated">其缺点在于结果不一致的所有区域性的大小写规则。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
          <target state="translated">例如，在土耳其语字母表具有字符 i： 一个带有圆点的两个版本，另一个不带点。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
          <target state="translated">在土耳其语字符我 (Unicode 0049) 被视为不同的字符 ı (Unicode 0131) 的大写版本。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
          <target state="translated">I (Unicode 0069) 的字符被视为另一种字符 İ (Unicode 0130) 的小写形式。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
          <target state="translated">根据这些大小写规则，不区分大小写的字符串比较的字符 i (Unicode 0069) 和我 (Unicode 0049) 应失败区域性"TR-TR"（土耳其中的土耳其语）。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Using the <ph id="ph1">`GetString`</ph> method with <ph id="ph2">`ignoreCase`</ph> set to <ph id="ph3">`true`</ph>, this comparison succeeds.</source>
          <target state="translated">使用<ph id="ph1">`GetString`</ph>方法替换<ph id="ph2">`ignoreCase`</ph>设置为<ph id="ph3">`true`</ph>，这种比较成功。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The resource specified by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 指定的资源不是 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">对象已关闭或已释放。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceSet.Reader">
          <source>Indicates the <ph id="ph1">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph> used to read the resources.</source>
          <target state="translated">指示用于读取资源的 <ph id="ph1">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>Reads all the resources and stores them in a <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> indicated in the <ph id="ph2">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph> property.</source>
          <target state="translated">读取所有资源，并将它们存储在 <ph id="ph2">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph> 属性中指示的 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> should explicitly call <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.ReadResources" /&gt;</ph> to load all the resources from the <ph id="ph3">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph> into <ph id="ph4">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph>, generally either in the constructor or lazily on the first call to either <ph id="ph5">&lt;see cref="M:System.Resources.ResourceSet.GetString(System.String)" /&gt;</ph> or <ph id="ph6">&lt;see cref="M:System.Resources.ResourceSet.GetObject(System.String)" /&gt;</ph>.</source>
          <target state="translated">派生类的<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>应显式调用<ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.ReadResources" /&gt;</ph>加载所有资源的<ph id="ph3">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph>到<ph id="ph4">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph>，通常在构造函数或延迟在第一个调用为<ph id="ph5">&lt;see cref="M:System.Resources.ResourceSet.GetString(System.String)" /&gt;</ph>或<ph id="ph6">&lt;see cref="M:System.Resources.ResourceSet.GetObject(System.String)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>However, if your resource set and IResourceReader already have information about each other and have a more efficient way to load just a few select resources, this step can be skipped.</source>
          <target state="translated">但是，如果你的资源集和 IResourceReader 已具有相互信息并具有加载只需少量的更高效方式选择资源，可以跳过此步骤。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>To minimize working set, write your resource set in such a way that it queries your IResourceReader for only the resource values requested by your application.</source>
          <target state="translated">若要尽量减少工作集，编写将在它查询的应用程序请求的资源值你 IResourceReader 资源。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object to avoid a race condition with <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">返回一个 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 对象，以避免与 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> 之间出现争用情况。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
          <source>This member is not intended to be used directly from your code.</source>
          <target state="translated">不应直接从代码中使用此成员。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for the current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 对象的一个枚举数。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceSet.Table">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> in which the resources are stored.</source>
          <target state="translated">存储资源的 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
