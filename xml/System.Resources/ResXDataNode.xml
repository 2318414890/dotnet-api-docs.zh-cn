<Type Name="ResXDataNode" FullName="System.Resources.ResXDataNode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="58eb2e9daa3e84302823234fa5192b663c4dfd8e" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52378161" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResXDataNode : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ResXDataNode extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResXDataNode" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResXDataNode&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResXDataNode sealed : System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type ResXDataNode = class&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 XML 资源 (.resx) 文件中的元素。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResXDataNode>类支持的资源文件中的丰富的数据类型的表示形式。 只要该对象支持序列化和类型的编辑器，它可以在资源文件中，支持的任何对象的存储。  
  
 您可以创建<xref:System.Resources.ResXDataNode>对象通过调用其重载的类构造函数之一。 然后可以添加元素的资源项到资源文件通过调用<xref:System.Resources.ResXResourceWriter.AddResource%2A?displayProperty=nameWithType>方法。  
  
 若要检索的现有<xref:System.Resources.ResXDataNode>对象，必须先枚举<xref:System.Resources.ResXDataNode>通过实例化的 XML 资源文件中的对象<xref:System.Resources.ResXResourceReader>对象，设置<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A?displayProperty=nameWithType>属性设置为`true`，并调用<xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=nameWithType>方法获取一个枚举器。 说明如示例所示。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=nameWithType>方法来获取<xref:System.Collections.IDictionaryEnumerator>对象，用于枚举<xref:System.Resources.ResXDataNode>.resx 文件中的对象。 该示例包含`CreateResourceFile`创建必需的 XML 资源文件的例程。  
  
 [!code-csharp[System.Resources.ResXDataNode.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resxdatanode.class/cs/resxresourcereader2.cs#1)]
 [!code-vb[System.Resources.ResXDataNode.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resxdatanode.class/vb/resxresourcereader2.vb#1)]  
  
 因为<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>属性是`true`，则<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性是<xref:System.Resources.ResXDataNode>对象而不是资源值。 这使得资源项的注释可从<xref:System.Resources.ResXDataNode.Comment%2A?displayProperty=nameWithType>属性。  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">对于直接调用方的完全信任。 不能由部分受信任的代码使用此类型。</permission>
    <related type="Article" href="https://msdn.microsoft.com/library/f7570c09-7db5-44f2-983a-e8859caeb0d5">.NET Framework 中的序列化</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Resources.ResXDataNode" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXDataNode (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResXDataNode(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResXDataNode : string * obj -&gt; System.Resources.ResXDataNode" Usage="new System.Resources.ResXDataNode (name, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">资源的名称。</param>
        <param name="value">要存储的资源。</param>
        <summary>初始化 <see cref="T:System.Resources.ResXDataNode" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="value" /> 中指定的资源不支持序列化。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 是一个长度为零的字符串。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">对于直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXDataNode (string name, System.Resources.ResXFileRef fileRef);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Resources.ResXFileRef fileRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.#ctor(System.String,System.Resources.ResXFileRef)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, fileRef As ResXFileRef)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResXDataNode(System::String ^ name, System::Resources::ResXFileRef ^ fileRef);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResXDataNode : string * System.Resources.ResXFileRef -&gt; System.Resources.ResXDataNode" Usage="new System.Resources.ResXDataNode (name, fileRef)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileRef" Type="System.Resources.ResXFileRef" />
      </Parameters>
      <Docs>
        <param name="name">资源的名称。</param>
        <param name="fileRef">要用作资源的文件引用。</param>
        <summary>使用对资源文件的引用初始化 <see cref="T:System.Resources.ResXDataNode" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 <see langword="null" /> 或 <paramref name="fileRef" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 是一个长度为零的字符串。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">对于直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXDataNode (string name, object value, Func&lt;Type,string&gt; typeNameConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, object value, class System.Func`2&lt;class System.Type, string&gt; typeNameConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.#ctor(System.String,System.Object,System.Func{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As Object, typeNameConverter As Func(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResXDataNode(System::String ^ name, System::Object ^ value, Func&lt;Type ^, System::String ^&gt; ^ typeNameConverter);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResXDataNode : string * obj * Func&lt;Type, string&gt; -&gt; System.Resources.ResXDataNode" Usage="new System.Resources.ResXDataNode (name, value, typeNameConverter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeNameConverter" Type="System.Func&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="name">资源的名称。</param>
        <param name="value">要存储的资源。</param>
        <param name="typeNameConverter">对采用 <see cref="T:System.Type" /> 的方法的引用，并返回包含 <see cref="T:System.Type" /> 名称的字符串。</param>
        <summary>初始化 <see cref="T:System.Resources.ResXDataNode" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="value" /> 中指定的资源不支持序列化。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 是一个长度为零的字符串。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">对于直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXDataNode (string name, System.Resources.ResXFileRef fileRef, Func&lt;Type,string&gt; typeNameConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Resources.ResXFileRef fileRef, class System.Func`2&lt;class System.Type, string&gt; typeNameConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.#ctor(System.String,System.Resources.ResXFileRef,System.Func{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, fileRef As ResXFileRef, typeNameConverter As Func(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResXDataNode(System::String ^ name, System::Resources::ResXFileRef ^ fileRef, Func&lt;Type ^, System::String ^&gt; ^ typeNameConverter);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResXDataNode : string * System.Resources.ResXFileRef * Func&lt;Type, string&gt; -&gt; System.Resources.ResXDataNode" Usage="new System.Resources.ResXDataNode (name, fileRef, typeNameConverter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileRef" Type="System.Resources.ResXFileRef" />
        <Parameter Name="typeNameConverter" Type="System.Func&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="name">资源的名称。</param>
        <param name="fileRef">要用作资源的文件引用。</param>
        <param name="typeNameConverter">对采用 <see cref="T:System.Type" /> 的方法的引用，并返回包含 <see cref="T:System.Type" /> 名称的字符串。</param>
        <summary>使用对资源文件的引用初始化 <see cref="T:System.Resources.ResXDataNode" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 <see langword="null" /> 或 <paramref name="fileRef" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 是一个长度为零的字符串。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">对于直接调用方的完全信任。 此成员不能由部分信任的代码使用。</permission>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResXDataNode.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Comment : string with get, set" Usage="System.Resources.ResXDataNode.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置关于此资源的任意注释。</summary>
        <value>表示注释的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果注释尚未分配到的资源项，值<xref:System.Resources.ResXDataNode.Comment%2A>属性是<xref:System.String.Empty?displayProperty=nameWithType>。  
  
 你访问<xref:System.Resources.ResXDataNode.Comment%2A>通过实例化现有的 XML 资源文件中的数据节点的属性<xref:System.Resources.ResXResourceReader>对象，设置<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A?displayProperty=nameWithType>属性设置为`true`，并调用<xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=nameWithType>方法来检索<xref:System.Collections.IDictionaryEnumerator>用于枚举 XML 资源文件中的项的对象。 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性返回<xref:System.Resources.ResXDataNode>对象。  
  
   
  
## Examples  
 有关示例，请参阅<xref:System.Resources.ResXDataNode>类。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileRef">
      <MemberSignature Language="C#" Value="public System.Resources.ResXFileRef FileRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Resources.ResXFileRef FileRef" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResXDataNode.FileRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileRef As ResXFileRef" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Resources::ResXFileRef ^ FileRef { System::Resources::ResXFileRef ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileRef : System.Resources.ResXFileRef" Usage="System.Resources.ResXDataNode.FileRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.ResXFileRef</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此资源的文件引用。</summary>
        <value>若使用资源，文件的引用。 如果此资源将其值存储为 <see cref="T:System.Object" />，则此属性将返回 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNodePosition">
      <MemberSignature Language="C#" Value="public System.Drawing.Point GetNodePosition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point GetNodePosition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.GetNodePosition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNodePosition () As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point GetNodePosition();" />
      <MemberSignature Language="F#" Value="member this.GetNodePosition : unit -&gt; System.Drawing.Point" Usage="resXDataNode.GetNodePosition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索资源在资源文件中的位置。</summary>
        <returns>以行位置 (<see cref="P:System.Drawing.Point.X" />) 和列位置 <see cref="P:System.Drawing.Point.Y" /> 形式指定此资源在资源文件中的位置的结构。 如果此资源不属于资源文件，则此方法返回一个 <see cref="P:System.Drawing.Point.X" /> 和 <see cref="P:System.Drawing.Point.Y" /> 均为 0 的结构。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索由此节点存储的对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.ComponentModel.Design.ITypeResolutionService typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.ComponentModel.Design.ITypeResolutionService typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.GetValue(System.ComponentModel.Design.ITypeResolutionService)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (typeResolver As ITypeResolutionService) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::ComponentModel::Design::ITypeResolutionService ^ typeResolver);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.ComponentModel.Design.ITypeResolutionService -&gt; obj" Usage="resXDataNode.GetValue typeResolver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeResolver" Type="System.ComponentModel.Design.ITypeResolutionService" />
      </Parameters>
      <Docs>
        <param name="typeResolver">查找类型转换器时要使用的类型解析服务。</param>
        <summary>通过使用指定的类型解决方案服务检索由此节点存储的对象。</summary>
        <returns>与存储值对应的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在内存中当前存在于存储的值，它是直接返回。 如果在资源文件中存储并且不是文件引用，<xref:System.Resources.ResXDataNode.GetValue%2A>寻找<xref:System.ComponentModel.TypeConverter>使用可以从字符串转换为相应的对象的指定的类型解析服务。 如果资源是文件引用，<xref:System.Resources.ResXDataNode.GetValue%2A>尝试反序列化。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">未能找到对应的类型，或者相应的类型转换器不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Reflection.AssemblyName[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Reflection.AssemblyName[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.GetValue(System.Reflection.AssemblyName[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (names As AssemblyName()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(cli::array &lt;System::Reflection::AssemblyName ^&gt; ^ names);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Reflection.AssemblyName[] -&gt; obj" Usage="resXDataNode.GetValue names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.Reflection.AssemblyName[]" />
      </Parameters>
      <Docs>
        <param name="names">要在其中搜索对象类型的程序集列表。</param>
        <summary>通过搜索指定程序集检索由此节点存储的对象。</summary>
        <returns>与存储值对应的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在内存中当前存在于存储的值，它是直接返回。 如果在资源文件中存储并且不是文件引用，<xref:System.Resources.ResXDataNode.GetValue%2A>会查找由名称标识要查找的对象的相应类型的程序集，然后查找<xref:System.ComponentModel.TypeConverter>，可以从字符串转换为相应的对象。 如果资源是文件引用，<xref:System.Resources.ResXDataNode.GetValue%2A>尝试反序列化。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">未能找到对应的类型，或者相应的类型转换器不可用。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValueTypeName">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索值的类型名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValueTypeName">
      <MemberSignature Language="C#" Value="public string GetValueTypeName (System.ComponentModel.Design.ITypeResolutionService typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetValueTypeName(class System.ComponentModel.Design.ITypeResolutionService typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.GetValueTypeName(System.ComponentModel.Design.ITypeResolutionService)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueTypeName (typeResolver As ITypeResolutionService) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetValueTypeName(System::ComponentModel::Design::ITypeResolutionService ^ typeResolver);" />
      <MemberSignature Language="F#" Value="member this.GetValueTypeName : System.ComponentModel.Design.ITypeResolutionService -&gt; string" Usage="resXDataNode.GetValueTypeName typeResolver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeResolver" Type="System.ComponentModel.Design.ITypeResolutionService" />
      </Parameters>
      <Docs>
        <param name="typeResolver">要用来为此类型查找转换器的类型解析服务。</param>
        <summary>通过使用指定的类型解决方案服务检索值的类型名称。</summary>
        <returns>一个字符串，表示类型的完全限定名。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeLoadException">未能找到对应的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValueTypeName">
      <MemberSignature Language="C#" Value="public string GetValueTypeName (System.Reflection.AssemblyName[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetValueTypeName(class System.Reflection.AssemblyName[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.GetValueTypeName(System.Reflection.AssemblyName[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueTypeName (names As AssemblyName()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetValueTypeName(cli::array &lt;System::Reflection::AssemblyName ^&gt; ^ names);" />
      <MemberSignature Language="F#" Value="member this.GetValueTypeName : System.Reflection.AssemblyName[] -&gt; string" Usage="resXDataNode.GetValueTypeName names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.Reflection.AssemblyName[]" />
      </Parameters>
      <Docs>
        <param name="names">要检查类型的程序集。</param>
        <summary>通过检查指定的程序集检索值的类型名称。</summary>
        <returns>一个字符串，表示类型的完全限定名。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeLoadException">未能找到对应的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResXDataNode.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Resources.ResXDataNode.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此资源的名称。</summary>
        <value>对应于资源名称的字符串。 如果未指定任何名称，则此属性返回一个零长度字符串。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">名称属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">名称属性设置为一个长度为零的字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXDataNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">要填充数据的对象。</param>
        <param name="context">此序列化的目标。</param>
        <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Resources.ResXDataNode> 实例强制转换为 <xref:System.Runtime.Serialization.ISerializable> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>