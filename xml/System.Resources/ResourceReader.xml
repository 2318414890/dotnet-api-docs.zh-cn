<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="682738b4136d074223cbe025a9380b3cca9bc1d0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480251" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ef99f-101">通过读取顺序资源名称/值对枚举二进制资源 (.resources) 文件的资源。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef99f-101">Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</span>
      </span>
      <span data-ttu-id="ef99f-102">安全说明：带有不受信任的数据的此类中的调用数据方法存在安全风险。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef99f-102">**Security Note**: Calling methods in this class with untrusted data is a security risk.</span>
      </span>
      <span data-ttu-id="ef99f-103">仅在受信任的数据类中调用方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef99f-103">Call the methods in the class only with trusted data.</span>
      </span>
      <span data-ttu-id="ef99f-104">有关详细信息，请参阅 [不受信任数据的安全风险](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef99f-104">For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-105"><xref:System.Resources.ResourceReader>类提供的标准实现<xref:System.Resources.IResourceReader>接口。</span><span class="sxs-lookup"><span data-stu-id="ef99f-105">The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface.</span></span> <span data-ttu-id="ef99f-106">A<xref:System.Resources.ResourceReader>实例表示独立的.resources 文件或嵌入到程序集中的.resources 文件。</span><span class="sxs-lookup"><span data-stu-id="ef99f-106">A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="ef99f-107">它用来枚举.resources 文件中的资源和检索其名称/值对。</span><span class="sxs-lookup"><span data-stu-id="ef99f-107">It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</span></span> <span data-ttu-id="ef99f-108">它不同于<xref:System.Resources.ResourceManager>类，用于从嵌入到程序集中的.resources 文件中检索指定的命名的资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-108">It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="ef99f-109"><xref:System.Resources.ResourceManager>类用于检索的资源名称事先已知的而<xref:System.Resources.ResourceReader>类可用于检索在编译时不知道其数或准确名称的资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-109">The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time.</span></span> <span data-ttu-id="ef99f-110">例如，应用程序可能使用的资源文件来存储被组织成各个部分，并在部分中，其中事先不知道部分或部分中的项的数量的项的配置信息。</span><span class="sxs-lookup"><span data-stu-id="ef99f-110">For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</span></span> <span data-ttu-id="ef99f-111">然后可以以一般方式命名资源 (如`Section1`， `Section1Item1`， `Section1Item2`，依次类推) 并通过使用检索<xref:System.Resources.ResourceReader>对象。</span><span class="sxs-lookup"><span data-stu-id="ef99f-111">Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a <xref:System.Resources.ResourceReader> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef99f-112">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="ef99f-112">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ef99f-113">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="ef99f-113">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ef99f-114">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="ef99f-114">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ef99f-115">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="ef99f-115">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ef99f-116">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="ef99f-116">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="ef99f-117">有关使用<xref:System.Resources.ResourceReader>类，请参阅以下各节：</span><span class="sxs-lookup"><span data-stu-id="ef99f-117">For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="ef99f-118">实例化 ResourceReader 对象</span><span class="sxs-lookup"><span data-stu-id="ef99f-118">Instantiating a ResourceReader object</span></span>](#instantiate)  
  
-   [<span data-ttu-id="ef99f-119">枚举 ResourceReader 对象的资源</span><span class="sxs-lookup"><span data-stu-id="ef99f-119">Enumerating a ResourceReader object's resources</span></span>](#enumerate)  
  
    -   [<span data-ttu-id="ef99f-120">通过使用 IDictionaryEnumerator 属性检索资源</span><span class="sxs-lookup"><span data-stu-id="ef99f-120">Retrieving resources by using IDictionaryEnumerator properties</span></span>](#idictionaryenumerator)  
  
    -   [<span data-ttu-id="ef99f-121">通过名称和 GetResourceData 检索资源</span><span class="sxs-lookup"><span data-stu-id="ef99f-121">Retrieving resources by name with GetResourceData</span></span>](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a><span data-ttu-id="ef99f-122">实例化 ResourceReader 对象</span><span class="sxs-lookup"><span data-stu-id="ef99f-122">Instantiating a ResourceReader Object</span></span>  
 <span data-ttu-id="ef99f-123">.Resources 文件是从文本文件或 XML.resx 文件的已编译的二进制文件[Resgen.exe （资源文件生成器）](~/docs/framework/tools/resgen-exe-resource-file-generator.md)。</span><span class="sxs-lookup"><span data-stu-id="ef99f-123">A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md).</span></span> <span data-ttu-id="ef99f-124">A<xref:System.Resources.ResourceReader>对象可以表示独立的.resources 文件或嵌入到程序集中的.resources 文件。</span><span class="sxs-lookup"><span data-stu-id="ef99f-124">A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</span></span>  
  
 <span data-ttu-id="ef99f-125">若要实例化<xref:System.Resources.ResourceReader>对象读取从单独的.resources 文件，使用<xref:System.Resources.ResourceReader>类构造函数的输入的流或包含的.resources 文件名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="ef99f-125">To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name.</span></span> <span data-ttu-id="ef99f-126">下面的示例阐释了这两种方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-126">The following example illustrates both approaches.</span></span> <span data-ttu-id="ef99f-127">第一个实例化<xref:System.Resources.ResourceReader>对象，表示名为的.resources 文件`Resources1.resources`通过使用其文件名称。</span><span class="sxs-lookup"><span data-stu-id="ef99f-127">The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name.</span></span> <span data-ttu-id="ef99f-128">第二个实例化<xref:System.Resources.ResourceReader>对象，表示名为的.resources 文件`Resources2.resources`通过使用从文件创建一个流。</span><span class="sxs-lookup"><span data-stu-id="ef99f-128">The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 <span data-ttu-id="ef99f-129">若要创建<xref:System.Resources.ResourceReader>表示嵌入的.resources 文件中，对象实例化<xref:System.Reflection.Assembly>从程序集中嵌入.resources 文件，则在其中的对象。</span><span class="sxs-lookup"><span data-stu-id="ef99f-129">To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded.</span></span> <span data-ttu-id="ef99f-130">其<xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType>方法返回<xref:System.IO.Stream>对象，可传递给<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="ef99f-130">Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="ef99f-131">下面的示例实例化<xref:System.Resources.ResourceReader>表示嵌入的.resources 文件的对象。</span><span class="sxs-lookup"><span data-stu-id="ef99f-131">The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a><span data-ttu-id="ef99f-132">枚举 ResourceReader 对象的资源</span><span class="sxs-lookup"><span data-stu-id="ef99f-132">Enumerating a ResourceReader Object's Resources</span></span>  
 <span data-ttu-id="ef99f-133">若要枚举的.resources 文件中的资源，你可以调用<xref:System.Resources.ResourceReader.GetEnumerator%2A>方法，它返回<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>对象。</span><span class="sxs-lookup"><span data-stu-id="ef99f-133">To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="ef99f-134">你调用`IDictionaryEnumerator.MoveNext`方法将从一个资源移到下一步。</span><span class="sxs-lookup"><span data-stu-id="ef99f-134">You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next.</span></span> <span data-ttu-id="ef99f-135">该方法返回`false`.resources 文件中的所有资源具有在已都枚举。</span><span class="sxs-lookup"><span data-stu-id="ef99f-135">The method returns `false` when all the resources in the .resources file have been enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef99f-136">尽管<xref:System.Resources.ResourceReader>类实现<xref:System.Collections.IEnumerable>接口和<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>方法，<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>方法不提供<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>实现。</span><span class="sxs-lookup"><span data-stu-id="ef99f-136">Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="ef99f-137">相反，<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>方法返回<xref:System.Collections.IDictionaryEnumerator>接口提供对每个资源的名称/值对的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="ef99f-137">Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.</span></span>  
  
 <span data-ttu-id="ef99f-138">你可以检索两种方式集合中的单个资源：</span><span class="sxs-lookup"><span data-stu-id="ef99f-138">You can retrieve the individual resources in the collection in two ways:</span></span>  
  
-   <span data-ttu-id="ef99f-139">可循环中的每个资源<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>收集和使用<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>要检索的资源名称和值的属性。</span><span class="sxs-lookup"><span data-stu-id="ef99f-139">You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> properties to retrieve the resource name and value.</span></span> <span data-ttu-id="ef99f-140">所有资源都是相同的类型，或你知道每个资源的数据类型时，我们建议此技术。</span><span class="sxs-lookup"><span data-stu-id="ef99f-140">We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</span></span>  
  
-   <span data-ttu-id="ef99f-141">你可以检索每个资源的名称，当循环访问<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>集合并调用<xref:System.Resources.ResourceReader.GetResourceData%2A>方法来检索资源的数据。</span><span class="sxs-lookup"><span data-stu-id="ef99f-141">You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data.</span></span> <span data-ttu-id="ef99f-142">我们建议这种方法，你不知道每个资源的数据类型时或如果前一方法引发异常。</span><span class="sxs-lookup"><span data-stu-id="ef99f-142">We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</span></span>  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a><span data-ttu-id="ef99f-143">通过使用 IDictionaryEnumerator 属性检索资源</span><span class="sxs-lookup"><span data-stu-id="ef99f-143">Retrieving Resources by Using IDictionaryEnumerator Properties</span></span>  
 <span data-ttu-id="ef99f-144">枚举中的.resources 文件的资源的第一种方法涉及直接检索每个资源的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="ef99f-144">The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</span></span> <span data-ttu-id="ef99f-145">调用后`IDictionaryEnumerator.MoveNext`方法将移到每个资源在集合中，你可以检索资源名称从<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>属性和资源数据从<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="ef99f-145">After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="ef99f-146">下面的示例演示如何通过使用检索的名称和值的.resources 文件中的每个资源<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>和<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="ef99f-146">The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="ef99f-147">若要运行该示例，请创建名为 ApplicationResources.txt 来定义字符串资源的以下文本文件。</span><span class="sxs-lookup"><span data-stu-id="ef99f-147">To run the example, create the following text file named ApplicationResources.txt to define string resources.</span></span>  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 <span data-ttu-id="ef99f-148">然后可以将文本资源文件转换为二进制文件名 ApplicationResources.resources 为通过使用以下命令：</span><span class="sxs-lookup"><span data-stu-id="ef99f-148">You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</span></span>  
  
 <span data-ttu-id="ef99f-149">**resgen ApplicationResources.txt**</span><span class="sxs-lookup"><span data-stu-id="ef99f-149">**resgen ApplicationResources.txt**</span></span>  
  
 <span data-ttu-id="ef99f-150">下面的示例然后使用<xref:System.Resources.ResourceReader>类枚举独立二进制.resources 文件中的每个资源，并显示其密钥名称和相应的值。</span><span class="sxs-lookup"><span data-stu-id="ef99f-150">The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <span data-ttu-id="ef99f-151">尝试检索中的资源数据<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性可能会引发以下异常：</span><span class="sxs-lookup"><span data-stu-id="ef99f-151">The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property can throw the following exceptions:</span></span>  
  
-   <span data-ttu-id="ef99f-152">A<xref:System.FormatException>如果数据不是预期格式。</span><span class="sxs-lookup"><span data-stu-id="ef99f-152">A <xref:System.FormatException> if the data is not in the expected format.</span></span>  
  
-   <span data-ttu-id="ef99f-153">A<xref:System.IO.FileNotFoundException>如果找不到包含数据所属的类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="ef99f-153">A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <span data-ttu-id="ef99f-154">A<xref:System.TypeLoadException>数据所属的类型不能为如果找不到。</span><span class="sxs-lookup"><span data-stu-id="ef99f-154">A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.</span></span>  
  
 <span data-ttu-id="ef99f-155">通常情况下，将引发这些异常，如果定义了一个类型的程序集不包含与应用程序了或已被无意中删除，如果已手动修改.resources 文件或程序集是早于较旧版本一种类型。</span><span class="sxs-lookup"><span data-stu-id="ef99f-155">Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</span></span> <span data-ttu-id="ef99f-156">如果引发这些异常之一，您可以通过枚举每个资源和调用来检索资源<xref:System.Resources.ResourceReader.GetResourceData%2A>方法，如以下部分所示。</span><span class="sxs-lookup"><span data-stu-id="ef99f-156">If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows.</span></span> <span data-ttu-id="ef99f-157">此方法提供了您提供一些信息有关的数据类型<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>尝试返回的属性。</span><span class="sxs-lookup"><span data-stu-id="ef99f-157">This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property attempted to return.</span></span>  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a><span data-ttu-id="ef99f-158">通过名称和 GetResourceData 检索资源</span><span class="sxs-lookup"><span data-stu-id="ef99f-158">Retrieving Resources by Name with GetResourceData</span></span>  
 <span data-ttu-id="ef99f-159">枚举中的.resources 文件的资源的第二个方法也需要通过调用在文件中的资源导航`IDictionaryEnumerator.MoveNext`方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-159">The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method.</span></span> <span data-ttu-id="ef99f-160">对于每个资源，检索该资源的名称从<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>属性，然后传递给<xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29>方法来检索资源的数据。</span><span class="sxs-lookup"><span data-stu-id="ef99f-160">For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data.</span></span> <span data-ttu-id="ef99f-161">这作为字节数组中返回`resourceData`自变量。</span><span class="sxs-lookup"><span data-stu-id="ef99f-161">This is returned as a byte array in the `resourceData` argument.</span></span>  
  
 <span data-ttu-id="ef99f-162">这种方法是比检索的资源名称和值从更繁琐<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>和<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性，因为它返回窗体中的资源值的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="ef99f-162">This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties, because it returns the actual bytes that form the resource value.</span></span> <span data-ttu-id="ef99f-163">但是，如果尝试以检索资源引发异常，<xref:System.Resources.ResourceReader.GetResourceData%2A>方法可以帮助确定异常的源的通过提供有关资源的数据类型的信息。</span><span class="sxs-lookup"><span data-stu-id="ef99f-163">However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type.</span></span> <span data-ttu-id="ef99f-164">表示资源的数据类型的字符串的详细信息，请参阅<xref:System.Resources.ResourceReader.GetResourceData%2A>。</span><span class="sxs-lookup"><span data-stu-id="ef99f-164">For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span></span>  
  
 <span data-ttu-id="ef99f-165">下面的示例演示如何使用这种方法来检索资源并处理引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="ef99f-165">The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</span></span> <span data-ttu-id="ef99f-166">它以编程方式创建包含四个字符串、 一个布尔值、 一个整数，一个位图和一个自定义的二进制.resources 文件`DateTimeTZI`对象。</span><span class="sxs-lookup"><span data-stu-id="ef99f-166">It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object.</span></span> <span data-ttu-id="ef99f-167">若要运行该示例，请执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="ef99f-167">To run the example, do the following:</span></span>  
  
1.  <span data-ttu-id="ef99f-168">创建名为 Library.dll 包含程序集`DateTimeTZI`结构。</span><span class="sxs-lookup"><span data-stu-id="ef99f-168">Create an assembly named Library.dll that contains the `DateTimeTZI` structure.</span></span> <span data-ttu-id="ef99f-169">下面是程序集的源代码。</span><span class="sxs-lookup"><span data-stu-id="ef99f-169">The following is the source code for the assembly.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     <span data-ttu-id="ef99f-170">通过使用以下命令来编译 C# 中的源代码：</span><span class="sxs-lookup"><span data-stu-id="ef99f-170">Compile the source code in C# by using the following command:</span></span>  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     <span data-ttu-id="ef99f-171">或者，你可以对其进行编译 Visual Basic 中使用以下命令：</span><span class="sxs-lookup"><span data-stu-id="ef99f-171">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  <span data-ttu-id="ef99f-172">编译并执行下面的源代码，这将创建一个名为 ContactResources.resources 的.resources 文件。</span><span class="sxs-lookup"><span data-stu-id="ef99f-172">Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     <span data-ttu-id="ef99f-173">源代码文件是名为 CreateResources.cs。</span><span class="sxs-lookup"><span data-stu-id="ef99f-173">The source code file is named CreateResources.cs.</span></span> <span data-ttu-id="ef99f-174">你可编译它在 C# 中使用以下命令：</span><span class="sxs-lookup"><span data-stu-id="ef99f-174">You can compile it in C# by using the following command:</span></span>  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     <span data-ttu-id="ef99f-175">或者，你可以对其进行编译 Visual Basic 中使用以下命令：</span><span class="sxs-lookup"><span data-stu-id="ef99f-175">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  <span data-ttu-id="ef99f-176">编译并运行以下代码以枚举 ContactResources.resources 文件中的资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-176">Compile and run the following code to enumerate the resources in the ContactResources.resources file.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     <span data-ttu-id="ef99f-177">修改了源代码后 (例如，通过有意引发<xref:System.FormatException>末尾`try`块) 或者重命名 Library.dll 程序集，以便在运行时不可用，你可以运行示例，以了解如何调用<xref:System.Resources.ResourceReader.GetResourceData%2A>使您能够检索或重新创建某些资源信息。</span><span class="sxs-lookup"><span data-stu-id="ef99f-177">After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef99f-178">初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-178">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef99f-179">将此对象的实例与不受信任的数据一起使用存在安全风险。</span><span class="sxs-lookup"><span data-stu-id="ef99f-179">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="ef99f-180">此对象仅使用受信任的数据。</span><span class="sxs-lookup"><span data-stu-id="ef99f-180">Use this object only with trusted data.</span></span> <span data-ttu-id="ef99f-181">有关详细信息，请参阅[数据验证](https://www.owasp.org/index.php/Data_Validation)。</span><span class="sxs-lookup"><span data-stu-id="ef99f-181">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="ef99f-182">用于读取资源的输入流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-182">The input stream for reading resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef99f-183">为指定的流初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-183">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-184"><xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>构造函数实例化<xref:System.Resources.ResourceReader>检索从独立的.resources 文件或从.resources 文件的资源的对象嵌入到程序集中。</span><span class="sxs-lookup"><span data-stu-id="ef99f-184">The <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="ef99f-185">若要从独立.resources 文件中读取，实例化<xref:System.IO.Stream>对象，并将其传递到<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="ef99f-185">To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="ef99f-186">若要从嵌入的.resources 文件中读取，调用<xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType>.resources 文件，并传入返回区分大小写的同名方法<xref:System.IO.Stream>对象传递给<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="ef99f-186">To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef99f-187">将此对象的实例与不受信任的数据一起使用存在安全风险。</span><span class="sxs-lookup"><span data-stu-id="ef99f-187">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="ef99f-188">此对象仅使用受信任的数据。</span><span class="sxs-lookup"><span data-stu-id="ef99f-188">Use this object only with trusted data.</span></span> <span data-ttu-id="ef99f-189">有关详细信息，请参阅[数据验证](https://www.owasp.org/index.php/Data_Validation)。</span><span class="sxs-lookup"><span data-stu-id="ef99f-189">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef99f-190">本部分中的示例使用名为的以下.txt 文件`PatientForm.txt`来定义应用程序使用的资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-190">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="ef99f-191">通过发出以下命令，可以编译为.resources 文件的.txt 文件：</span><span class="sxs-lookup"><span data-stu-id="ef99f-191">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="ef99f-192">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="ef99f-192">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="ef99f-193">下面的示例假定资源文件嵌入包含应用程序的可执行代码的程序集。</span><span class="sxs-lookup"><span data-stu-id="ef99f-193">The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</span></span> <span data-ttu-id="ef99f-194">它将检索名为的资源文件`PatientForm.resources`从当前正在执行的程序集，并显示名称和值的每个及其资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-194">It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 <span data-ttu-id="ef99f-195">如果名为 C# 示例`Example.cs`，你可以通过使用以下命令对其进行编译：</span><span class="sxs-lookup"><span data-stu-id="ef99f-195">If the C# example is named `Example.cs`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="ef99f-196">**csc Example.cs /res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="ef99f-196">**csc Example.cs /res:PatientForm.resources**</span></span>  
  
 <span data-ttu-id="ef99f-197">如果名为 Visual Basic 示例`Example.vb`，你可以通过使用以下命令对其进行编译：</span><span class="sxs-lookup"><span data-stu-id="ef99f-197">If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="ef99f-198">**vbc Example.vb /res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="ef99f-198">**vbc Example.vb /res:PatientForm.resources**</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef99f-199">
            <paramref name="stream" /> 参数不可读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-199">The <paramref name="stream" /> parameter is not readable.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef99f-200">
            <paramref name="stream" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-200">The <paramref name="stream" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ef99f-201">在访问 <paramref name="stream" /> 时发生 I/O 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-201">An I/O error has occurred while accessing <paramref name="stream" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ef99f-202">用于提供序列化服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-202">for providing serialization services.</span>
          </span>
          <span data-ttu-id="ef99f-203">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-203">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="ef99f-204">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-204">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ef99f-205">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-205">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ef99f-206">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-206">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="ef99f-207">要读取的源文件的路径及名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-207">The path and name of the resource file to read.</span>
          </span>
          <span data-ttu-id="ef99f-208">文件名<c></c>不区分大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-208">
              <c>filename</c> is not case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef99f-209">为指定的资源文件初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-209">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified named resource file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-210"><xref:System.Resources.ResourceReader.%23ctor%28System.String%29>构造函数实例化<xref:System.Resources.ResourceReader>从独立的.resources 文件中检索资源的对象。</span><span class="sxs-lookup"><span data-stu-id="ef99f-210">The <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file.</span></span> <span data-ttu-id="ef99f-211">若要从嵌入的.resources 文件中检索资源，请使用<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="ef99f-211">To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef99f-212">将此对象的实例与不受信任的数据一起使用存在安全风险。</span><span class="sxs-lookup"><span data-stu-id="ef99f-212">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="ef99f-213">此对象仅使用受信任的数据。</span><span class="sxs-lookup"><span data-stu-id="ef99f-213">Use this object only with trusted data.</span></span> <span data-ttu-id="ef99f-214">有关详细信息，请参阅[数据验证](https://www.owasp.org/index.php/Data_Validation)。</span><span class="sxs-lookup"><span data-stu-id="ef99f-214">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef99f-215">本部分中的示例使用名为的以下.txt 文件`PatientForm.txt`来定义应用程序使用的资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-215">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="ef99f-216">通过发出以下命令，可以编译为.resources 文件的此.txt 文件：</span><span class="sxs-lookup"><span data-stu-id="ef99f-216">You can compile this .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="ef99f-217">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="ef99f-217">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="ef99f-218">下面的示例枚举中的资源`PatientForm.resources`并显示名称和每个值。</span><span class="sxs-lookup"><span data-stu-id="ef99f-218">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef99f-219">
            <paramref name="fileName" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-219">The <paramref name="fileName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="ef99f-220">无法找到该文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-220">The file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ef99f-221">发生了 I/O 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-221">An I/O error has occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef99f-222">资源文件的格式无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-222">The resource file has an invalid format.</span>
          </span>
          <span data-ttu-id="ef99f-223">例如，文件的长度可能为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-223">For example, the length of the file may be zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef99f-224">释放与此 <see cref="T:System.Resources.ResourceReader" /> 对象相关联的所有操作系统资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-224">Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-225"><xref:System.Resources.ResourceReader.Close%2A> 可以安全地调用多次。</span><span class="sxs-lookup"><span data-stu-id="ef99f-225"><xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef99f-226">下面的示例都将通过文件的资源，并显示它找到的所有键/值对。</span><span class="sxs-lookup"><span data-stu-id="ef99f-226">The following example moves through a file's resources and displays all the key/value pairs it finds.</span></span> <span data-ttu-id="ef99f-227">该代码将使用<xref:System.Resources.ResourceReader.Close%2A>方法来关闭<xref:System.Resources.ResourceReader>并释放由它的所有资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-227">The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef99f-228">释放 <see cref="T:System.Resources.ResourceReader" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-228">Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-229">在完成使用的此实例时<xref:System.Resources.ResourceReader>，调用<xref:System.Resources.ResourceReader.Dispose%2A>释放此实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-229">When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance.</span></span> <span data-ttu-id="ef99f-230">你应该可以消除进一步引用到此<xref:System.Resources.ResourceReader>实例，以便垃圾回收器才能回收而不是保留它终止的实例的内存。</span><span class="sxs-lookup"><span data-stu-id="ef99f-230">You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</span></span>  
  
 <span data-ttu-id="ef99f-231"><xref:System.Resources.ResourceReader.Dispose%2A> 调用私有 dispose （boolean） 方法，其中包含要释放托管和非托管资源的代码。</span><span class="sxs-lookup"><span data-stu-id="ef99f-231"><xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</span></span> <span data-ttu-id="ef99f-232">有关详细信息，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="ef99f-232">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef99f-233">返回此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-233">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef99f-234">此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-234">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-235">通常情况下，通过调用枚举资源<xref:System.Resources.ResourceReader.GetEnumerator%2A>方法，然后重复调用<xref:System.Collections.IEnumerator.MoveNext%2A>方法返回<xref:System.Collections.IDictionaryEnumerator>对象，直到该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="ef99f-235">Typically, you enumerate resources by calling the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`.</span></span> <span data-ttu-id="ef99f-236">资源名称是否可从<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>属性; 其值从<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="ef99f-236">The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="ef99f-237">该示例说明如何枚举这种方式中的资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-237">The example illustrates how to enumerate resources in this way.</span></span>  
  
 <span data-ttu-id="ef99f-238">实现<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>属性<xref:System.Resources.ResourceReader>类可以引发以下异常：</span><span class="sxs-lookup"><span data-stu-id="ef99f-238">The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:</span></span>  
  
-   <xref:System.IO.FileNotFoundException>  
  
     <span data-ttu-id="ef99f-239">找不到包含数据所属的类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="ef99f-239">The assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <xref:System.FormatException>  
  
     <span data-ttu-id="ef99f-240">数据不是预期格式。</span><span class="sxs-lookup"><span data-stu-id="ef99f-240">The data is not in the expected format.</span></span>  
  
-   <xref:System.TypeLoadException>  
  
     <span data-ttu-id="ef99f-241">找不到数据所属的类型。</span><span class="sxs-lookup"><span data-stu-id="ef99f-241">The type to which the data belongs cannot be found.</span></span>  
  
 <span data-ttu-id="ef99f-242">可以通过调用处理的异常<xref:System.Resources.ResourceReader.GetResourceData%2A>方法来检索有关的数据类型和分配给该命名的资源的字节数组的信息。</span><span class="sxs-lookup"><span data-stu-id="ef99f-242">You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource.</span></span> <span data-ttu-id="ef99f-243">有关详细信息，请参阅中的"检索资源的名称与 GetResourceData"一节<xref:System.Resources.ResourceReader>类主题。</span><span class="sxs-lookup"><span data-stu-id="ef99f-243">For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <xref:System.Resources.ResourceReader> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef99f-244"><xref:System.Resources.ResourceReader>类包括返回枚举器的两个方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-244">The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators.</span></span> <span data-ttu-id="ef99f-245"><xref:System.Resources.ResourceReader.GetEnumerator%2A>方法返回<xref:System.Collections.IDictionaryEnumerator>接口对象，并在调用时的推荐的方法枚举资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-245">The <xref:System.Resources.ResourceReader.GetEnumerator%2A> method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef99f-246">本部分中的示例使用名为的以下.txt 文件`PatientForm.txt`来定义应用程序使用的资源。</span><span class="sxs-lookup"><span data-stu-id="ef99f-246">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="ef99f-247">通过发出以下命令，可以编译为.resources 文件的.txt 文件：</span><span class="sxs-lookup"><span data-stu-id="ef99f-247">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="ef99f-248">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="ef99f-248">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="ef99f-249">下面的示例枚举中的资源`PatientForm.resources`并显示名称和每个值。</span><span class="sxs-lookup"><span data-stu-id="ef99f-249">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef99f-250">读取器已关闭或释放，因此无法访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-250">The reader has been closed or disposed, and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">
          <span data-ttu-id="ef99f-251">资源的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-251">The name of a resource.</span>
          </span>
        </param>
        <param name="resourceType">
          <span data-ttu-id="ef99f-252">当此方法返回时，包含表示检索资源的类型名称的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-252">When this method returns, contains a string that represents the type name of the retrieved resource.</span>
          </span>
          <span data-ttu-id="ef99f-253">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-253">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="resourceData">
          <span data-ttu-id="ef99f-254">此方法返回时，包含一个字节数组，该字节数组为所检索类型的二进制表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-254">When this method returns, contains a byte array that is the binary representation of the retrieved type.</span>
          </span>
          <span data-ttu-id="ef99f-255">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-255">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef99f-256">从打开的资源文件或流检索指定资源的类型名称和数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-256">Retrieves the type name and data of a named resource from an open resource file or stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-257"><xref:System.Resources.ResourceReader.GetResourceData%2A>方法检索作为字节数组的已命名资源的值。</span><span class="sxs-lookup"><span data-stu-id="ef99f-257">The <xref:System.Resources.ResourceReader.GetResourceData%2A> method retrieves the value of a named resource as a byte array.</span></span> <span data-ttu-id="ef99f-258">它通常是时使用<xref:System.Collections.IDictionaryEnumerator.Value%2A>属性在它试图检索资源的值时引发异常。</span><span class="sxs-lookup"><span data-stu-id="ef99f-258">It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.</span></span>  
  
 <span data-ttu-id="ef99f-259">`resourceType` 是一个字符串，表示资源的数据类型。</span><span class="sxs-lookup"><span data-stu-id="ef99f-259">`resourceType` is a string that represents the data type of the resource.</span></span> <span data-ttu-id="ef99f-260">它可以是任何以下值：</span><span class="sxs-lookup"><span data-stu-id="ef99f-260">It can be any of the following values:</span></span>  
  
-   <span data-ttu-id="ef99f-261">字符串表示形式`ResourceTypeCode`指示该资源的数据类型的枚举成员。</span><span class="sxs-lookup"><span data-stu-id="ef99f-261">The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource.</span></span> <span data-ttu-id="ef99f-262">`ResourceTypeCode` 是的。 若要使用的私有枚举指示特殊的二进制格式用于存储 19 常见数据类型之一。</span><span class="sxs-lookup"><span data-stu-id="ef99f-262">`ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</span></span> <span data-ttu-id="ef99f-263">其中包括.NET Framework 基元数据类型 (<xref:System.Boolean>， <xref:System.Byte>， <xref:System.Char>， <xref:System.Decimal>， <xref:System.Double>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.Int64>， <xref:System.Single>， <xref:System.SByte>， <xref:System.UInt16>， <xref:System.UInt32>， <xref:System.UInt64>)，以及<xref:System.String>， <xref:System.DateTime>，和<xref:System.TimeSpan>，此外，`ResourceTypeCode`枚举包括下表中显示的值。</span><span class="sxs-lookup"><span data-stu-id="ef99f-263">These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.</span></span>  
  
    |<span data-ttu-id="ef99f-264">ResourceTypeCode value</span><span class="sxs-lookup"><span data-stu-id="ef99f-264">ResourceTypeCode value</span></span>|<span data-ttu-id="ef99f-265">描述</span><span class="sxs-lookup"><span data-stu-id="ef99f-265">Description</span></span>|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|<span data-ttu-id="ef99f-266">数据为字节数组。</span><span class="sxs-lookup"><span data-stu-id="ef99f-266">The data is a byte array.</span></span> <span data-ttu-id="ef99f-267">此数据类型通常从调用的结果<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-267">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> method.</span></span>|  
    |`ResourceTypeCode.Null`|<span data-ttu-id="ef99f-268">数据为空引用。</span><span class="sxs-lookup"><span data-stu-id="ef99f-268">The data is a null reference.</span></span> <span data-ttu-id="ef99f-269">此数据类型通常从调用的结果<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType>方法与一个对象，其值是`null`。</span><span class="sxs-lookup"><span data-stu-id="ef99f-269">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> method with an object whose value is `null`.</span></span>|  
    |`ResourceTypeCode.Stream`|<span data-ttu-id="ef99f-270">数据存储在流中。</span><span class="sxs-lookup"><span data-stu-id="ef99f-270">The data is stored in a stream.</span></span> <span data-ttu-id="ef99f-271">此数据类型通常从调用的结果<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType>或<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-271">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> method.</span></span>|  
  
     <span data-ttu-id="ef99f-272">假设`resourceData`尚未被损坏，它通常可转换从字节数组返回到其原始值通过调用<xref:System.BitConverter>或<xref:System.IO.BinaryReader>方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-272">Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.</span></span>  
  
-   <span data-ttu-id="ef99f-273">包含其序列化的数据分配到的类型的完全限定的名称的字符串`resourceData`自变量 (例如， `System.String`)。</span><span class="sxs-lookup"><span data-stu-id="ef99f-273">A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`).</span></span> <span data-ttu-id="ef99f-274">此外，对于不是.NET Framework 类库的一部分的类型，该字符串包括名称、 版本、 区域性和公钥的包含类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="ef99f-274">In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</span></span> <span data-ttu-id="ef99f-275">例如，以下字符串指示序列化的数据表示的实例`Person`键入`Extensions`命名空间，在名为具有没有公用密钥和任何指定的区域性的实用工具程序集的版本 1.0 中找到。</span><span class="sxs-lookup"><span data-stu-id="ef99f-275">For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</span></span>  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     <span data-ttu-id="ef99f-276">假设`resourceData`未损坏，以及源类型是否可用，`resourceData`可转换从字节数组返回到其原始值通过将转换到的字节数组<xref:System.IO.Stream>对象并将流传递给<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-276">Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="ef99f-277">用于描述中的数据类型的字符串<xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType>方法调用。</span><span class="sxs-lookup"><span data-stu-id="ef99f-277">The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef99f-278">
            <paramref name="resourceName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-278">
              <paramref name="resourceName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef99f-279">
            <paramref name="resourceName" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-279">
              <paramref name="resourceName" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef99f-280">
            <paramref name="resourceName" /> 具有无效的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-280">
              <paramref name="resourceName" /> has an invalid type.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="ef99f-281">检索的资源数据已损坏。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-281">The retrieved resource data is corrupt.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef99f-282">当前 <see cref="T:System.Resources.ResourceReader" /> 对象未初始化，可能因其已被关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-282">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized, probably because it is closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef99f-283">返回此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-283">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef99f-284">此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-284">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef99f-285"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> 是显式接口实现。</span><span class="sxs-lookup"><span data-stu-id="ef99f-285"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> is an explicit interface implementation.</span></span> <span data-ttu-id="ef99f-286">它只能在 <xref:System.Resources.ResourceReader> 实例强制转换为 <xref:System.Collections.IEnumerable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="ef99f-286">It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="ef99f-287">枚举中的.resources 文件的资源的建议的方法是调用<xref:System.Collections.IEnumerator.MoveNext%2A>方法<xref:System.Collections.IDictionaryEnumerator>返回对象<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ef99f-287">The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef99f-288">读取器已关闭，并且无法访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef99f-288">The reader has already been closed and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>