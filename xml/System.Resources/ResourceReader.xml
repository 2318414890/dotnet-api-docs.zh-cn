<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResourceReader.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5682738b4136d074223cbe025a9380b3cca9bc1d0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">682738b4136d074223cbe025a9380b3cca9bc1d0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</source>
          <target state="translated">通过读取顺序资源名称/值对枚举二进制资源 (.resources) 文件的资源。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated">安全说明：带有不受信任的数据的此类中的调用数据方法存在安全风险。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">仅在受信任的数据类中调用方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">有关详细信息，请参阅 <bpt id="p1">[</bpt>不受信任数据的安全风险<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class provides a standard implementation of the <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>类提供的标准实现<ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>实例表示独立的.resources 文件或嵌入到程序集中的.resources 文件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</source>
          <target state="translated">它用来枚举.resources 文件中的资源和检索其名称/值对。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It differs from the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</source>
          <target state="translated">它不同于<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>类，用于从嵌入到程序集中的.resources 文件中检索指定的命名的资源。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is used to retrieve resources whose names are known in advance, whereas the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class is useful for retrieving resources whose number or precise names are not known at compile time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>类用于检索的资源名称事先已知的而<ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph>类可用于检索在编译时不知道其数或准确名称的资源。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</source>
          <target state="translated">例如，应用程序可能使用的资源文件来存储被组织成各个部分，并在部分中，其中事先不知道部分或部分中的项的数量的项的配置信息。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Resources can then be named generically (such as <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>, and so on) and retrieved by using a <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> object.</source>
          <target state="translated">然后可以以一般方式命名资源 (如<ph id="ph1">`Section1`</ph>， <ph id="ph2">`Section1Item1`</ph>， <ph id="ph3">`Section1Item2`</ph>，依次类推) 并通过使用检索<ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此类型实现<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">在使用完类型后，您应直接或间接释放类型。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>中的方法<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>块。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，请使用 <ph id="ph1">`using`</ph>（在 C# 中）或 <ph id="ph2">`Using`</ph>（在 Visual Basic 中）等语言构造。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口主题。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about using the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class, see the following sections:</source>
          <target state="translated">有关使用<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>类，请参阅以下各节：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Instantiating a ResourceReader object<ept id="p1">](#instantiate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>实例化 ResourceReader 对象<ept id="p1">](#instantiate)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Enumerating a ResourceReader object's resources<ept id="p1">](#enumerate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>枚举 ResourceReader 对象的资源<ept id="p1">](#enumerate)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by using IDictionaryEnumerator properties<ept id="p1">](#idictionaryenumerator)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>通过使用 IDictionaryEnumerator 属性检索资源<ept id="p1">](#idictionaryenumerator)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by name with GetResourceData<ept id="p1">](#getresourcedata)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>通过名称和 GetResourceData 检索资源<ept id="p1">](#getresourcedata)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instantiating a ResourceReader Object</source>
          <target state="translated">实例化 ResourceReader 对象</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
          <target state="translated">.Resources 文件是从文本文件或 XML.resx 文件的已编译的二进制文件<bpt id="p1">[</bpt>Resgen.exe （资源文件生成器）<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>对象可以表示独立的.resources 文件或嵌入到程序集中的.resources 文件。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that reads from a standalone .resources file, use the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class constructor with either an input stream or a string that contains the .resources file name.</source>
          <target state="translated">若要实例化<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>对象读取从单独的.resources 文件，使用<ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph>类构造函数的输入的流或包含的.resources 文件名称的字符串。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates both approaches.</source>
          <target state="translated">下面的示例阐释了这两种方法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources1.resources`</ph> by using its file name.</source>
          <target state="translated">第一个实例化<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>对象，表示名为的.resources 文件<ph id="ph2">`Resources1.resources`</ph>通过使用其文件名称。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources2.resources`</ph> by using a stream created from the file.</source>
          <target state="translated">第二个实例化<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>对象，表示名为的.resources 文件<ph id="ph2">`Resources2.resources`</ph>通过使用从文件创建一个流。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To create a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file, instantiate an <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> object from the assembly in which the .resources file is embedded.</source>
          <target state="translated">若要创建<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>表示嵌入的.resources 文件中，对象实例化<ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph>从程序集中嵌入.resources 文件，则在其中的对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Its <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object that can be passed to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph>方法返回<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>对象，可传递给<ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file.</source>
          <target state="translated">下面的示例实例化<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>表示嵌入的.resources 文件的对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Enumerating a ResourceReader Object's Resources</source>
          <target state="translated">枚举 ResourceReader 对象的资源</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To enumerate the resources in a .resources file, you call the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">若要枚举的.resources 文件中的资源，你可以调用<ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph>方法，它返回<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move from one resource to the next.</source>
          <target state="translated">你调用<ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph>方法将从一个资源移到下一步。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The method returns <ph id="ph1">`false`</ph> when all the resources in the .resources file have been enumerated.</source>
          <target state="translated">该方法返回<ph id="ph1">`false`</ph>.resources 文件中的所有资源具有在已都枚举。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface and the <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, the <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method does not provide the <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">尽管<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>类实现<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>接口和<ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph>方法，<ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph>方法不提供<ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method  returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object that provides access to each resource's name/value pair.</source>
          <target state="translated">相反，<ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph>方法返回<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph>接口提供对每个资源的名称/值对的访问的对象。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the individual resources in the collection in two ways:</source>
          <target state="translated">你可以检索两种方式集合中的单个资源：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can iterate each resource in the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and use <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> properties to retrieve the resource name and value.</source>
          <target state="translated">可循环中的每个资源<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph>收集和使用<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph>要检索的资源名称和值的属性。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</source>
          <target state="translated">所有资源都是相同的类型，或你知道每个资源的数据类型时，我们建议此技术。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the name of each resource when you iterate the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and call the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">你可以检索每个资源的名称，当循环访问<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph>集合并调用<ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>方法来检索资源的数据。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</source>
          <target state="translated">我们建议这种方法，你不知道每个资源的数据类型时或如果前一方法引发异常。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Using IDictionaryEnumerator Properties</source>
          <target state="translated">通过使用 IDictionaryEnumerator 属性检索资源</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</source>
          <target state="translated">枚举中的.resources 文件的资源的第一种方法涉及直接检索每个资源的名称/值对。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After you call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move to each resource in the collection, you can retrieve the resource name from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property and the resource data from the <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">调用后<ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph>方法将移到每个资源在集合中，你可以检索资源名称从<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph>属性和资源数据从<ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example shows how to retrieve the name and value of each resource in a .resources file by using the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">下面的示例演示如何通过使用检索的名称和值的.resources 文件中的每个资源<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, create the following text file named ApplicationResources.txt to define string resources.</source>
          <target state="translated">若要运行该示例，请创建名为 ApplicationResources.txt 来定义字符串资源的以下文本文件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</source>
          <target state="translated">然后可以将文本资源文件转换为二进制文件名 ApplicationResources.resources 为通过使用以下命令：</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</source>
          <target state="translated">下面的示例然后使用<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>类枚举独立二进制.resources 文件中的每个资源，并显示其密钥名称和相应的值。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The attempt to retrieve resource data from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property can throw the following exceptions:</source>
          <target state="translated">尝试检索中的资源数据<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>属性可能会引发以下异常：</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> if the data is not in the expected format.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.FormatException&gt;</ph>如果数据不是预期格式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> if the assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph>如果找不到包含数据所属的类型的程序集。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> if the type to which the data belongs cannot be cannot be found.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>数据所属的类型不能为如果找不到。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</source>
          <target state="translated">通常情况下，将引发这些异常，如果定义了一个类型的程序集不包含与应用程序了或已被无意中删除，如果已手动修改.resources 文件或程序集是早于较旧版本一种类型。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method, as the following section shows.</source>
          <target state="translated">如果引发这些异常之一，您可以通过枚举每个资源和调用来检索资源<ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>方法，如以下部分所示。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach provides you with some information about the data type that the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property attempted to return.</source>
          <target state="translated">此方法提供了您提供一些信息有关的数据类型<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>尝试返回的属性。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Name with GetResourceData</source>
          <target state="translated">通过名称和 GetResourceData 检索资源</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method.</source>
          <target state="translated">枚举中的.resources 文件的资源的第二个方法也需要通过调用在文件中的资源导航<ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph>方法。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For each resource, you retrieve the resource's name from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property, which is then passed to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">对于每个资源，检索该资源的名称从<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph>属性，然后传递给<ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph>方法来检索资源的数据。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This is returned as a byte array in the <ph id="ph1">`resourceData`</ph> argument.</source>
          <target state="translated">这作为字节数组中返回<ph id="ph1">`resourceData`</ph>自变量。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach is more awkward than retrieving the resource name and value from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties, because it returns the actual bytes that form the resource value.</source>
          <target state="translated">这种方法是比检索的资源名称和值从更繁琐<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>属性，因为它返回窗体中的资源值的实际字节数。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>However, if the attempt to retrieve the resource throws an exception, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method can help identify the source of the exception by supplying information about the resource's data type.</source>
          <target state="translated">但是，如果尝试以检索资源引发异常，<ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>方法可以帮助确定异常的源的通过提供有关资源的数据类型的信息。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about the string that indicates the resource's data type, see <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>.</source>
          <target state="translated">表示资源的数据类型的字符串的详细信息，请参阅<ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</source>
          <target state="translated">下面的示例演示如何使用这种方法来检索资源并处理引发任何异常。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom <ph id="ph1">`DateTimeTZI`</ph> object.</source>
          <target state="translated">它以编程方式创建包含四个字符串、 一个布尔值、 一个整数，一个位图和一个自定义的二进制.resources 文件<ph id="ph1">`DateTimeTZI`</ph>对象。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, do the following:</source>
          <target state="translated">若要运行该示例，请执行以下操作：</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Create an assembly named Library.dll that contains the <ph id="ph1">`DateTimeTZI`</ph> structure.</source>
          <target state="translated">创建名为 Library.dll 包含程序集<ph id="ph1">`DateTimeTZI`</ph>结构。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following is the source code for the assembly.</source>
          <target state="translated">下面是程序集的源代码。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile the source code in C# by using the following command:</source>
          <target state="translated">通过使用以下命令来编译 C# 中的源代码：</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">或者，你可以对其进行编译 Visual Basic 中使用以下命令：</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</source>
          <target state="translated">编译并执行下面的源代码，这将创建一个名为 ContactResources.resources 的.resources 文件。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The source code file is named CreateResources.cs.</source>
          <target state="translated">源代码文件是名为 CreateResources.cs。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can compile it in C# by using the following command:</source>
          <target state="translated">你可编译它在 C# 中使用以下命令：</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">或者，你可以对其进行编译 Visual Basic 中使用以下命令：</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and run the following code to enumerate the resources in the ContactResources.resources file.</source>
          <target state="translated">编译并运行以下代码以枚举 ContactResources.resources 文件中的资源。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After modifying the source code (for example, by deliberately throwing a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> at the end of the <ph id="ph2">`try`</ph> block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> enable you to retrieve or recreate some resource information.</source>
          <target state="translated">修改了源代码后 (例如，通过有意引发<ph id="ph1">&lt;xref:System.FormatException&gt;</ph>末尾<ph id="ph2">`try`</ph>块) 或者重命名 Library.dll 程序集，以便在运行时不可用，你可以运行示例，以了解如何调用<ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>使您能够检索或重新创建某些资源信息。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">将此对象的实例与不受信任的数据一起使用存在安全风险。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Use this object only with trusted data.</source>
          <target state="translated">此对象仅使用受信任的数据。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>数据验证<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The input stream for reading resources.</source>
          <target state="translated">用于读取资源的输入流。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified stream.</source>
          <target state="translated">为指定的流初始化 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph>构造函数实例化<ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph>检索从独立的.resources 文件或从.resources 文件的资源的对象嵌入到程序集中。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from a standalone .resources file, instantiate a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and pass it to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">若要从独立.resources 文件中读取，实例化<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>对象，并将其传递到<ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from an embedded .resources file, call the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method with the case-sensitive name of the .resources file, and pass the returned <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">若要从嵌入的.resources 文件中读取，调用<ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph>.resources 文件，并传入返回区分大小写的同名方法<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>对象传递给<ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">将此对象的实例与不受信任的数据一起使用存在安全风险。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">此对象仅使用受信任的数据。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>数据验证<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">本部分中的示例使用名为的以下.txt 文件<ph id="ph1">`PatientForm.txt`</ph>来定义应用程序使用的资源。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">通过发出以下命令，可以编译为.resources 文件的.txt 文件：</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</source>
          <target state="translated">下面的示例假定资源文件嵌入包含应用程序的可执行代码的程序集。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>It retrieves a resource file named <ph id="ph1">`PatientForm.resources`</ph> from the currently executing assemblies and displays the name and value of each of its resources.</source>
          <target state="translated">它将检索名为的资源文件<ph id="ph1">`PatientForm.resources`</ph>从当前正在执行的程序集，并显示名称和值的每个及其资源。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the C# example is named <ph id="ph1">`Example.cs`</ph>, you can compile it by using the following command:</source>
          <target state="translated">如果名为 C# 示例<ph id="ph1">`Example.cs`</ph>，你可以通过使用以下命令对其进行编译：</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the Visual Basic example is named <ph id="ph1">`Example.vb`</ph>, you can compile it by using the following command:</source>
          <target state="translated">如果名为 Visual Basic 示例<ph id="ph1">`Example.vb`</ph>，你可以通过使用以下命令对其进行编译：</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>vbc Example.vb /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>vbc Example.vb /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is not readable.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 参数不可读。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>An I/O error has occurred while accessing <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</source>
          <target state="translated">在访问 <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 时发生 I/O 错误。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>for providing serialization services.</source>
          <target state="translated">用于提供序列化服务。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">安全操作： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The path and name of the resource file to read.</source>
          <target state="translated">要读取的源文件的路径及名称。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>filename<ept id="p1">&lt;/c&gt;</ept> is not case-sensitive.</source>
          <target state="translated">文件名<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>不区分大小写。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified named resource file.</source>
          <target state="translated">为指定的资源文件初始化 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources from a standalone .resources file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph>构造函数实例化<ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph>从独立的.resources 文件中检索资源的对象。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>To retrieve resources from an embedded .resources file, use the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">若要从嵌入的.resources 文件中检索资源，请使用<ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">将此对象的实例与不受信任的数据一起使用存在安全风险。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">此对象仅使用受信任的数据。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>数据验证<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">本部分中的示例使用名为的以下.txt 文件<ph id="ph1">`PatientForm.txt`</ph>来定义应用程序使用的资源。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>You can compile this .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">通过发出以下命令，可以编译为.resources 文件的此.txt 文件：</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">下面的示例枚举中的资源<ph id="ph1">`PatientForm.resources`</ph>并显示名称和每个值。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The file cannot be found.</source>
          <target state="translated">无法找到该文件。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>An I/O error has occurred.</source>
          <target state="translated">发生了 I/O 错误。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The resource file has an invalid format.</source>
          <target state="translated">资源文件的格式无效。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For example, the length of the file may be zero.</source>
          <target state="translated">例如，文件的长度可能为零。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Close">
          <source>Releases all operating system resources associated with this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">释放与此 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 对象相关联的所有操作系统资源。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> can be safely called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> 可以安全地调用多次。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The following example moves through a file's resources and displays all the key/value pairs it finds.</source>
          <target state="translated">下面的示例都将通过文件的资源，并显示它找到的所有键/值对。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The code then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> method to shut down the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> and to release all resources used by it.</source>
          <target state="translated">该代码将使用<ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph>方法来关闭<ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph>并释放由它的所有资源。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>When you are finished using this instance of <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, call <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> to release all resources used by this instance.</source>
          <target state="translated">在完成使用的此实例时<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>，调用<ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph>释放此实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>You should eliminate further references to this <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</source>
          <target state="translated">你应该可以消除进一步引用到此<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>实例，以便垃圾回收器才能回收而不是保留它终止的实例的内存。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> 调用私有 dispose （boolean） 方法，其中包含要释放托管和非托管资源的代码。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>实现 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 对象的枚举器。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 对象的枚举器。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Typically, you enumerate resources by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method and then repeatedly calling the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method on the returned <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object until the method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">通常情况下，通过调用枚举资源<ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph>方法，然后重复调用<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法返回<ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph>对象，直到该方法返回<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The resource name is available from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property; its value from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">资源名称是否可从<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph>属性; 其值从<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example illustrates how to enumerate resources in this way.</source>
          <target state="translated">该示例说明如何枚举这种方式中的资源。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property by the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class can throw the following exceptions:</source>
          <target state="translated">实现<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph>属性<ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph>类可以引发以下异常：</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">找不到包含数据所属的类型的程序集。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The data is not in the expected format.</source>
          <target state="translated">数据不是预期格式。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The type to which the data belongs cannot be found.</source>
          <target state="translated">找不到数据所属的类型。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can handle the exception by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve information about the data type and the byte array assigned to the named resource.</source>
          <target state="translated">可以通过调用处理的异常<ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>方法来检索有关的数据类型和分配给该命名的资源的字节数组的信息。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class topic.</source>
          <target state="translated">有关详细信息，请参阅中的"检索资源的名称与 GetResourceData"一节<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class includes two methods that return enumerators.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>类包括返回枚举器的两个方法。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object and is the recommended method to call when enumerating resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph>方法返回<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph>接口对象，并在调用时的推荐的方法枚举资源。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">本部分中的示例使用名为的以下.txt 文件<ph id="ph1">`PatientForm.txt`</ph>来定义应用程序使用的资源。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">通过发出以下命令，可以编译为.resources 文件的.txt 文件：</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">下面的示例枚举中的资源<ph id="ph1">`PatientForm.resources`</ph>并显示名称和每个值。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The reader has been closed or disposed, and cannot be accessed.</source>
          <target state="translated">读取器已关闭或释放，因此无法访问。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The name of a resource.</source>
          <target state="translated">资源的名称。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a string that represents the type name of the retrieved resource.</source>
          <target state="translated">当此方法返回时，包含表示检索资源的类型名称的字符串。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">此参数未经初始化即被传递。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a byte array that is the binary representation of the retrieved type.</source>
          <target state="translated">此方法返回时，包含一个字节数组，该字节数组为所检索类型的二进制表示形式。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">此参数未经初始化即被传递。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Retrieves the type name and data of a named resource from an open resource file or stream.</source>
          <target state="translated">从打开的资源文件或流检索指定资源的类型名称和数据。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method retrieves the value of a named resource as a byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>方法检索作为字节数组的已命名资源的值。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It is typically used when the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> property throws an exception when it tries to retrieve the value of a resource.</source>
          <target state="translated">它通常是时使用<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph>属性在它试图检索资源的值时引发异常。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`resourceType`</ph> is a string that represents the data type of the resource.</source>
          <target state="translated"><ph id="ph1">`resourceType`</ph> 是一个字符串，表示资源的数据类型。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It can be any of the following values:</source>
          <target state="translated">它可以是任何以下值：</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string representation of a <ph id="ph1">`ResourceTypeCode`</ph> enumeration member that indicates the data type of the resource.</source>
          <target state="translated">字符串表示形式<ph id="ph1">`ResourceTypeCode`</ph>指示该资源的数据类型的枚举成员。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`ResourceTypeCode`</ph> is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</source>
          <target state="translated"><ph id="ph1">`ResourceTypeCode`</ph> 是的。 若要使用的私有枚举指示特殊的二进制格式用于存储 19 常见数据类型之一。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>These include the .NET Framework primitive data types (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>), as well as <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, and <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, In addition, the <ph id="ph17">`ResourceTypeCode`</ph> enumeration includes the values shown in the following table.</source>
          <target state="translated">其中包括.NET Framework 基元数据类型 (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>， <ph id="ph2">&lt;xref:System.Byte&gt;</ph>， <ph id="ph3">&lt;xref:System.Char&gt;</ph>， <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>， <ph id="ph5">&lt;xref:System.Double&gt;</ph>， <ph id="ph6">&lt;xref:System.Int16&gt;</ph>， <ph id="ph7">&lt;xref:System.Int32&gt;</ph>， <ph id="ph8">&lt;xref:System.Int64&gt;</ph>， <ph id="ph9">&lt;xref:System.Single&gt;</ph>， <ph id="ph10">&lt;xref:System.SByte&gt;</ph>， <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>， <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>， <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>)，以及<ph id="ph14">&lt;xref:System.String&gt;</ph>， <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>，和<ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>，此外，<ph id="ph17">`ResourceTypeCode`</ph>枚举包括下表中显示的值。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>ResourceTypeCode value</source>
          <target state="translated">ResourceTypeCode value</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a byte array.</source>
          <target state="translated">数据为字节数组。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">此数据类型通常从调用的结果<ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a null reference.</source>
          <target state="translated">数据为空引用。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method with an object whose value is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">此数据类型通常从调用的结果<ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph>方法与一个对象，其值是<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is stored in a stream.</source>
          <target state="translated">数据存储在流中。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">此数据类型通常从调用的结果<ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> or <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> method.</source>
          <target state="translated">假设<ph id="ph1">`resourceData`</ph>尚未被损坏，它通常可转换从字节数组返回到其原始值通过调用<ph id="ph2">&lt;xref:System.BitConverter&gt;</ph>或<ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>A string that contains the fully qualified name of the type whose serialized data is assigned to the <ph id="ph1">`resourceData`</ph> argument (for example, <ph id="ph2">`System.String`</ph>).</source>
          <target state="translated">包含其序列化的数据分配到的类型的完全限定的名称的字符串<ph id="ph1">`resourceData`</ph>自变量 (例如， <ph id="ph2">`System.String`</ph>)。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</source>
          <target state="translated">此外，对于不是.NET Framework 类库的一部分的类型，该字符串包括名称、 版本、 区域性和公钥的包含类型的程序集。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>For example, the following string indicates that the serialized data represents an instance of the <ph id="ph1">`Person`</ph> type in the <ph id="ph2">`Extensions`</ph> namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</source>
          <target state="translated">例如，以下字符串指示序列化的数据表示的实例<ph id="ph1">`Person`</ph>键入<ph id="ph2">`Extensions`</ph>命名空间，在名为具有没有公用密钥和任何指定的区域性的实用工具程序集的版本 1.0 中找到。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted and that the source type is available, <ph id="ph2">`resourceData`</ph> can be converted from a byte array back to its original value by converting the byte array to a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object and passing the stream to the <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">假设<ph id="ph1">`resourceData`</ph>未损坏，以及源类型是否可用，<ph id="ph2">`resourceData`</ph>可转换从字节数组返回到其原始值通过将转换到的字节数组<ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph>对象并将流传递给<ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string used to describe the data type in the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
          <target state="translated">用于描述中的数据类型的字符串<ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph>方法调用。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> 不存在。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> has an invalid type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> 具有无效的类型。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The retrieved resource data is corrupt.</source>
          <target state="translated">检索的资源数据已损坏。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object is not initialized, probably because it is closed.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 对象未初始化，可能因其已被关闭。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 对象的枚举器。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 对象的枚举器。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 是显式接口实现。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The recommended approach to enumerating the resources in a .resources file is to call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">枚举中的.resources 文件的资源的建议的方法是调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph>返回对象<ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The reader has already been closed and cannot be accessed.</source>
          <target state="translated">读取器已关闭，并且无法访问。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
