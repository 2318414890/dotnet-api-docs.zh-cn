<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="542e0b892b421871e82977f6a129b1a2132d0ddb" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57937052" /></Metadata><TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="0f455-101">提供分析结构化文本文件的方法和属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-101">Provides methods and properties for parsing structured text files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-102">`TextFieldParser`对象提供的方法和属性，用于分析结构化文本文件。</span><span class="sxs-lookup"><span data-stu-id="0f455-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="0f455-103">分析的文本文件`TextFieldParser`类似于循环访问文本文件，而`ReadFields`要提取文本字段的方法是类似于拆分字符串。</span><span class="sxs-lookup"><span data-stu-id="0f455-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="0f455-104">`TextFieldParser`可以分析两种类型的文件： 分隔符或固定宽度。</span><span class="sxs-lookup"><span data-stu-id="0f455-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="0f455-105">某些属性，如`Delimiters`并`HasFieldsEnclosedInQuotes`才有意义时使用的带分隔符的文件，而`FieldWidths`属性才有意义的仅当使用固定宽度文件时。</span><span class="sxs-lookup"><span data-stu-id="0f455-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="0f455-106">下表列出了所涉及的任务的示例`Microsoft.VisualBasic.FileIO.TextFieldParser`对象。</span><span class="sxs-lookup"><span data-stu-id="0f455-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="0f455-107">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-107">To</span></span>|<span data-ttu-id="0f455-108">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-109">从带分隔符的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-109">Read from a delimited text file</span></span>|[<span data-ttu-id="0f455-110">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0f455-111">读取定宽文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="0f455-112">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="0f455-113">读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="0f455-114">如何：读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-115">此示例分析以制表符分隔的文本文件， `Bigfile`。</span><span class="sxs-lookup"><span data-stu-id="0f455-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-116">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-116">Objects (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-117">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-117">Parsing Text Files with the TextFieldParser Object</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="0f455-118">关于异常的疑难解答：Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="0f455-118">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0f455-119">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-120">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-120">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="0f455-121"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-121"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="0f455-122">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="0f455-122">The stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="0f455-123">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-123">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-124">创建一个新`TextFieldParser`对象，若要分析的文件或流的所表示`stream`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-124">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-125"><paramref name="stream" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-125"><paramref name="stream" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-126">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-126"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-127">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-127">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-128">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-128">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-129">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-129">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-130">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-130">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="0f455-131"><see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-131"><see cref="T:System.IO.TextReader" />.</span></span> <span data-ttu-id="0f455-132">要分析的 <see cref="T:System.IO.TextReader" /> 流。</span><span class="sxs-lookup"><span data-stu-id="0f455-132">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="0f455-133">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-133">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-134">创建一个新`TextFieldParser`对象，若要分析的文件或流的所表示`reader`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-134">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-135"><paramref name="reader" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-135"><paramref name="reader" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-136">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-136">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-137">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-137">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-138">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-138">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-139">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-139">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="0f455-140"><see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-140"><see langword="String" />.</span></span> <span data-ttu-id="0f455-141">要分析的文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="0f455-141">The complete path of the file to be parsed.</span></span></param>
        <summary><span data-ttu-id="0f455-142">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-142">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-143">创建一个新`TextFieldParser`要分析指定的文件的对象`path`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-143">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-144"><paramref name="path" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="0f455-144"><paramref name="path" /> is an empty string.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-145">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-145">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-146">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-146">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-147">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-147">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-148">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-148">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="0f455-149"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-149"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="0f455-150">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="0f455-150">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="0f455-151"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-151"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="0f455-152">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="0f455-152">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="0f455-153">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-153">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="0f455-154">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-154">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-155">创建一个新`TextFieldParser`对象，若要分析的文件或流的所表示`stream`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-155">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0f455-156">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-156">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-157"><paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-157"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-158">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-158"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-159">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-159">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-160">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-160">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-161">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-161">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-162">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-162">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="0f455-163"><see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-163"><see langword="String" />.</span></span> <span data-ttu-id="0f455-164">要分析的文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="0f455-164">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="0f455-165"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-165"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="0f455-166">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="0f455-166">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="0f455-167">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-167">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="0f455-168">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-168">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-169">创建一个新`TextFieldParser`要分析指定的文件的对象`path`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-169">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0f455-170">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-170">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-171"><paramref name="path" /> 是一个空字符串，或 <paramref name="defaultEncoding" /> 为<see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-171"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-172">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-172">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-173">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-173">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-174">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-174">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-175">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-175">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="0f455-176"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-176"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="0f455-177">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="0f455-177">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="0f455-178"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-178"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="0f455-179">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="0f455-179">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="0f455-180">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-180">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="0f455-181"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-181"><see langword="Boolean" />.</span></span> <span data-ttu-id="0f455-182">指示是否在文件头查找字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="0f455-182">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="0f455-183">默认值为 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-183">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="0f455-184">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-184">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-185">创建一个新`TextFieldParser`对象，若要分析的文件或流的所表示`stream`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-185">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="0f455-186">如果`detectEncoding`参数是`True`，此构造函数将尝试检测编码，方法是查看的文件或流的第三个字节。</span><span class="sxs-lookup"><span data-stu-id="0f455-186">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="0f455-187">如果在文件开头相应的字节顺序标记，则会自动识别了 utf-8、 小 endian Unicode 和 big endian Unicode 文本。</span><span class="sxs-lookup"><span data-stu-id="0f455-187">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="0f455-188">否则，指定编码由`defaultEncoding`使用。</span><span class="sxs-lookup"><span data-stu-id="0f455-188">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0f455-189">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-189">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-190"><paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-190"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-191">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-191"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-192">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-192">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-193">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-193">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-194">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-194">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-195">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-195">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="0f455-196"><see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-196"><see langword="String" />.</span></span> <span data-ttu-id="0f455-197">要分析的文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="0f455-197">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="0f455-198"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-198"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="0f455-199">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="0f455-199">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="0f455-200">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-200">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="0f455-201"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-201"><see langword="Boolean" />.</span></span> <span data-ttu-id="0f455-202">指示是否在文件头查找字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="0f455-202">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="0f455-203">默认值为 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-203">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="0f455-204">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-204">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-205">创建一个新`TextFieldParser`要分析指定的文件的对象`path`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-205">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="0f455-206">如果`detectEncoding`参数是`True`，此构造函数将尝试检测编码，方法是查看的文件或流的第三个字节。</span><span class="sxs-lookup"><span data-stu-id="0f455-206">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="0f455-207">如果在文件开头相应的字节顺序标记，则会自动识别了 utf-8、 小 endian Unicode 和 big endian Unicode 文本。</span><span class="sxs-lookup"><span data-stu-id="0f455-207">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="0f455-208">否则，指定编码由`defaultEncoding`使用。</span><span class="sxs-lookup"><span data-stu-id="0f455-208">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0f455-209">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-209">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-210"><paramref name="path" /> 是一个空字符串，或 <paramref name="defaultEncoding" /> 为<see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-210"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-211">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-211">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-212">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-212">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-213">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-213">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-214">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-214">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="0f455-215"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-215"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="0f455-216">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="0f455-216">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="0f455-217"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-217"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="0f455-218">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="0f455-218">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="0f455-219">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-219">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="0f455-220"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-220"><see langword="Boolean" />.</span></span> <span data-ttu-id="0f455-221">指示是否在文件头查找字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="0f455-221">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="0f455-222">默认值为 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-222">Default is <see langword="True" />.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="0f455-223"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-223"><see langword="Boolean" />.</span></span> <span data-ttu-id="0f455-224">指示在 <see langword="TextFieldParser" /> 对象关闭时，是否将 <paramref name="stream" /> 保留为打开状态。</span><span class="sxs-lookup"><span data-stu-id="0f455-224">Indicates whether to leave <paramref name="stream" /> open when the <see langword="TextFieldParser" /> object is closed.</span></span> <span data-ttu-id="0f455-225">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-225">Default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="0f455-226">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0f455-226">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-227">创建一个新`TextFieldParser`对象，若要分析的文件或流的所表示`stream`参数。</span><span class="sxs-lookup"><span data-stu-id="0f455-227">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="0f455-228">如果`detectEncoding`参数是`True`，此构造函数将尝试检测编码，方法是查看的文件或流的第三个字节。</span><span class="sxs-lookup"><span data-stu-id="0f455-228">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="0f455-229">如果在文件开头相应的字节顺序标记，则会自动识别了 utf-8、 小 endian Unicode 和 big endian Unicode 文本。</span><span class="sxs-lookup"><span data-stu-id="0f455-229">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="0f455-230">否则，指定编码由`defaultEncoding`使用。</span><span class="sxs-lookup"><span data-stu-id="0f455-230">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0f455-231">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-231">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0f455-232"><paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-232"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-233">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-233"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-234">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-234">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-235">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-235">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-236">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-236">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-237">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-237">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f455-238">关闭当前的 <see langword="TextFieldParser" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0f455-238">Closes the current <see langword="TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0f455-239">此示例将关闭`TextFieldParser.FileReader`。</span><span class="sxs-lookup"><span data-stu-id="0f455-239">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-240">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-240">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-241">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-241">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-242">定义注释标记。</span><span class="sxs-lookup"><span data-stu-id="0f455-242">Defines comment tokens.</span></span> <span data-ttu-id="0f455-243">注释标记是一个字符串，当位于行首时，指示该行是一个注释并且分析器应该忽略该行。</span><span class="sxs-lookup"><span data-stu-id="0f455-243">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span></span></summary>
        <value><span data-ttu-id="0f455-244">一个字符串数组，它包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象的所有注释标记。</span><span class="sxs-lookup"><span data-stu-id="0f455-244">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-245">这是一个高级的成员;除非您单击不会显示在 IntelliSense 中**所有**选项卡。</span><span class="sxs-lookup"><span data-stu-id="0f455-245">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0f455-246">长度为零的注释标记将被忽略。</span><span class="sxs-lookup"><span data-stu-id="0f455-246">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f455-247">此示例指定，对于`TextFieldParser`，`FileReader`应忽略以单引号 （'）。</span><span class="sxs-lookup"><span data-stu-id="0f455-247">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-248">注释标记包含空白。</span><span class="sxs-lookup"><span data-stu-id="0f455-248">A comment token includes white space.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-249">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-249">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-250">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-250">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-251">如何：从 Visual Basic 中的固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-251">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-252">如何：从 Visual Basic 中的多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-252">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-253">定义文本文件的分隔符。</span><span class="sxs-lookup"><span data-stu-id="0f455-253">Defines the delimiters for a text file.</span></span></summary>
        <value><span data-ttu-id="0f455-254">一个字符串数组，它包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象的所有字段分隔符。</span><span class="sxs-lookup"><span data-stu-id="0f455-254">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-255">此属性才有意义才<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>属性设置为`FieldType.Delimited`。</span><span class="sxs-lookup"><span data-stu-id="0f455-255">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="0f455-256">定义分隔符的文本文件也可以使用<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0f455-256">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="0f455-257">下表列出的任务涉及示例`Delimiters`属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-257">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="0f455-258">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-258">To</span></span>|<span data-ttu-id="0f455-259">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-259">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-260">从带分隔符的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-260">Read from a delimited text file</span></span>|[<span data-ttu-id="0f455-261">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-261">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-262">此示例中指定的分隔符`TextFieldParser`对象， `FileReader`，为逗号 （，）。</span><span class="sxs-lookup"><span data-stu-id="0f455-262">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-263">分隔符值设置为换行符、空字符串或 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-263">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-264">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-264">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-265">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-265">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0f455-266">释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</span><span class="sxs-lookup"><span data-stu-id="0f455-266">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-267">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-267">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f455-268">释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</span><span class="sxs-lookup"><span data-stu-id="0f455-268">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-269">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-269">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="0f455-270">布尔值。</span><span class="sxs-lookup"><span data-stu-id="0f455-270">Boolean.</span></span> <span data-ttu-id="0f455-271">若为 <see langword="True" />，释放托管资源和非托管资源；若为 <see langword="False" />，则只释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="0f455-271"><see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="0f455-272">释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</span><span class="sxs-lookup"><span data-stu-id="0f455-272">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-273">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-273">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-274">如果在当前光标位置到文件末尾之间没有非空、非注释行，则返回 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-274">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span></span></summary>
        <value><span data-ttu-id="0f455-275">如果没有更多可供读取的数据，则为 <see langword="True" />；否则为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-275"><see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-276">此属性可用于从文件读取数据时确定读取的数据的末尾。</span><span class="sxs-lookup"><span data-stu-id="0f455-276">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="0f455-277">下表列出了所涉及的任务的示例`EndOfData`属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-277">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="0f455-278">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-278">To</span></span>|<span data-ttu-id="0f455-279">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-279">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-280">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-280">Read from a delimited file</span></span>|[<span data-ttu-id="0f455-281">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-281">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0f455-282">从固定宽度文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-282">Read from a fixed-width file</span></span>|[<span data-ttu-id="0f455-283">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-283">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-284">此示例使用`EndofData`属性来循环访问与文件中的所有字段`TextFieldReader`， `FileReader`。</span><span class="sxs-lookup"><span data-stu-id="0f455-284">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-285">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-285">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-286">返回导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行。</span><span class="sxs-lookup"><span data-stu-id="0f455-286">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="0f455-287">导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行。</span><span class="sxs-lookup"><span data-stu-id="0f455-287">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-288">如果没有<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>已抛出异常，则返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="0f455-288">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="0f455-289"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>属性可以用于显示导致异常的行数。</span><span class="sxs-lookup"><span data-stu-id="0f455-289">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="0f455-290">下表列出了所涉及的任务的示例`ErrorLine`属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-290">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="0f455-291">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-291">To</span></span>|<span data-ttu-id="0f455-292">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-292">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-293">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-293">Read from a delimited file</span></span>|[<span data-ttu-id="0f455-294">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-294">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0f455-295">从固定宽度文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-295">Read from a fixed-width file</span></span>|[<span data-ttu-id="0f455-296">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-296">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-297">此示例使用`ErrorLine`属性来显示导致发生当前的行<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-297">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-298">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-298">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-299">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-299">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-300">如何：从 Visual Basic 中的多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-300">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-301">如何：从 Visual Basic 中的固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-301">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-302">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-302">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="0f455-303">Try...Catch...Finally 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-303">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-304">返回导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行的行号。</span><span class="sxs-lookup"><span data-stu-id="0f455-304">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="0f455-305">导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行的行号。</span><span class="sxs-lookup"><span data-stu-id="0f455-305">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-306">如果没有<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>已抛出异常，则返回-1。</span><span class="sxs-lookup"><span data-stu-id="0f455-306">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="0f455-307"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>属性可以用于显示导致异常的行数。</span><span class="sxs-lookup"><span data-stu-id="0f455-307">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="0f455-308">确定的行号时，不忽略空白行和提出的意见。</span><span class="sxs-lookup"><span data-stu-id="0f455-308">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="0f455-309">下表列出了所涉及的任务的示例`ErrorLineNumber`属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-309">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="0f455-310">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-310">To</span></span>|<span data-ttu-id="0f455-311">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-311">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-312">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-312">Read from a delimited file</span></span>|[<span data-ttu-id="0f455-313">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-313">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0f455-314">从固定宽度文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-314">Read from a fixed-width file</span></span>|[<span data-ttu-id="0f455-315">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-315">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-316">此示例使用`ErrorLineNumber`属性来显示导致当前行位置<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-316">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-317">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-317">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-318">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-318">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-319">如何：从 Visual Basic 中的多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-319">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-320">如何：从 Visual Basic 中的固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-320">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-321">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-321">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="0f455-322">Try...Catch...Finally 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-322">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-323">表示正在分析的文本文件中每一列的宽度。</span><span class="sxs-lookup"><span data-stu-id="0f455-323">Denotes the width of each column in the text file being parsed.</span></span></summary>
        <value><span data-ttu-id="0f455-324">一个整数数组，它包含正在分析的文本文件中每一列的宽度。</span><span class="sxs-lookup"><span data-stu-id="0f455-324">An integer array that contains the width of each column in the text file that is being parsed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-325">此属性才有意义才<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>属性设置为`FieldType.FixedWidth`。</span><span class="sxs-lookup"><span data-stu-id="0f455-325">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="0f455-326">如果数组中的最后一项小于或等于零，则假定字段为可变宽度。</span><span class="sxs-lookup"><span data-stu-id="0f455-326">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="0f455-327"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>方法还可用于设置字段宽度。</span><span class="sxs-lookup"><span data-stu-id="0f455-327">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="0f455-328">下表列出了所涉及的任务的示例`FieldWidths`属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-328">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="0f455-329">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-329">To</span></span>|<span data-ttu-id="0f455-330">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-330">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-331">读取定宽文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-331">Read from a fixed-width text file</span></span>|[<span data-ttu-id="0f455-332">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-332">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-333">此示例读取文件`ParserText.txt`，指定的宽度。 第一列是 5 个字符宽，第二个是 10，第三个为 11，，第四个是宽度可变的</span><span class="sxs-lookup"><span data-stu-id="0f455-333">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-334">除数组最后一个条目外的任意位置中的宽度值小于或等于零。</span><span class="sxs-lookup"><span data-stu-id="0f455-334">A width value in any location other than the last entry of the array is less than or equal to zero.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-335">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-335">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-336">如何：从 Visual Basic 中的固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-336">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-337">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-337">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-338">如何：从 Visual Basic 中的多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-338">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-339">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-339">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="0f455-340">关于异常的疑难解答：Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="0f455-340">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f455-341">允许 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象在由垃圾回收功能回收之前尝试释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="0f455-341">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-342">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-342">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-343">指示在分析分隔的文件时是否用引号将字段括起来。</span><span class="sxs-lookup"><span data-stu-id="0f455-343">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span></span></summary>
        <value><span data-ttu-id="0f455-344">如果将字段用引号括起来，则为 <see langword="True" />；否则为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-344"><see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-345">这是一个高级的成员;除非您单击不会显示在 IntelliSense 中**所有**选项卡。</span><span class="sxs-lookup"><span data-stu-id="0f455-345">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0f455-346">如果该属性是`True`，分析器将假定字段用引号 ("")，并且可能包含行尾。</span><span class="sxs-lookup"><span data-stu-id="0f455-346">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="0f455-347">如果字段括在引号中，例如，`abc, "field2a,field2b", field3`并且此属性是`True`，然后将返回所有文本用引号括起来，因为是; 此示例将返回`abc|field2a,field2b|field3`。</span><span class="sxs-lookup"><span data-stu-id="0f455-347">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="0f455-348">此属性设置为`False`会使此示例返回`abc|"field2a|field2b"|field3`。</span><span class="sxs-lookup"><span data-stu-id="0f455-348">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f455-349">此示例设置`HasFieldsEnclosedInQuotes`属性设置为`True`为`myReader`。</span><span class="sxs-lookup"><span data-stu-id="0f455-349">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-350">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-350">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-351">返回当前行号，如果流中没有更多字符，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="0f455-351">Returns the current line number, or returns -1 if no more characters are available in the stream.</span></span></summary>
        <value><span data-ttu-id="0f455-352">当前行号。</span><span class="sxs-lookup"><span data-stu-id="0f455-352">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-353">这是一个高级的成员;除非您单击不会显示在 IntelliSense 中**所有**选项卡。</span><span class="sxs-lookup"><span data-stu-id="0f455-353">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0f455-354">确定的行号时，不忽略空白行和提出的意见。</span><span class="sxs-lookup"><span data-stu-id="0f455-354">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f455-355">此示例中的文本中搜索"Jones"的名称，并报告它所在的行。</span><span class="sxs-lookup"><span data-stu-id="0f455-355">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-356">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-356">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars"><span data-ttu-id="0f455-357"><see langword="Int32" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-357"><see langword="Int32" />.</span></span> <span data-ttu-id="0f455-358">要读取的字符数。</span><span class="sxs-lookup"><span data-stu-id="0f455-358">Number of characters to read.</span></span> <span data-ttu-id="0f455-359">必需。</span><span class="sxs-lookup"><span data-stu-id="0f455-359">Required.</span></span></param>
        <summary><span data-ttu-id="0f455-360">读取指定数目的字符但不前移光标。</span><span class="sxs-lookup"><span data-stu-id="0f455-360">Reads the specified number of characters without advancing the cursor.</span></span></summary>
        <returns><span data-ttu-id="0f455-361">包含读取的指定数量的字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="0f455-361">A string that contains the specified number of characters read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-362">`numberOfChars`值必须是一行中的字符总数小于。</span><span class="sxs-lookup"><span data-stu-id="0f455-362">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="0f455-363">如果还没有，返回的字符串`PeekChars`将被截断为行的长度。</span><span class="sxs-lookup"><span data-stu-id="0f455-363">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="0f455-364">将忽略空行。</span><span class="sxs-lookup"><span data-stu-id="0f455-364">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="0f455-365">不返回行结束字符。</span><span class="sxs-lookup"><span data-stu-id="0f455-365">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="0f455-366">`PeekChars`方法执行任何分析; 内的分隔字段的行尾字符被解释为实际行的末尾。</span><span class="sxs-lookup"><span data-stu-id="0f455-366">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="0f455-367">下表列出了所涉及的任务的示例`PeekChars`方法。</span><span class="sxs-lookup"><span data-stu-id="0f455-367">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="0f455-368">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-368">To</span></span>|<span data-ttu-id="0f455-369">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-370">在分析之前，确定字段的格式</span><span class="sxs-lookup"><span data-stu-id="0f455-370">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="0f455-371">如何：读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-371">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-372">此示例使用`PeekChars`查找数据的末尾并停止在该点分析文件。</span><span class="sxs-lookup"><span data-stu-id="0f455-372">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-373"><paramref name="numberOfChars" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="0f455-373"><paramref name="numberOfChars" /> is less than 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-374">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-374">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-375">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-375">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="0f455-376">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-376">Reading from Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f455-377">读取当前行的所有字段，以字符串数组的形式返回这些字段，并将光标前进到包含数据的下一行。</span><span class="sxs-lookup"><span data-stu-id="0f455-377">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span></span></summary>
        <returns><span data-ttu-id="0f455-378">包含当前行的字段值的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="0f455-378">An array of strings that contains field values for the current line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-379">为了使用户能够分析多种格式的文本文件`ReadFields`方法将检查的值`TextFieldType`， `Delimiters`，和`FieldWidths`，如果指定，则每次调用它。</span><span class="sxs-lookup"><span data-stu-id="0f455-379">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="0f455-380">用户需要正确配置`TextFieldType`并`FieldWidths`或`Delimiters`属性，根据需要。</span><span class="sxs-lookup"><span data-stu-id="0f455-380">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="0f455-381">如果`TextFieldType`设置为`Delimited`，并`Delimiters`未设置，或者如果`TextFieldType`设置为`FixedWidth`和`FieldWidths`，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="0f455-381">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0f455-382">如果`ReadFields`遇到空白行，则跳过并返回下一个非空的行。</span><span class="sxs-lookup"><span data-stu-id="0f455-382">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="0f455-383">如果`ReadFields`方法不能分析当前行时，会引发异常并不会移动到下一行。</span><span class="sxs-lookup"><span data-stu-id="0f455-383">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="0f455-384">这使你的应用程序以尝试再次分析行。</span><span class="sxs-lookup"><span data-stu-id="0f455-384">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="0f455-385">下表列出了所涉及的任务的示例`ReadFields`方法。</span><span class="sxs-lookup"><span data-stu-id="0f455-385">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="0f455-386">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-386">To</span></span>|<span data-ttu-id="0f455-387">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-387">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-388">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-388">Read from a delimited file</span></span>|[<span data-ttu-id="0f455-389">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-389">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0f455-390">从固定宽度文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-390">Read from a fixed-width file</span></span>|[<span data-ttu-id="0f455-391">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-391">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-392">此示例使用`ReadFields`方法以从逗号分隔文件中读取`ParserText.txt`。</span><span class="sxs-lookup"><span data-stu-id="0f455-392">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="0f455-393">此示例将字段写入 `Testfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="0f455-393">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException"><span data-ttu-id="0f455-394">不能使用指定格式分析字段。</span><span class="sxs-lookup"><span data-stu-id="0f455-394">A field cannot be parsed by using the specified format.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="0f455-395">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-395">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="0f455-396">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-396">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-397">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-397">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-398">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-398">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-399">如何：从 Visual Basic 中的固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-399">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-400">如何：从 Visual Basic 中的多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-400">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-401">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-401">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f455-402">将当前行作为字符串返回，并将光标前进到下一行。</span><span class="sxs-lookup"><span data-stu-id="0f455-402">Returns the current line as a string and advances the cursor to the next line.</span></span></summary>
        <returns><span data-ttu-id="0f455-403">文件或流中的当前行。</span><span class="sxs-lookup"><span data-stu-id="0f455-403">The current line from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-404">`ReadLine`方法执行任何分析; 内的分隔字段的行尾字符被解释为实际行的末尾。</span><span class="sxs-lookup"><span data-stu-id="0f455-404">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="0f455-405">`Nothing` 如果到达文件末尾返回。</span><span class="sxs-lookup"><span data-stu-id="0f455-405">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f455-406">此示例从文件读取`ParserText.txt`并将其写入`Testfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="0f455-406">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="0f455-407">如果`Testfile.txt`不存在，它由创建`WriteAllText`方法。</span><span class="sxs-lookup"><span data-stu-id="0f455-407">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="0f455-408">此示例中将字段写入作为单个字符串;若要在目标文件中各占一行上显示每个行`VbCrLf`应在每个行的末尾追加字符。</span><span class="sxs-lookup"><span data-stu-id="0f455-408">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-409">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-409">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-410">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-410">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f455-411">读取文本文件的其余部分并作为一个字符串返回。</span><span class="sxs-lookup"><span data-stu-id="0f455-411">Reads the remainder of the text file and returns it as a string.</span></span></summary>
        <returns><span data-ttu-id="0f455-412">文件或流中的其余文本。</span><span class="sxs-lookup"><span data-stu-id="0f455-412">The remaining text from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-413">这是一个高级的成员;除非您单击不会显示在 IntelliSense 中**所有**选项卡。</span><span class="sxs-lookup"><span data-stu-id="0f455-413">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0f455-414">如果没有更多要读取，因为已达到文件末尾，`Nothing`返回。</span><span class="sxs-lookup"><span data-stu-id="0f455-414">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="0f455-415">`ReadToEnd`方法不会忽略空白行和提出的意见。</span><span class="sxs-lookup"><span data-stu-id="0f455-415">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f455-416">此示例使用`ReadToEnd`方法来读取整个文件`ParserText.txt`并将其写入到文件`Testfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="0f455-416">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="0f455-417">如果`Testfile.txt`不存在，它由创建`WriteAllText`方法。</span><span class="sxs-lookup"><span data-stu-id="0f455-417">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-418">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-418">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-419">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-419">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="0f455-420"><see langword="String" /> 类型的数组。</span><span class="sxs-lookup"><span data-stu-id="0f455-420">Array of type <see langword="String" />.</span></span></param>
        <summary><span data-ttu-id="0f455-421">将读取器的分隔符设为指定的值，并将字段类型设为 <see langword="Delimited" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-421">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-422">现有内容`Delimiters`时设置此方法，将清除属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-422">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="0f455-423">此方法提供了一种方法，而无需创建一个数组设置分隔符。</span><span class="sxs-lookup"><span data-stu-id="0f455-423">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="0f455-424">下表列出的任务涉及示例`SetDelimiters`方法。</span><span class="sxs-lookup"><span data-stu-id="0f455-424">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="0f455-425">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-425">To</span></span>|<span data-ttu-id="0f455-426">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-426">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-427">分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-427">Parse a text file</span></span>|[<span data-ttu-id="0f455-428">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-428">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-429">此示例打开一个文本字段分析器并定义分隔符为`vbTab`。</span><span class="sxs-lookup"><span data-stu-id="0f455-429">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="0f455-430">将路径为`C:\logs\test.log`使用的路径和你想要分析的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0f455-430">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0f455-431">分隔符为零长度 ()。</span><span class="sxs-lookup"><span data-stu-id="0f455-431">A delimiter is zero-length.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-432">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-432">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-433">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-433">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-434">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-434">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths"><span data-ttu-id="0f455-435"><see langword="Integer" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="0f455-435">Array of <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="0f455-436">将读取器的分隔符设置为指定值。</span><span class="sxs-lookup"><span data-stu-id="0f455-436">Sets the delimiters for the reader to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-437">现有内容`Delimiters`属性会清除此设置时。</span><span class="sxs-lookup"><span data-stu-id="0f455-437">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="0f455-438">此方法提供了一种方法，而无需创建一个数组设置分隔符。</span><span class="sxs-lookup"><span data-stu-id="0f455-438">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="0f455-439">下表列出了所涉及的任务的示例`SetFieldWidths`方法。</span><span class="sxs-lookup"><span data-stu-id="0f455-439">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="0f455-440">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-440">To</span></span>|<span data-ttu-id="0f455-441">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-441">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-442">分析的文本文件。</span><span class="sxs-lookup"><span data-stu-id="0f455-442">Parse a text file.</span></span>|[<span data-ttu-id="0f455-443">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-443">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-444">此示例打开一个文本字段分析器并定义作为字段宽度`5`。</span><span class="sxs-lookup"><span data-stu-id="0f455-444">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="0f455-445">将路径为`C:\logs\test.log`使用的路径和你想要分析的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0f455-445">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="0f455-446">下面的示例打开一个文本字段分析器并定义作为字段宽度`5`， `10`，和变量。</span><span class="sxs-lookup"><span data-stu-id="0f455-446">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="0f455-447">将路径为`C:\logs\test.log`使用的路径和你想要分析的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0f455-447">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-448">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-448">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-449">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-449">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-450">指定要分析的文件是分隔的还是固定宽度的。</span><span class="sxs-lookup"><span data-stu-id="0f455-450">Indicates whether the file to be parsed is delimited or fixed-width.</span></span></summary>
        <value><span data-ttu-id="0f455-451">一个 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 值，它指示要分析的文件是分隔的还是固定宽度的。</span><span class="sxs-lookup"><span data-stu-id="0f455-451">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-452">分隔此属性的默认值。</span><span class="sxs-lookup"><span data-stu-id="0f455-452">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="0f455-453">下表列出了所涉及的任务的示例`TextFieldType`属性。</span><span class="sxs-lookup"><span data-stu-id="0f455-453">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="0f455-454">功能</span><span class="sxs-lookup"><span data-stu-id="0f455-454">To</span></span>|<span data-ttu-id="0f455-455">查看</span><span class="sxs-lookup"><span data-stu-id="0f455-455">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0f455-456">从带分隔符的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-456">Read from a delimited text file</span></span>|[<span data-ttu-id="0f455-457">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-457">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0f455-458">读取定宽文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-458">Read from a fixed-width text file</span></span>|[<span data-ttu-id="0f455-459">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-459">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="0f455-460">读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-460">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="0f455-461">如何：读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-461">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0f455-462">此示例将创建`TextFieldParser`， `FileReader`，并指定它分隔。</span><span class="sxs-lookup"><span data-stu-id="0f455-462">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="0f455-463">此示例将创建`TextFieldParser`， `FileReader`，并指定它是固定宽度。</span><span class="sxs-lookup"><span data-stu-id="0f455-463">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-464">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-464">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-465">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-465">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-466">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-466">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-467">如何：从 Visual Basic 中的固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-467">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-468">如何：从 Visual Basic 中的多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-468">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="0f455-469">关于异常的疑难解答：Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="0f455-469">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f455-470">指示是否应移除字段值中的前导和尾随空白。</span><span class="sxs-lookup"><span data-stu-id="0f455-470">Indicates whether leading and trailing white space should be trimmed from field values.</span></span></summary>
        <value><span data-ttu-id="0f455-471">如果应移除字段值中的前导和尾随空白，则为 <see langword="True" />；否则为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="0f455-471"><see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f455-472">此属性的默认值为 `True`。</span><span class="sxs-lookup"><span data-stu-id="0f455-472">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f455-473">此示例将创建`TextFieldParser`， `FileReader`，并设置`TrimWhiteSpace`属性设置为`True`。</span><span class="sxs-lookup"><span data-stu-id="0f455-473">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="0f455-474">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0f455-474">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="0f455-475">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="0f455-475">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="0f455-476">如何：从逗号分隔的文本文件，在 Visual Basic 中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-476">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="0f455-477">如何：从 Visual Basic 中的固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-477">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="0f455-478">如何：从 Visual Basic 中的多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="0f455-478">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>