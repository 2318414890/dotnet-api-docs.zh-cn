<Type Name="CustomAttributeTypedArgument" FullName="System.Reflection.CustomAttributeTypedArgument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dfe5af08cbdfc90d40752df4fe43304db8cb328" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36543309" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct CustomAttributeTypedArgument" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit CustomAttributeTypedArgument extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.CustomAttributeTypedArgument" />
  <TypeSignature Language="VB.NET" Value="Public Structure CustomAttributeTypedArgument" />
  <TypeSignature Language="C++ CLI" Value="public value class CustomAttributeTypedArgument" />
  <TypeSignature Language="F#" Value="type CustomAttributeTypedArgument = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示仅反射上下文中自定义属性的自变量或数组自变量的元素。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正在检查仅反射上下文中的代码不能执行，因此它并不总是可以检查自定义特性，通过创建它们，然后检查其属性、 使用等方法实例<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>， <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>，依次类推. 如果该属性类型本身的代码加载到只反射上下文中，不能执行它。  
  
 <xref:System.Reflection.CustomAttributeNamedArgument>结构由<xref:System.Reflection.CustomAttributeData>类可提供访问的类型和值的位置自变量为实例指定的自定义特性，而不执行属性构造函数。 它还提供对访问的类型和命名自变量的值而不执行自定义属性类型的相应属性的代码。  
  
 通过提供的类型和值的属性实例的所有定位和命名参数<xref:System.Reflection.CustomAttributeTypedArgument>结构。 返回的位置属性<xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A?displayProperty=nameWithType>属性直接由<xref:System.Reflection.CustomAttributeTypedArgument>结构，但返回的命名自变量<xref:System.Reflection.CustomAttributeData.NamedArguments%2A?displayProperty=nameWithType>属性都由<xref:System.Reflection.CustomAttributeNamedArgument>结构; 若要获取<xref:System.Reflection.CustomAttributeTypedArgument>对于命名自变量，使用的结构<xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType>属性。  
  
 如果参数是一个值，数组<xref:System.Reflection.CustomAttributeTypedArgument.Value%2A>属性<xref:System.Reflection.CustomAttributeTypedArgument>，表示自变量返回泛型<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Reflection.CustomAttributeTypedArgument>对象。 每个<xref:System.Reflection.CustomAttributeTypedArgument>集合中的对象表示数组的相应元素。  
  
 若要创建的实例<xref:System.Reflection.CustomAttributeData>类，而使用`static`<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>工厂方法。  
  
   
  
## Examples  
 下面的示例定义一个具有四个构造函数与四个属性的自定义特性。 两个属性是只读的并且由使用位置参数的构造函数的设置。 其他两个属性为读/写，并可以只能通过使用命名参数进行设置。 一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。  
  
 该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。 这种情况下使用不同的构造函数。 在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。  
  
 应用于该类型的属性演示数组属性，使用位置和命名自变量。  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.CustomAttributeData" />
    <altmember cref="T:System.Reflection.CustomAttributeNamedArgument" />
    <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomAttributeTypedArgument (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomAttributeTypedArgument(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Reflection.CustomAttributeTypedArgument : obj -&gt; System.Reflection.CustomAttributeTypedArgument" Usage="new System.Reflection.CustomAttributeTypedArgument value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">自定义特性参数的值。</param>
        <summary>使用指定的值初始化 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value`参数不能为`null`此构造函数，因为自变量类型来推断的一种`value`。 若要指定`null`值，请使用<xref:System.Reflection.CustomAttributeTypedArgument.%23ctor%28System.Type%2CSystem.Object%29>构造函数。  
  
 此构造函数仅供使用的继承者<xref:System.Reflection.CustomAttributeTypedArgument>类。 它不用于在应用程序代码中使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomAttributeTypedArgument (Type argumentType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type argumentType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (argumentType As Type, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomAttributeTypedArgument(Type ^ argumentType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Reflection.CustomAttributeTypedArgument : Type * obj -&gt; System.Reflection.CustomAttributeTypedArgument" Usage="new System.Reflection.CustomAttributeTypedArgument (argumentType, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="argumentType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argumentType">自定义特性参数的类型。</param>
        <param name="value">自定义特性参数的值。</param>
        <summary>用指定的类型和值初始化 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数仅供使用的继承者<xref:System.Reflection.CustomAttributeTypedArgument>类。 它不用于在应用程序代码中使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="argumentType" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ArgumentType">
      <MemberSignature Language="C#" Value="public Type ArgumentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ArgumentType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ArgumentType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentType : Type" Usage="System.Reflection.CustomAttributeTypedArgument.ArgumentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数或数组参数元素的类型。</summary>
        <value>一个 <see cref="T:System.Type" /> 对象，表示参数或数组元素的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性对于简单的参数或数组自变量的元素，标识返回的值的实际类型<xref:System.Reflection.CustomAttributeTypedArgument.Value%2A>属性。 对于数组自变量，此属性返回的数组类型，但<xref:System.Reflection.CustomAttributeTypedArgument.Value%2A>属性返回`ReadOnlyCollection<CustomAttributeTypedArgument>`(`ReadOnlyCollection(Of CustomAttributeTypedArgument)`在 Visual Basic 中) 中的集合的每个元素表示数组自变量的相应元素。  
  
   
  
## Examples  
 下面的示例定义一个具有四个构造函数与四个属性的自定义特性。 两个属性是只读的并且由使用位置参数的构造函数的设置。 其他两个属性为读/写，并可以只能通过使用命名参数进行设置。 一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。  
  
 该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。 这种情况下使用不同的构造函数。 在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。  
  
 应用于该类型的属性演示数组属性，使用位置和命名自变量。  
  
 <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A>属性用于`ShowValueOrArray`方法，用于显示自定义属性数据时，若要显示的属性的类型。  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.CustomAttributeTypedArgument.Value" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="customAttributeTypedArgument.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要比较的另一个对象。</param>
        <summary>指示此实例与指定对象是否相等。</summary>
        <returns>如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ValueType.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="customAttributeTypedArgument.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的哈希代码。</summary>
        <returns>一个 32 位带符号整数，它是此实例的哈希代码。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ValueType.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Reflection.CustomAttributeTypedArgument left, valuetype System.Reflection.CustomAttributeTypedArgument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CustomAttributeTypedArgument, right As CustomAttributeTypedArgument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::CustomAttributeTypedArgument left, System::Reflection::CustomAttributeTypedArgument right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.CustomAttributeTypedArgument * System.Reflection.CustomAttributeTypedArgument -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.CustomAttributeTypedArgument" />
        <Parameter Name="right" Type="System.Reflection.CustomAttributeTypedArgument" />
      </Parameters>
      <Docs>
        <param name="left">相等运算符左侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
        <param name="right">相等运算符右侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
        <summary>测试两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构是否相等。</summary>
        <returns>如果两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[此运算符的等效方法是<xref:System.Reflection.CustomAttributeTypedArgument.Equals%2A?displayProperty=nameWithType>。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Reflection.CustomAttributeTypedArgument left, valuetype System.Reflection.CustomAttributeTypedArgument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CustomAttributeTypedArgument, right As CustomAttributeTypedArgument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::CustomAttributeTypedArgument left, System::Reflection::CustomAttributeTypedArgument right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.CustomAttributeTypedArgument * System.Reflection.CustomAttributeTypedArgument -&gt; bool" Usage="System.Reflection.CustomAttributeTypedArgument.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.CustomAttributeTypedArgument" />
        <Parameter Name="right" Type="System.Reflection.CustomAttributeTypedArgument" />
      </Parameters>
      <Docs>
        <param name="left">不等运算符左侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
        <param name="right">不等运算符右侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
        <summary>测试两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构是否不同。</summary>
        <returns>如果两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[此运算符的等效方法是<xref:System.Reflection.CustomAttributeTypedArgument.Equals%2A?displayProperty=nameWithType>。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="customAttributeTypedArgument.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回由参数名称、等号和字符串表示的参数值组成的字符串。</summary>
        <returns>由参数名称、等号和字符串表示的参数值组成的字符串。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeTypedArgument.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Reflection.CustomAttributeTypedArgument.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取简单参数或数组参数的元素的参数值；获取数组参数的值的集合。</summary>
        <value>一个表示参数或元素的值的对象，或表示数组类型参数的值的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象的一个泛型 <see cref="T:System.Reflection.CustomAttributeTypedArgument" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Reflection.CustomAttributeTypedArgument>表示数组自变量，此属性返回`ReadOnlyCollection<CustomAttributeTypedArgument>`(`ReadOnlyCollection(Of CustomAttributeTypedArgument)`在 Visual Basic 中)。 集合的每个元素表示数组自变量的相应元素。  
  
 使用可以获取的值类型<xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A>属性。 <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> 获取返回的值的实际类型<xref:System.Reflection.CustomAttributeTypedArgument.Value%2A>对于简单的参数或数组自变量的元素的属性。 它返回数组自变量的数组类型。  
  
   
  
## Examples  
 下面的示例定义一个具有四个构造函数与四个属性的自定义特性。 两个属性是只读的并且由使用位置参数的构造函数的设置。 其他两个属性为读/写，并可以只能通过使用命名参数进行设置。 一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。  
  
 该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。 这种情况下使用不同的构造函数。 在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。  
  
 应用于该类型的属性演示数组属性，使用位置和命名自变量。  
  
 <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A>属性用于`ShowValueOrArray`显示自定义属性数据，以显示属性的值的方法。  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> &#124; <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>