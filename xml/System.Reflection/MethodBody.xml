<Type Name="MethodBody" FullName="System.Reflection.MethodBody">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b458a3a49aa36580b42fa89950a3b8bec20fe99" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715633" /></Metadata><TypeSignature Language="C#" Value="public class MethodBody" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit MethodBody extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBody" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodBody" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBody" />
  <TypeSignature Language="F#" Value="type MethodBody = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6ad41-101">提供对方法体的元数据和 MSIL 的访问权限。</span><span class="sxs-lookup"><span data-stu-id="6ad41-101">Provides access to the metadata and MSIL for the body of a method.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-102"><xref:System.Reflection.MethodBody>类提供对本地变量和异常处理子句在方法正文中，信息和组成方法主体的 Microsoft 中间语言 (MSIL) 访问。</span><span class="sxs-lookup"><span data-stu-id="6ad41-102">The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.</span></span>  
  
 <span data-ttu-id="6ad41-103">可以使用的模块类中，令牌解析方法，如<xref:System.Reflection.Module.ResolveType%2A>， <xref:System.Reflection.Module.ResolveMethod%2A>，并<xref:System.Reflection.Module.ResolveType%2A>，以在方法体中的标记解析<xref:System.Type>对象，<xref:System.Reflection.MethodInfo>对象，和<xref:System.Reflection.FieldInfo>提供的对象有关类型、 方法和在方法体的 MSIL 访问的字段的详细的信息。</span><span class="sxs-lookup"><span data-stu-id="6ad41-103">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ad41-104">分析方法体需要全面了解元数据和 MSIL 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="6ad41-104">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="6ad41-105">信息可在公共语言基础结构 (CLI) 文档中，尤其是"第二部分：Metadata Definition and Semantics”（第 2 部分：元数据定义和语义）和“Partition III:CIL Instruction Set”（第 3 部分：CIL 指令集）。</span><span class="sxs-lookup"><span data-stu-id="6ad41-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ad41-106">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="6ad41-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="6ad41-107">若要获取<xref:System.Reflection.MethodBody>给定方法的对象，请首先获取<xref:System.Reflection.MethodInfo>对象的方法，然后调用<xref:System.Reflection.MethodInfo>对象的<xref:System.Reflection.MethodBase.GetMethodBody%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6ad41-107">To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ad41-108">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="6ad41-108">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="6ad41-109"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-109">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="6ad41-110">该示例使用<xref:System.Reflection.MethodBody.LocalVariables%2A>属性来获取一系列<xref:System.Reflection.LocalVariableInfo>对象，然后显示其类型和索引顺序。</span><span class="sxs-lookup"><span data-stu-id="6ad41-110">The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order.</span></span> <span data-ttu-id="6ad41-111"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取异常处理子句的列表。</span><span class="sxs-lookup"><span data-stu-id="6ad41-111">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ad41-112">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="6ad41-112">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="6ad41-113">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="6ad41-113">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBody();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ad41-114">初始化 <see cref="T:System.Reflection.MethodBody" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="6ad41-114">Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-115">此构造函数由派生类调用的构造期间<xref:System.Reflection.MethodBody>对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-115">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandlingClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionHandlingClauses As IList(Of ExceptionHandlingClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ ExceptionHandlingClauses { System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandlingClauses : System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;" Usage="System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ad41-116">获取在方法主体中包含所有异常处理的子句的列表。</span><span class="sxs-lookup"><span data-stu-id="6ad41-116">Gets a list that includes all the exception-handling clauses in the method body.</span></span></summary>
        <value><span data-ttu-id="6ad41-117"><see cref="T:System.Reflection.ExceptionHandlingClause" /> 对象的 <see cref="T:System.Collections.Generic.IList`1" /> 表示方法主体中异常处理的子句。</span><span class="sxs-lookup"><span data-stu-id="6ad41-117">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-118">该列表包含所有 try 块中的所有子句在方法体中。</span><span class="sxs-lookup"><span data-stu-id="6ad41-118">The list includes all clauses from all try blocks in the method body.</span></span> <span data-ttu-id="6ad41-119">每个<xref:System.Reflection.ExceptionHandlingClause>对象包含标识与之关联的 try 块的信息。</span><span class="sxs-lookup"><span data-stu-id="6ad41-119">Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ad41-120">使用异常处理子句需要全面了解元数据和 MSIL 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="6ad41-120">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="6ad41-121">信息可在公共语言基础结构 (CLI) 文档中，尤其是"第二部分：Metadata Definition and Semantics”（第 2 部分：元数据定义和语义）和“Partition III:CIL Instruction Set”（第 3 部分：CIL 指令集）。</span><span class="sxs-lookup"><span data-stu-id="6ad41-121">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ad41-122">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="6ad41-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ad41-123">下面的代码示例定义一个名为测试方法`MethodBodyExample`并显示有关其异常处理子句的信息。</span><span class="sxs-lookup"><span data-stu-id="6ad41-123">The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses.</span></span> <span data-ttu-id="6ad41-124"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-124">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ad41-125"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-125">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ad41-126">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="6ad41-126">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="6ad41-127">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="6ad41-127">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="6ad41-128">此代码示例是为提供一个更大示例的一部分<xref:System.Reflection.MethodBody>类。</span><span class="sxs-lookup"><span data-stu-id="6ad41-128">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetILAsByteArray">
      <MemberSignature Language="C#" Value="public virtual byte[] GetILAsByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetILAsByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.GetILAsByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetILAsByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetILAsByteArray();" />
      <MemberSignature Language="F#" Value="abstract member GetILAsByteArray : unit -&gt; byte[]&#xA;override this.GetILAsByteArray : unit -&gt; byte[]" Usage="methodBody.GetILAsByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ad41-129">以字节数组的形式返回用于方法体的 MSIL。</span><span class="sxs-lookup"><span data-stu-id="6ad41-129">Returns the MSIL for the method body, as an array of bytes.</span></span></summary>
        <returns><span data-ttu-id="6ad41-130">类型 <see cref="T:System.Byte" /> 的数组包含用于方法体的 MSIL。</span><span class="sxs-lookup"><span data-stu-id="6ad41-130">An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-131">可以使用的模块类中，令牌解析方法，如<xref:System.Reflection.Module.ResolveType%2A>， <xref:System.Reflection.Module.ResolveMethod%2A>，并<xref:System.Reflection.Module.ResolveMember%2A>，以在方法体中的标记解析<xref:System.Type>对象，<xref:System.Reflection.MethodInfo>对象，和<xref:System.Reflection.FieldInfo>提供的对象有关类型、 方法和在方法体的 MSIL 访问的字段的详细的信息。</span><span class="sxs-lookup"><span data-stu-id="6ad41-131">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ad41-132">分析方法体需要全面了解元数据和 MSIL 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="6ad41-132">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="6ad41-133">信息可在公共语言基础结构 (CLI) 文档中，尤其是"第二部分：Metadata Definition and Semantics”（第 2 部分：元数据定义和语义）和“Partition III:CIL Instruction Set”（第 3 部分：CIL 指令集）。</span><span class="sxs-lookup"><span data-stu-id="6ad41-133">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ad41-134">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="6ad41-134">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])" />
        <altmember cref="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public virtual bool InitLocals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InitLocals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool" Usage="System.Reflection.MethodBody.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ad41-135">获取一个值，该值指示方法体中的局部变量是否初始化为相应类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6ad41-135">Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</span></span></summary>
        <value><span data-ttu-id="6ad41-136">如果方法体包含用于将局部变量初始化为 <see langword="true" />（对于引用类型）或者零初始值（对于值类型）的代码，则为 <see langword="null" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6ad41-136"><see langword="true" /> if the method body contains code to initialize local variables to <see langword="null" /> for reference types, or to the zero-initialized value for value types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-137"><xref:System.Reflection.MethodBody.InitLocals%2A>属性是指的变量的显式未初始化，这就是，如使用语法声明的变量`int x;`C# 中或`Dim x As Integer`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="6ad41-137">The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6ad41-138">引用变量将初始化为`null`默认情况下。</span><span class="sxs-lookup"><span data-stu-id="6ad41-138">Reference variables are initialized to `null` by default.</span></span> <span data-ttu-id="6ad41-139">数值变量初始化为零。</span><span class="sxs-lookup"><span data-stu-id="6ad41-139">Numeric variables are initialized to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ad41-140">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="6ad41-140">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="6ad41-141"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-141">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ad41-142"><xref:System.Reflection.MethodBody.MaxStackSize%2A>和<xref:System.Reflection.MethodBody.InitLocals%2A>属性将显示。</span><span class="sxs-lookup"><span data-stu-id="6ad41-142">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="6ad41-143">此代码示例是为提供一个更大示例的一部分<xref:System.Reflection.MethodBody>类。</span><span class="sxs-lookup"><span data-stu-id="6ad41-143">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalSignatureMetadataToken">
      <MemberSignature Language="C#" Value="public virtual int LocalSignatureMetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalSignatureMetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalSignatureMetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LocalSignatureMetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalSignatureMetadataToken : int" Usage="System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ad41-144">获取签名的元数据标记，该签名描述元数据中的方法的局部变量。</span><span class="sxs-lookup"><span data-stu-id="6ad41-144">Gets a metadata token for the signature that describes the local variables for the method in metadata.</span></span></summary>
        <value><span data-ttu-id="6ad41-145">表示元数据标记的整数。</span><span class="sxs-lookup"><span data-stu-id="6ad41-145">An integer that represents the metadata token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-146">使用<xref:System.Reflection.MethodBody.LocalVariables%2A>属性来获取有关方法的本地变量的信息。</span><span class="sxs-lookup"><span data-stu-id="6ad41-146">Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ad41-147">有关本地变量签名的信息可在公共语言基础结构 (CLI) 文档中，尤其是"第二部分：元数据定义和语义"。</span><span class="sxs-lookup"><span data-stu-id="6ad41-147">Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="6ad41-148">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="6ad41-148">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalVariables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.LocalVariableInfo&gt; LocalVariables" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalVariables As IList(Of LocalVariableInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ LocalVariables { System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalVariables : System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;" Usage="System.Reflection.MethodBody.LocalVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ad41-149">获取方法体中声明的局部变量的列表。</span><span class="sxs-lookup"><span data-stu-id="6ad41-149">Gets the list of local variables declared in the method body.</span></span></summary>
        <value><span data-ttu-id="6ad41-150"><see cref="T:System.Collections.Generic.IList`1" /> 对象的一个 <see cref="T:System.Reflection.LocalVariableInfo" />，这些对象描述在方法体中声明的局部变量。</span><span class="sxs-lookup"><span data-stu-id="6ad41-150">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-151">不需要提供的局部变量签名的元数据标记<xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6ad41-151">You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ad41-152">下面的代码示例定义一个名为测试方法`MethodBodyExample`并显示其本地变量信息。</span><span class="sxs-lookup"><span data-stu-id="6ad41-152">The following code example defines a test method named `MethodBodyExample` and displays its local variable information.</span></span> <span data-ttu-id="6ad41-153"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-153">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ad41-154"><xref:System.Reflection.MethodBody.LocalVariables%2A>属性用于获取一系列<xref:System.Reflection.LocalVariableInfo>对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-154">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.</span></span>  
  
 <span data-ttu-id="6ad41-155">此代码示例是为提供一个更大示例的一部分<xref:System.Reflection.MethodBody>类。</span><span class="sxs-lookup"><span data-stu-id="6ad41-155">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]
[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]
[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]
[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]
[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.LocalVariableInfo" />
      </Docs>
    </Member>
    <Member MemberName="MaxStackSize">
      <MemberSignature Language="C#" Value="public virtual int MaxStackSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxStackSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.MaxStackSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxStackSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxStackSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxStackSize : int" Usage="System.Reflection.MethodBody.MaxStackSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ad41-156">执行方法时，获取操作堆栈上的项的最大数目。</span><span class="sxs-lookup"><span data-stu-id="6ad41-156">Gets the maximum number of items on the operand stack when the method is executing.</span></span></summary>
        <value><span data-ttu-id="6ad41-157">执行方法时操作数堆栈上的项的最大数目。</span><span class="sxs-lookup"><span data-stu-id="6ad41-157">The maximum number of items on the operand stack when the method is executing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ad41-158">有关详细信息，请参阅公共语言基础结构 (CLI) 文档，尤其是"第二部分：Metadata Definition and Semantics”（第 2 部分：元数据定义和语义）和“Partition III:CIL Instruction Set”（第 3 部分：CIL 指令集）。</span><span class="sxs-lookup"><span data-stu-id="6ad41-158">For more information, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="6ad41-159">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="6ad41-159">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ad41-160">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="6ad41-160">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="6ad41-161"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="6ad41-161">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="6ad41-162"><xref:System.Reflection.MethodBody.MaxStackSize%2A>和<xref:System.Reflection.MethodBody.InitLocals%2A>属性将显示。</span><span class="sxs-lookup"><span data-stu-id="6ad41-162">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="6ad41-163">此代码示例是为提供一个更大示例的一部分<xref:System.Reflection.MethodBody>类。</span><span class="sxs-lookup"><span data-stu-id="6ad41-163">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>