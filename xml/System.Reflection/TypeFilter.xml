<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeFilter.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5483a33504401224295255aafdbaa0959893d7606.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">483a33504401224295255aafdbaa0959893d7606</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeFilter">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to which the filter is applied.</source>
          <target state="translated">对其应用筛选器的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeFilter">
          <source>An arbitrary object used to filter the list.</source>
          <target state="translated">用于筛选列表的任意对象。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeFilter">
          <source>Filters the classes represented in an array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects.</source>
          <target state="translated">筛选 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组中表示的类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeFilter">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> in the filtered list; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要在筛选后的列表中包括 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeFilter">
          <source>The <ph id="ph1">`TypeFilter`</ph> delegate is used to filter a list of classes.</source>
          <target state="translated"><ph id="ph1">`TypeFilter`</ph>委托用于筛选的类的列表。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeFilter">
          <source>Specifically, you use it to filter the classes represented in an array of <ph id="ph1">&lt;xref:System.Type&gt;</ph> objects.</source>
          <target state="translated">具体而言，你使用该值来筛选的数组中表示的类<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeFilter">
          <source>The <ph id="ph1">&lt;xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType&gt;</ph> method uses this delegate to filter the list of interfaces that it returns.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType&gt;</ph>方法使用此委托来筛选列表，它将返回的接口。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeFilter">
          <source>Every derived class of <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> and <ph id="ph2">&lt;xref:System.MulticastDelegate&gt;</ph> has a constructor and a <ph id="ph3">`DynamicInvoke`</ph> method.</source>
          <target state="translated">每个派生的类<ph id="ph1">&lt;xref:System.Delegate&gt;</ph>和<ph id="ph2">&lt;xref:System.MulticastDelegate&gt;</ph>具有构造函数和<ph id="ph3">`DynamicInvoke`</ph>方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeFilter">
          <source>See the Visual C++ code example given in the description for <ph id="ph1">`Delegate`</ph>.</source>
          <target state="translated">请参见 Visual c + + 代码示例中的描述给定<ph id="ph1">`Delegate`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeFilter">
          <source>This example shows how to define a method matching the <ph id="ph1">&lt;xref:System.Reflection.TypeFilter&gt;</ph> delegate prototype allowing you to use reflection to filter or return a subset of matching entries.</source>
          <target state="translated">此示例演示如何定义方法匹配<ph id="ph1">&lt;xref:System.Reflection.TypeFilter&gt;</ph>委托原型并可使用反射来筛选或返回的匹配项的子集。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>