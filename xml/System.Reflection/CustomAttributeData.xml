<Type Name="CustomAttributeData" FullName="System.Reflection.CustomAttributeData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d223374cb742fa63e395e382f4635482ab603987" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52341801" /></Metadata><TypeSignature Language="C#" Value="public class CustomAttributeData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CustomAttributeData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.CustomAttributeData" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomAttributeData" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomAttributeData" />
  <TypeSignature Language="F#" Value="type CustomAttributeData = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7cb93-101">提供对加载到仅反射上下文的程序集、模块、类型、成员和参数的自定义属性数据的访问权限。</span><span class="sxs-lookup"><span data-stu-id="7cb93-101">Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-102">正在检查仅反射上下文中的代码无法执行，因此并不总是可以通过创建实例它们，然后检查其属性、 使用等方法检查自定义特性<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>， <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>，等等.</span><span class="sxs-lookup"><span data-stu-id="7cb93-102">Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>, and so on.</span></span> <span data-ttu-id="7cb93-103">如果该属性类型本身的代码加载到仅反射上下文，无法执行。</span><span class="sxs-lookup"><span data-stu-id="7cb93-103">If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</span></span>  
  
 <span data-ttu-id="7cb93-104"><xref:System.Reflection.CustomAttributeData>类属性的抽象，从而允许对自定义特性的仅反射上下文中的检查。</span><span class="sxs-lookup"><span data-stu-id="7cb93-104">The <xref:System.Reflection.CustomAttributeData> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes.</span></span> <span data-ttu-id="7cb93-105">此类的成员可以用于获取位置参数和命名自变量的属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-105">The members of this class can be used to obtain the positional arguments and named arguments of the attribute.</span></span> <span data-ttu-id="7cb93-106">使用<xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A>属性来获取一系列<xref:System.Reflection.CustomAttributeTypedArgument>结构，表示位置的参数，并使用<xref:System.Reflection.CustomAttributeData.NamedArguments%2A>属性来获取一系列<xref:System.Reflection.CustomAttributeNamedArgument>这些结构表示命名的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-106">Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cb93-107"><xref:System.Reflection.CustomAttributeNamedArgument>结构仅提供了有关用于获取和设置参数值的特性属性的信息。</span><span class="sxs-lookup"><span data-stu-id="7cb93-107">The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value.</span></span> <span data-ttu-id="7cb93-108">若要获取的类型和参数的值，请使用<xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType>属性来获取<xref:System.Reflection.CustomAttributeTypedArgument>结构。</span><span class="sxs-lookup"><span data-stu-id="7cb93-108">To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure.</span></span>  
  
 <span data-ttu-id="7cb93-109">后<xref:System.Reflection.CustomAttributeTypedArgument>是否已命名或位置，结构参数，使用<xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType>属性获取的类型和<xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType>属性来获取的值。</span><span class="sxs-lookup"><span data-stu-id="7cb93-109">When you have a <xref:System.Reflection.CustomAttributeTypedArgument> structure for an argument, whether named or positional, use the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType> property to get the type and the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType> property to get the value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cb93-110">数组参数，对于<xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType>属性返回一个泛型<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Reflection.CustomAttributeTypedArgument>对象。</span><span class="sxs-lookup"><span data-stu-id="7cb93-110">For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects.</span></span> <span data-ttu-id="7cb93-111">每个<xref:System.Reflection.CustomAttributeTypedArgument>集合中的对象表示数组的相应元素。</span><span class="sxs-lookup"><span data-stu-id="7cb93-111">Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.</span></span>  
  
 <span data-ttu-id="7cb93-112"><xref:System.Reflection.CustomAttributeData> 可以在执行上下文和仅反射上下文中使用。</span><span class="sxs-lookup"><span data-stu-id="7cb93-112"><xref:System.Reflection.CustomAttributeData> can be used in the execution context as well as in the reflection-only context.</span></span> <span data-ttu-id="7cb93-113">例如，你可能想要避免加载包含自定义特性的代码的程序集。</span><span class="sxs-lookup"><span data-stu-id="7cb93-113">For example, you might want to avoid loading the assembly that contains the code for a custom attribute.</span></span> <span data-ttu-id="7cb93-114">使用<xref:System.Reflection.CustomAttributeData>类是不同于使用方法，如<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="7cb93-114">Using the <xref:System.Reflection.CustomAttributeData> class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>:</span></span>  
  
-   <span data-ttu-id="7cb93-115">属性和方法<xref:System.Reflection.CustomAttributeData>仅向你提供指定的值的特性实例，未在构造函数的语义。</span><span class="sxs-lookup"><span data-stu-id="7cb93-115">The properties and methods of <xref:System.Reflection.CustomAttributeData> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor.</span></span> <span data-ttu-id="7cb93-116">例如，可能会在内部转换为某些其他表示形式，并在规范的格式; 中返回属性的字符串自变量或执行实际的属性的代码时，一个属性可能有副作用。</span><span class="sxs-lookup"><span data-stu-id="7cb93-116">For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.</span></span>  
  
-   <span data-ttu-id="7cb93-117">属性和方法<xref:System.Reflection.CustomAttributeData>不允许您检索从基类继承的自定义特性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-117">The properties and methods of <xref:System.Reflection.CustomAttributeData> do not allow you to retrieve the custom attributes inherited from base classes.</span></span>  
  
 <span data-ttu-id="7cb93-118">若要创建的实例<xref:System.Reflection.CustomAttributeData>类中，使用`static`(`Shared`在 Visual Basic 中)<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>工厂方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-118">To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-119">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-119">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-120">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-120">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-121">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-121">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-122">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-122">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-123">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-123">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-124">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-124">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-125">执行时，该程序集本身加载到仅反射上下文，并显示有关已应用到它及类型和它包含的成员的自定义特性的信息。</span><span class="sxs-lookup"><span data-stu-id="7cb93-125">When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.</span></span>  
  
 <span data-ttu-id="7cb93-126">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-126">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
    <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CustomAttributeData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CustomAttributeData();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7cb93-127">初始化 <see cref="T:System.Reflection.CustomAttributeData" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7cb93-127">Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-128">此构造函数由派生类调用的构造期间<xref:System.Reflection.CustomAttributeData>对象。</span><span class="sxs-lookup"><span data-stu-id="7cb93-128">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.CustomAttributeData> objects.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="7cb93-129">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="7cb93-129">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="7cb93-130">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="7cb93-130">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AttributeType">
      <MemberSignature Language="C#" Value="public Type AttributeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AttributeType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.AttributeType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AttributeType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ AttributeType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeType : Type" Usage="System.Reflection.CustomAttributeData.AttributeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7cb93-131">键入该特性的类型。</span><span class="sxs-lookup"><span data-stu-id="7cb93-131">Gets the type of the attribute.</span></span></summary>
        <value><span data-ttu-id="7cb93-132">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="7cb93-132">The type of the attribute.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constructor">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ConstructorInfo Constructor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo Constructor" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.Constructor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Constructor As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ConstructorInfo ^ Constructor { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Constructor : System.Reflection.ConstructorInfo" Usage="System.Reflection.CustomAttributeData.Constructor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7cb93-133">获取一个 <see cref="T:System.Reflection.ConstructorInfo" /> 对象，表示应已初始化自定义属性的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-133">Gets a <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor that would have initialized the custom attribute.</span></span></summary>
        <value><span data-ttu-id="7cb93-134">一个对象，表示应已初始化由 <see cref="T:System.Reflection.CustomAttributeData" /> 类的当前实例表示的自定义属性的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-134">An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-135">如果属性类型具有多个构造函数，该属性返回只应已初始化由当前的特性实例的特定构造函数<xref:System.Reflection.CustomAttributeData>对象。</span><span class="sxs-lookup"><span data-stu-id="7cb93-135">If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref:System.Reflection.CustomAttributeData> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-136">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-136">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-137">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-137">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-138">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-138">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-139">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-139">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-140">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-140">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-141">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-141">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-142">执行时，该程序集本身加载到仅反射上下文，并显示自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-142">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="7cb93-143">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-143">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="7cb93-144"><xref:System.Reflection.CustomAttributeData.Constructor%2A>中使用属性`ShowAttributeData`显示自定义特性数据的方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-144">The <xref:System.Reflection.CustomAttributeData.Constructor%2A> property is used in the `ShowAttributeData` method that displays custom attribute data.</span></span> <span data-ttu-id="7cb93-145">在此代码示例中，<xref:System.Reflection.ConstructorInfo>返回此属性用于显示一个文本字符串，描述构造函数中，演示该属性返回会初始化该特性的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-145">In this code example, the <xref:System.Reflection.ConstructorInfo> returned by this property is used to display a text string that describes the constructor, demonstrating that the property returns the constructor that would initialize the attribute.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="ConstructorArguments">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeTypedArgument&gt; ConstructorArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Reflection.CustomAttributeTypedArgument&gt; ConstructorArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.ConstructorArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConstructorArguments As IList(Of CustomAttributeTypedArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeTypedArgument&gt; ^ ConstructorArguments { System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeTypedArgument&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConstructorArguments : System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeTypedArgument&gt;" Usage="System.Reflection.CustomAttributeData.ConstructorArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeTypedArgument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7cb93-146">获取为由 <see cref="T:System.Reflection.CustomAttributeData" /> 对象表示的特性实例指定的位置参数列表。</span><span class="sxs-lookup"><span data-stu-id="7cb93-146">Gets the list of positional arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</span></span></summary>
        <value><span data-ttu-id="7cb93-147">一个结构的集合，表示为自定义特性实例指定的位置参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-147">A collection of structures that represent the positional arguments specified for the custom attribute instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-148">此方法获取指定的自定义属性实例而不执行任何自定义属性代码的位置参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-148">This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</span></span> <span data-ttu-id="7cb93-149">因此，它可以在仅限反射上下文中使用。</span><span class="sxs-lookup"><span data-stu-id="7cb93-149">Thus, it can be used in the reflection-only context.</span></span>  
  
 <span data-ttu-id="7cb93-150">使用<xref:System.Reflection.CustomAttributeData.NamedArguments%2A>方法获取的特性实例指定的命名的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-150">Use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> method to get the named arguments specified for the attribute instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-151">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-151">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-152">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-152">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-153">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-153">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-154">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-154">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-155">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-155">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-156">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-156">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-157">执行时，该程序集本身加载到仅反射上下文，并显示自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-157">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="7cb93-158">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-158">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="7cb93-159"><xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A>中使用属性`ShowAttributeData`显示自定义特性数据的方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-159">The <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property is used in the `ShowAttributeData` method that displays custom attribute data.</span></span> <span data-ttu-id="7cb93-160">在此代码示例中，此属性用于显示传递给构造函数初始化特性的参数列表。</span><span class="sxs-lookup"><span data-stu-id="7cb93-160">In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.CustomAttributeData.NamedArguments" />
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="customAttributeData.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7cb93-161">与此实例进行比较的对象，或为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7cb93-161">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7cb93-162">返回一个值，该值指示此实例是否与指定的对象相等。</span><span class="sxs-lookup"><span data-stu-id="7cb93-162">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="7cb93-163">如果 <paramref name="obj" /> 等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7cb93-163"><see langword="true" /> if <paramref name="obj" /> is equal to the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7cb93-164">返回一个 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示有关已应用于目标的特性的数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-164">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Assembly target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.Assembly target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As Assembly) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::Assembly ^ target);" />
      <MemberSignature Language="F#" Value="static member GetCustomAttributes : System.Reflection.Assembly -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="System.Reflection.CustomAttributeData.GetCustomAttributes target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7cb93-165">要检索其自定义特性数据的程序集。</span><span class="sxs-lookup"><span data-stu-id="7cb93-165">The assembly whose custom attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="7cb93-166">返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标程序集的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-166">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target assembly.</span></span></summary>
        <returns><span data-ttu-id="7cb93-167">对象的列表，表示已应用到目标程序集的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-167">A list of objects that represent data about the attributes that have been applied to the target assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-168">此方法提供了一种替代方法<xref:System.Reflection.Assembly.GetCustomAttributes%2A>始终仅反射上下文中使用的方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-168">This method provides an alternative to the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-169">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-169">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-170">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-170">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-171">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-171">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-172">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-172">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-173">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-173">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-174">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-174">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-175">执行时，该程序集本身加载到仅反射上下文，并显示自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-175">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="7cb93-176">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-176">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="7cb93-177"><xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>方法中使用`Main()`若要获取应用于程序集的自定义特性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-177">The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes applied to the assembly.</span></span> <span data-ttu-id="7cb93-178">该方法的返回值传递给`ShowAttributeData`方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-178">The return value of the method is passed to the `ShowAttributeData` method.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7cb93-179"><paramref name="target" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7cb93-179"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.MemberInfo target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.MemberInfo target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As MemberInfo) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::MemberInfo ^ target);" />
      <MemberSignature Language="F#" Value="static member GetCustomAttributes : System.Reflection.MemberInfo -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="System.Reflection.CustomAttributeData.GetCustomAttributes target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7cb93-180">要检索其特性数据的成员。</span><span class="sxs-lookup"><span data-stu-id="7cb93-180">The member whose attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="7cb93-181">返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标成员的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-181">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span></span></summary>
        <returns><span data-ttu-id="7cb93-182">对象的列表，表示已应用到目标成员的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-182">A list of objects that represent data about the attributes that have been applied to the target member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-183">此方法的重载获取自定义属性数据类型、 嵌套的类型和类型成员，因为<xref:System.Type>类和中的类<xref:System.Reflection>表示所有派生的类型成员的命名空间<xref:System.Reflection.MemberInfo>。</span><span class="sxs-lookup"><span data-stu-id="7cb93-183">This method overload gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-184">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-184">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-185">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-185">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-186">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-186">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-187">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-187">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-188">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-188">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-189">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-189">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-190">执行时，该程序集本身加载到仅反射上下文，并显示自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-190">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="7cb93-191">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-191">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="7cb93-192"><xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>中使用方法`Main()`若要获取已应用于类型和测试方法的自定义特性 (<xref:System.Type>派生自<xref:System.Reflection.MemberInfo>)。</span><span class="sxs-lookup"><span data-stu-id="7cb93-192">The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes that were applied to a type and to a test method (<xref:System.Type> derives from <xref:System.Reflection.MemberInfo>).</span></span> <span data-ttu-id="7cb93-193">返回值<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>传递给`ShowAttributeData`方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-193">The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7cb93-194"><paramref name="target" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7cb93-194"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Module target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.Module target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As Module) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::Module ^ target);" />
      <MemberSignature Language="F#" Value="static member GetCustomAttributes : System.Reflection.Module -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="System.Reflection.CustomAttributeData.GetCustomAttributes target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7cb93-195">要检索其自定义特性数据的模块。</span><span class="sxs-lookup"><span data-stu-id="7cb93-195">The module whose custom attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="7cb93-196">返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标模块的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-196">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target module.</span></span></summary>
        <returns><span data-ttu-id="7cb93-197">对象的列表，表示已应用到目标模块的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-197">A list of objects that represent data about the attributes that have been applied to the target module.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7cb93-198"><paramref name="target" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7cb93-198"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.ParameterInfo target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributes(class System.Reflection.ParameterInfo target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomAttributes (target As ParameterInfo) As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributes(System::Reflection::ParameterInfo ^ target);" />
      <MemberSignature Language="F#" Value="static member GetCustomAttributes : System.Reflection.ParameterInfo -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="System.Reflection.CustomAttributeData.GetCustomAttributes target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Reflection.ParameterInfo" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7cb93-199">要检索其特性数据的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-199">The parameter whose attribute data is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="7cb93-200">返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标参数的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-200">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target parameter.</span></span></summary>
        <returns><span data-ttu-id="7cb93-201">对象的列表，表示已应用到目标参数的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="7cb93-201">A list of objects that represent data about the attributes that have been applied to the target parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-202">此方法提供了一种替代方法<xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A>始终仅反射上下文中使用的方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-202">This method provides an alternative to the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-203">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-203">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-204">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-204">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-205">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-205">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-206">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-206">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-207">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-207">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-208">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-208">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-209">执行时，该程序集本身加载到仅反射上下文，并显示自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-209">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="7cb93-210">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-210">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="7cb93-211"><xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>方法中使用`Main()`检索自定义属性应用于测试方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-211">The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to retrieve the custom attributes applied to a parameter of a test method.</span></span> <span data-ttu-id="7cb93-212">返回值<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>传递给`ShowAttributeData`方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-212">The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7cb93-213"><paramref name="target" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7cb93-213"><paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="customAttributeData.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7cb93-214">用作特定类型的哈希函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-214">Serves as a hash function for a particular type.</span></span></summary>
        <returns><span data-ttu-id="7cb93-215">当前 <see cref="T:System.Object" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7cb93-215">A hash code for the current <see cref="T:System.Object" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="NamedArguments">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeNamedArgument&gt; NamedArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Reflection.CustomAttributeNamedArgument&gt; NamedArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeData.NamedArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NamedArguments As IList(Of CustomAttributeNamedArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeNamedArgument&gt; ^ NamedArguments { System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeNamedArgument&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamedArguments : System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeNamedArgument&gt;" Usage="System.Reflection.CustomAttributeData.NamedArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeNamedArgument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7cb93-216">获取为由 <see cref="T:System.Reflection.CustomAttributeData" /> 对象表示的特性实例指定的命名参数列表。</span><span class="sxs-lookup"><span data-stu-id="7cb93-216">Gets the list of named arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</span></span></summary>
        <value><span data-ttu-id="7cb93-217">一个结构的集合，表示为自定义特性实例指定的命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-217">A collection of structures that represent the named arguments specified for the custom attribute instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-218">此方法获取指定的自定义属性实例而不执行任何自定义属性代码的命名的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-218">This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</span></span> <span data-ttu-id="7cb93-219">因此，它可以在仅限反射上下文中使用。</span><span class="sxs-lookup"><span data-stu-id="7cb93-219">Thus, it can be used in the Reflection-only context.</span></span>  
  
 <span data-ttu-id="7cb93-220">返回的列表包含仅为此特性实例指定的命名的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-220">The list that is returned contains only the named arguments that were specified for the attribute instance.</span></span>  
  
 <span data-ttu-id="7cb93-221">使用<xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A>方法以获取指定的位置参数的特性实例。</span><span class="sxs-lookup"><span data-stu-id="7cb93-221">Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> method to get the positional arguments that were specified for the attribute instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-222">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-222">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-223">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-223">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-224">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-224">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-225">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-225">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-226">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-226">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-227">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-227">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-228">执行时，该程序集本身加载到仅反射上下文，并显示自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-228">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="7cb93-229">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-229">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="7cb93-230"><xref:System.Reflection.CustomAttributeData.NamedArguments%2A>中使用属性`ShowAttributeData`显示自定义特性数据的方法。</span><span class="sxs-lookup"><span data-stu-id="7cb93-230">The <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property is used in the `ShowAttributeData` method that displays custom attribute data.</span></span> <span data-ttu-id="7cb93-231">在此代码示例中，此属性用于显示指定属性的命名参数列表。</span><span class="sxs-lookup"><span data-stu-id="7cb93-231">In this code example, this property is used to display the list of named arguments specified for the attribute.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.CustomAttributeData.ConstructorArguments" />
        <altmember cref="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeData.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="customAttributeData.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7cb93-232">返回自定义特性的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7cb93-232">Returns a string representation of the custom attribute.</span></span></summary>
        <returns><span data-ttu-id="7cb93-233">一个表示自定义特性的字符串值。</span><span class="sxs-lookup"><span data-stu-id="7cb93-233">A string value that represents the custom attribute.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cb93-234">字符串值包含属性类型、 属性参数和命名的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-234">The string value includes the attribute type, the attribute parameters, and the named parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cb93-235">下面的示例定义具有四个构造函数和四个属性的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-235">The following example defines a custom attribute with four constructors and four properties.</span></span> <span data-ttu-id="7cb93-236">两个属性是只读的并使用位置参数的构造函数的设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-236">Two of the properties are read-only, and are set by using the positional parameters of the constructors.</span></span> <span data-ttu-id="7cb93-237">其他两个属性是读/写，并可以仅通过使用命名参数进行设置。</span><span class="sxs-lookup"><span data-stu-id="7cb93-237">The other two properties are read/write, and can be set only by using named arguments.</span></span> <span data-ttu-id="7cb93-238">一个位置属性是一个字符串、 数组和一个命名的属性是一个整数数组。</span><span class="sxs-lookup"><span data-stu-id="7cb93-238">One positional property is an array of strings, and one named property is an array of integers.</span></span>  
  
 <span data-ttu-id="7cb93-239">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-239">The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</span></span> <span data-ttu-id="7cb93-240">这种情况下使用不同的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-240">Different constructors are used for these cases.</span></span> <span data-ttu-id="7cb93-241">执行时，该程序集本身加载到仅反射上下文，并显示自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-241">When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</span></span>  
  
 <span data-ttu-id="7cb93-242">应用于类型的属性说明数组属性，使用位置和命名参数。</span><span class="sxs-lookup"><span data-stu-id="7cb93-242">The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</span></span>  
  
 <span data-ttu-id="7cb93-243">在此示例中，<xref:System.Reflection.CustomAttributeData.ToString%2A>方法中使用`ShowAttributeData`方法，以确定其数据显示的属性。</span><span class="sxs-lookup"><span data-stu-id="7cb93-243">In this example, the <xref:System.Reflection.CustomAttributeData.ToString%2A> method is used in the `ShowAttributeData` method, to identify the attribute whose data is being displayed.</span></span>  
  
 [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>