<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CustomAttributeData.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b81fc715a47a4fd76280f78c4364218e82b0390c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b81fc715a47a4fd76280f78c4364218e82b0390c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeData">
          <source>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</source>
          <target state="translated">提供对加载到仅反射上下文的程序集、模块、类型、成员和参数的自定义属性数据的访问权限。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, and so on.</source>
          <target state="translated">正在检查仅反射上下文中的代码不能执行，因此它并不总是可以检查自定义特性，通过创建它们，然后检查其属性、 使用等方法实例<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>，依次类推.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</source>
          <target state="translated">如果该属性类型本身的代码加载到只反射上下文中，不能执行它。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>类通过提供的抽象属性允许在只反射上下文中的自定义特性进行检查。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The members of this class can be used to obtain the positional arguments and named arguments of the attribute.</source>
          <target state="translated">此类的成员可以用于获取位置自变量和命名自变量的属性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> property to get a list of <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures that represent the positional arguments, and use the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> property to get a list of <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structures that represent the named arguments.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph>属性来获取的列表<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>表示位置的自变量，并使用的结构<ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph>属性来获取的列表<ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>这些结构表示命名自变量。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure only provides information about the attribute property used to get and set the argument value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>结构只提供有关用于获取和设置自变量值的属性的信息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>To obtain the type and value of the argument, use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType&gt;</ph> property to obtain a <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure.</source>
          <target state="translated">若要获取的类型和自变量的值，使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType&gt;</ph>属性来获取<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>结构。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>When you have a <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure for an argument, whether named or positional, use the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType&gt;</ph> property to get the type and the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph> property to get the value.</source>
          <target state="translated">如果你具有<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>结构自变量，是否已命名或位置，使用<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType&gt;</ph>属性用于获取的类型和<ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph>属性来获取的值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>For an array argument, the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph> property returns a generic <ph id="ph2">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> of <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> objects.</source>
          <target state="translated">数组自变量，<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph>属性返回泛型<ph id="ph2">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph>的<ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Each <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> object in the collection represents the corresponding element of the array.</source>
          <target state="translated">每个<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>集合中的对象表示数组的相应元素。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> can be used in the execution context as well as in the reflection-only context.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> 可在执行上下文以及只反射上下文中。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>For example, you might want to avoid loading the assembly that contains the code for a custom attribute.</source>
          <target state="translated">例如，你可能想要避免加载程序集包含的自定义特性的代码。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Using the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class is different from using methods like <ph id="ph2">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>:</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>类是不同于使用等方法<ph id="ph2">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The properties and methods of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor.</source>
          <target state="translated">属性和方法<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>仅为您提供了已指定的值的属性实例，不构造函数的语义。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.</source>
          <target state="translated">例如，可能内部转换为某些其他表示形式，并在规范的格式; 中返回属性的字符串自变量或属性可能具有副作用，执行实际的属性的代码。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The properties and methods of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> do not allow you to retrieve the custom attributes inherited from base classes.</source>
          <target state="translated">属性和方法<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>不允许您检索从基类继承的自定义属性。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>To create instances of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, use the <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory methods.</source>
          <target state="translated">若要创建的实例<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>类，而使用<ph id="ph2">`static`</ph>(<ph id="ph3">`Shared`</ph>在 Visual Basic 中)<ph id="ph4">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>工厂方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示有关已应用到它及的类型和成员，它包含自定义特性的信息。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>This constructor is invoked by derived classes during the construction of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> objects.</source>
          <target state="translated">此构造函数由派生类调用的构造过程<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.AttributeType">
          <source>Gets the type of the attribute.</source>
          <target state="translated">键入该特性的类型。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.AttributeType">
          <source>The type of the attribute.</source>
          <target state="translated">属性的类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> object that represents the constructor that would have initialized the custom attribute.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> 对象，表示应已初始化自定义属性的构造函数。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> class.</source>
          <target state="translated">一个对象，表示应已初始化由 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 类的当前实例表示的自定义属性的构造函数。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> object.</source>
          <target state="translated">如果一个属性类型有多个构造函数，该属性返回仅可能已初始化表示由当前的属性实例的特定构造函数<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.Constructor%2A&gt;</ph> property is used in the <ph id="ph2">`ShowAttributeData`</ph> method that displays custom attribute data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.Constructor%2A&gt;</ph>属性用于<ph id="ph2">`ShowAttributeData`</ph>显示自定义属性数据的方法。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>In this code example, the <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> returned by this property is used to display a text string that describes the constructor, demonstrating that the property returns the constructor that would initialize the attribute.</source>
          <target state="translated">在此代码示例中，<ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>返回此属性用于显示描述构造函数，演示该属性返回会初始化该属性的构造函数的文本字符串。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Gets the list of positional arguments specified for the attribute instance represented by the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> object.</source>
          <target state="translated">获取为由 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象表示的特性实例指定的位置参数列表。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>A collection of structures that represent the positional arguments specified for the custom attribute instance.</source>
          <target state="translated">一个结构的集合，表示为自定义特性实例指定的位置参数。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</source>
          <target state="translated">此方法获取已为实例指定的自定义特性而不执行任何自定义特性代码的位置自变量。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Thus, it can be used in the reflection-only context.</source>
          <target state="translated">因此，它可以仅反射上下文中使用。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> method to get the named arguments specified for the attribute instance.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph>方法来获取指定的属性实例的命名的参数。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> property is used in the <ph id="ph2">`ShowAttributeData`</ph> method that displays custom attribute data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph>属性用于<ph id="ph2">`ShowAttributeData`</ph>显示自定义属性数据的方法。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute.</source>
          <target state="translated">在此代码示例中，此属性用于显示传递给构造函数初始化特性自变量的列表。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">与此实例进行比较的对象，或为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">返回一个值，该值指示此实例是否与指定的对象相等。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is equal to the current instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 等于当前实例，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target.</source>
          <target state="translated">返回一个 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象列表，这些对象表示有关已应用于目标的特性的数据。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The assembly whose custom attribute data is to be retrieved.</source>
          <target state="translated">要检索其自定义特性数据的程序集。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target assembly.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象列表，这些对象表示已应用到目标程序集的特性相关数据。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>A list of objects that represent data about the attributes that have been applied to the target assembly.</source>
          <target state="translated">对象的列表，表示已应用到目标程序集的特性相关数据。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>This method provides an alternative to the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.</source>
          <target state="translated">此方法提供的替代方法<ph id="ph1">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph>始终仅反射上下文中使用的方法。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> method is used in <ph id="ph2">`Main()`</ph> to get the custom attributes applied to the assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>中使用方法<ph id="ph2">`Main()`</ph>若要获取应用于程序集的自定义属性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The return value of the method is passed to the <ph id="ph1">`ShowAttributeData`</ph> method.</source>
          <target state="translated">该方法的返回值传递给<ph id="ph1">`ShowAttributeData`</ph>方法。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The member whose attribute data is to be retrieved.</source>
          <target state="translated">要检索其特性数据的成员。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象列表，这些对象表示已应用到目标成员的特性相关数据。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>A list of objects that represent data about the attributes that have been applied to the target member.</source>
          <target state="translated">对象的列表，表示已应用到目标成员的特性相关数据。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>This method overload gets custom attribute data for types, nested types, and type members, because the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">此方法重载获取自定义属性数据类型、 嵌套的类型和类型的成员，因为<ph id="ph1">&lt;xref:System.Type&gt;</ph>类和中的类<ph id="ph2">&lt;xref:System.Reflection&gt;</ph>代表类型成员都派生自的命名空间<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> method is used in <ph id="ph2">`Main()`</ph> to get the custom attributes that were applied to a type and to a test method (<ph id="ph3">&lt;xref:System.Type&gt;</ph> derives from <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>中使用方法<ph id="ph2">`Main()`</ph>以获取已应用于类型和测试方法的自定义特性 (<ph id="ph3">&lt;xref:System.Type&gt;</ph>派生自<ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> is passed to the <ph id="ph2">`ShowAttributeData`</ph> method.</source>
          <target state="translated">返回值<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>传递给<ph id="ph2">`ShowAttributeData`</ph>方法。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source>The module whose custom attribute data is to be retrieved.</source>
          <target state="translated">要检索其自定义特性数据的模块。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target module.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象列表，这些对象表示已应用到目标模块的特性相关数据。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source>A list of objects that represent data about the attributes that have been applied to the target module.</source>
          <target state="translated">对象的列表，表示已应用到目标模块的特性相关数据。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The parameter whose attribute data is to be retrieved.</source>
          <target state="translated">要检索其特性数据的参数。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target parameter.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象列表，这些对象表示已应用到目标参数的特性相关数据。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>A list of objects that represent data about the attributes that have been applied to the target parameter.</source>
          <target state="translated">对象的列表，表示已应用到目标参数的特性相关数据。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>This method provides an alternative to the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.</source>
          <target state="translated">此方法提供的替代方法<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A&gt;</ph>始终仅反射上下文中使用的方法。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> method is used in <ph id="ph2">`Main()`</ph> to retrieve the custom attributes applied to a parameter of a test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>中使用方法<ph id="ph2">`Main()`</ph>检索自定义属性应用于测试方法的参数。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> is passed to the <ph id="ph2">`ShowAttributeData`</ph> method.</source>
          <target state="translated">返回值<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>传递给<ph id="ph2">`ShowAttributeData`</ph>方法。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetHashCode">
          <source>Serves as a hash function for a particular type.</source>
          <target state="translated">用作特定类型的哈希函数。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 的哈希代码。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Gets the list of named arguments specified for the attribute instance represented by the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> object.</source>
          <target state="translated">获取为由 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象表示的特性实例指定的命名参数列表。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>A collection of structures that represent the named arguments specified for the custom attribute instance.</source>
          <target state="translated">一个结构的集合，表示为自定义特性实例指定的命名参数。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</source>
          <target state="translated">此方法获取已为实例指定的自定义特性而不执行任何自定义特性代码的命名自变量。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Thus, it can be used in the Reflection-only context.</source>
          <target state="translated">因此，它可以仅反射上下文中使用。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The list that is returned contains only the named arguments that were specified for the attribute instance.</source>
          <target state="translated">返回的列表包含仅指定的属性实例的命名自变量。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> method to get the positional arguments that were specified for the attribute instance.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph>方法来获取的属性实例的指定的位置自变量。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> property is used in the <ph id="ph2">`ShowAttributeData`</ph> method that displays custom attribute data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph>属性用于<ph id="ph2">`ShowAttributeData`</ph>显示自定义属性数据的方法。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>In this code example, this property is used to display the list of named arguments specified for the attribute.</source>
          <target state="translated">在此代码示例中，此属性用于显示的属性指定的命名自变量的列表。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>Returns a string representation of the custom attribute.</source>
          <target state="translated">返回自定义特性的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>A string value that represents the custom attribute.</source>
          <target state="translated">一个表示自定义特性的字符串值。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The string value includes the attribute type, the attribute parameters, and the named parameters.</source>
          <target state="translated">字符串值包括属性类型、 属性参数和命名的参数。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下面的示例定义一个具有四个构造函数与四个属性的自定义特性。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">两个属性是只读的并且由使用位置参数的构造函数的设置。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他两个属性为读/写，并可以只能通过使用命名参数进行设置。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">一个位置属性为一个字符串，数组，一个命名的属性为整数的数组。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">该特性可应用于程序集、在该程序集中声明的类型、该类型的方法以及该方法的参数。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">这种情况下使用不同的构造函数。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在执行时，程序集将自身加载到只反射上下文，并显示自定义属性。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">应用于该类型的属性演示数组属性，使用位置和命名自变量。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>In this example, the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ToString%2A&gt;</ph> method is used in the <ph id="ph2">`ShowAttributeData`</ph> method, to identify the attribute whose data is being displayed.</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ToString%2A&gt;</ph>中使用方法<ph id="ph2">`ShowAttributeData`</ph>方法，来确定正在显示其数据的属性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>