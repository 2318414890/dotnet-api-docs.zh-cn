<Type Name="ExceptionHandlingClause" FullName="System.Reflection.ExceptionHandlingClause">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f1ac7c30da24689cae1d92a92f3212930959597f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37472939" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ExceptionHandlingClause" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit ExceptionHandlingClause extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ExceptionHandlingClause" />
  <TypeSignature Language="VB.NET" Value="Public Class ExceptionHandlingClause" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandlingClause" />
  <TypeSignature Language="F#" Value="type ExceptionHandlingClause = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b0b46-101">表示结构化异常处理块中的子句。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0b46-101">Represents a clause in a structured exception-handling block.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0b46-102"><xref:System.Reflection.ExceptionHandlingClause>类提供有关中的子句信息`try`...`catch`...`finally`</span><span class="sxs-lookup"><span data-stu-id="b0b46-102">The <xref:System.Reflection.ExceptionHandlingClause> class provides information about the clauses in a `try`…`catch`…`finally`</span></span> <span data-ttu-id="b0b46-103">块 (`Try`...`Catch`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="b0b46-103">block (`Try`…`Catch`…`Finally`</span></span> <span data-ttu-id="b0b46-104">在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-104">in Visual Basic).</span></span> <span data-ttu-id="b0b46-105">若要获取的方法中的异常处理子句的列表，请获取<xref:System.Reflection.MethodInfo>表示的方法。</span><span class="sxs-lookup"><span data-stu-id="b0b46-105">To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method.</span></span> <span data-ttu-id="b0b46-106">使用<xref:System.Reflection.MethodBase.GetMethodBody%2A>方法来获取<xref:System.Reflection.MethodBody>对象，以及如何将<xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性来获取子句的列表。</span><span class="sxs-lookup"><span data-stu-id="b0b46-106">Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-107">使用异常处理子句需要全面了解元数据和 Microsoft 中间语言 (MSIL) 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-107">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="b0b46-108">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-108">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-109">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-109">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0b46-110">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-110">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="b0b46-111"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-111">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="b0b46-112"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象，并显示它们的属性。</span><span class="sxs-lookup"><span data-stu-id="b0b46-112">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
 <span data-ttu-id="b0b46-113">Ildasm.exe 可用于检查已编译的代码示例中，若要查看如何计算的偏移量和长度的 MSIL。</span><span class="sxs-lookup"><span data-stu-id="b0b46-113">You can use Ildasm.exe to examine the MSIL for the compiled code example, to see how the offsets and lengths are calculated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-114">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-114">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="b0b46-115">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="b0b46-115">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="b0b46-116">此代码是位于一个更大示例的一部分<xref:System.Reflection.MethodBody>类主题。</span><span class="sxs-lookup"><span data-stu-id="b0b46-116">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.MethodBody" />
    <altmember cref="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
    <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandlingClause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ExceptionHandlingClause.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandlingClause();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-117">初始化 <see cref="T:System.Reflection.ExceptionHandlingClause" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-117">Initializes a new instance of the <see cref="T:System.Reflection.ExceptionHandlingClause" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0b46-118">此构造函数由派生类调用的构造期间<xref:System.Reflection.ExceptionHandlingClause>对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-118">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchType">
      <MemberSignature Language="C#" Value="public virtual Type CatchType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CatchType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.CatchType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CatchType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ CatchType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CatchType : Type" Usage="System.Reflection.ExceptionHandlingClause.CatchType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-119">获取由此子句处理的异常类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-119">Gets the type of exception handled by this clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0b46-120">一个 <see cref="T:System.Type" /> 对象，表示由此子句处理的异常类型，如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 属性为 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 或 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-120">A <see cref="T:System.Type" /> object that represents that type of exception handled by this clause, or <see langword="null" /> if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property is <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> or <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-121">使用异常处理子句需要全面了解元数据和 Microsoft 中间语言 (MSIL) 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-121">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="b0b46-122">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-122">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-123">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-123">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0b46-124">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-124">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="b0b46-125"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-125">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="b0b46-126"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象，并显示它们的属性。</span><span class="sxs-lookup"><span data-stu-id="b0b46-126">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-127">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-127">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="b0b46-128">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="b0b46-128">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="b0b46-129">此代码是位于一个更大示例的一部分<xref:System.Reflection.MethodBody>类主题。</span><span class="sxs-lookup"><span data-stu-id="b0b46-129">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0b46-130">不能将属性用于对象的当前状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-130">Invalid use of property for the object's current state.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FilterOffset">
      <MemberSignature Language="C#" Value="public virtual int FilterOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.FilterOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FilterOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int FilterOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterOffset : int" Usage="System.Reflection.ExceptionHandlingClause.FilterOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-131">获取用户提供的筛选代码在方法体内的偏移量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-131">Gets the offset within the method body, in bytes, of the user-supplied filter code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0b46-132">用户提供的筛选代码在方法体内的偏移量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-132">The offset within the method body, in bytes, of the user-supplied filter code.</span>
          </span>
          <span data-ttu-id="b0b46-133">如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 属性具有 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 之外的任何值，则此属性的值没有任何意义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-133">The value of this property has no meaning if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property has any value other than <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0b46-134">筛选器子句包含用户 suppliedMicrosoft 中间语言 (MSIL)，用于确定是否由此子句处理的异常。</span><span class="sxs-lookup"><span data-stu-id="b0b46-134">A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause.</span></span> <span data-ttu-id="b0b46-135">例如，包含 Visual Basic 的任何子句`When`关键字是<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-135">For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clause.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-136">使用异常处理子句需要全面了解元数据和 MSIL 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-136">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="b0b46-137">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-137">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-138">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-138">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0b46-139">由于异常处理子句不是一个筛选器，因此无法获取偏移量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-139">Cannot get the offset because the exception handling clause is not a filter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ExceptionHandlingClauseOptions Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.ExceptionHandlingClauseOptions Flags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.Flags" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Flags As ExceptionHandlingClauseOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ExceptionHandlingClauseOptions Flags { System::Reflection::ExceptionHandlingClauseOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Flags : System.Reflection.ExceptionHandlingClauseOptions" Usage="System.Reflection.ExceptionHandlingClause.Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-140">获取一个值，该值指示此异常处理子句是 finally 子句、类型筛选的子句还是用户筛选的子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-140">Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0b46-141">一个 <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> 值，它指示此子句执行何种操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-141">An <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> value that indicates what kind of action this clause performs.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-142">使用异常处理子句需要全面了解元数据和 Microsoft 中间语言 (MSIL) 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-142">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="b0b46-143">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-143">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-144">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-144">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0b46-145">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-145">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="b0b46-146"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-146">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="b0b46-147"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象，并显示它们的属性。</span><span class="sxs-lookup"><span data-stu-id="b0b46-147">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-148">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-148">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="b0b46-149">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="b0b46-149">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="b0b46-150">此代码是位于一个更大示例的一部分<xref:System.Reflection.MethodBody>类主题。</span><span class="sxs-lookup"><span data-stu-id="b0b46-150">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="HandlerLength">
      <MemberSignature Language="C#" Value="public virtual int HandlerLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.HandlerLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HandlerLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HandlerLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerLength : int" Usage="System.Reflection.ExceptionHandlingClause.HandlerLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-151">获取此异常处理子句的主体的长度（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-151">Gets the length, in bytes, of the body of this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0b46-152">一个整数，表示形成此异常处理子句主体的 MSIL 的长度（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-152">An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-153">使用异常处理子句需要全面了解元数据和 Microsoft 中间语言 (MSIL) 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-153">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="b0b46-154">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-154">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-155">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-155">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0b46-156">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-156">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="b0b46-157"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-157">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="b0b46-158"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象，并显示它们的属性。</span><span class="sxs-lookup"><span data-stu-id="b0b46-158">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-159">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-159">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="b0b46-160">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="b0b46-160">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="b0b46-161">此代码是位于一个更大示例的一部分<xref:System.Reflection.MethodBody>类主题。</span><span class="sxs-lookup"><span data-stu-id="b0b46-161">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlerOffset">
      <MemberSignature Language="C#" Value="public virtual int HandlerOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.HandlerOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HandlerOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HandlerOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerOffset : int" Usage="System.Reflection.ExceptionHandlingClause.HandlerOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-162">获取此异常处理子句在方法体内的偏移量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-162">Gets the offset within the method body, in bytes, of this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0b46-163">一个整数，表示此异常处理子句在方法体内的偏移量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-163">An integer that represents the offset within the method body, in bytes, of this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-164">使用异常处理子句需要全面了解元数据和 Microsoft 中间语言 (MSIL) 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-164">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="b0b46-165">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-165">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-166">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0b46-167">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-167">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="b0b46-168"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-168">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="b0b46-169"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象，并显示它们的属性。</span><span class="sxs-lookup"><span data-stu-id="b0b46-169">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-170">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-170">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="b0b46-171">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="b0b46-171">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="b0b46-172">此代码是位于一个更大示例的一部分<xref:System.Reflection.MethodBody>类主题。</span><span class="sxs-lookup"><span data-stu-id="b0b46-172">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ExceptionHandlingClause.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exceptionHandlingClause.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-173">异常处理子句的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-173">A string representation of the exception-handling clause.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0b46-174">一个字符串，列出筛选器子句类型的相应属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-174">A string that lists appropriate property values for the filter clause type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLength">
      <MemberSignature Language="C#" Value="public virtual int TryLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.TryLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TryLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TryLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryLength : int" Usage="System.Reflection.ExceptionHandlingClause.TryLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-175">包括此异常处理子句的 try 块的总长度（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-175">The total length, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0b46-176">包括此异常处理子句的 try 块的总长度（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-176">The total length, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0b46-177">一个整数，表示的总长度，以字节为单位，包括此异常处理子句的 try 块。</span><span class="sxs-lookup"><span data-stu-id="b0b46-177">An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-178">使用异常处理子句需要全面了解元数据和 Microsoft 中间语言 (MSIL) 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-178">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="b0b46-179">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-179">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-180">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-180">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0b46-181">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-181">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="b0b46-182"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-182">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="b0b46-183"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象，并显示它们的属性。</span><span class="sxs-lookup"><span data-stu-id="b0b46-183">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-184">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-184">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="b0b46-185">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="b0b46-185">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="b0b46-186">此代码是位于一个更大示例的一部分<xref:System.Reflection.MethodBody>类主题。</span><span class="sxs-lookup"><span data-stu-id="b0b46-186">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryOffset">
      <MemberSignature Language="C#" Value="public virtual int TryOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.TryOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TryOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TryOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryOffset : int" Usage="System.Reflection.ExceptionHandlingClause.TryOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0b46-187">包括此异常处理子句的 try 块在方法内的偏移量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-187">The offset within the method, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0b46-188">一个整数，表示包括此异常处理子句的 try 块在方法内的偏移量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0b46-188">An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-189">使用异常处理子句需要全面了解元数据和 Microsoft 中间语言 (MSIL) 指令格式的数据。</span><span class="sxs-lookup"><span data-stu-id="b0b46-189">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="b0b46-190">信息可在公共语言基础结构 (CLI) 文档中，尤其是"分区 II:: 元数据定义和语义"和"分区 III: CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="b0b46-190">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="b0b46-191">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b0b46-191">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0b46-192">下面的代码示例定义一个名为测试方法`MethodBodyExample`，并显示其本地变量的信息和异常处理子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-192">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="b0b46-193"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用于获取<xref:System.Reflection.MethodBody>测试方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b0b46-193">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="b0b46-194"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>属性用于获取一系列<xref:System.Reflection.ExceptionHandlingClause>对象，并显示它们的属性。</span><span class="sxs-lookup"><span data-stu-id="b0b46-194">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0b46-195">并非所有计算机语言可以都生成<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。</span><span class="sxs-lookup"><span data-stu-id="b0b46-195">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="b0b46-196">Visual Basic 示例显示了筛选器子句，使用 Visual Basic`When`表达式，从其他语言的示例中省略。</span><span class="sxs-lookup"><span data-stu-id="b0b46-196">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="b0b46-197">此代码是位于一个更大示例的一部分<xref:System.Reflection.MethodBody>类主题。</span><span class="sxs-lookup"><span data-stu-id="b0b46-197">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>