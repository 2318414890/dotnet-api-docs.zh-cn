<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExceptionHandlingClause.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac512f9087cfbe5aaba9af859f3075dcad60e4475bd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12f9087cfbe5aaba9af859f3075dcad60e4475bd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>Represents a clause in a structured exception-handling block.</source>
          <target state="translated">表示结构化异常处理块中的子句。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> class provides information about the clauses in a <ph id="ph2">`try`</ph>…<ph id="ph3">`catch`</ph>…<ph id="ph4">`finally`</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>类提供有关中的子句信息<ph id="ph2">`try`</ph>...<ph id="ph3">`catch`</ph>...<ph id="ph4">`finally`</ph></target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>block (<ph id="ph1">`Try`</ph>…<ph id="ph2">`Catch`</ph>…<ph id="ph3">`Finally`</ph></source>
          <target state="translated">块 (<ph id="ph1">`Try`</ph>...<ph id="ph2">`Catch`</ph>...<ph id="ph3">`Finally`</ph></target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>in Visual Basic).</source>
          <target state="translated">在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>To get a list of exception-handling clauses in a method, obtain a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents the method.</source>
          <target state="translated">若要获取方法中的异常处理子句的列表，请获取<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>表示的方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph> method to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object, and then use the <ph id="ph3">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property to get the list of clauses.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph>方法来获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>对象，，然后使用<ph id="ph3">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性以获取子句的列表。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>You can use Ildasm.exe to examine the MSIL for the compiled code example, to see how the offsets and lengths are calculated.</source>
          <target state="translated">Ildasm.exe 可用于检查已编译的代码示例中，若要查看如何计算的偏移量和长度的 MSIL。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>Not all computer languages can generate <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clauses.</source>
          <target state="translated">并非所有计算机语言都可以都生成<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClause">
          <source>This code is part of a larger example located in the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class topic.</source>
          <target state="translated">此代码摘自更大的示例位于<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.ExceptionHandlingClause.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.ExceptionHandlingClause" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.ExceptionHandlingClause" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ExceptionHandlingClause.#ctor">
          <source>This constructor is invoked by derived classes during the construction of <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects.</source>
          <target state="translated">此构造函数由派生类调用的构造过程<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>Gets the type of exception handled by this clause.</source>
          <target state="translated">获取由此子句处理的异常类型。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents that type of exception handled by this clause, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /&gt;</ph> property is <ph id="ph4">&lt;see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /&gt;</ph> or <ph id="ph5">&lt;see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，表示由此子句处理的异常类型，如果 <ph id="ph3">&lt;see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /&gt;</ph> 属性为 <ph id="ph4">&lt;see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /&gt;</ph> 或 <ph id="ph5">&lt;see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" /&gt;</ph>，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>Not all computer languages can generate <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clauses.</source>
          <target state="translated">并非所有计算机语言都可以都生成<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>This code is part of a larger example located in the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class topic.</source>
          <target state="translated">此代码摘自更大的示例位于<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.CatchType">
          <source>Invalid use of property for the object's current state.</source>
          <target state="translated">不能将属性用于对象的当前状态。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>Gets the offset within the method body, in bytes, of the user-supplied filter code.</source>
          <target state="translated">获取用户提供的筛选代码在方法体内的偏移量（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>The offset within the method body, in bytes, of the user-supplied filter code.</source>
          <target state="translated">用户提供的筛选代码在方法体内的偏移量（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>The value of this property has no meaning if the <ph id="ph1">&lt;see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /&gt;</ph> property has any value other than <ph id="ph2">&lt;see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /&gt;</ph> 属性具有 <ph id="ph2">&lt;see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /&gt;</ph> 之外的任何值，则此属性的值没有任何意义。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause.</source>
          <target state="translated">筛选器子句包含用户 suppliedMicrosoft 中间语言 (MSIL)，它确定是否由此子句处理的异常。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>For example, any clause containing the Visual Basic <ph id="ph1">`When`</ph> keyword is a <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clause.</source>
          <target state="translated">例如，任何包含 Visual Basic 的子句<ph id="ph1">`When`</ph>关键字是<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 MSIL 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
          <source>Cannot get the offset because the exception handling clause is not a filter.</source>
          <target state="translated">由于异常处理子句不是一个筛选器，因此无法获取偏移量。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.</source>
          <target state="translated">获取一个值，该值指示此异常处理子句是 finally 子句、类型筛选的子句还是用户筛选的子句。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /&gt;</ph> value that indicates what kind of action this clause performs.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /&gt;</ph> 值，它指示此子句执行何种操作。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>Not all computer languages can generate <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clauses.</source>
          <target state="translated">并非所有计算机语言都可以都生成<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.Flags">
          <source>This code is part of a larger example located in the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class topic.</source>
          <target state="translated">此代码摘自更大的示例位于<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>Gets the length, in bytes, of the body of this exception-handling clause.</source>
          <target state="translated">获取此异常处理子句的主体的长度（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.</source>
          <target state="translated">一个整数，表示形成此异常处理子句主体的 MSIL 的长度（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>Not all computer languages can generate <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clauses.</source>
          <target state="translated">并非所有计算机语言都可以都生成<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
          <source>This code is part of a larger example located in the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class topic.</source>
          <target state="translated">此代码摘自更大的示例位于<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>Gets the offset within the method body, in bytes, of this exception-handling clause.</source>
          <target state="translated">获取此异常处理子句在方法体内的偏移量（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>An integer that represents the offset within the method body, in bytes, of this exception-handling clause.</source>
          <target state="translated">一个整数，表示此异常处理子句在方法体内的偏移量（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>Not all computer languages can generate <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clauses.</source>
          <target state="translated">并非所有计算机语言都可以都生成<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
          <source>This code is part of a larger example located in the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class topic.</source>
          <target state="translated">此代码摘自更大的示例位于<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.ExceptionHandlingClause.ToString">
          <source>A string representation of the exception-handling clause.</source>
          <target state="translated">异常处理子句的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.ExceptionHandlingClause.ToString">
          <source>A string that lists appropriate property values for the filter clause type.</source>
          <target state="translated">一个字符串，列出筛选器子句类型的相应属性值。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>The total length, in bytes, of the try block that includes this exception-handling clause.</source>
          <target state="translated">包括此异常处理子句的 try 块的总长度（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>The total length, in bytes, of the try block that includes this exception-handling clause.</source>
          <target state="translated">包括此异常处理子句的 try 块的总长度（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.</source>
          <target state="translated">一个整数，表示的总长度，以字节为单位，包含此异常处理子句的 try 块。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>Not all computer languages can generate <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clauses.</source>
          <target state="translated">并非所有计算机语言都可以都生成<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryLength">
          <source>This code is part of a larger example located in the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class topic.</source>
          <target state="translated">此代码摘自更大的示例位于<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>The offset within the method, in bytes, of the try block that includes this exception-handling clause.</source>
          <target state="translated">包括此异常处理子句的 try 块在方法内的偏移量（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.</source>
          <target state="translated">一个整数，表示包括此异常处理子句的 try 块在方法内的偏移量（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>Not all computer languages can generate <ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph> clauses.</source>
          <target state="translated">并非所有计算机语言都可以都生成<ph id="ph1">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType&gt;</ph>子句。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ExceptionHandlingClause.TryOffset">
          <source>This code is part of a larger example located in the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class topic.</source>
          <target state="translated">此代码摘自更大的示例位于<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类主题。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>