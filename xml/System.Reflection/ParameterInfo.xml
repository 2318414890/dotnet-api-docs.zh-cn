<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterInfo.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac586ca3b754399c792282cbf762bf32b6bca401225.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86ca3b754399c792282cbf762bf32b6bca401225</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Discovers the attributes of a parameter and provides access to parameter metadata.</source>
          <target state="translated">发现参数的属性并提供对参数元数据的访问权限。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>Use an instance of <ph id="ph1">`ParameterInfo`</ph> to obtain information about the parameter's data type, default value, and so on.</source>
          <target state="translated">使用的实例<ph id="ph1">`ParameterInfo`</ph>若要获取有关参数的数据类型的信息，默认值，依次类推。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> returns an array of <ph id="ph2">`ParameterInfo`</ph> objects representing the parameters of a method, in order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> 返回的数组<ph id="ph2">`ParameterInfo`</ph>对象表示的方法，按顺序的参数。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">此示例演示如何使用各种反射类来分析程序集中包含的元数据。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>Gets the attributes for this parameter.</source>
          <target state="translated">获取此参数的属性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>A <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> object representing the attributes for this parameter.</source>
          <target state="translated">表示该参数的特性的 <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> method.</source>
          <target state="translated">此方法使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>The following example defines a method with three parameters.</source>
          <target state="translated">下面的示例定义具有三个参数的方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>It uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> property to get the attributes of the second parameter and display them at the console.</source>
          <target state="translated">它使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>属性来获取第二个参数的特性的并在控制台中显示它们。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>The attributes of the parameter.</source>
          <target state="translated">参数的属性。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此字段仅用于派生的类的用户<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>Typical access to parameter attributes is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</source>
          <target state="translated">典型的参数属性的访问是通过<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of the parameter.</source>
          <target state="translated">参数的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此字段仅用于派生的类的用户<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>Typical access to parameter types is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</source>
          <target state="translated">对参数类型的典型访问是通过<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>Gets a collection that contains this parameter's custom attributes.</source>
          <target state="translated">获取包含此参数自定义属性的集合。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>A collection that contains this parameter's custom attributes.</source>
          <target state="translated">包含此参数自定义特性的集合。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">获取一个指示默认值的值（如果参数具有默认值）。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">参数的默认值，或 <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph>（如果参数没有默认值）。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This property is used only in the execution context.</source>
          <target state="translated">仅在执行上下文中使用此属性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>In the reflection-only context, use the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> property instead.</source>
          <target state="translated">在仅限反射上下文中，使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph>属性改为。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">在方法调用中不指定实际值时，使用默认值。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">参数可以具有一个默认值，是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">这是不同于其中未定义默认值的情况。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> method.</source>
          <target state="translated">此方法使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>The default value of the parameter.</source>
          <target state="translated">参数的默认值。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此字段仅用于派生的类的用户<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>Typical access to the default value of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</source>
          <target state="translated">参数的默认值为典型的访问是通过<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Gets the custom attributes applied to this parameter.</source>
          <target state="translated">获取应用于此参数的自定义属性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">对于该类型的对象，将忽略此自变量。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>Gets all the custom attributes defined on this parameter.</source>
          <target state="translated">获取此参数上定义的所有自定义属性。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this parameter.</source>
          <target state="translated">包含应用于此参数的所有自定义属性的数组。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">此方法将忽略<ph id="ph1">`inherit`</ph>参数。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜索的继承链中的参数属性，使用的适当重载<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time.</source>
          <target state="translated">下面的示例演示如何自定义特性的已应用于方法的参数可以在运行时检索。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example defines a custom attribute named <ph id="ph1">`MyAttribute`</ph> that can be applied to parameters.</source>
          <target state="translated">该示例定义名为的自定义特性<ph id="ph1">`MyAttribute`</ph>能应用于参数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example then defines a class named <ph id="ph1">`MyClass`</ph> with a method named <ph id="ph2">`MyMethod`</ph>, and applies <ph id="ph3">`MyAttribute`</ph> to a parameter of the method.</source>
          <target state="translated">该示例然后定义一个名为类<ph id="ph1">`MyClass`</ph>与一个名为方法<ph id="ph2">`MyMethod`</ph>，并将应用<ph id="ph3">`MyAttribute`</ph>到方法的一个参数。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> method to retrieve the custom attributes that have been applied to all parameters of all methods in <ph id="ph2">`MyClass`</ph>, and displays them at the console.</source>
          <target state="translated">当运行示例时，它使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph>方法来检索已应用于的中的所有方法的所有参数的自定义属性<ph id="ph2">`MyClass`</ph>，并将它们显示在控制台。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">无法加载自定义属性类型。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The custom attributes identified by type.</source>
          <target state="translated">由类型标识的自定义属性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">对于该类型的对象，将忽略此自变量。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</source>
          <target state="translated">获取应用于此参数的指定类型或其派生类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array that contains the custom attributes of the specified type or its derived types.</source>
          <target state="translated">一个数组，该数组包含指定类型或其派生类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">此方法将忽略<ph id="ph1">`inherit`</ph>参数。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜索的继承链中的参数属性，使用的适当重载<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type must be a type provided by the underlying runtime system.</source>
          <target state="translated">该类型必须是由基础运行时系统提供的类型。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">无法加载自定义属性类型。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects for the current parameter, which can be used in the reflection-only context.</source>
          <target state="translated">返回当前参数的 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象列表，这些对象可以在仅反射上下文中使用。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the current parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象的泛型列表，表示有关已应用于当前参数的特性的数据。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">此方法用于检查要在其中加载到只反射上下文的代码中定义的自定义属性本身的情况下的仅限反射上下文中的代码的自定义属性。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">等方法<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>不能在这种情况下，因为它们创建实例的属性。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">仅反射上下文中的代码不能执行。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>For more information and example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">有关详细信息和示例代码，请参阅<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>Gets the optional custom modifiers of the parameter.</source>
          <target state="translated">获取参数可选的自定义修饰符。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象的数组，这些对象标识当前参数的可选自定义修饰符（例如 <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>）。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph>托管编译器的设计器提供方法。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">有关自定义修饰符的详细信息，请参阅<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>和中的相关类<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>命名空间，并在 ECMA 第 ii 部分文档中的元数据规范。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The serialized stream from which the current object is deserialized.</source>
          <target state="translated">从中对当前对象进行反序列化的序列化流。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</source>
          <target state="translated">返回应进行反序列化的实际对象，而不是序列化流指定的对象。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The actual object that is put into the graph.</source>
          <target state="translated">放入图中的实际对象。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">此方法实现 <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The parameter's position in the parameter list of its associated member is not valid for that member's type.</source>
          <target state="translated">参数在其关联成员的参数列表中的位置对于该成员的类型无效。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>Gets the required custom modifiers of the parameter.</source>
          <target state="translated">获取参数所必需的自定义修饰符。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象的数组，这些对象标识当前参数所必需的自定义修饰符，例如 <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph>托管编译器的设计器提供方法。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">有关自定义修饰符的详细信息，请参阅<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>和中的相关类<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>命名空间，并在 ECMA 第 ii 部分文档中的元数据规范。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source>Gets a value that indicates whether this parameter has a default value.</source>
          <target state="translated">获取一个值，指示此参数是否有默认值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this parameter has a default value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此参数有一默认值，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to search for.</source>
          <target state="translated">要搜索的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">对于该类型的对象，将忽略此自变量。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</source>
          <target state="translated">确定指定类型或其派生类型的自定义属性是否应用于此参数。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or its derived types are applied to this parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果将 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> 或其派生类型的一个或多个实例应用于此参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">此方法将忽略<ph id="ph1">`inherit`</ph>参数。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜索的继承链中的参数属性，使用的适当重载<ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example defines two custom attributes, <ph id="ph1">`MyAttribute`</ph> and <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">下面的示例定义两个自定义属性、<ph id="ph1">`MyAttribute`</ph>和<ph id="ph2">`MyDerivedAttribute`</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">`MyDerivedAttribute`</ph> is derived from <ph id="ph2">`MyAttribute`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyDerivedAttribute`</ph> 派生自 <ph id="ph2">`MyAttribute`</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The example then applies these attributes to the parameters of a method of an example class.</source>
          <target state="translated">然后，该示例将这些属性应用到的参数的示例类的方法。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> method to test all parameters of all methods in the example class.</source>
          <target state="translated">当运行示例时，它使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph>方法来测试类示例中的所有方法的所有参数。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>It then displays the parameters that have <ph id="ph1">`MyAttribute`</ph> or <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">然后，它显示的参数具有<ph id="ph1">`MyAttribute`</ph>或<ph id="ph2">`MyDerivedAttribute`</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object supplied by the common language runtime.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 不是一个由公共语言运行时提供的 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Gets a value indicating whether this is an input parameter.</source>
          <target state="translated">获取一个值，通过该值指示这是否为输入参数。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an input parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此参数是输入参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">此方法依赖于可选元数据的标志。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">可以由编译器，插入此标志，但编译器并非必须这样做。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method utilizes the <ph id="ph1">`In`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">此方法使用<ph id="ph1">`In`</ph>标志的<ph id="ph2">`ParameterAttributes`</ph>枚举器。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">下面的示例演示如何测试方法参数<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">此示例包含<ph id="ph1">`DefineMethod`</ph>执行以下的方法：</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">创建动态程序集包含<ph id="ph1">`MyType`</ph>类型。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">将添加<ph id="ph1">`MyMethod`</ph>方法<ph id="ph2">`MyType`</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> 具有三个参数。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">使用定义的第一个参数<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>、 与第二个<ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和第三个<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>以完成该类型。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">执行后<ph id="ph1">`DefineMethod`</ph>，该示例将搜索直到找到动态程序集当前加载的程序集。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">它加载<ph id="ph1">`MyType`</ph>从程序集，获取<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>对象<ph id="ph3">`MyMethod`</ph>方法，并检查参数。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">该示例使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph>要显示的参数信息的属性。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>Gets a value indicating whether this parameter is a locale identifier (lcid).</source>
          <target state="translated">获取一个值，通过该值指示该参数是否为区域设置标识符 (lcid)。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a locale identifier; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此参数是区域设置标识符，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">此方法依赖于可选元数据的标志。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">可以由编译器，插入此标志，但编译器并非必须这样做。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method utilizes the <ph id="ph1">`Lcid`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">此方法使用<ph id="ph1">`Lcid`</ph>标志的<ph id="ph2">`ParameterAttributes`</ph>枚举器。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Gets a value indicating whether this parameter is optional.</source>
          <target state="translated">获取一个值，通过该值指示该参数是否可选。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is optional; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此参数是可选的，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">此方法依赖于可选元数据的标志。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">可以由编译器，插入此标志，但编译器并非必须这样做。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method utilizes the <ph id="ph1">`Optional`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">此方法使用<ph id="ph1">`Optional`</ph>标志的<ph id="ph2">`ParameterAttributes`</ph>枚举器。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请首先获取该方法，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">下面的示例演示如何测试方法参数<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">此示例包含<ph id="ph1">`DefineMethod`</ph>执行以下的方法：</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">创建动态程序集包含<ph id="ph1">`MyType`</ph>类型。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">将添加<ph id="ph1">`MyMethod`</ph>方法<ph id="ph2">`MyType`</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> 具有三个参数。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">使用定义的第一个参数<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>、 与第二个<ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和第三个<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>以完成该类型。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">执行后<ph id="ph1">`DefineMethod`</ph>，该示例将搜索直到找到动态程序集当前加载的程序集。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">它加载<ph id="ph1">`MyType`</ph>从程序集，获取<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>对象<ph id="ph3">`MyMethod`</ph>方法，并检查参数。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">该示例使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph>要显示的参数信息的属性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Gets a value indicating whether this is an output parameter.</source>
          <target state="translated">获取一个值，通过该值指示这是否为输出参数。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an output parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此参数是输出参数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">此方法依赖于可选元数据的标志。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">可以由编译器，插入此标志，但编译器并非必须这样做。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method utilizes the <ph id="ph1">`Out`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">此方法使用<ph id="ph1">`Out`</ph>标志的<ph id="ph2">`ParameterAttributes`</ph>枚举器。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">下面的示例演示如何测试方法参数<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">此示例包含<ph id="ph1">`DefineMethod`</ph>执行以下的方法：</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">创建动态程序集包含<ph id="ph1">`MyType`</ph>类型。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">将添加<ph id="ph1">`MyMethod`</ph>方法<ph id="ph2">`MyType`</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> 具有三个参数。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">使用定义的第一个参数<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>、 与第二个<ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和第三个<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>以完成该类型。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">执行后<ph id="ph1">`DefineMethod`</ph>，该示例将搜索直到找到动态程序集当前加载的程序集。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">它加载<ph id="ph1">`MyType`</ph>从程序集，获取<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>对象<ph id="ph3">`MyMethod`</ph>方法，并检查参数。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">该示例使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph>要显示的参数信息的属性。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>Gets a value indicating whether this is a <ph id="ph1">&lt;see langword="Retval" /&gt;</ph> parameter.</source>
          <target state="translated">获取一个值，通过该值指示这是否为 <ph id="ph1">&lt;see langword="Retval" /&gt;</ph> 参数。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此参数是 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则为 <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">此方法依赖于可选元数据的标志。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">可以由编译器，插入此标志，但编译器并非必须这样做。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method utilizes the <ph id="ph1">`Retval`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">此方法使用<ph id="ph1">`Retval`</ph>标志的<ph id="ph2">`ParameterAttributes`</ph>枚举器。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Member">
          <source>Gets a value indicating the member in which the parameter is implemented.</source>
          <target state="translated">获取一个值，通过该值指示实现此参数的成员。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Member">
          <source>The member which implanted the parameter represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</source>
          <target state="translated">植入由此 <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> 表示的参数的成员。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>The member in which the field is implemented.</source>
          <target state="translated">在其中实现该字段的成员。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此字段仅用于派生的类的用户<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</source>
          <target state="translated">为参数名称的典型访问都通过<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>Gets a value that identifies this parameter in metadata.</source>
          <target state="translated">获取在元数据中标识此参数的值。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>A value which, in combination with the module, uniquely identifies this parameter in metadata.</source>
          <target state="translated">与模块一起使用的值，可在元数据中唯一标识此参数。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>To get the module, use the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> property of the member that defines this parameter.</source>
          <target state="translated">若要获得该模块，使用<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph>定义此参数的成员的属性。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged Reflection API.</source>
          <target state="translated">使用此属性获取的令牌可以传递到非托管的反射 API。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>非托管的反射 API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Name">
          <source>Gets the name of the parameter.</source>
          <target state="translated">获取参数的名称。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The simple name of this parameter.</source>
          <target state="translated">此参数的简单名称。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>This property utilizes the protected <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> field, and depends on an optional metadata flag that might not be available in all compilers.</source>
          <target state="translated">此属性使用受保护<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph>字段，并依赖于可选元数据的标志可能不在所有的编译器中可用。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> represents a return value (that is, if it was obtained by using the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> property), this property will be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果此<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>表示返回的值 (即，如果已通过获取<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph>属性)，此属性将为<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> property to obtain the parameter names.</source>
          <target state="translated">下面的示例演示如何获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>对象的参数的方法，，然后使用<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>属性来获取参数名称。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>The name of the parameter.</source>
          <target state="translated">参数的名称。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此字段仅用于派生的类的用户<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</source>
          <target state="translated">为参数名称的典型访问都通过<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">获取该参数的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object that represents the <ph id="ph2">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">表示该参数 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 的 <ph id="ph2">&lt;see langword="Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>This method depends on an optional metadata and might not be available in all compilers.</source>
          <target state="translated">此方法依赖于可选元数据，并且不可能在所有的编译器中可用。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> property to display the type of each parameter.</source>
          <target state="translated">下面的示例演示如何获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>对象的参数的方法，，然后使用<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>属性来显示每个参数的类型。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Gets the zero-based position of the parameter in the formal parameter list.</source>
          <target state="translated">获取参数在形参表中的位置（从零开始）。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>An integer representing the position this parameter occupies in the parameter list.</source>
          <target state="translated">表示该参数在参数列表中所占位置的整数。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position.</source>
          <target state="translated">仅将方法签名中的参数 (即，形式参数列表中) 被视为计算位置时。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>For instance methods, the hidden parameter that represents <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> in Visual Basic) is not counted.</source>
          <target state="translated">例如，方法、 表示的隐藏的参数<ph id="ph1">`this`</ph>(<ph id="ph2">`Me`</ph>在 Visual Basic 中) 不会进行计数。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> method.</source>
          <target state="translated">此方法使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>The zero-based position of the parameter in the parameter list.</source>
          <target state="translated">参数列表中参数从零开始的位置。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此字段仅用于派生的类的用户<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>Typical access to the name of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</source>
          <target state="translated">对参数的名称的典型访问是通过<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">获取一个指示默认值的值（如果参数具有默认值）。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">参数的默认值，或 <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph>（如果参数没有默认值）。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This property can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">执行上下文和仅限反射上下文中，可以使用此属性。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">在方法调用中不指定实际值时，使用默认值。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">参数可以具有一个默认值，是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">这是不同于其中未定义默认值的情况。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组，请先获取该方法或构造函数，然后调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要映射的名称的传入数组。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要映射的名称的计数。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">要在其中解释名称的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">调用方分配的数组，用于接收与名称对应的 ID。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">将一组名称映射为对应的一组调度标识符。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要返回的类型信息。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">类型信息的区域设置标识符。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收一个指针，指向请求的类型信息对象。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向一个位置，该位置接收对象提供的类型信息接口的数量。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">检索对象提供的类型信息接口的数量（0 或 1）。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">标识成员。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">要在其中解释参数的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述调用的上下文的标志。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向要存储结果的位置的指针。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">指向一个包含异常信息的结构的指针。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一个出错自变量的索引。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供对某一对象公开的属性和方法的访问。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::Invoke`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>Gets the parameter type and name represented as a string.</source>
          <target state="translated">获取表示为字符串的参数类型和名称。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>A string containing the type and the name of the parameter.</source>
          <target state="translated">包含参数的类型和名称的字符串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>