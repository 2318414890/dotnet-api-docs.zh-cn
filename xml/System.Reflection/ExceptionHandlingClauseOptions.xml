<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExceptionHandlingClauseOptions.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5392d3cbc4a7aaa362797299233bcbad4451106f3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">392d3cbc4a7aaa362797299233bcbad4451106f3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Identifies kinds of exception-handling clauses.</source>
          <target state="translated">标识异常处理子句的种类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>To examine the exception-handling clauses in a method, obtain a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object and call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph> method to obtain the method body.</source>
          <target state="translated">若要检查的方法中的异常处理子句，获取<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>对象并调用<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph>方法来获取的方法体。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性来获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用异常处理子句需要对元数据和 Microsoft 中间语言 (MSIL) 指令格式的全面了解。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"中找不到的信息。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下面的代码示例定义一个名为的测试方法<ph id="ph1">`MethodBodyExample`</ph>，并显示其本地变量的信息和异常处理子句。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用于获取<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>为测试方法的对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>属性用于获取的列表<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>对象，并显示它们的属性。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Not all computer languages can generate Filter clauses.</source>
          <target state="translated">并非所有计算机语言可以都生成筛选器子句。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 示例演示如何使用 Visual Basic 的筛选器子句<ph id="ph1">`When`</ph>表达式，从其他语言的示例中省略。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Clause">
          <source>The clause accepts all exceptions that derive from a specified type.</source>
          <target state="translated">该子句接受从指定类型派生的所有异常。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Fault">
          <source>The clause is executed if an exception occurs, but not on completion of normal control flow.</source>
          <target state="translated">该子句在发生异常时执行，而不是在正常控制流完成之后执行。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Filter">
          <source>The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</source>
          <target state="translated">该子句包含用户指定的指令，这些指令确定是否应忽略异常（即是否应继续正常执行），由关联的处理程序处理异常，还是应将异常传递给下一个子句。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Finally">
          <source>The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</source>
          <target state="translated">try 块在任何时候退出时，该子句都会执行，无论是通过正常控制流还是因为未经处理的异常。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>