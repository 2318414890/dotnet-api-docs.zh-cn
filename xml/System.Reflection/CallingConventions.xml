<Type Name="CallingConventions" FullName="System.Reflection.CallingConventions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="25db27464d40078edeefa0858df96a01af3e22f0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30475341" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum CallingConventions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed CallingConventions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.CallingConventions" />
  <TypeSignature Language="VB.NET" Value="Public Enum CallingConventions" />
  <TypeSignature Language="C++ CLI" Value="public enum class CallingConventions" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义方法的有效调用约定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本地调用约定是一套规则控制顺序和布局的自变量传递给编译的方法。 它还控制如何将传递返回值、 自变量，使用哪些寄存器和是否被调用方法或调用的方法自变量从堆栈中移除。  
  
   
  
## Examples  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="Any" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.CallingConventions Any = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.CallingConventions.Any" />
      <MemberSignature Language="VB.NET" Value="Any" />
      <MemberSignature Language="C++ CLI" Value="Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>指定可以使用 <see langword="Standard" /> 调用约定或 <see langword="VarArgs" /> 调用约定。</summary>
      </Docs>
    </Member>
    <Member MemberName="ExplicitThis">
      <MemberSignature Language="C#" Value="ExplicitThis" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.CallingConventions ExplicitThis = int32(64)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.CallingConventions.ExplicitThis" />
      <MemberSignature Language="VB.NET" Value="ExplicitThis" />
      <MemberSignature Language="C++ CLI" Value="ExplicitThis" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary>指定该签名是函数指针签名，它表示对实例或虚方法（不是静态方法）的调用。 如果设置了 <see langword="ExplicitThis" />，则还须设置 <see langword="HasThis" />。 传递到被调用方法的第一个参数仍然是 <see langword="this" /> 指针，但第一个参数的类型现在未知。 因此，应将描述 <see langword="this" /> 指针的类型（或类）的标记显式存储到其元数据签名中。</summary>
      </Docs>
    </Member>
    <Member MemberName="HasThis">
      <MemberSignature Language="C#" Value="HasThis" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.CallingConventions HasThis = int32(32)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.CallingConventions.HasThis" />
      <MemberSignature Language="VB.NET" Value="HasThis" />
      <MemberSignature Language="C++ CLI" Value="HasThis" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>指定一个实例或虚方法（不是静态方法）。 运行时，向被调用方法传递一个指向目标对象的指针作为此方法的第一个参数（<see langword="this" /> 指针）。 存储在元数据中的签名不包括此第一个参数的类型，因为此方法是已知的，并且其所有者类能够从元数据中发现。</summary>
      </Docs>
    </Member>
    <Member MemberName="Standard">
      <MemberSignature Language="C#" Value="Standard" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.CallingConventions Standard = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.CallingConventions.Standard" />
      <MemberSignature Language="VB.NET" Value="Standard" />
      <MemberSignature Language="C++ CLI" Value="Standard" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>指定公共语言运行时确定的默认调用约定。 对静态方法使用此调用约定。 对实例或虚方法使用 <see langword="HasThis" />。</summary>
      </Docs>
    </Member>
    <Member MemberName="VarArgs">
      <MemberSignature Language="C#" Value="VarArgs" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.CallingConventions VarArgs = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.CallingConventions.VarArgs" />
      <MemberSignature Language="VB.NET" Value="VarArgs" />
      <MemberSignature Language="C++ CLI" Value="VarArgs" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>指定包含变量参数的方法的调用约定。</summary>
      </Docs>
    </Member>
  </Members>
</Type>