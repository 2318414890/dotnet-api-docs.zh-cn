<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyInfo.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72b939962265f23522134c898a9c30b909307cd2e0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b939962265f23522134c898a9c30b909307cd2e0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Discovers the attributes of a property and provides access to property metadata.</source>
          <target state="translated">发现属性 (Property) 的属性 (Attribute) 并提供对属性 (Property) 元数据的访问。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties are logically the same as fields.</source>
          <target state="translated">属性在逻辑上与字段相同。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>A property is a named aspect of an object's state whose value is typically accessible through <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors.</source>
          <target state="translated">属性是其值是通常可通过访问的对象的状态的已命名的一个方面<ph id="ph1">`get`</ph>和<ph id="ph2">`set`</ph>访问器。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties may be read-only, in which case a set routine is not supported.</source>
          <target state="translated">属性可能是只读的在这种情况下不支持 set 例程。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>To determine whether a property is <ph id="ph1">`static`</ph>, you must obtain the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph3">`get`</ph> or <ph id="ph4">`set`</ph> accessor, by calling the <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> or the <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> method, and examine its <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> property.</source>
          <target state="translated">若要确定属性是否是<ph id="ph1">`static`</ph>，你必须获取<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>为<ph id="ph3">`get`</ph>或<ph id="ph4">`set`</ph>访问器，通过调用<ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph>或<ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph>方法，并检查其<ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Several methods in this class assume that the <ph id="ph1">`get`</ph> accessor and <ph id="ph2">`set`</ph> accessor methods of a property have certain formats.</source>
          <target state="translated">此类中的多个方法假定<ph id="ph1">`get`</ph>访问器和<ph id="ph2">`set`</ph>的属性访问器方法具有某些格式。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The signatures of the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must match the following convention:</source>
          <target state="translated">签名<ph id="ph1">`get`</ph>和<ph id="ph2">`set`</ph>方法必须符合以下约定：</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The return type of the <ph id="ph1">`get`</ph> method and the last argument of the <ph id="ph2">`set`</ph> method must be identical.</source>
          <target state="translated">返回类型<ph id="ph1">`get`</ph>方法和的最后一个参数<ph id="ph2">`set`</ph>方法必须相同。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This is the type of the property.</source>
          <target state="translated">这是属性的类型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must have the same number, type, and order of indices.</source>
          <target state="translated"><ph id="ph1">`get`</ph>和<ph id="ph2">`set`</ph>方法必须具有相同的数量、 类型和顺序的索引。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>If this format is not followed, the behavior of the <ph id="ph1">`GetValue`</ph> and <ph id="ph2">`SetValue`</ph> methods is undefined.</source>
          <target state="translated">如果不遵循此格式的行为<ph id="ph1">`GetValue`</ph>和<ph id="ph2">`SetValue`</ph>方法是不确定。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`PropertyInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>上<ph id="ph2">`PropertyInfo`</ph>时<ph id="ph3">`inherit`</ph>参数<ph id="ph4">`GetCustomAttributes`</ph>是<ph id="ph5">`true`</ph>不会遍历的类型层次结构。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph>继承自定义属性。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">此示例演示如何使用各种反射类来分析程序集中包含的元数据。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: <bpt id="p1">**</bpt>example.exe &gt; propertyinfo.txt<ept id="p1">**</ept></source>
          <target state="translated">此示例生成大约 55000 行数据，你可以将重定向到在命令提示符下，一个文本文件，如下所示： <bpt id="p1">**</bpt>example.exe &gt; 处将这些数据<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">对继承者的完全信任。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">此类不能由部分受信任的代码继承。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</source>
          <target state="translated">继承自<ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>，必须重写以下成员： <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>， <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>， <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>， <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>， <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>，和<ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Gets the attributes for this property.</source>
          <target state="translated">获取此属性 (Property) 的属性 (Attribute)。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes of this property.</source>
          <target state="translated">此属性的特性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property returns the attributes associated with the property represented by this <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph>属性返回表示此属性与关联的属性<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <ph id="ph1">`SpecialName`</ph> property, and so on.</source>
          <target state="translated">属性是主要时创建的属性; 应用由编译器的修饰符它们指示属性是否是默认属性，<ph id="ph1">`SpecialName`</ph>属性，依次类推。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Note that, for almost all properties found in types in the .NET Framework class library, the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property is <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请注意，在.NET Framework 类库的值中的类型中找到的几乎所有属性<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph>属性是<ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>In most cases, you probably want to retrieve the custom attributes associated with a property.</source>
          <target state="translated">在大多数情况下，你可能想要检索与属性相关联的自定义属性。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To do this, retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> property, or call one of the overloads of the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method.</source>
          <target state="translated">若要执行此操作，检索的值<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph>属性或调用的重载之一<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property:</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph>属性：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type to which the property belongs.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Type&gt;</ph>表示属性所属的类型的对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object by calling an overload of the <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象通过调用的重载<ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Retrieve the property's attributes from the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">检索属性的属性从<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> method and supplying a value for the <ph id="ph2">`attributes`</ph> argument.</source>
          <target state="translated">你可以定义一个用于创建使用动态反射的类型的属性的属性来发出调用的重载<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>方法并提供的值<ph id="ph2">`attributes`</ph>自变量。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>Gets a value indicating whether the property can be read.</source>
          <target state="translated">获取一个值，该值指示此属性是否可读。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此属性可读，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>If the property does not have a <ph id="ph1">`get`</ph> accessor, it cannot be read.</source>
          <target state="translated">如果属性不具有<ph id="ph1">`get`</ph>访问器，它无法读取。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>To get the <ph id="ph1">`CanRead`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">`CanRead`</ph>属性，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">`PropertyInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`CanRead`</ph> value.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，获取<ph id="ph2">`CanRead`</ph>值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The following example defines two properties.</source>
          <target state="translated">下面的示例定义两个属性。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The first property is readable and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">第一个属性是可读和<ph id="ph1">`CanRead`</ph>属性是<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The second property is not readable (there is no get accessor), and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">第二个属性是不可读 （没有没有 get 访问器），和<ph id="ph1">`CanRead`</ph>属性是<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Gets a value indicating whether the property can be written to.</source>
          <target state="translated">获取一个值，该值指示此属性是否可写。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be written to; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此属性可写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> returns <ph id="ph2">`true`</ph> if the property has a <ph id="ph3">`set`</ph> accessor, even if the accessor is <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (or <ph id="ph6">`Friend`</ph> in Visual Basic), or <ph id="ph7">`protected`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> 返回<ph id="ph2">`true`</ph>如果属性具有<ph id="ph3">`set`</ph>访问器，如果访问器甚至<ph id="ph4">`private`</ph>， <ph id="ph5">`internal`</ph> (或<ph id="ph6">`Friend`</ph>在 Visual Basic 中)，或<ph id="ph7">`protected`</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>If the property does not have a <ph id="ph1">`set`</ph> accessor, the method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果属性不具有<ph id="ph1">`set`</ph>访问器，该方法返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>To get the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property:</source>
          <target state="translated">若要获取的值<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph>属性：</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Get the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object of the type that includes the property.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Type&gt;</ph>的包含属性的类型的对象。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Call the <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> to get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph>获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>表示的属性的对象。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">检索的值<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The following example defines two properties.</source>
          <target state="translated">下面的示例定义两个属性。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The first property is writable and the <ph id="ph1">`CanWrite`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">第一个属性是可写和<ph id="ph1">`CanWrite`</ph>属性是<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The second property is not writable (there is no <ph id="ph1">`set`</ph> accessor), and the <ph id="ph2">`CanWrite`</ph> property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">第二个属性是不可写 (没有任何<ph id="ph1">`set`</ph>访问器)，和<ph id="ph2">`CanWrite`</ph>属性是<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">与此实例进行比较的对象，或为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">返回一个值，该值指示此实例是否与指定的对象相等。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 等于此实例的类型和值，则为 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns an array of the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors on this property.</source>
          <target state="translated">返回此属性上的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器数组。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Returns an array whose elements reflect the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">返回一个数组，其元素反射了由当前实例反射的属性的公共 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects that reflect the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> and <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</source>
          <target state="translated">如果找到访问器，此方法将返回一个 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 对象的数组，这些对象反射了由当前实例反射的属性的公共 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph3">&lt;see langword="set" /&gt;</ph> 访问器；如果没有找到，此方法将返回包含零 (0) 个元素的数组。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">若要调用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph>方法：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Type&gt;</ph>表示的类的对象。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象，请调用<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>The following example retrieves the public accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">下面的示例检索的公共访问器<ph id="ph1">`ClassWithProperty.Caption`</ph>属性并显示有关它们的信息。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">它还会调用<ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph>setter 设置属性值和 getter 检索属性值的方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Indicates whether non-public methods should be returned in the returned array.</source>
          <target state="translated">指示是否应在返回的数组中返回非公共方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要包括非公共方法，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Returns an array whose elements reflect the public and, if specified, non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">返回一个数组，其元素反射了当前实例反射的属性的公共及非公共（如果指定）<ph id="ph1">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>An array whose elements reflect the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">一个数组，其元素反射了当前实例反射的属性的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, this array contains public and non-public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，则此数组包含公共及非公共 <ph id="ph3">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph4">&lt;see langword="set" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>, this array contains only public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，则此数组仅包含公共 <ph id="ph3">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph4">&lt;see langword="set" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</source>
          <target state="translated">如果没有找到具有指定可见性的访问器，则此方法将返回包含零 (0) 个元素的数组。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">若要调用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph>方法：</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Type&gt;</ph>表示的类的对象。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象，请调用<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>The following example retrieves the accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">下面的示例检索的访问器<ph id="ph1">`ClassWithProperty.Caption`</ph>属性并显示有关它们的信息。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">它还会调用<ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph>setter 设置属性值和 getter 检索属性值的方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">由编译器返回与属性关联的文本值。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>，它包含与此属性关联的文本值。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果文本值是一个元素值为零的类类型，则返回值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">此方法是为设计器提供的托管的编译器和代码分析。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Do not use this method in the reflection-only context, because it might cause code to execute.</source>
          <target state="translated">不要在仅限反射上下文中，使用此方法，因为它可能会导致代码执行。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> method instead.</source>
          <target state="translated">请改用 <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">在非托管元数据中的常数表用于存储的字段、 参数和属性的常数值。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">常量的信息不会直接影响运行时行为。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">编译器检查此信息，请在编译时，导入元数据时。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">如果使用，则编译器将发出 Microsoft 中间语言 (MSIL) 流中嵌入常量的值。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">有可用来在运行时访问的常数表没有 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">常量值和常量的表的详细信息，请参阅 ECMA 第 ii 部分文档。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">非托管元数据中的常数表不包含当前属性的常数值。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">值的类型不是公共语言规范 (CLS) 许可的类型。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>See the ECMA Partition II specification, Metadata.</source>
          <target state="translated">请参阅“ECMA Partition II”（ECMA 第二部分）规范中的“Metadata”（元数据）。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">返回表示此属性的 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 访问器的 <ph id="ph2">&lt;see langword="get" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">返回此属性的公共 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public or does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 对象，表示此属性的公共 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 访问器；如果 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 访问器是非公共的或不存在，则为 <ph id="ph4">&lt;see langword="get" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetGetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">这是提供实现的抽象的便捷方法<ph id="ph1">`GetGetMethod`</ph>方法替换<ph id="ph2">`nonPublic`</ph>参数设置为<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`GetGetMethod`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>，使用<ph id="ph2">`GetGetMethod`</ph>方法。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Indicates whether a non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor should be returned.</source>
          <target state="translated">指示是否应返回非公共 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要返回非公共取值函数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the public or non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">当在派生类中重写时，返回此属性的公共或非公共 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, if <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="get" /&gt;</ph>，则返回表示该属性的 <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> 访问器的 <ph id="ph4">&lt;see langword="true" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> and the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public, or if <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph6">&lt;see langword="true" /&gt;</ph> but no <ph id="ph7">&lt;see langword="get" /&gt;</ph> accessors exist.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 为 <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> 且 <ph id="ph3">&lt;see langword="false" /&gt;</ph> 访问器是非公共的，或如果 <ph id="ph4">&lt;see langword="get" /&gt;</ph> 为 <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> 但不存在 <ph id="ph6">&lt;see langword="true" /&gt;</ph> 访问器，则返回 <ph id="ph7">&lt;see langword="get" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>This property is the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> representing the get accessor.</source>
          <target state="translated">此属性是<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>表示 get 访问器。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`GetGetMethod`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>，使用<ph id="ph2">`GetGetMethod`</ph>方法。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The following example displays the public or non-public <ph id="ph1">`get`</ph> accessor for the specified property.</source>
          <target state="translated">下面的示例显示的公共或非公共<ph id="ph1">`get`</ph>指定属性访问器。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">所请求的方法为非公共且调用方没有 <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> 来反射此非公共方法。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">返回此实例的哈希代码。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位有符号整数哈希代码。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>When overridden in a derived class, returns an array of all the index parameters for the property.</source>
          <target state="translated">当在派生类中重写时，返回此属性的所有索引参数的数组。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> containing the parameters for the indexes.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> 类型的数组，它包含索引的参数。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>If the property is not indexed, the array has 0 (zero) elements.</source>
          <target state="translated">如果未为该属性编制索引，则数组包含 0（零）个元素。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Extract any required parameter information from the returned array.</source>
          <target state="translated">从返回的数组中提取的任何所需的参数信息。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>To use the <ph id="ph1">`GetIndexParameters`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`GetIndexParameters`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">`PropertyInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetIndexParameters`</ph> method.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，使用<ph id="ph2">`GetIndexParameters`</ph>方法。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>The following example displays the index parameters of the specified property.</source>
          <target state="translated">下面的示例显示的指定属性的索引参数。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">获取此属性的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>The <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">此属性的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>Returns an array of types representing the optional custom modifiers of the property.</source>
          <target state="translated">返回一个类型数组，其中的类型表示属性的可选自定义修饰符。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象的数组，这些对象标识当前属性的可选自定义修饰符（例如 <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>）。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph>托管编译器的设计器提供方法。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">有关自定义修饰符的详细信息，请参阅<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>和中的相关类<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>命名空间和 ECMA 第 ii 部分文档中的元数据规范。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">由编译器返回与属性关联的文本值。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>，它包含与此属性关联的文本值。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果文本值是一个元素值为零的类类型，则返回值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">此方法是为设计器提供的托管的编译器和代码分析。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">执行上下文和仅限反射上下文中，可以使用此方法。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">在非托管元数据中的常数表用于存储的字段、 参数和属性的常数值。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">常量的信息不会直接影响运行时行为。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">编译器检查此信息，请在编译时，导入元数据时。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">如果使用，则编译器将发出 Microsoft 中间语言 (MSIL) 流中嵌入常量的值。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">有可用来在运行时访问的常数表没有 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">常量值和常量的表的详细信息，请参阅 ECMA 第 ii 部分文档。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">非托管元数据中的常数表不包含当前属性的常数值。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">值的类型不是公共语言规范 (CLS) 许可的类型。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">请参阅 ECMA 第 II 部分规范，元数据逻辑格式：其他结构、签名中使用的元素类型。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>Returns an array of types representing the required custom modifiers of the property.</source>
          <target state="translated">返回一个类型数组，其中的类型表示属性所必需的自定义修饰符。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象的数组，这些对象标识当前属性所必需的自定义修饰符（例如 <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>）。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph>托管编译器的设计器提供方法。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">有关自定义修饰符的详细信息，请参阅<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>和中的相关类<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>命名空间和 ECMA 第 ii 部分文档中的元数据规范。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">返回表示此属性的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 访问器的 <ph id="ph2">&lt;see langword="set" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">返回此属性的公共 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="Set" /&gt;</ph> method for this property if the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> if the <ph id="ph5">&lt;see langword="set" /&gt;</ph> accessor is not public.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 访问器是公共的，则为表示此属性的 <ph id="ph2">&lt;see langword="Set" /&gt;</ph> 方法的 <ph id="ph3">&lt;see langword="set" /&gt;</ph> 对象；如果 <ph id="ph4">&lt;see langword="null" /&gt;</ph> 访问器是非公共的，则为 <ph id="ph5">&lt;see langword="set" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetSetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">这是提供实现的抽象的便捷方法<ph id="ph1">`GetSetMethod`</ph>方法替换<ph id="ph2">`nonPublic`</ph>参数设置为<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`GetSetMethod`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，使用<ph id="ph2">`GetSetMethod`</ph>方法。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Indicates whether the accessor should be returned if it is non-public.</source>
          <target state="translated">指示如果取值函数为非公共，是否应将其返回。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要返回非公共取值函数，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">当在派生类中重写时，返回此属性的 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>This property's <ph id="ph1">&lt;see langword="Set" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">此属性的 <ph id="ph1">&lt;see langword="Set" /&gt;</ph> 方法或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，如下表所示。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> The <ph id="ph5">&lt;see langword="Set" /&gt;</ph> method for this property.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>此属性的 <ph id="ph5">&lt;see langword="Set" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;see langword="set" /&gt;</ph> 访问器是公共的。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 且 <ph id="ph3">&lt;see langword="set" /&gt;</ph> 访问器是非公共的。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph7">&lt;see langword="true" /&gt;</ph>, but the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> 是 <ph id="ph7">&lt;see langword="true" /&gt;</ph>但是属性为只读。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 且 <ph id="ph3">&lt;see langword="set" /&gt;</ph> 访问器是非公共的。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>There is no <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">不存在 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`GetSetMethod`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，使用<ph id="ph2">`GetSetMethod`</ph>方法。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The following example displays the <ph id="ph1">`set`</ph> accessor for the specified property.</source>
          <target state="translated">下面的示例显示<ph id="ph1">`set`</ph>指定属性访问器。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">所请求的方法为非公共且调用方没有 <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> 来反射此非公共方法。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">返回指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">将返回其属性值的对象。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">返回指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The property value of the specified object.</source>
          <target state="translated">指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> exception.</source>
          <target state="translated">你调用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph>重载来检索非索引化属性的值; 如果你尝试检索索引属性的值，该方法将引发<ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You can determine whether a property is indexed or not by calling the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">你可以确定是否属性编制了索引或不是通过调用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>If the length of the returned <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array is zero, the property is not indexed.</source>
          <target state="translated">如果返回的长度<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>数组为零，、 未被索引的属性。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parameter set to <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, the <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> set to <ph id="ph5">`null`</ph>, the object array of index values set to <ph id="ph6">`null`</ph>, and the <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> set to <ph id="ph8">`null`</ph>.</source>
          <target state="translated">这是提供实现的抽象的便捷方法<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph>方法替换<ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>参数设置为<ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>、<ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph>设置为<ph id="ph5">`null`</ph>，对象数组的索引值设置为<ph id="ph6">`null`</ph>，与<ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph>设置为<ph id="ph8">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The following example defines a <ph id="ph1">`Planet`</ph> class that has two properties: <ph id="ph2">`Name`</ph>, the name of the planet; and <ph id="ph3">`Distance`</ph>, the planet's distance from Earth.</source>
          <target state="translated">下面的示例定义<ph id="ph1">`Planet`</ph>具有两个属性的类： <ph id="ph2">`Name`</ph>，在世界各地; 的名称和<ph id="ph3">`Distance`</ph>，从地球在世界各地的距离。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The example instantiates a <ph id="ph1">`Planet`</ph> object that represents the planet Jupiter and passes it to a <ph id="ph2">`GetPropertyValues`</ph> method that displays information about the properties and uses the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> method to get the value of each <ph id="ph4">`Planet`</ph> property.</source>
          <target state="translated">该示例实例化<ph id="ph1">`Planet`</ph>对象，表示在世界各地 Jupiter 并将其传递给<ph id="ph2">`GetPropertyValues`</ph>显示信息的属性和使用的方法<ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph>方法以获取每个值<ph id="ph4">`Planet`</ph>属性。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object whose property value will be returned.</source>
          <target state="translated">将返回其属性值的对象。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The indexes of indexed properties are zero-based.</source>
          <target state="translated">索引化属性的索引从零开始。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Returns the property value of a specified object with optional index values for indexed properties.</source>
          <target state="translated">用索引化属性的可选索引值返回指定对象的该属性值。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property value of the specified object.</source>
          <target state="translated">指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">若要确定是否属性编制了索引，请使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">如果生成的数组具有 0 （零） 个元素，该属性未被索引。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetValue`</ph> method with a <ph id="ph2">`BindingFlags`</ph> parameter of <ph id="ph3">`Default`</ph>, the <ph id="ph4">`Binder`</ph> set to <ph id="ph5">`null`</ph>, and the <ph id="ph6">`CultureInfo`</ph> set to <ph id="ph7">`null`</ph>.</source>
          <target state="translated">这是提供实现的抽象的便捷方法<ph id="ph1">`GetValue`</ph>方法替换<ph id="ph2">`BindingFlags`</ph>参数<ph id="ph3">`Default`</ph>、<ph id="ph4">`Binder`</ph>设置为<ph id="ph5">`null`</ph>，和<ph id="ph6">`CultureInfo`</ph>设置为<ph id="ph7">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">因为静态属性属于类型，而不是单个对象，通过传递获取静态属性<ph id="ph1">`null`</ph>作为对象自变量。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">例如，使用以下代码获取静态<ph id="ph1">`CurrentCulture`</ph>属性<ph id="ph2">`CultureInfo`</ph>:</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`GetValue`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">`PropertyInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，使用<ph id="ph2">`GetValue`</ph>方法。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此方法可以用于访问非公共成员，如果调用方已被授予<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>标志，并且如果非公共成员的授予集限制为调用方的授予集或子集其中。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射的安全注意事项<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The following example shows how to get the value of an indexed property.</source>
          <target state="translated">下面的示例演示如何获取一个索引属性的值。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> property is the default property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph>属性为默认属性 （C# 中的索引器）<ph id="ph2">&lt;xref:System.String&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 数组不包含所需的参数类型。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">找不到该属性的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">在<bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>适用于 Windows 应用商店应用的 .NET<ept id="p1">&lt;/see&gt;</ept> 或<bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>可移植类库<ept id="p2">&lt;/see&gt;</ept>中，改为捕获 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">该对象与目标类型不匹配，或者某属性是实例属性但 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 中的参数数量与索引属性采用的参数数量不匹配。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">在<bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>适用于 Windows 应用商店应用的 .NET<ept id="p1">&lt;/see&gt;</ept> 或<bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>可移植类库<ept id="p2">&lt;/see&gt;</ept>中，改为捕获基类异常 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">试图非法访问类中的私有或受保护方法。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">检索属性值时出错。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">例如，为一个索引属性指定的索引值超出范围。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性指示出错的原因。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">将返回其属性值的对象。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, and <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">以下指定该调用特性的枚举成员的按位组合：<ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>、<ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>、<ph id="ph3">&lt;see langword="Static" /&gt;</ph>、<ph id="ph4">&lt;see langword="GetField" /&gt;</ph>、<ph id="ph5">&lt;see langword="SetField" /&gt;</ph>、<ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> 和 <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">必须指定合适的调用属性。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">例如，为了调用静态成员，设置 <ph id="ph1">&lt;see langword="Static" /&gt;</ph> 标志。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 对象的检索。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用默认活页夹。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">要为其本地化资源的区域性。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">如果该值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则从 <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> 属性获取区域性的特定信息。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">当在派生类中重写时，将返回具有指定绑定、索引和区域性特定信息的指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property value of the specified object.</source>
          <target state="translated">指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">若要确定是否属性编制了索引，请使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">如果生成的数组具有 0 （零） 个元素，该属性未被索引。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">因为静态属性属于类型，而不是单个对象，通过传递获取静态属性<ph id="ph1">`null`</ph>作为对象自变量。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">例如，使用以下代码获取静态<ph id="ph1">`CurrentCulture`</ph>属性<ph id="ph2">`CultureInfo`</ph>:</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`GetValue`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">`PropertyInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，使用<ph id="ph2">`GetValue`</ph>方法。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此方法可以用于访问非公共成员，如果调用方已被授予<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>标志，并且如果非公共成员的授予集限制为调用方的授予集或子集其中。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射的安全注意事项<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 数组不包含所需的参数类型。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">找不到该属性的 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">该对象与目标类型不匹配，或者某属性是实例属性但 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 中的参数数量与索引属性采用的参数数量不匹配。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">试图非法访问类中的私有或受保护方法。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">检索属性值时出错。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">例如，为一个索引属性指定的索引值超出范围。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性指示出错的原因。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>Gets a value indicating whether the property is the special name.</source>
          <target state="translated">获取一个值，该值指示此属性是否是特殊名称。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property is the special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此属性是特殊名称，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>The <ph id="ph1">`SpecialName`</ph> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</source>
          <target state="translated"><ph id="ph1">`SpecialName`</ph>位设置为标志以特殊方式处理通过一些编译器 （如属性访问器和运算符重载方法） 的成员。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>To get the <ph id="ph1">`IsSpecialName`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">`IsSpecialName`</ph>属性，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">`PropertyInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`IsSpecialName`</ph> value.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，获取<ph id="ph2">`IsSpecialName`</ph>值。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值，该值指示此成员是属性。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">指示此成员是属性的一个 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">此属性将替代<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> only when a given member is a property.</source>
          <target state="translated">因此，当检查一组<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>对象-例如，返回的数组<ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph>-<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>属性返回<ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph>仅当给定的成员是属性。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source><ph id="ph1">`MemberType`</ph> is a derived class of <ph id="ph2">`MemberInfo`</ph> and specifies the type of member this is.</source>
          <target state="translated"><ph id="ph1">`MemberType`</ph> 是的派生的类<ph id="ph2">`MemberInfo`</ph>，并指定这是的成员的类型。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Member types are constructors, properties, fields, and methods.</source>
          <target state="translated">成员类型是构造函数、 属性、 字段和方法。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Since this is a <ph id="ph1">`PropertyInfo`</ph> property, the returned type is a property.</source>
          <target state="translated">由于这是<ph id="ph1">`PropertyInfo`</ph>属性，则返回的类型是属性。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">`MemberType`</ph>属性，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">`PropertyInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`MemberType`</ph> value.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，获取<ph id="ph2">`MemberType`</ph>值。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>The following example displays the type of the specified member.</source>
          <target state="translated">下面的示例显示了指定的成员的类型。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">要比较的第一个对象。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">要比较的第二个对象。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">指示两个 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 对象是否相等。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 等于 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>，则为 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">要比较的第一个对象。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">要比较的第二个对象。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">指示两个 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 对象是否不相等。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 不等于 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>，则为 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Gets the type of this property.</source>
          <target state="translated">获取此属性的类型。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The type of this property.</source>
          <target state="translated">此属性的类型。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>To determine the type of a particular property, do the following:</source>
          <target state="translated">若要确定特定属性的类型，请执行以下操作：</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Type&gt;</ph>表示包含属性的类型 （类或结构） 的对象。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>If you are working with an object (an instance of a type), you can call its <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method.</source>
          <target state="translated">如果你正在使用的对象 （一种类型的实例），则可以调用其<ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</source>
          <target state="translated">否则为你可以使用 C# 运算符或 Visual Basic 运算符，与示例图示。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property in which you're interested.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>表示你感兴趣的属性的对象。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>You can do this by getting an array of all properties from the <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property directly by calling the <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method and specifying the property name.</source>
          <target state="translated">你可以执行此操作通过获取数组中的所有属性<ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph>方法，然后循环中的数组，或者，你的元素可以检索<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>直接通过调用表示的属性的对象<ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph>方法并指定属性名称。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">检索的值<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph>属性从<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class that has five properties.</source>
          <target state="translated">下面的示例定义<ph id="ph1">`Employee`</ph>具有五个属性的类。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>It then uses retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects that represent those properties and displays the name and type of each.</source>
          <target state="translated">它然后使用检索的数组<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>表示这些属性并显示名称和每个类型的对象。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">获取此属性的 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 访问器。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>The <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="set" /&gt;</ph>此属性访问器或<ph id="ph2">&lt;see langword="null" /&gt;</ph>如果属性是只读的。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> property is equivalent to calling the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> method with a value of <ph id="ph3">`true`</ph> for the <ph id="ph4">`nonPublic`</ph> argument.</source>
          <target state="translated">检索的值的<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph>属性等效于调用<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph>具有值的方法<ph id="ph3">`true`</ph>为<ph id="ph4">`nonPublic`</ph>自变量。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Sets the property value for a specified object.</source>
          <target state="translated">设置指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The object whose property value will be set.</source>
          <target state="translated">将设置其属性值的对象。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The new property value.</source>
          <target state="translated">新的属性值。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Sets the property value of a specified object.</source>
          <target state="translated">设置指定对象的属性值。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> overload sets the value of a non-indexed property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph>重载设置非索引化属性的值。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To determine whether a property is indexed, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">若要确定是否属性编制了索引，请调用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">如果生成的数组具有 0 （零） 个元素，该属性未被索引。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To set the value of an indexed property, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> overload.</source>
          <target state="translated">若要设置索引的属性的值，调用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph>重载。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the property type of this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, the property will be set to the default value for that type.</source>
          <target state="translated">如果此属性键入<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象是值类型和<ph id="ph2">`value`</ph>是<ph id="ph3">`null`</ph>，属性将设置为该类型的默认值。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> for <ph id="ph7">`Object[]`</ph>, and <ph id="ph8">`null`</ph> for <ph id="ph9">`CultureInfo`</ph>.</source>
          <target state="translated">这是调用运行时实现的抽象的便捷方法<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph>方法，指定<ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>为<ph id="ph3">`BindingFlags`</ph>参数，<ph id="ph4">`null`</ph>为<ph id="ph5">`Binder`</ph>，<ph id="ph6">`null`</ph>为<ph id="ph7">`Object[]`</ph>，和<ph id="ph8">`null`</ph>为<ph id="ph9">`CultureInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">若要使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph>方法，请首先获取<ph id="ph2">&lt;xref:System.Type&gt;</ph>表示的类的对象。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Type&gt;</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象，请调用<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此方法可以用于访问非公共成员，如果调用方已被授予<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>标志，并且如果非公共成员的授予集限制为调用方的授予集或子集其中。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射的安全注意事项<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with one <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) and one instance property.</source>
          <target state="translated">下面的示例声明一个名为类<ph id="ph1">`Example`</ph>具有一个<ph id="ph2">`static`</ph>(<ph id="ph3">`Shared`</ph>在 Visual Basic 中) 和一个实例属性。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> method to change the original property values and displays the original and final values.</source>
          <target state="translated">该示例使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph>方法可以更改原始属性值并显示原始和最后一个值。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">找不到该属性的 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 无法转换为 <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">在<bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>适用于 Windows 应用商店应用的 .NET<ept id="p1">&lt;/see&gt;</ept> 或<bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>可移植类库<ept id="p2">&lt;/see&gt;</ept>中，改为捕获 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> does not match the target type, or a property is an instance property but <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 的类型与目标类型不匹配，或属性是实例属性，但 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 是 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">在<bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>适用于 Windows 应用商店应用的 .NET<ept id="p1">&lt;/see&gt;</ept> 或<bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>可移植类库<ept id="p2">&lt;/see&gt;</ept>中，改为捕获基类异常 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">试图非法访问类中的私有或受保护方法。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">设置属性值时出错。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性指示出错的原因。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object whose property value will be set.</source>
          <target state="translated">将设置其属性值的对象。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The new property value.</source>
          <target state="translated">新的属性值。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Sets the property value of a specified object with optional index values for index properties.</source>
          <target state="translated">用索引化属性的可选索引值设置指定对象的该属性值。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">如果此<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象是值类型和<ph id="ph2">`value`</ph>是<ph id="ph3">`null`</ph>，则该属性将设置为该类型的默认值。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">若要确定是否属性编制了索引，请使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">如果生成的数组具有 0 （零） 个元素，该属性未被索引。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, and <ph id="ph6">`null`</ph> for <ph id="ph7">`CultureInfo`</ph>.</source>
          <target state="translated">这是调用运行时实现的抽象的便捷方法<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph>方法，指定<ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>为<ph id="ph3">`BindingFlags`</ph>参数，<ph id="ph4">`null`</ph>为<ph id="ph5">`Binder`</ph>，和<ph id="ph6">`null`</ph>为<ph id="ph7">`CultureInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">若要使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph>方法，请首先获取<ph id="ph2">&lt;xref:System.Type&gt;</ph>表示的类的对象。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Type&gt;</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">从<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此方法可以用于访问非公共成员，如果调用方已被授予<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>标志，并且如果非公共成员的授予集限制为调用方的授予集或子集其中。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射的安全注意事项<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example defines a class named <ph id="ph1">`TestClass`</ph> that has a read-write property named <ph id="ph2">`Caption`</ph>.</source>
          <target state="translated">下面的示例定义一个名为<ph id="ph1">`TestClass`</ph>具有名为的读写属性<ph id="ph2">`Caption`</ph>。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>It  displays the default value of the <ph id="ph1">`Caption`</ph> property, calls the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the property value, and displays the result.</source>
          <target state="translated">它显示的默认值<ph id="ph1">`Caption`</ph>属性、 调用<ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph>方法可以更改属性值，并显示结果。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Note that, because the <ph id="ph1">`Caption`</ph> property is not a parameter array, the <ph id="ph2">`index`</ph> argument is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">请注意，因为<ph id="ph1">`Caption`</ph>属性不是参数数组，<ph id="ph2">`index`</ph>自变量是<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with three properties: a <ph id="ph2">`static`</ph> property (<ph id="ph3">`Shared`</ph> in Visual Basic), an instance property, and an indexed instance property.</source>
          <target state="translated">下面的示例声明一个名为类<ph id="ph1">`Example`</ph>具有三个属性：<ph id="ph2">`static`</ph>属性 (<ph id="ph3">`Shared`</ph>在 Visual Basic 中)，一个实例属性和一个索引的实例属性。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the default values of the properties and displays the original and final values.</source>
          <target state="translated">该示例使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph>方法可以更改的属性和显示原始和最终值的默认值。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</source>
          <target state="translated">用于搜索的反射的索引的实例属性的名称是不同，具体取决于语言和应用到该属性的属性。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In Visual Basic, the property name is always used to search for the property with reflection.</source>
          <target state="translated">在 Visual Basic 中，属性名称始终用于搜索具有反射的属性。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">`Default`</ph> keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</source>
          <target state="translated">你可以使用<ph id="ph1">`Default`</ph>关键字来将该属性的默认索引属性，在这种情况下则可以省略名称时访问的属性，如此示例所示。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can also use the property name.</source>
          <target state="translated">你还可以使用属性名称。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</source>
          <target state="translated">在 C# 中，索引的 instance 属性是名为一个索引器的默认属性和访问代码中的属性时，永远不会使用的名称。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>By default, the name of the property is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection.</source>
          <target state="translated">默认情况下，该属性的名称是<ph id="ph1">`Item`</ph>，并且具有反射的属性搜索时，你必须使用该名称。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the indexer a different name.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph>属性以指定不同名称的索引器。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In this example, the name is <ph id="ph1">`IndexedInstanceProperty`</ph>.</source>
          <target state="translated">在本示例中，该名称为 <ph id="ph1">`IndexedInstanceProperty`</ph>。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C++, the <ph id="ph1">`default`</ph> specifier can be used to make an indexed property a default indexed property (class indexer).</source>
          <target state="translated">C + + 中<ph id="ph1">`default`</ph>说明符可以用于将索引的属性的默认索引属性 （类索引器）。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In that case, the name of the property by default is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection, as in this example.</source>
          <target state="translated">在这种情况下，默认情况下属性的名称是<ph id="ph1">`Item`</ph>，并且具有反射，如此示例所示的属性搜索时，你必须使用该名称。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph>属性为类索引器，请指定不同的名称在反射中，但不能使用该名称来访问代码中的属性。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</source>
          <target state="translated">使用其名称，在代码和反射来访问索引的属性不是类索引器。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 数组不包含所需的参数类型。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">找不到该属性的 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 无法转换为 <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">在<bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>适用于 Windows 应用商店应用的 .NET<ept id="p1">&lt;/see&gt;</ept> 或<bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>可移植类库<ept id="p2">&lt;/see&gt;</ept>中，改为捕获 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">该对象与目标类型不匹配，或者某属性是实例属性但 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 中的参数数量与索引属性采用的参数数量不匹配。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">在<bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>适用于 Windows 应用商店应用的 .NET<ept id="p1">&lt;/see&gt;</ept> 或<bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>可移植类库<ept id="p2">&lt;/see&gt;</ept>中，改为捕获基类异常 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">试图非法访问类中的私有或受保护方法。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">设置属性值时出错。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">例如，为一个索引属性指定的索引值超出范围。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性指示出错的原因。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be set.</source>
          <target state="translated">将设置其属性值的对象。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The new property value.</source>
          <target state="translated">新的属性值。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">以下指定该调用特性的枚举成员的按位组合：<ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>、<ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>、<ph id="ph3">&lt;see langword="Static" /&gt;</ph>、<ph id="ph4">&lt;see langword="GetField" /&gt;</ph>、<ph id="ph5">&lt;see langword="SetField" /&gt;</ph>、<ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> 或 <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">必须指定合适的调用属性。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">例如，为了调用静态成员，设置 <ph id="ph1">&lt;see langword="Static" /&gt;</ph> 标志。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 对象的检索。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用默认活页夹。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">要为其本地化资源的区域性。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">如果该值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则从 <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> 属性获取区域性的特定信息。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">当在派生类中重写时，为具有指定绑定、索引和区域性特定信息的指定对象设置属性值。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">如果此<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象是值类型和<ph id="ph2">`value`</ph>是<ph id="ph3">`null`</ph>，则该属性将设置为该类型的默认值。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">若要确定是否属性编制了索引，请使用<ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">如果生成的数组具有 0 （零） 个元素，该属性未被索引。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">访问限制会忽略完全受信任的代码。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</source>
          <target state="translated">也就是说，是在私有构造函数、 方法、 字段和属性访问而完全受信任代码时，通过反射调用。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`SetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要使用<ph id="ph1">`SetValue`</ph>方法，首先需要获取类<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">`PropertyInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`SetValue`</ph> method.</source>
          <target state="translated">从<ph id="ph1">`PropertyInfo`</ph>，使用<ph id="ph2">`SetValue`</ph>方法。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此方法可以用于访问非公共成员，如果调用方已被授予<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>标志，并且如果非公共成员的授予集限制为调用方的授予集或子集其中。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射的安全注意事项<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 数组不包含所需的参数类型。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">找不到该属性的 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 取值函数。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 无法转换为 <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">该对象与目标类型不匹配，或者某属性是实例属性但 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 中的参数数量与索引属性采用的参数数量不匹配。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">试图非法访问类中的私有或受保护方法。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">设置属性值时出错。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">例如，为一个索引属性指定的索引值超出范围。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 属性指示出错的原因。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">调用时后期绑定通过机制如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要映射的名称的传入数组。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要映射的名称的计数。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">要在其中解释名称的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">调用方分配的数组，用于接收与名称对应的 ID。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">将一组名称映射为对应的一组调度标识符。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">获取表示 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 类型的 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，表示 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 类型。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要返回的类型信息。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">类型信息的区域设置标识符。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收一个指针，指向请求的类型信息对象。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向一个位置，该位置接收对象提供的类型信息接口的数量。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">检索对象提供的类型信息接口的数量（0 或 1）。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">标识成员。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">要在其中解释参数的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述调用的上下文的标志。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向要存储结果的位置的指针。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">指向一个包含异常信息的结构的指针。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一个出错自变量的索引。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供对某一对象公开的属性和方法的访问。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::Invoke`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>