<Type Name="MemberInfo" FullName="System.Reflection.MemberInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8db62a3ed31bdc693e0000017df74ab65286b3e5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30481251" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MemberInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit MemberInfo extends System.Object implements class System.Reflection.ICustomAttributeProvider, class System.Runtime.InteropServices._MemberInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MemberInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemberInfo&#xA;Implements _MemberInfo, ICustomAttributeProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemberInfo abstract : System::Reflection::ICustomAttributeProvider, System::Runtime::InteropServices::_MemberInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.ICustomAttributeProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MemberInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MemberInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="269a8-101">获取有关成员属性的信息并提供对成员元数据的访问权限。</span>
      <span class="sxs-lookup">
        <span data-stu-id="269a8-101">Obtains information about the attributes of a member and provides access to member metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-102"><xref:System.Reflection.MemberInfo>类是用于获取有关类 （构造函数、 事件、 字段、 方法和属性） 的所有成员的信息的类的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="269a8-102">The <xref:System.Reflection.MemberInfo> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</span></span>  
  
 <span data-ttu-id="269a8-103">此类引入了所有成员都提供的基本功能。</span><span class="sxs-lookup"><span data-stu-id="269a8-103">This class introduces the basic functionality that all members provide.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-104">此示例演示如何使用各种反射类来分析程序集中包含的元数据。</span><span class="sxs-lookup"><span data-stu-id="269a8-104">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="269a8-105">对继承者的完全信任。</span>
      <span class="sxs-lookup">
        <span data-stu-id="269a8-105">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="269a8-106">此类不能由部分受信任的代码继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="269a8-106">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="269a8-107">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="269a8-107">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="269a8-108">继承自<see cref="T:System.Reflection.MemberInfo" />必须重写以下成员：<see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />和<see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</span>
        <span class="sxs-lookup">
          <span data-stu-id="269a8-108">When you inherit from <see cref="T:System.Reflection.MemberInfo" /> you must override the following members: <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> and <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MemberInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MemberInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="269a8-109">初始化 <see cref="T:System.Reflection.MemberInfo" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-109">Initializes a new instance of the <see cref="T:System.Reflection.MemberInfo" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-110">仅派生的类可以创建此`MemberInfo`类。</span><span class="sxs-lookup"><span data-stu-id="269a8-110">Only a derived class can create this `MemberInfo` class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.CustomAttributeData&gt; CustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.CustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ CustomAttributes { System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-111">获取包含此成员自定义属性的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-111">Gets a collection that contains this member's custom attributes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="269a8-112">包含此成员的自定义特性的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-112">A collection that contains this member's custom attributes.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public abstract Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-113">获取声明该成员的类。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-113">Gets the class that declares this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="269a8-114">声明该成员的类的 <see langword="Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-114">The <see langword="Type" /> object for the class that declares this member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-115"><xref:System.Reflection.MemberInfo.DeclaringType%2A>属性检索的引用<xref:System.Type>声明此成员的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="269a8-115">The <xref:System.Reflection.MemberInfo.DeclaringType%2A> property retrieves a reference to the <xref:System.Type> object for the type that declares this member.</span></span> <span data-ttu-id="269a8-116">由类型声明或继承自基类型中，一种类型的成员，因此`Type`返回对象<xref:System.Reflection.MemberInfo.DeclaringType%2A>属性可能不是相同`Type`用来获取当前对象<xref:System.Reflection.MemberInfo>对象。</span><span class="sxs-lookup"><span data-stu-id="269a8-116">A member of a type is either declared by the type or inherited from a base type, so the `Type` object returned by the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property might not be the same as the `Type` object used to obtain the current <xref:System.Reflection.MemberInfo> object.</span></span>  
  
-   <span data-ttu-id="269a8-117">如果`Type`中此对象`MemberInfo`获取对象未声明此成员<xref:System.Reflection.MemberInfo.DeclaringType%2A>属性将表示其基类型之一。</span><span class="sxs-lookup"><span data-stu-id="269a8-117">If the `Type` object from which this `MemberInfo` object was obtained did not declare this member, the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property will represent one of its base types.</span></span>  
  
-   <span data-ttu-id="269a8-118">如果`MemberInfo`对象是全局的成员 (即，如果已获取从<xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType>方法，返回对模块全局方法)，返回<xref:System.Reflection.MemberInfo.DeclaringType%2A>将`null`。</span><span class="sxs-lookup"><span data-stu-id="269a8-118">If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> method, which returns global methods on a module), the returned <xref:System.Reflection.MemberInfo.DeclaringType%2A> will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-119">下面的示例定义一个接口， `IValue`，与单个成员， `GetValue`。</span><span class="sxs-lookup"><span data-stu-id="269a8-119">The following example defines an interface, `IValue`, with a single member, `GetValue`.</span></span> <span data-ttu-id="269a8-120">它还定义了四个类： `A`，一个基类，实现该类`IValue`接口;`B`，它继承自`A`和隐藏其实现`GetValue`从基类实现;`C`，它只是继承自`A`; 和`D`，它继承自`A`并重写其`GetValue`方法。</span><span class="sxs-lookup"><span data-stu-id="269a8-120">It also defines four classes: `A`, a base class that implements the `IValue` interface; `B`, which inherits from `A` and hides its implementation of `GetValue` from the base class implementation; `C`, which simply inherits from `A`; and `D`, which inherits from `A` and overrides its `GetValue` method.</span></span>  <span data-ttu-id="269a8-121">该示例然后检索<xref:System.Reflection.MemberInfo>类型的每个成员的对象 (包括成员继承自<xref:System.Object>) 显示的值和其<xref:System.Reflection.MemberInfo.DeclaringType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="269a8-121">The example then retrieves a <xref:System.Reflection.MemberInfo> object for each member of the type (including members inherited from <xref:System.Object>) and displays the value of its <xref:System.Reflection.MemberInfo.DeclaringType%2A> property.</span></span>  
  
 [!code-csharp[Classic MemberInfo.DeclaringType Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.DeclaringType Example/CS/Example2.cs#2)]
 [!code-vb[Classic MemberInfo.DeclaringType Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.DeclaringType Example/VB/Example2.vb#2)]  
  
 <span data-ttu-id="269a8-122">请注意，声明类型`A.GetValue`是`A`，则该`B`包括两个`GetValue`方法、 一个声明`A`和通过`B`，以及可以，声明类型的`D.GetValue`是`D`。</span><span class="sxs-lookup"><span data-stu-id="269a8-122">Note that the declaring type of `A.GetValue` is `A`, that `B` includes two `GetValue` methods, one declared by `A` and one by `B`, and that the declaring type of `D.GetValue` is `D`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="269a8-123">`DeclaringType` 返回仅成员名称和其声明的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="269a8-123">`DeclaringType` returns only the member names and the names of their declaring types.</span></span> <span data-ttu-id="269a8-124">若要返回的成员具有其原型的名称，请调用`MemberInfo.ToString`。</span><span class="sxs-lookup"><span data-stu-id="269a8-124">To return the member names with their prototypes, call `MemberInfo.ToString`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="269a8-125">与此实例进行比较的对象，或为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-125">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-126">返回一个值，该值指示此实例是否与指定的对象相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-126">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-127">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-127">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-128">在派生类中重写时，返回应用于此成员的自定义属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-128">When overridden in a derived class, returns custom attributes applied to this member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public abstract object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="269a8-129">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-129">
              <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="269a8-130">会忽略属性和事件的此参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-130">This parameter is ignored for properties and events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-131">在派生类中重写时，返回应用于此成员的所有自定义属性的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-131">When overridden in a derived class, returns an array of all custom attributes applied to this member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-132">一个包含应用于此成员的所有自定义属性的数组，或者在未定义任何特性时为包含零个元素的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-132">An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-133">此方法将忽略`inherit`属性和事件的参数。</span><span class="sxs-lookup"><span data-stu-id="269a8-133">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="269a8-134">若要搜索的属性和事件的属性的继承链，使用的适当重载<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="269a8-134">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="269a8-135">在.NET Framework 2.0 版中，此方法返回的安全属性上的方法、 构造函数和类型如果它们存储在新的元数据格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-135">In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format.</span></span> <span data-ttu-id="269a8-136">使用版本 2.0 编译的程序集使用此格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-136">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="269a8-137">动态程序集和与早期版本的.NET Framework 编译的程序集使用旧的 XML 格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-137">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="269a8-138">请参阅[发出的声明性安全属性](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)。</span><span class="sxs-lookup"><span data-stu-id="269a8-138">See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-139">下面的示例定义了一个自定义属性，并将关联的属性`MyClass.MyMethod`，在运行时，检索该属性，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="269a8-139">The following example defines a custom attribute and associates the attribute with `MyClass.MyMethod`, retrieves the attribute at run time, and displays the result.</span></span>  
  
 [!code-cpp[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/cpp/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/CPP/memberinfo_getcustomattributes1.cpp#1)]
 [!code-csharp[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/CS/memberinfo_getcustomattributes1.cs#1)]
 [!code-vb[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/VB/memberinfo_getcustomattributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="269a8-140">此成员属于加载到仅反射的上下文的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-140">This member belongs to a type that is loaded into the reflection-only context.</span>
          </span>
          <span data-ttu-id="269a8-141">请参阅[如何：将程序集加载到仅反射上下文中](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-141">See [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="269a8-142">无法加载自定义属性类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-142">A custom attribute type could not be loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Reflection.Emit.CustomAttributeBuilder" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public abstract object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="269a8-143">要搜索的属性的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-143">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="269a8-144">仅返回可分配给此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-144">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="269a8-145">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-145">
              <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="269a8-146">会忽略属性和事件的此参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-146">This parameter is ignored for properties and events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-147">在派生类中重写时，返回应用于此成员并由 <see cref="T:System.Type" /> 标识的自定义属性的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-147">When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-148">应用于此成员的自定义属性的数组，如果未应用可分配给 <paramref name="attributeType" /> 的属性，则为含零元素的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-148">An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-149">此方法将忽略`inherit`属性和事件的参数。</span><span class="sxs-lookup"><span data-stu-id="269a8-149">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="269a8-150">若要搜索的属性和事件的属性的继承链，使用的适当重载<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="269a8-150">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="269a8-151">在.NET Framework 2.0 版中，此方法返回的安全属性上的方法、 构造函数和类型如果属性存储在新的元数据格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-151">In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format.</span></span> <span data-ttu-id="269a8-152">使用版本 2.0 编译的程序集使用此格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-152">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="269a8-153">动态程序集和与早期版本的.NET Framework 编译的程序集使用旧的 XML 格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-153">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="269a8-154">请参阅[发出的声明性安全属性](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)。</span><span class="sxs-lookup"><span data-stu-id="269a8-154">See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-155">下面的示例定义一个名为`BaseClass`具有两个非继承成员： 名为的线程静态字段`total`和一个名为的非符合 cls 的方法`MethodA`。</span><span class="sxs-lookup"><span data-stu-id="269a8-155">The following example defines a class named `BaseClass` that has two non-inherited members: a thread static field named `total` and a non-CLS-compliant method named `MethodA`.</span></span>  <span data-ttu-id="269a8-156">一个名为类`DerivedClass`继承自`BaseClass`并重写其`MethodA`方法。</span><span class="sxs-lookup"><span data-stu-id="269a8-156">A class named `DerivedClass` inherits from `BaseClass` and overrides its `MethodA` method.</span></span> <span data-ttu-id="269a8-157">请注意，将没有属性应用于的成员`DerivedClass`。</span><span class="sxs-lookup"><span data-stu-id="269a8-157">Note that no attributes are applied to the members of `DerivedClass`.</span></span> <span data-ttu-id="269a8-158">该示例循环的成员`DerivedClass`以确定是否<xref:System.CLSCompliantAttribute>或<xref:System.ThreadStaticAttribute>属性已应用于它们。</span><span class="sxs-lookup"><span data-stu-id="269a8-158">The example iterates the members of `DerivedClass` to determine whether the <xref:System.CLSCompliantAttribute> or <xref:System.ThreadStaticAttribute> attribute as been applied to them.</span></span> <span data-ttu-id="269a8-159">因为`inherit`是`true`，该方法将搜索的继承层次结构`DerivedClass`为指定的属性。</span><span class="sxs-lookup"><span data-stu-id="269a8-159">Because `inherit` is `true`, the method searches the inheritance hierarchy of `DerivedClass` for the specified attribute.</span></span> <span data-ttu-id="269a8-160">如示例所示，输出`total`字段用修饰<xref:System.ThreadStaticAttribute>属性，与`MethodA`方法用修饰<xref:System.CLSCompliantAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="269a8-160">As the output from the example shows, the `total` field is decorated with the <xref:System.ThreadStaticAttribute> attribute, and the `MethodA` method is decorated with the <xref:System.CLSCompliantAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Reflection.MemberInfo.GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Reflection.MemberInfo.GetCustomAttributes/cs/GetCustomAttributes1.cs#1)]
 [!code-vb[System.Reflection.MemberInfo.GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Reflection.MemberInfo.GetCustomAttributes/vb/GetCustomAttributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="269a8-161">无法加载自定义属性类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-161">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="269a8-162">如果 <paramref name="attributeType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-162">If <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="269a8-163">此成员属于加载到仅反射的上下文的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-163">This member belongs to a type that is loaded into the reflection-only context.</span>
          </span>
          <span data-ttu-id="269a8-164">请参阅[如何：将程序集加载到仅反射上下文中](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-164">See [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="269a8-165">返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标成员的特性相关数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-165">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-166">
            <see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示有关已应用于目标成员的特性的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-166">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-167">此方法用于检查要在其中加载到只反射上下文的代码中定义的自定义属性本身的情况下的仅限反射上下文中的代码的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="269a8-167">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="269a8-168">等方法<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>和<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>不能在这种情况下，因为它们创建实例的属性。</span><span class="sxs-lookup"><span data-stu-id="269a8-168">Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="269a8-169">仅反射上下文中的代码不能执行。</span><span class="sxs-lookup"><span data-stu-id="269a8-169">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="269a8-170">有关详细信息和有关示例代码，请参阅<xref:System.Reflection.CustomAttributeData>类。</span><span class="sxs-lookup"><span data-stu-id="269a8-170">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 <span data-ttu-id="269a8-171">此方法获取自定义属性数据类型、 嵌套的类型和类型的成员，因为<xref:System.Type>类和中的类<xref:System.Reflection>代表类型成员都派生自的命名空间<xref:System.Reflection.MemberInfo>。</span><span class="sxs-lookup"><span data-stu-id="269a8-171">This method gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="269a8-172">返回此实例的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-172">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-173">32 位有符号整数哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-173">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameMetadataDefinitionAs">
      <MemberSignature Language="C#" Value="public virtual bool HasSameMetadataDefinitionAs (System.Reflection.MemberInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasSameMetadataDefinitionAs(class System.Reflection.MemberInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.HasSameMetadataDefinitionAs(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSameMetadataDefinitionAs (other As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasSameMetadataDefinitionAs(System::Reflection::MemberInfo ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public abstract bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="269a8-174">要搜索的自定义属性的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-174">The type of custom attribute to search for.</span>
          </span>
          <span data-ttu-id="269a8-175">该搜索包括派生类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-175">The search includes derived types.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="269a8-176">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-176">
              <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="269a8-177">会忽略属性和事件的此参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-177">This parameter is ignored for properties and events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-178">在派生类中重写时，指示是否将指定类型或其派生类型的一个或多个特性应用于此成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-178">When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-179">如果将 <paramref name="attributeType" /> 或其任何派生类型的一个或多个实例应用于此成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-179">
              <see langword="true" /> if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-180">此方法将忽略`inherit`属性和事件的参数。</span><span class="sxs-lookup"><span data-stu-id="269a8-180">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="269a8-181">若要搜索的属性和事件的属性的继承链，使用的适当重载<xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="269a8-181">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="269a8-182">在.NET Framework 2.0 版中，此方法返回`true`类型、 方法或构造函数具有存储在新的元数据格式的安全属性。</span><span class="sxs-lookup"><span data-stu-id="269a8-182">In the .NET Framework version 2.0, this method returns `true` if a type, method, or constructor has security attributes stored in the new metadata format.</span></span> <span data-ttu-id="269a8-183">使用版本 2.0 编译的程序集使用此格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-183">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="269a8-184">动态程序集和与早期版本的.NET Framework 编译的程序集使用旧的 XML 格式。</span><span class="sxs-lookup"><span data-stu-id="269a8-184">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="269a8-185">请参阅[发出的声明性安全属性](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)。</span><span class="sxs-lookup"><span data-stu-id="269a8-185">See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-186">下面的示例确定是否将指定的属性应用于指定的成员。</span><span class="sxs-lookup"><span data-stu-id="269a8-186">The following example determines whether the specified attribute is applied to the specified member.</span></span>  
  
 [!code-cpp[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/CPP/memberinfo_getcustomattribute_isdefined.cpp#1)]
 [!code-csharp[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/CS/memberinfo_getcustomattribute_isdefined.cs#1)]
 [!code-vb[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/VB/memberinfo_getcustomattribute_isdefined.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-187">在派生类中重写时，获取 <see cref="T:System.Reflection.MemberTypes" /> 值，该值指示成员类型 - 方法、构造函数、事件等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-187">When overridden in a derived class, gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of the member — method, constructor, event, and so on.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="269a8-188">指示成员类型的 <see cref="T:System.Reflection.MemberTypes" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-188">A <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-189">在派生类中重写此属性，并替代返回适当的成员类型。</span><span class="sxs-lookup"><span data-stu-id="269a8-189">This property is overridden in derived classes, and the override returns the appropriate member type.</span></span> <span data-ttu-id="269a8-190">因此，当检查一组<xref:System.Reflection.MemberInfo>对象-例如，返回的数组<xref:System.Type.GetMembers%2A>-<xref:System.Reflection.MemberInfo.MemberType%2A>属性可以用于确定任何给定成员的成员类型。</span><span class="sxs-lookup"><span data-stu-id="269a8-190">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property can be used to determine the member type of any given member.</span></span>  
  
 <span data-ttu-id="269a8-191">若要获取`MemberType`属性，获取类<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="269a8-191">To get the `MemberType` property, get the class <xref:System.Type>.</span></span> <span data-ttu-id="269a8-192">从`Type`，获取<xref:System.Reflection.MethodInfo>数组。</span><span class="sxs-lookup"><span data-stu-id="269a8-192">From the `Type`, get the <xref:System.Reflection.MethodInfo> array.</span></span> <span data-ttu-id="269a8-193">从`MethodInfo`数组时，获取`MemberTypes`。</span><span class="sxs-lookup"><span data-stu-id="269a8-193">From the `MethodInfo` array, get the `MemberTypes`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-194">下面的示例显示的成员名称和指定类的类型。</span><span class="sxs-lookup"><span data-stu-id="269a8-194">The following example displays the member name and type of a specified class.</span></span>  
  
 [!code-cpp[Classic MemberInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public virtual int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-195">获取一个值，该值标识元数据元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-195">Gets a value that identifies a metadata element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="269a8-196">结合 <see cref="P:System.Reflection.MemberInfo.Module" />，该值能够唯一标识元数据元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-196">A value which, in combination with <see cref="P:System.Reflection.MemberInfo.Module" />, uniquely identifies a metadata element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-197">使用此属性获取的令牌可以传递到非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="269a8-197">The tokens obtained using this property can be passed to the unmanaged reflection API.</span></span> <span data-ttu-id="269a8-198">有关详细信息，请参阅[非托管的反射 API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)。</span><span class="sxs-lookup"><span data-stu-id="269a8-198">For more information, please see [Unmanaged Reflection API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="269a8-199">使用非托管的反射 API 需要熟悉的公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="269a8-199">Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="269a8-200">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="269a8-200">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="269a8-201">当前 <see cref="T:System.Reflection.MemberInfo" /> 表示数组方法（如 <see langword="Address" />），针对元素类型是尚未完成的动态类型的数组类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-201">The current <see cref="T:System.Reflection.MemberInfo" /> represents an array method, such as <see langword="Address" />, on an array type whose element type is a dynamic type that has not been completed.</span>
          </span>
          <span data-ttu-id="269a8-202">若要在这种情况下获取元数据标记，将 <see cref="T:System.Reflection.MemberInfo" /> 对象传递给 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> 方法；或使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法直接获取标记，而不是首先使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法获取 <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-202">To get a metadata token in this case, pass the <see cref="T:System.Reflection.MemberInfo" /> object to the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> method; or use the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get the token directly, instead of using the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get a <see cref="T:System.Reflection.MethodInfo" /> first.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-203">获取一个模块，在该模块中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-203">Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="269a8-204">
            <see cref="T:System.Reflection.Module" />，在其中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-204">The <see cref="T:System.Reflection.Module" /> in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-205">提供此属性是为方便起见。</span><span class="sxs-lookup"><span data-stu-id="269a8-205">This property is provided as a convenience.</span></span> <span data-ttu-id="269a8-206">它相当于使用<xref:System.Reflection.MemberInfo.DeclaringType%2A>属性来获取该方法声明的类型并调用<xref:System.Type.Module%2A>属性生成<xref:System.Type>对象。</span><span class="sxs-lookup"><span data-stu-id="269a8-206">It is equivalent to using the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property to get the type in which the method is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-207">下面的代码示例声明继承的类<xref:System.Object>和替代<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="269a8-207">The following code example declares a class that inherits <xref:System.Object> and overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="269a8-208">该示例获取<xref:System.Reflection.MethodInfo>类的对象`ToString`方法以及继承<xref:System.Object.GetHashCode%2A>方法，并显示在其中声明两个方法的模块的名称。</span><span class="sxs-lookup"><span data-stu-id="269a8-208">The example obtains <xref:System.Reflection.MethodInfo> objects for the class's `ToString` method and for the inherited <xref:System.Object.GetHashCode%2A> method, and displays the names of the modules in which the two methods are declared.</span></span>  
  
 [!code-cpp[System.Reflection.MemberInfo.Module#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/cpp/source.cpp#1)]
 [!code-csharp[System.Reflection.MemberInfo.Module#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/CS/source.cs#1)]
 [!code-vb[System.Reflection.MemberInfo.Module#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="269a8-209">未实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-209">This method is not implemented.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-210">获取当前成员的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-210">Gets the name of the current member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="269a8-211">包含此成员名称的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-211">A <see cref="T:System.String" /> containing the name of this member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-212">仅该成员的简单名称返回时，不是完全限定的名称。</span><span class="sxs-lookup"><span data-stu-id="269a8-212">Only the simple name of the member is returned, not the fully qualified name.</span></span>  
  
 <span data-ttu-id="269a8-213">若要获取<xref:System.Reflection.MemberInfo.Name%2A>属性，获取类<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="269a8-213">To get the <xref:System.Reflection.MemberInfo.Name%2A> property, get the class <xref:System.Type>.</span></span> <span data-ttu-id="269a8-214">从`Type`，获取<xref:System.Reflection.MemberInfo>数组。</span><span class="sxs-lookup"><span data-stu-id="269a8-214">From the `Type`, get the <xref:System.Reflection.MemberInfo> array.</span></span> <span data-ttu-id="269a8-215">从`MemberInfo`元素的数组，获取`Name`属性。</span><span class="sxs-lookup"><span data-stu-id="269a8-215">From a `MemberInfo` element of the array, obtain the `Name` property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-216">此示例将列出`Name`和`DeclaringType`属性指定的类的每个成员。</span><span class="sxs-lookup"><span data-stu-id="269a8-216">This example lists the `Name` and `DeclaringType` property of each member of the specified class.</span></span>  
  
 [!code-cpp[Classic MemberInfo.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.MemberInfo left, class System.Reflection.MemberInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As MemberInfo, right As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::MemberInfo ^ left, System::Reflection::MemberInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MemberInfo" />
        <Parameter Name="right" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="269a8-217">要与右侧<c></c>进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-217">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>right</c>.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="269a8-218">要与左侧<c></c>进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-218">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>left</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-219">指示两个 <see cref="T:System.Reflection.MemberInfo" /> 对象是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-219">Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-220">如果 <paramref name="left" /> 等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-220">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.MemberInfo left, class System.Reflection.MemberInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As MemberInfo, right As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::MemberInfo ^ left, System::Reflection::MemberInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MemberInfo" />
        <Parameter Name="right" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="269a8-221">要与右侧<c></c>进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-221">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>right</c>.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="269a8-222">要与左侧<c></c>进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-222">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>left</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-223">指示两个 <see cref="T:System.Reflection.MemberInfo" /> 对象是否不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-223">Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-224">如果 <paramref name="left" /> 不等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-224">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public abstract Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="269a8-225">获取用于获取 <see langword="MemberInfo" /> 的此实例的类对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-225">Gets the class object that was used to obtain this instance of <see langword="MemberInfo" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="269a8-226">
            <see langword="Type" /> 对象，通过它获取了此 <see langword="MemberInfo" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-226">The <see langword="Type" /> object through which this <see langword="MemberInfo" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-227">`ReflectedType`属性检索<xref:System.Type>用于获取此实例的对象`MemberInfo`。</span><span class="sxs-lookup"><span data-stu-id="269a8-227">The `ReflectedType` property retrieves the <xref:System.Type> object that was used to obtain this instance of `MemberInfo`.</span></span> <span data-ttu-id="269a8-228">这可能不同于的值<xref:System.Reflection.MemberInfo.DeclaringType%2A>属性，如果此<xref:System.Reflection.MemberInfo>对象表示从基类继承的成员。</span><span class="sxs-lookup"><span data-stu-id="269a8-228">This may differ from the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property if this <xref:System.Reflection.MemberInfo> object represents a member that is inherited from a base class.</span></span>  
  
 <span data-ttu-id="269a8-229">如果`MemberInfo`对象是全局的成员 (即，如果已获取从<xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType>方法，返回对模块全局方法)，返回<xref:System.Reflection.MemberInfo.DeclaringType%2A>将`null`。</span><span class="sxs-lookup"><span data-stu-id="269a8-229">If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> method, which returns global methods on a module), the returned <xref:System.Reflection.MemberInfo.DeclaringType%2A> will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="269a8-230">下面的代码示例演示如何<xref:System.Reflection.MemberInfo.ReflectedType%2A>更改时成员<xref:System.Object.ToString%2A?displayProperty=nameWithType>从查看<xref:System.Reflection.MemberInfo>从类型获取<xref:System.Object>和从<xref:System.Reflection.MemberInfo>从获取<xref:System.Reflection.MemberInfo>类本身，该类继承<xref:System.Object>但不重写<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="269a8-230">The following code example shows how the <xref:System.Reflection.MemberInfo.ReflectedType%2A> changes when the member <xref:System.Object.ToString%2A?displayProperty=nameWithType> is viewed from a <xref:System.Reflection.MemberInfo> obtained from type <xref:System.Object> and from a <xref:System.Reflection.MemberInfo> obtained from the <xref:System.Reflection.MemberInfo> class itself, which inherits <xref:System.Object> but does not override <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.IsDefined">
      <MemberSignature Language="C#" Value="bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Reflection.ICustomAttributeProvider.IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Reflection.ICustomAttributeProvider.IsDefined(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::IsDefined;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MemberInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MemberInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="269a8-231">留待将来使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-231">Reserved for future use.</span>
          </span>
          <span data-ttu-id="269a8-232">必须为 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-232">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="269a8-233">要映射的名称的传入数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-233">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="269a8-234">要映射的名称的计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-234">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="269a8-235">要在其中解释名称的区域设置上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-235">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="269a8-236">调用方分配的数组，用于接收与名称对应的 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-236">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-237">将一组名称映射为对应的一组调度标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-237">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-238">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="269a8-238">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="269a8-239">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="269a8-239">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="269a8-240">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-240">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetType">
      <MemberSignature Language="C#" Value="Type _MemberInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._MemberInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _MemberInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._MemberInfo.GetType() = System::Runtime::InteropServices::_MemberInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="269a8-241">获取一个表示 <see cref="T:System.Reflection.MemberInfo" /> 类的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-241">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="269a8-242">一个表示 <see cref="T:System.Reflection.MemberInfo" /> 类的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-242">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MemberInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MemberInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="269a8-243">要返回的类型信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-243">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="269a8-244">类型信息的区域设置标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-244">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="269a8-245">接收一个指针，指向请求的类型信息对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-245">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-246">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-246">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-247">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="269a8-247">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="269a8-248">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="269a8-248">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="269a8-249">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-249">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MemberInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MemberInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="269a8-250">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-250">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-251">检索对象提供的类型信息接口的数量（0 或 1）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-251">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-252">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="269a8-252">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="269a8-253">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="269a8-253">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="269a8-254">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-254">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.Invoke">
      <MemberSignature Language="C#" Value="void _MemberInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MemberInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MemberInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="269a8-255">标识成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-255">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="269a8-256">留待将来使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-256">Reserved for future use.</span>
          </span>
          <span data-ttu-id="269a8-257">必须为 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-257">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="269a8-258">要在其中解释参数的区域设置上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-258">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="269a8-259">描述调用的上下文的标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-259">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="269a8-260">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-260">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="269a8-261">指向要存储结果的位置的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-261">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="269a8-262">指向一个包含异常信息的结构的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-262">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="269a8-263">第一个出错自变量的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-263">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="269a8-264">提供对某一对象公开的属性和方法的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-264">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="269a8-265">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="269a8-265">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="269a8-266">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="269a8-266">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="269a8-267">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="269a8-267">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>