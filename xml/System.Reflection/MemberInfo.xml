<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemberInfo.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58db62a3ed31bdc693e0000017df74ab65286b3e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8db62a3ed31bdc693e0000017df74ab65286b3e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>Obtains information about the attributes of a member and provides access to member metadata.</source>
          <target state="translated">获取有关成员属性的信息并提供对成员元数据的访问权限。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>类是用于获取有关类 （构造函数、 事件、 字段、 方法和属性） 的所有成员的信息的类的抽象基类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class introduces the basic functionality that all members provide.</source>
          <target state="translated">此类引入了所有成员都提供的基本功能。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">此示例演示如何使用各种反射类来分析程序集中包含的元数据。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">对继承者的完全信任。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">此类不能由部分受信任的代码继承。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">继承自<ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>必须重写以下成员：<ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph>和<ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Only a derived class can create this <ph id="ph1">`MemberInfo`</ph> class.</source>
          <target state="translated">仅派生的类可以创建此<ph id="ph1">`MemberInfo`</ph>类。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>Gets a collection that contains this member's custom attributes.</source>
          <target state="translated">获取包含此成员自定义属性的集合。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>A collection that contains this member's custom attributes.</source>
          <target state="translated">包含此成员的自定义特性的集合。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Gets the class that declares this member.</source>
          <target state="translated">获取声明该成员的类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object for the class that declares this member.</source>
          <target state="translated">声明该成员的类的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property retrieves a reference to the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object for the type that declares this member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>属性检索的引用<ph id="ph2">&lt;xref:System.Type&gt;</ph>声明此成员的类型的对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>A member of a type is either declared by the type or inherited from a base type, so the <ph id="ph1">`Type`</ph> object returned by the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property might not be the same as the <ph id="ph3">`Type`</ph> object used to obtain the current <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object.</source>
          <target state="translated">由类型声明或继承自基类型中，一种类型的成员，因此<ph id="ph1">`Type`</ph>返回对象<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>属性可能不是相同<ph id="ph3">`Type`</ph>用来获取当前对象<ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`Type`</ph> object from which this <ph id="ph2">`MemberInfo`</ph> object was obtained did not declare this member, the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property will represent one of its base types.</source>
          <target state="translated">如果<ph id="ph1">`Type`</ph>中此对象<ph id="ph2">`MemberInfo`</ph>获取对象未声明此成员<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>属性将表示其基类型之一。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`MemberInfo`</ph>对象是全局的成员 (即，如果已获取从<ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph>方法，返回对模块全局方法)，返回<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>将<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The following example defines an interface, <ph id="ph1">`IValue`</ph>, with a single member, <ph id="ph2">`GetValue`</ph>.</source>
          <target state="translated">下面的示例定义一个接口， <ph id="ph1">`IValue`</ph>，与单个成员， <ph id="ph2">`GetValue`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>It also defines four classes: <ph id="ph1">`A`</ph>, a base class that implements the <ph id="ph2">`IValue`</ph> interface; <ph id="ph3">`B`</ph>, which inherits from <ph id="ph4">`A`</ph> and hides its implementation of <ph id="ph5">`GetValue`</ph> from the base class implementation; <ph id="ph6">`C`</ph>, which simply inherits from <ph id="ph7">`A`</ph>; and <ph id="ph8">`D`</ph>, which inherits from <ph id="ph9">`A`</ph> and overrides its <ph id="ph10">`GetValue`</ph> method.</source>
          <target state="translated">它还定义了四个类： <ph id="ph1">`A`</ph>，一个基类，实现该类<ph id="ph2">`IValue`</ph>接口;<ph id="ph3">`B`</ph>，它继承自<ph id="ph4">`A`</ph>和隐藏其实现<ph id="ph5">`GetValue`</ph>从基类实现;<ph id="ph6">`C`</ph>，它只是继承自<ph id="ph7">`A`</ph>; 和<ph id="ph8">`D`</ph>，它继承自<ph id="ph9">`A`</ph>并重写其<ph id="ph10">`GetValue`</ph>方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The example then retrieves a <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object for each member of the type (including members inherited from <ph id="ph2">&lt;xref:System.Object&gt;</ph>) and displays the value of its <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property.</source>
          <target state="translated">该示例然后检索<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>类型的每个成员的对象 (包括成员继承自<ph id="ph2">&lt;xref:System.Object&gt;</ph>) 显示的值和其<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Note that the declaring type of <ph id="ph1">`A.GetValue`</ph> is <ph id="ph2">`A`</ph>, that <ph id="ph3">`B`</ph> includes two <ph id="ph4">`GetValue`</ph> methods, one declared by <ph id="ph5">`A`</ph> and one by <ph id="ph6">`B`</ph>, and that the declaring type of <ph id="ph7">`D.GetValue`</ph> is <ph id="ph8">`D`</ph>.</source>
          <target state="translated">请注意，声明类型<ph id="ph1">`A.GetValue`</ph>是<ph id="ph2">`A`</ph>，则该<ph id="ph3">`B`</ph>包括两个<ph id="ph4">`GetValue`</ph>方法、 一个声明<ph id="ph5">`A`</ph>和通过<ph id="ph6">`B`</ph>，以及可以，声明类型的<ph id="ph7">`D.GetValue`</ph>是<ph id="ph8">`D`</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source><ph id="ph1">`DeclaringType`</ph> returns only the member names and the names of their declaring types.</source>
          <target state="translated"><ph id="ph1">`DeclaringType`</ph> 返回仅成员名称和其声明的类型的名称。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>To return the member names with their prototypes, call <ph id="ph1">`MemberInfo.ToString`</ph>.</source>
          <target state="translated">若要返回的成员具有其原型的名称，请调用<ph id="ph1">`MemberInfo.ToString`</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">与此实例进行比较的对象，或为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">返回一个值，该值指示此实例是否与指定的对象相等。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 等于此实例的类型和值，则为 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>When overridden in a derived class, returns custom attributes applied to this member.</source>
          <target state="translated">在派生类中重写时，返回应用于此成员的自定义属性。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要搜索此成员的继承链以查找属性，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">会忽略属性和事件的此参数。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>When overridden in a derived class, returns an array of all custom attributes applied to this member.</source>
          <target state="translated">在派生类中重写时，返回应用于此成员的所有自定义属性的数组。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</source>
          <target state="translated">一个包含应用于此成员的所有自定义属性的数组，或者在未定义任何特性时为包含零个元素的数组。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">此方法将忽略<ph id="ph1">`inherit`</ph>属性和事件的参数。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜索的属性和事件的属性的继承链，使用的适当重载<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format.</source>
          <target state="translated">在.NET Framework 2.0 版中，此方法返回的安全属性上的方法、 构造函数和类型如果它们存储在新的元数据格式。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">使用版本 2.0 编译的程序集使用此格式。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">动态程序集和与早期版本的.NET Framework 编译的程序集使用旧的 XML 格式。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>发出的声明性安全属性<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example defines a custom attribute and associates the attribute with <ph id="ph1">`MyClass.MyMethod`</ph>, retrieves the attribute at run time, and displays the result.</source>
          <target state="translated">下面的示例定义了一个自定义属性，并将关联的属性<ph id="ph1">`MyClass.MyMethod`</ph>，在运行时，检索该属性，并显示结果。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">此成员属于加载到仅反射的上下文的类型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>如何：将程序集加载到仅反射上下文中<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">无法加载自定义属性类型。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type of attribute to search for.</source>
          <target state="translated">要搜索的属性的类型。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Only attributes that are assignable to this type are returned.</source>
          <target state="translated">仅返回可分配给此类型的属性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要搜索此成员的继承链以查找属性，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">会忽略属性和事件的此参数。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">在派生类中重写时，返回应用于此成员并由 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 标识的自定义属性的数组。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> have been applied.</source>
          <target state="translated">应用于此成员的自定义属性的数组，如果未应用可分配给 <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 的属性，则为含零元素的数组。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">此方法将忽略<ph id="ph1">`inherit`</ph>属性和事件的参数。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜索的属性和事件的属性的继承链，使用的适当重载<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format.</source>
          <target state="translated">在.NET Framework 2.0 版中，此方法返回的安全属性上的方法、 构造函数和类型如果属性存储在新的元数据格式。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">使用版本 2.0 编译的程序集使用此格式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">动态程序集和与早期版本的.NET Framework 编译的程序集使用旧的 XML 格式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>发出的声明性安全属性<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The following example defines a class named <ph id="ph1">`BaseClass`</ph> that has two non-inherited members: a thread static field named <ph id="ph2">`total`</ph> and a non-CLS-compliant method named <ph id="ph3">`MethodA`</ph>.</source>
          <target state="translated">下面的示例定义一个名为<ph id="ph1">`BaseClass`</ph>具有两个非继承成员： 名为的线程静态字段<ph id="ph2">`total`</ph>和一个名为的非符合 cls 的方法<ph id="ph3">`MethodA`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A class named <ph id="ph1">`DerivedClass`</ph> inherits from <ph id="ph2">`BaseClass`</ph> and overrides its <ph id="ph3">`MethodA`</ph> method.</source>
          <target state="translated">一个名为类<ph id="ph1">`DerivedClass`</ph>继承自<ph id="ph2">`BaseClass`</ph>并重写其<ph id="ph3">`MethodA`</ph>方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Note that no attributes are applied to the members of <ph id="ph1">`DerivedClass`</ph>.</source>
          <target state="translated">请注意，将没有属性应用于的成员<ph id="ph1">`DerivedClass`</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The example iterates the members of <ph id="ph1">`DerivedClass`</ph> to determine whether the <ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph> or <ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute as been applied to them.</source>
          <target state="translated">该示例循环的成员<ph id="ph1">`DerivedClass`</ph>以确定是否<ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph>或<ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性已应用于它们。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Because <ph id="ph1">`inherit`</ph> is <ph id="ph2">`true`</ph>, the method searches the inheritance hierarchy of <ph id="ph3">`DerivedClass`</ph> for the specified attribute.</source>
          <target state="translated">因为<ph id="ph1">`inherit`</ph>是<ph id="ph2">`true`</ph>，该方法将搜索的继承层次结构<ph id="ph3">`DerivedClass`</ph>为指定的属性。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>As the output from the example shows, the <ph id="ph1">`total`</ph> field is decorated with the <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, and the <ph id="ph3">`MethodA`</ph> method is decorated with the <ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph> attribute.</source>
          <target state="translated">如示例所示，输出<ph id="ph1">`total`</ph>字段用修饰<ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性，与<ph id="ph3">`MethodA`</ph>方法用修饰<ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">无法加载自定义属性类型。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">此成员属于加载到仅反射的上下文的类型。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>如何：将程序集加载到仅反射上下文中<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象列表，这些对象表示已应用到目标成员的特性相关数据。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 对象的泛型列表，表示有关已应用于目标成员的特性的数据。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">此方法用于检查要在其中加载到只反射上下文的代码中定义的自定义属性本身的情况下的仅限反射上下文中的代码的自定义属性。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">等方法<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>不能在这种情况下，因为它们创建实例的属性。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">仅反射上下文中的代码不能执行。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>For more information and for example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">有关详细信息和有关示例代码，请参阅<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>This method gets custom attribute data for types, nested types, and type members, because the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">此方法获取自定义属性数据类型、 嵌套的类型和类型的成员，因为<ph id="ph1">&lt;xref:System.Type&gt;</ph>类和中的类<ph id="ph2">&lt;xref:System.Reflection&gt;</ph>代表类型成员都派生自的命名空间<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">返回此实例的哈希代码。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位有符号整数哈希代码。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The type of custom attribute to search for.</source>
          <target state="translated">要搜索的自定义属性的类型。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The search includes derived types.</source>
          <target state="translated">该搜索包括派生类型。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要搜索此成员的继承链以查找属性，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">会忽略属性和事件的此参数。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</source>
          <target state="translated">在派生类中重写时，指示是否将指定类型或其派生类型的一个或多个特性应用于此成员。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or any of its derived types is applied to this member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果将 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> 或其任何派生类型的一个或多个实例应用于此成员，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">此方法将忽略<ph id="ph1">`inherit`</ph>属性和事件的参数。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜索的属性和事件的属性的继承链，使用的适当重载<ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns <ph id="ph1">`true`</ph> if a type, method, or constructor has security attributes stored in the new metadata format.</source>
          <target state="translated">在.NET Framework 2.0 版中，此方法返回<ph id="ph1">`true`</ph>类型、 方法或构造函数具有存储在新的元数据格式的安全属性。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">使用版本 2.0 编译的程序集使用此格式。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">动态程序集和与早期版本的.NET Framework 编译的程序集使用旧的 XML 格式。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>发出的声明性安全属性<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example determines whether the specified attribute is applied to the specified member.</source>
          <target state="translated">下面的示例确定是否将指定的属性应用于指定的成员。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>When overridden in a derived class, gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of the member — method, constructor, event, and so on.</source>
          <target state="translated">在派生类中重写时，获取 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值，该值指示成员类型 - 方法、构造函数、事件等。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of member.</source>
          <target state="translated">指示成员类型的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>This property is overridden in derived classes, and the override returns the appropriate member type.</source>
          <target state="translated">在派生类中重写此属性，并替代返回适当的成员类型。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property can be used to determine the member type of any given member.</source>
          <target state="translated">因此，当检查一组<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>对象-例如，返回的数组<ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph>-<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>属性可以用于确定任何给定成员的成员类型。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">`MemberType`</ph>属性，获取类<ph id="ph2">&lt;xref:System.Type&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> array.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>数组。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`MethodInfo`</ph> array, get the <ph id="ph2">`MemberTypes`</ph>.</source>
          <target state="translated">从<ph id="ph1">`MethodInfo`</ph>数组时，获取<ph id="ph2">`MemberTypes`</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>The following example displays the member name and type of a specified class.</source>
          <target state="translated">下面的示例显示的成员名称和指定类的类型。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Gets a value that identifies a metadata element.</source>
          <target state="translated">获取一个值，该值标识元数据元素。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>A value which, in combination with <ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph>, uniquely identifies a metadata element.</source>
          <target state="translated">结合 <ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph>，该值能够唯一标识元数据元素。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">使用此属性获取的令牌可以传递到非托管的反射 API。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>非托管的反射 API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">使用非托管的反射 API 需要熟悉的公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"和"第三部分： CIL 指令集"。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> represents an array method, such as <ph id="ph2">&lt;see langword="Address" /&gt;</ph>, on an array type whose element type is a dynamic type that has not been completed.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 表示数组方法（如 <ph id="ph2">&lt;see langword="Address" /&gt;</ph>），针对元素类型是尚未完成的动态类型的数组类型。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>To get a metadata token in this case, pass the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object to the <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> method; or use the <ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get the token directly, instead of using the <ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get a <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> first.</source>
          <target state="translated">若要在这种情况下获取元数据标记，将 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 对象传递给 <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> 方法；或使用 <ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> 方法直接获取标记，而不是首先使用 <ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> 方法获取 <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>Gets the module in which the type that declares the member represented by the current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated">获取一个模块，在该模块中已经定义一个类型，该类型用于声明由当前 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 表示的成员。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in which the type that declares the member represented by the current <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph>，在其中已经定义一个类型，该类型用于声明由当前 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 表示的成员。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>This property is provided as a convenience.</source>
          <target state="translated">提供此属性是为方便起见。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>It is equivalent to using the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property to get the type in which the method is declared, and then calling the <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">它相当于使用<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>属性来获取该方法声明的类型并调用<ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph>属性生成<ph id="ph3">&lt;xref:System.Type&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The following code example declares a class that inherits <ph id="ph1">&lt;xref:System.Object&gt;</ph> and overrides <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">下面的代码示例声明继承的类<ph id="ph1">&lt;xref:System.Object&gt;</ph>和替代<ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The example obtains <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects for the class's <ph id="ph2">`ToString`</ph> method and for the inherited <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> method, and displays the names of the modules in which the two methods are declared.</source>
          <target state="translated">该示例获取<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>类的对象<ph id="ph2">`ToString`</ph>方法以及继承<ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>方法，并显示在其中声明两个方法的模块的名称。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>This method is not implemented.</source>
          <target state="translated">未实现此方法。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Name">
          <source>Gets the name of the current member.</source>
          <target state="translated">获取当前成员的名称。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of this member.</source>
          <target state="translated">包含此成员名称的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>Only the simple name of the member is returned, not the fully qualified name.</source>
          <target state="translated">仅该成员的简单名称返回时，不是完全限定的名称。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">若要获取<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph>属性，获取类<ph id="ph2">&lt;xref:System.Type&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> array.</source>
          <target state="translated">从<ph id="ph1">`Type`</ph>，获取<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>数组。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From a <ph id="ph1">`MemberInfo`</ph> element of the array, obtain the <ph id="ph2">`Name`</ph> property.</source>
          <target state="translated">从<ph id="ph1">`MemberInfo`</ph>元素的数组，获取<ph id="ph2">`Name`</ph>属性。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>This example lists the <ph id="ph1">`Name`</ph> and <ph id="ph2">`DeclaringType`</ph> property of each member of the specified class.</source>
          <target state="translated">此示例将列出<ph id="ph1">`Name`</ph>和<ph id="ph2">`DeclaringType`</ph>属性指定的类的每个成员。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要与右侧<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>进行比较的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要与左侧<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>进行比较的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">指示两个 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 对象是否相等。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 等于 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要与右侧<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>进行比较的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要与左侧<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>进行比较的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">指示两个 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 对象是否不相等。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 不等于 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>Gets the class object that was used to obtain this instance of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</source>
          <target state="translated">获取用于获取 <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> 的此实例的类对象。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object through which this <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> object was obtained.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Type" /&gt;</ph> 对象，通过它获取了此 <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">`ReflectedType`</ph> property retrieves the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that was used to obtain this instance of <ph id="ph3">`MemberInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`ReflectedType`</ph>属性检索<ph id="ph2">&lt;xref:System.Type&gt;</ph>用于获取此实例的对象<ph id="ph3">`MemberInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>This may differ from the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property if this <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object represents a member that is inherited from a base class.</source>
          <target state="translated">这可能不同于的值<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>属性，如果此<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>对象表示从基类继承的成员。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`MemberInfo`</ph>对象是全局的成员 (即，如果已获取从<ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph>方法，返回对模块全局方法)，返回<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>将<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph> changes when the member <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> is viewed from a <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from type <ph id="ph4">&lt;xref:System.Object&gt;</ph> and from a <ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from the <ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class itself, which inherits <ph id="ph7">&lt;xref:System.Object&gt;</ph> but does not override <ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">下面的代码示例演示如何<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph>更改时成员<ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>从查看<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>从类型获取<ph id="ph4">&lt;xref:System.Object&gt;</ph>和从<ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph>从获取<ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph>类本身，该类继承<ph id="ph7">&lt;xref:System.Object&gt;</ph>但不重写<ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要映射的名称的传入数组。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要映射的名称的计数。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">要在其中解释名称的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">调用方分配的数组，用于接收与名称对应的 ID。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">将一组名称映射为对应的一组调度标识符。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">获取一个表示 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 类的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">一个表示 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 类的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要返回的类型信息。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">类型信息的区域设置标识符。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收一个指针，指向请求的类型信息对象。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向一个位置，该位置接收对象提供的类型信息接口的数量。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">检索对象提供的类型信息接口的数量（0 或 1）。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">标识成员。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">要在其中解释参数的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述调用的上下文的标志。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向要存储结果的位置的指针。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">指向一个包含异常信息的结构的指针。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一个出错自变量的索引。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供对某一对象公开的属性和方法的访问。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::Invoke`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>