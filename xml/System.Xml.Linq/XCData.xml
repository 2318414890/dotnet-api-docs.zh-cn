<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XCData.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d893c93b876fdf3006f16ab750c569e9e4ec6bb7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d893c93b876fdf3006f16ab750c569e9e4ec6bb7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XCData">
          <source>Represents a text node that contains CDATA.</source>
          <target state="translated">表示包含 CDATA 的文本节点。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XCData">
          <source>An XML CDATA section allows you to store almost any arbitrary string as the contents of an XML element.</source>
          <target state="translated">XML CDATA 部分，可将几乎任何任意字符串存储为 XML 元素的内容。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XCData">
          <source>This class represents the XML concept of a CDATA text node.</source>
          <target state="translated">此类表示一个 CDATA 文本节点的 XML 概念。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XCData">
          <source>This class derives from <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>, which represents XML text.</source>
          <target state="translated">此类派生自<ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>，它表示 XML 文本。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XCData">
          <source>CDATA sections are special cases of XML text.</source>
          <target state="translated">CDATA 节的 XML 文本的特殊情况。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XCData">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XCData.#ctor(System.String)">
          <source>A string that contains the value of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> node.</source>
          <target state="translated">一个字符串，其中包含 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> 节点的值。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XCData.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XCData.#ctor(System.String)">
          <source>The following example creates an element that contains a CDATA node.</source>
          <target state="translated">下面的示例创建一个包含 CDATA 节点的元素。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XCData.#ctor(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> node to copy from.</source>
          <target state="translated">要从其复制的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> 节点。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
          <source>This constructor is primarily used internally to make a deep copy of an XML tree.</source>
          <target state="translated">此构造函数是主要用于内部创建 XML 树的深层副本。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>Gets the node type for this node.</source>
          <target state="translated">获取此节点的节点类型。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>The node type.</source>
          <target state="translated">节点类型。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>For <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> objects, this value is <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.CDATA" /&gt;</ph>.</source>
          <target state="translated">对于 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XCData" /&gt;</ph> 对象，此值为 <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.CDATA" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">因为派生自的所有类<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>包含<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph>属性，你可以编写代码进行操作的具体子类的集合<ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>Your code can then test for the node type of each node in the collection.</source>
          <target state="translated">集合中每个节点的节点类型随后可以测试你的代码。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>The following example creates an XML tree that contains various types of nodes.</source>
          <target state="translated">下面的示例创建一个包含各种类型的节点的 XML 树。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>It then iterates through the tree, and prints the node type of each node.</source>
          <target state="translated">然后，它将循环访问树中，并输出每个节点的节点类型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XCData.NodeType">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated">此方法将写入其中的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
          <source>Writes this CDATA object to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">将此 CDATA 对象写入 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
          <source>This method is primarily used internally by the methods that write an XML tree to an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">此方法主要用于在内部写入到 XML 树的方法通过<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>