<Type Name="XNodeEqualityComparer" FullName="System.Xml.Linq.XNodeEqualityComparer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a81565bb950b162656a54a61a1f06a0b53baaf51" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720261" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XNodeEqualityComparer : System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNodeEqualityComparer extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;class System.Xml.Linq.XNode&gt;, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNodeEqualityComparer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNodeEqualityComparer&#xA;Implements IEqualityComparer, IEqualityComparer(Of XNode)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNodeEqualityComparer sealed : System::Collections::Generic::IEqualityComparer&lt;System::Xml::Linq::XNode ^&gt;, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="f659c-101">比较节点以确定其是否相等。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f659c-101">Compares nodes to determine whether they are equal.</span>
      </span>
      <span data-ttu-id="f659c-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f659c-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f659c-103">此类的目的是实现<xref:System.Collections.IEqualityComparer?displayProperty=nameWithType>和<xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f659c-103">The purpose of this class is to implement <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f659c-104">要求标识的类 (如<xref:System.Collections.Generic.Dictionary%602>) 需要实现这些接口之一的类的实例。</span><span class="sxs-lookup"><span data-stu-id="f659c-104">Classes that require identity (such as <xref:System.Collections.Generic.Dictionary%602> ) require an instance of a class that implements one of these interfaces.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XNodeEqualityComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XNodeEqualityComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f659c-105">初始化 <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-105">Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f659c-106">下面的示例使用此类以确定两个节点是否相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-106">The following example uses this class to determine whether two nodes are equal.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 <span data-ttu-id="f659c-107">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="f659c-107">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xml.Linq.XNode x, System.Xml.Linq.XNode y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xml.Linq.XNode x, class System.Xml.Linq.XNode y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As XNode, y As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xml::Linq::XNode ^ x, System::Xml::Linq::XNode ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Xml.Linq.XNode" />
        <Parameter Name="y" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="f659c-108">要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-108">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="f659c-109">要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-109">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f659c-110">比较两个节点的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-110">Compares the values of two nodes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f659c-111">指示节点是否相等的 <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-111">A <see cref="T:System.Boolean" /> indicating if the nodes are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f659c-112">以下条件确定两个节点是否相等：</span><span class="sxs-lookup"><span data-stu-id="f659c-112">The following criteria determine whether two nodes are equal:</span></span>  
  
-   <span data-ttu-id="f659c-113">A`null`节点等同于另一个`null`节点，但不等于非`null`节点。</span><span class="sxs-lookup"><span data-stu-id="f659c-113">A `null` node is equal to another `null` node but unequal to a non-`null` node.</span></span>  
  
-   <span data-ttu-id="f659c-114">两个<xref:System.Xml.Linq.XNode>不同类型的对象永远不会相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-114">Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.</span></span>  
  
-   <span data-ttu-id="f659c-115">两个<xref:System.Xml.Linq.XText>节点是否包含相同的文本时才相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-115">Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.</span></span>  
  
-   <span data-ttu-id="f659c-116">两个<xref:System.Xml.Linq.XElement>节点相等，如果它们具有相同的标记名称，组相同的属性具有相同的值，并且 （忽略注释和处理指令），包含两个相等长度序列的成对等内容节点。</span><span class="sxs-lookup"><span data-stu-id="f659c-116">Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions), contain two equal-length sequences of pairwise equal content nodes.</span></span>  
  
-   <span data-ttu-id="f659c-117">两个<xref:System.Xml.Linq.XDocument>对象是否相等，如果其根节点是否相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-117">Two <xref:System.Xml.Linq.XDocument> objects are equal if their root nodes are equal.</span></span>  
  
-   <span data-ttu-id="f659c-118">两个<xref:System.Xml.Linq.XComment>节点是否包含相同的注释文本时才相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-118">Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.</span></span>  
  
-   <span data-ttu-id="f659c-119">两个<xref:System.Xml.Linq.XProcessingInstruction>节点相等，如果它们具有相同目标和数据。</span><span class="sxs-lookup"><span data-stu-id="f659c-119">Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.</span></span>  
  
-   <span data-ttu-id="f659c-120">两个<xref:System.Xml.Linq.XDocumentType>节点相等，如果具有相同的名称、 公用 ID、 系统 ID 和内部子集。</span><span class="sxs-lookup"><span data-stu-id="f659c-120">Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f659c-121">下面的示例使用此类用于比较两个节点。</span><span class="sxs-lookup"><span data-stu-id="f659c-121">The following example uses this class to compare two nodes.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 <span data-ttu-id="f659c-122">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="f659c-122">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (System.Xml.Linq.XNode obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.Xml.Linq.XNode obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As XNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Xml::Linq::XNode ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f659c-123">要散列的 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-123">The <see cref="T:System.Xml.Linq.XNode" /> to hash.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f659c-124">返回基于 <see cref="T:System.Xml.Linq.XNode" /> 的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-124">Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f659c-125">一个 <see cref="T:System.Int32" />，其中包含节点的基于值的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-125">A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f659c-126"><xref:System.Xml.Linq.XNode>实现<xref:System.Object.GetHashCode%2A>基于的节点的引用的标识。</span><span class="sxs-lookup"><span data-stu-id="f659c-126">The <xref:System.Xml.Linq.XNode> implementation of  <xref:System.Object.GetHashCode%2A> is based on the referential identity of the node.</span></span> <span data-ttu-id="f659c-127">此方法计算节点及其所有后代的值的深层哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f659c-127">This method computes a deep hash code based on the value of the node and all descendants.</span></span> <span data-ttu-id="f659c-128">哈希代码反映的所有属性和所有子代节点。</span><span class="sxs-lookup"><span data-stu-id="f659c-128">The hash code reflects all attributes and all descendent nodes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f659c-129">下面的示例使用此方法来获取 XML 树的深度哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f659c-129">The following example uses this method to get a deep hash code for an XML tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
xmlTree.Add(new XElement("NewChild", "new content"));  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
```  
  
 <span data-ttu-id="f659c-130">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="f659c-130">This example produces the following output:</span></span>  
  
```  
HashCode: 958CCD0  
HashCode: AD26516B  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="f659c-131">要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-131">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="f659c-132">要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-132">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f659c-133">比较两个节点的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-133">Compares the values of two nodes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f659c-134">如果节点相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-134">
              <see langword="true" /> if the nodes are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f659c-135">以下条件确定两个节点是否相等：</span><span class="sxs-lookup"><span data-stu-id="f659c-135">The following criteria determine whether two nodes are equal:</span></span>  
  
-   <span data-ttu-id="f659c-136">A`null`节点等同于另一个`null`节点，但不等于非`null`节点。</span><span class="sxs-lookup"><span data-stu-id="f659c-136">A `null` node is equal to another `null` node but unequal to a non-`null` node.</span></span>  
  
-   <span data-ttu-id="f659c-137">两个<xref:System.Xml.Linq.XNode>不同类型的对象永远不会相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-137">Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.</span></span>  
  
-   <span data-ttu-id="f659c-138">两个<xref:System.Xml.Linq.XText>节点是否包含相同的文本时才相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-138">Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.</span></span>  
  
-   <span data-ttu-id="f659c-139">两个<xref:System.Xml.Linq.XElement>节点相等，如果它们具有相同的标记名称，组相同的属性具有相同的值，并且 （忽略注释和处理指令），包含两个长度相同的序列的成对等内容节点。</span><span class="sxs-lookup"><span data-stu-id="f659c-139">Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions), contain two equa-length sequences of pairwise equal content nodes.</span></span>  
  
-   <span data-ttu-id="f659c-140">两个<xref:System.Xml.Linq.XDocument>对象是否相等，如果其根节点是否相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-140">Two <xref:System.Xml.Linq.XDocument> objects are equal if their root nodes are equal.</span></span>  
  
-   <span data-ttu-id="f659c-141">两个<xref:System.Xml.Linq.XComment>节点是否包含相同的注释文本时才相等。</span><span class="sxs-lookup"><span data-stu-id="f659c-141">Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.</span></span>  
  
-   <span data-ttu-id="f659c-142">两个<xref:System.Xml.Linq.XProcessingInstruction>节点相等，如果它们具有相同目标和数据。</span><span class="sxs-lookup"><span data-stu-id="f659c-142">Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.</span></span>  
  
-   <span data-ttu-id="f659c-143">两个<xref:System.Xml.Linq.XDocumentType>节点相等，如果具有相同的名称、 公用 ID、 系统 ID 和内部子集。</span><span class="sxs-lookup"><span data-stu-id="f659c-143">Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f659c-144">要散列的节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-144">The node to hash.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f659c-145">返回基于节点值的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-145">Returns a hash code based on the value of a node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f659c-146">一个 <see cref="T:System.Int32" />，其中包含节点的基于值的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f659c-146">A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f659c-147"><xref:System.Xml.Linq.XNode>实现<xref:System.Object.GetHashCode%2A>基于的节点的引用的标识。</span><span class="sxs-lookup"><span data-stu-id="f659c-147">The <xref:System.Xml.Linq.XNode> implementation of <xref:System.Object.GetHashCode%2A> is based on the referential identity of the node.</span></span> <span data-ttu-id="f659c-148">此方法计算节点、 其属性及其子代的值的深层哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f659c-148">This method computes a deep hash code based on the value of the node, its attributes, and its descendants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>