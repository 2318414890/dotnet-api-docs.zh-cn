<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XNamespace.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58d63d1be3532fb6cb4b14a4a6713ab8119db07ad.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d63d1be3532fb6cb4b14a4a6713ab8119db07ad</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XNamespace">
          <source>Represents an XML namespace.</source>
          <target state="translated">表示 XML 命名空间。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XNamespace">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This class represents the XML construct of namespaces.</source>
          <target state="translated">此类表示命名空间的 XML 构造。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Every <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> contains an <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">每个<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>包含<ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Even if an element is not in a namespace, the element's <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> still contains a namespace, <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">即使某个元素不在命名空间中，该元素的 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> 仍包含命名空间 <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType&gt;</ph> property is guaranteed to not be <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType&gt;</ph> 属性一定不会是 <ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Creating an XNamespace Object</source>
          <target state="translated">创建 XNamespace 对象</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The most common way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is to simply assign a string to it.</source>
          <target state="translated">若要创建的最常见方法<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>对象是只需将字符串分配给它。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>You can then combine the namespace with a local name by using the override of the addition operator.</source>
          <target state="translated">通过使用加法运算符的替代，然后可以使用本地名称组合命名空间。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The following example shows this idiom:</source>
          <target state="translated">下面的示例演示此习惯用法：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>However, in Visual Basic, you would typically declare a global default namespace, as follows:</source>
          <target state="translated">但是，在 Visual Basic 中，你将通常会声明全局默认命名空间，如下所示：</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Assigning a string to an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> uses the implicit conversion from <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">分配的字符串<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>使用隐式转换从<ph id="ph2">&lt;xref:System.String&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>See <bpt id="p1">[</bpt>How to: Create a Document with Namespaces (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept> for more information and examples.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>如何： 使用命名空间 (C#) (LINQ to XML) 创建文档<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>有关详细信息和示例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>See <bpt id="p1">[</bpt>Namespaces in Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept> for more information on using namespaces in <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>在 Visual Basic (LINQ to XML) 中的命名空间<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>有关使用中的命名空间的详细信息<ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Controlling Namespace Prefixes</source>
          <target state="translated">控制 Namespace 前缀</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</source>
          <target state="translated">如果你创建声明一个命名空间的属性，属性中指定的前缀将保留在序列化的 XML。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.Xmlns%2A&gt;</ph>, and the name of the attribute is the namespace prefix.</source>
          <target state="translated">若要创建一个声明具有前缀的命名空间的属性，请创建一个属性，该属性的名称的命名空间为 <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.Xmlns%2A&gt;</ph>，该属性的名称为命名空间前缀。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The value of the attribute is the URI of the namespace.</source>
          <target state="translated">该属性的值即是命名空间的 URI。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The following example shows this idiom:</source>
          <target state="translated">下面的示例演示此习惯用法：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>，而不是创建命名空间节点来控制命名空间前缀，则通常应该使用全局命名空间声明：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Control Namespace Prefixes (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>如何： 控制 Namespace 前缀 (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Creating a Default Namespace</source>
          <target state="translated">创建默认 Namespace</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</source>
          <target state="translated">构造时属性，它将是命名空间中，如果属性名称包含"xmlns"的特殊值，则当序列化 XML 树时，将命名空间声明为默认命名空间。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The special attribute with the name of "xmlns" itself is not in any namespace.</source>
          <target state="translated">具有"xmlns"本身的名称的特殊属性不是任何命名空间中。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The value of the attribute is the namespace URI.</source>
          <target state="translated">属性的值是命名空间 URI。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</source>
          <target state="translated">下面的示例创建包含命名空间的默认命名空间的方式声明的特性的 XML 树：</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>，而不是创建命名空间节点创建默认命名空间，你通常将使用全局默认命名空间声明：</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>XNamespace Atomization</source>
          <target state="translated">XNamespace 原子化</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects have exactly the same URI, they will share the same instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> 对象一定不会是原子化的；即，如果两个 <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> 对象具有完全相同的 URI，则它们将共享同一实例。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The equality and comparison operators are provided explicitly for this purpose.</source>
          <target state="translated">为此目的，显式提供了相等和比较运算符。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Using Expanded Names</source>
          <target state="translated">使用扩展的名称</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Another way to specify a namespace and a local name is to use an expanded name in the form <ph id="ph1">`{namespace}name`</ph>:</source>
          <target state="translated">另一种方法指定一个命名空间和本地名称是在窗体中使用扩展名<ph id="ph1">`{namespace}name`</ph>:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This approach has performance implications.</source>
          <target state="translated">这种方法的性能较低。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Each time that you pass a string that contains an expanded name to <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, it must parse the name, find the atomized namespace, and find the atomized name.</source>
          <target state="translated">每次将包含扩展名的字符串传递给 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 时，都必须分析名称，查找原子化命名空间，再查找原子化名称。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This process takes CPU time.</source>
          <target state="translated">这个过程会占用 CPU 时间。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>If performance is important, you may want to use a different approach.</source>
          <target state="translated">如果性能很重要，你可能想要使用不同的方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</source>
          <target state="translated">对于 Visual Basic 中，建议的方法是使用 XML 文本不涉及使用扩展的名称。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">要与当前 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 进行比较的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> is equal to the current <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">确定指定的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 是否等同于当前的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates whether the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">指示指定 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 是否等于当前 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>For two <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects to be equal, they must have the same URI.</source>
          <target state="translated">对于两个<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>的对象相等，它们必须具有相同的 URI。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>The following example compares two namespaces that refer to the same URI.</source>
          <target state="translated">下面的示例比较两个引用同一 URI 的命名空间。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains a namespace URI.</source>
          <target state="translated">包含命名空间 URI 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for the specified Uniform Resource Identifier (URI).</source>
          <target state="translated">获取指定统一资源标识符 (URI) 的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> created from the specified URI.</source>
          <target state="translated">从指定的 URI 创建的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>保证对象以保证不可分割 （即，它位于该特定 URI 的系统中只有一个）。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>The following example gets a <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> from a specified URI.</source>
          <target state="translated">下面的示例获取<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>从指定的 URI。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">获取此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的哈希代码。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the hash code for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>，其中包含 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的哈希代码。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>This method serves as a hash function for <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">此方法用作的哈希函数<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>You can use <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.GetHashCode%2A&gt;</ph> in hashing algorithms and data structures like a hash table.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.GetHashCode%2A&gt;</ph>在哈希算法和数据哈希表之类的结构。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains a local name.</source>
          <target state="translated">包含本地名称的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object created from this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> and the specified local name.</source>
          <target state="translated">返回从此 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 和指定的本地名称创建的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> created from this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> and the specified local name.</source>
          <target state="translated">从此 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 和指定的本地名称创建的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>保证对象以保证不可分割 （即，它位于特定扩展名的系统中只有一个）。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>The following example uses this property to retrieve an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">下面的示例使用此属性来检索<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>Gets the Uniform Resource Identifier (URI) of this namespace.</source>
          <target state="translated">获取此命名空间的统一资源标识符 (URI)。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the URI of the namespace.</source>
          <target state="translated">一个包含命名空间 URI 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>The following example shows how to use this property:</source>
          <target state="translated">下面的示例演示如何使用此属性：</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.None">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object that corresponds to no namespace.</source>
          <target state="translated">获取不与命名空间对应的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that corresponds to no namespace.</source>
          <target state="translated">不与命名空间对应的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</source>
          <target state="translated">如果在任何命名空间元素或属性，其命名空间将设置为此属性返回的命名空间。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>The following example shows uses this property to determine which elements are in no namespace.</source>
          <target state="translated">下面的示例演示的使用此属性来确定哪些元素在任何命名空间。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that contains the namespace.</source>
          <target state="translated">一个包含命名空间的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the local name.</source>
          <target state="translated">一个包含本地名称的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>Combines an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object with a local name to create an <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">将 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> 对象与本地名称进行组合来创建 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> constructed from the namespace and local name.</source>
          <target state="translated">从命名空间和本地名称构造的新 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</source>
          <target state="translated">通过此运算符，命名空间与构造的元素或属性中的本地名称的组合的常规用法。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</source>
          <target state="translated">此习惯用法提供了一些命名空间前缀的好处在于，你可以引用使用较短的变量的命名空间。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This eliminates syntactic noise in the code that creates XML trees.</source>
          <target state="translated">这将消除中创建 XML 树的代码的语法干扰。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>The following example shows the use of the <ph id="ph1">`+`</ph> operator to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> from an <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a local name.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">`+`</ph>运算符来创建<ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>从<ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和本地名称。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>In Visual Basic, this is the preferred idiom:</source>
          <target state="translated">在 Visual Basic 中，这是首选的惯用语法：</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比较的第一个 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比较的第二个 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> are equal.</source>
          <target state="translated">返回一个值，该值指示 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的两个实例是否相等。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates whether <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are equal.</source>
          <target state="translated">指示 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="right" /&gt;</ph> 是否相等的 <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>).</source>
          <target state="translated">运算符重载<ph id="ph1">`==`</ph>和<ph id="ph2">`!=`</ph>用于启用之间的比较<ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和字符串 (例如， <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>)。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">在 C# 中预定义的引用相等运算符需要可以转换为类型的引用仅通过转换，另一个操作数，而不考虑隐式转换从字符串到<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The following example shows the comparison of an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string.</source>
          <target state="translated">下面的示例显示的比较<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和字符串。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the namespace URI.</source>
          <target state="translated">一个包含命名空间 URI 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>Converts a string containing a Uniform Resource Identifier (URI) to an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">将包含统一资源标识符 (URI) 的字符串转换为 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> constructed from the URI string.</source>
          <target state="translated">从 URI 字符串构造的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>The following example shows the initialization of an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> variable by assigning a string to it.</source>
          <target state="translated">下面的示例演示的初始化<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>通过将字符串分配给该变量。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比较的第一个 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比较的第二个 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> are not equal.</source>
          <target state="translated">返回一个值，该值指示 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的两个实例是否相等。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates whether <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are not equal.</source>
          <target state="translated">指示 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="right" /&gt;</ph> 是否不等的 <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>).</source>
          <target state="translated">运算符重载<ph id="ph1">`==`</ph>和<ph id="ph2">`!=`</ph>用于启用之间的比较<ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和字符串 (例如， <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>)。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">在 C# 中预定义的引用相等运算符需要可以转换为类型的引用仅通过转换，另一个操作数，而不考虑隐式转换从字符串到<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The following example shows a comparison of a <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> to a string.</source>
          <target state="translated">下面的示例演示的比较<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>为字符串。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>Returns the URI of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">返回此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的 URI。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>The URI of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的 URI。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>The following example uses this method to print a namespace on the console.</source>
          <target state="translated">下面的示例使用此方法以在控制台上输出命名空间。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object that corresponds to the XML URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">获取与 XML URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>) 对应的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that corresponds to the XML URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>相对应的 XML URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>Certain standardized attributes, such as <ph id="ph1">`space`</ph>, are in the <ph id="ph2">`http://www.w3.org/XML/1998/namespace`</ph> namespace.</source>
          <target state="translated">某些标准化特性，如<ph id="ph1">`space`</ph>，位于<ph id="ph2">`http://www.w3.org/XML/1998/namespace`</ph>命名空间。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</source>
          <target state="translated">W3C 标准指定此命名空间不需要作为 XML 树中的属性声明。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>It is a reserved namespace that is always automatically available in the XML parser.</source>
          <target state="translated">它是始终自动可用 XML 分析器中，是一个保留命名空间。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>The following example shows how to create an <ph id="ph1">`xml:space="preserve"`</ph> attribute in an XML tree:</source>
          <target state="translated">下面的示例演示如何创建<ph id="ph1">`xml:space="preserve"`</ph>XML 树中的属性：</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object that corresponds to the xmlns URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">获取与 xmlns URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p1">&lt;/c&gt;</ept>) 对应的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that corresponds to the <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> URI (<bpt id="p2">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p2">&lt;/c&gt;</ept>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>相对应的<bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> URI (<bpt id="p2">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p2">&lt;/c&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>When you declare namespaces, the namespace attributes themselves are in the <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> namespace.</source>
          <target state="translated">在声明命名空间时，这些命名空间特性本身均<bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept>命名空间。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</source>
          <target state="translated">W3C 标准指定此命名空间不需要作为 XML 树中的属性声明。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>It is a reserved namespace that is always automatically available in the XML parser.</source>
          <target state="translated">它是始终自动可用 XML 分析器中，是一个保留命名空间。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The following example shows how to add a namespace to an XML tree.</source>
          <target state="translated">下面的示例演示如何将一个命名空间添加到 XML 树。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The namespace for the attribute that declares the namespace is the namespace returned by this property.</source>
          <target state="translated">声明的命名空间的属性的命名空间是此属性返回的命名空间。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>In Visual Basic, the preferred idiom is:</source>
          <target state="translated">在 Visual Basic 中的首选的惯用语法是：</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>This example produces the following output:</source>
          <target state="translated">该示例产生下面的输出：</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>