<Type Name="XContainer" FullName="System.Xml.Linq.XContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="975ff3e595a7e42b32687e50bd64d6eefc73e39b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720931" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XContainer : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XContainer extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XContainer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XContainer&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XContainer abstract : System::Xml::Linq::XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="39776-101">表示可包含其他节点的节点。</span>
      <span class="sxs-lookup">
        <span data-stu-id="39776-101">Represents a node that can contain other nodes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-102">此类提供功能，如查找一个或下一个同级节点，或枚举节点的直接子级。</span><span class="sxs-lookup"><span data-stu-id="39776-102">This class provides functionality such as finding the next or previous sibling node, or enumerating the direct children of a node.</span></span>  
  
 <span data-ttu-id="39776-103">两个类派生自<xref:System.Xml.Linq.XContainer>是<xref:System.Xml.Linq.XDocument>和<xref:System.Xml.Linq.XElement>。</span><span class="sxs-lookup"><span data-stu-id="39776-103">The two classes that derive from <xref:System.Xml.Linq.XContainer> are <xref:System.Xml.Linq.XDocument> and <xref:System.Xml.Linq.XElement>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39776-104">将指定的内容作为子级添加到此 <see cref="T:System.Xml.Linq.XContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-104">Adds the specified content as children to this <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-105">此方法的现有内容的后面添加新的内容<xref:System.Xml.Linq.XContainer>。</span><span class="sxs-lookup"><span data-stu-id="39776-105">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="39776-106">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-106">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-107">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-107">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-108">下面的示例创建两个 XML 树，然后使用此方法将查询的结果添加到其中之一。</span><span class="sxs-lookup"><span data-stu-id="39776-108">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _  
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = _   
        <Root>  
            <NewElement>Content</NewElement>  
        </Root>  
xmlTree.Add( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="39776-109">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-109">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <NewElement>Content</NewElement>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="39776-110">要添加的包含简单内容的内容对象或内容对象集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-110">A content object containing simple content or a collection of content objects to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-111">将指定的内容添加为此 <see cref="T:System.Xml.Linq.XContainer" /> 的子级。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-111">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-112">此方法的现有内容的后面添加新的内容<xref:System.Xml.Linq.XContainer>。</span><span class="sxs-lookup"><span data-stu-id="39776-112">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="39776-113">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-113">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-114">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-114">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-115">下面的示例创建两个 XML 树，然后使用此方法来添加<xref:System.Xml.Linq.XElement>到其中的对象。</span><span class="sxs-lookup"><span data-stu-id="39776-115">The following example creates two XML trees, and then uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="39776-116">它还添加的结果[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]到 XML 树的查询。</span><span class="sxs-lookup"><span data-stu-id="39776-116">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="39776-117">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-117">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="39776-118">内容对象的参数列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-118">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-119">将指定的内容添加为此 <see cref="T:System.Xml.Linq.XContainer" /> 的子级。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-119">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-120">此方法的现有内容的后面添加新的内容<xref:System.Xml.Linq.XContainer>。</span><span class="sxs-lookup"><span data-stu-id="39776-120">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="39776-121">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-121">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-122">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-122">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-123">下面的示例将创建两个 XML 树，使用此方法将添加<xref:System.Xml.Linq.XElement>到其中的对象。</span><span class="sxs-lookup"><span data-stu-id="39776-123">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="39776-124">它还添加的结果[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]到 XML 树的查询。</span><span class="sxs-lookup"><span data-stu-id="39776-124">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="39776-125">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-125">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddFirst">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39776-126">将指定内容作为此文档或元素的第一个子级添加。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-126">Adds the specified content as the first children of this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-127">此方法将添加新内容的现有内容的前面<xref:System.Xml.Linq.XContainer>。</span><span class="sxs-lookup"><span data-stu-id="39776-127">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="39776-128">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-128">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-129">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-129">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-130">下面的示例创建两个 XML 树，然后使用此方法将查询的结果添加到其中之一。</span><span class="sxs-lookup"><span data-stu-id="39776-130">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = <Root>  
                              <NewElement>Content</NewElement>  
                          </Root>  
xmlTree.AddFirst( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="39776-131">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-131">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewElement>Content</NewElement>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="39776-132">要添加的包含简单内容的内容对象或内容对象集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-132">A content object containing simple content or a collection of content objects to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-133">将指定内容作为此文档或元素的第一个子级添加。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-133">Adds the specified content as the first children of this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-134">此方法将添加新内容的现有内容的前面<xref:System.Xml.Linq.XContainer>。</span><span class="sxs-lookup"><span data-stu-id="39776-134">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="39776-135">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-135">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-136">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-136">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-137">下面的示例将创建两个 XML 树，使用此方法将添加<xref:System.Xml.Linq.XElement>对象作为第一个元素到其中一个。</span><span class="sxs-lookup"><span data-stu-id="39776-137">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="39776-138">它还添加的结果[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]到 XML 树的查询。</span><span class="sxs-lookup"><span data-stu-id="39776-138">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="39776-139">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-139">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="39776-140">内容对象的参数列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-140">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-141">将指定内容作为此文档或元素的第一个子级添加。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-141">Adds the specified content as the first children of this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-142">此方法将添加新内容的现有内容的前面<xref:System.Xml.Linq.XContainer>。</span><span class="sxs-lookup"><span data-stu-id="39776-142">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="39776-143">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-143">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-144">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-144">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-145">下面的示例创建两个 XML 树，并使用此方法来添加<xref:System.Xml.Linq.XElement>对象作为第一个元素到其中一个。</span><span class="sxs-lookup"><span data-stu-id="39776-145">The following example creates two XML trees, and uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="39776-146">它还添加的结果[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]到 XML 树的查询。</span><span class="sxs-lookup"><span data-stu-id="39776-146">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="39776-147">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-147">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="39776-148">父级为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-148">The parent is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="CreateWriter">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriter CreateWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriter CreateWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.CreateWriter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWriter () As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriter ^ CreateWriter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="39776-149">创建可用于将节点添加至 <see cref="T:System.Xml.Linq.XContainer" /> 的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-149">Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-150">已准备好写入内容的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-150">An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-151">序列化时，从 XML 树中的命名空间属性推断出命名空间前缀。</span><span class="sxs-lookup"><span data-stu-id="39776-151">While serializing, namespace prefixes are inferred from the namespace attributes in the XML tree.</span></span>  
  
 <span data-ttu-id="39776-152">有关详细信息，请参阅[处理 XML 命名空间](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="39776-152">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-153">此方法可用于执行 XSLT 转换。</span><span class="sxs-lookup"><span data-stu-id="39776-153">You can use this method to perform an XSLT transformation.</span></span> <span data-ttu-id="39776-154">你可以创建 XML 树，创建<xref:System.Xml.XmlReader>从 XML 树中，创建一个新文档，并创建<xref:System.Xml.XmlWriter>，以写入新文档。</span><span class="sxs-lookup"><span data-stu-id="39776-154">You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create a <xref:System.Xml.XmlWriter> that will write into the new document.</span></span> <span data-ttu-id="39776-155">然后，可以调用 XSLT 转换，传入<xref:System.Xml.XmlReader>和<xref:System.Xml.XmlWriter>的转换。</span><span class="sxs-lookup"><span data-stu-id="39776-155">Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transform.</span></span> <span data-ttu-id="39776-156">在转换成功完成后，使用转换的结果，填充新的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="39776-156">After the transformation successfully completes, the new XML tree is populated with the results of the transformation.</span></span>  
  
```csharp  
string xslMarkup = @"<?xml version='1.0'?>  
<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
    <xsl:template match='/Parent'>  
        <Root>  
            <C1><xsl:value-of select='Child1'/></C1>  
            <C2><xsl:value-of select='Child2'/></C2>  
        </Root>  
    </xsl:template>  
</xsl:stylesheet>";  
  
XDocument xmlTree = new XDocument(  
    new XElement("Parent",  
        new XElement("Child1", "Child1 data"),  
        new XElement("Child2", "Child2 data")  
    )  
);  
  
XDocument newTree = new XDocument();  
using (XmlWriter writer = newTree.CreateWriter()) {  
    // Load the style sheet.  
    XslCompiledTransform xslt = new XslCompiledTransform();  
    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  
  
    // Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer);  
}  
  
Console.WriteLine(newTree);  
```  
  
```vb  
Dim xslMarkup As XDocument = _   
    <?xml version='1.0'?>  
    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
        <xsl:template match='/Parent'>  
            <Root>  
                <C1><xsl:value-of select='Child1'/></C1>  
                <C2><xsl:value-of select='Child2'/></C2>  
            </Root>  
        </xsl:template>  
    </xsl:stylesheet>  
  
Dim xmlTree As XElement = _   
    <Parent>  
        <Child1>Child1 data</Child1>  
        <Child2>Child2 data</Child2>  
    </Parent>  
  
Dim newTree As XDocument = New XDocument()  
  
Using writer As XmlWriter = newTree.CreateWriter()  
    ' Load the style sheet.  
    Dim xslt As XslCompiledTransform = _  
        New XslCompiledTransform()  
    xslt.Load(xslMarkup.CreateReader())  
  
    ' Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer)  
End Using  
  
Console.WriteLine(newTree)  
```  
  
 <span data-ttu-id="39776-157">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-157">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <C1>Child1 data</C1>  
  <C2>Child2 data</C2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.DescendantNodes" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="39776-158">按文档顺序返回此文档或元素的子代节点集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-158">Returns a collection of the descendant nodes for this document or element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-159">
            <see cref="T:System.Xml.Linq.XNode" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中按文档顺序包含 <see cref="T:System.Xml.Linq.XContainer" /> 的子代节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-159">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-160">请注意属性不视为要中的节点[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]，因此它们不会通过此方法返回的集合的一部分。</span><span class="sxs-lookup"><span data-stu-id="39776-160">Note that attributes are not considered to be nodes in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], so they will not be part of the collection that is returned by this method.</span></span>  
  
 <span data-ttu-id="39776-161">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-161">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-162">下面的示例创建一个 XML 树，，然后遍历<xref:System.Xml.Linq.XContainer.DescendantNodes%2A>轴。</span><span class="sxs-lookup"><span data-stu-id="39776-162">The following example creates an XML tree, and then iterates through the <xref:System.Xml.Linq.XContainer.DescendantNodes%2A> axis.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodes.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodes()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas = From node In xmlTree.DescendantNodes _  
           Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="39776-163">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-163">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Descendants">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39776-164">按文档顺序返回此文档或元素的子代元素集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-164">Returns a collection of the descendant elements for this document or element, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-165">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-165">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="39776-166">按文档顺序返回此文档或元素的子代元素集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-166">Returns a collection of the descendant elements for this document or element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-167">
            <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含 <see cref="T:System.Xml.Linq.XContainer" /> 的子代元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-167">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-168">请注意，此方法将不返回本身在产生<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="39776-168">Note that this method will not return itself in the resulting <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="39776-169">请参阅<xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A>如果你需要包括当前<xref:System.Xml.Linq.XElement>在结果中。</span><span class="sxs-lookup"><span data-stu-id="39776-169">See <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A> if you need to include the current <xref:System.Xml.Linq.XElement> in the results.</span></span>  
  
 <span data-ttu-id="39776-170">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-170">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-171">下面的示例创建一个 XML 树，，，然后使用此轴方法检索子代。</span><span class="sxs-lookup"><span data-stu-id="39776-171">The following example creates an XML tree, and then uses this axis method to retrieve the descendants.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants()  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
Dim de = From el In xmlTree.Descendants _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="39776-172">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-172">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="39776-173">要匹配的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-173">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-174">按文档顺序返回此文档或元素的已筛选的子代元素集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-174">Returns a filtered collection of the descendant elements for this document or element, in document order.</span>
          </span>
          <span data-ttu-id="39776-175">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-175">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-176">
            <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含与指定 <see cref="T:System.Xml.Linq.XName" /> 相匹配的 <see cref="T:System.Xml.Linq.XContainer" /> 的子代元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-176">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-177">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-177">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-178">下面的示例将打印元素的所有后代。</span><span class="sxs-lookup"><span data-stu-id="39776-178">The following example prints all descendants of an element.</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants("Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by the descendants axis.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
         <Child>Some text  
             <GrandChild>element content</GrandChild>  
         </Child>  
     </Root>  
  
Dim de = From el In xmlTree...<Child> _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="39776-179">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-179">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 <span data-ttu-id="39776-180">下面是相同的示例中，但在这种情况下 XML 命名空间中。</span><span class="sxs-lookup"><span data-stu-id="39776-180">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="39776-181">有关详细信息，请参阅[处理 XML 命名空间](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="39776-181">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "AttributeContent"),  
    new XElement(aw + "Child",  
        new XText("Some text"),  
        new XElement(aw + "GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants(aw + "Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Imports <xmlns:aw = "http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        ' Attributes are not nodes, so will not be returned by the descendants axis.  
        Dim xmlTree As XElement = _   
            <aw:Root aw:Att1="AttributeContent">  
                 <aw:Child>Some text  
                     <aw:GrandChild>element content</aw:GrandChild>  
                 </aw:Child>  
             </aw:Root>  
  
        Dim de = From el In xmlTree...<aw:Child> _  
                 Select el  
  
        For Each el In de  
            Console.WriteLine(el.Name)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="39776-182">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-182">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Element">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Element (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XElement Element(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Element (name As XName) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XElement ^ Element(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="39776-183">要匹配的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-183">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-184">获取具有指定的 <see cref="T:System.Xml.Linq.XName" /> 的第一个（按文档顺序）子元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-184">Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-185">与指定的 <see cref="T:System.Xml.Linq.XName" /> 相匹配的 <see cref="T:System.Xml.Linq.XElement" />，或者为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-185">A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-186">返回`null`如果没有具有指定名称的元素。</span><span class="sxs-lookup"><span data-stu-id="39776-186">Returns `null` if there is no element with the specified name.</span></span>  
  
 <span data-ttu-id="39776-187">一些轴方法返回元素或属性的集合。</span><span class="sxs-lookup"><span data-stu-id="39776-187">Some axis methods return collections of elements or attributes.</span></span> <span data-ttu-id="39776-188">此方法返回仅包含单个元素。</span><span class="sxs-lookup"><span data-stu-id="39776-188">This method returns only a single element.</span></span>  
  
 <span data-ttu-id="39776-189">此方法返回`null`如果找不到具有指定名称的元素。</span><span class="sxs-lookup"><span data-stu-id="39776-189">This method returns `null` if the element with the specified name is not found.</span></span> <span data-ttu-id="39776-190">所有方法，可用于构造元素 (的构造函数<xref:System.Xml.Linq.XElement>， <xref:System.Xml.Linq.XContainer.Add%2A>，依次类推) 接受`null`作为有效参数。</span><span class="sxs-lookup"><span data-stu-id="39776-190">All of the methods that allow you to construct elements (the constructor of <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XContainer.Add%2A>, and so on) accept `null` as a valid argument.</span></span> <span data-ttu-id="39776-191">此选项，可以使用一种方便的方法： 你可以作为一部分函数构造，调用此方法，该元素添加到正在构造当且仅当源树中存在该元素的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="39776-191">This allows you to use a convenient idiom: you can call this method as part of functional construction, and the element is added to the XML tree being constructed if and only if the element exists in the source tree.</span></span> <span data-ttu-id="39776-192">下面的示例演示此习惯用法。</span><span class="sxs-lookup"><span data-stu-id="39776-192">The following example shows this idiom.</span></span>  
  
 <span data-ttu-id="39776-193">与此相反<xref:System.Xml.Linq.XContainer.Elements%2A>，此方法不是的轴方法。</span><span class="sxs-lookup"><span data-stu-id="39776-193">In contrast to <xref:System.Xml.Linq.XContainer.Elements%2A>, this method is not an axis method.</span></span> <span data-ttu-id="39776-194">它不使用延迟的执行;它只是返回的元素时调用。</span><span class="sxs-lookup"><span data-stu-id="39776-194">It does not use deferred execution; it simply returns an element when called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-195">下面的示例演示此方法的两种用法。</span><span class="sxs-lookup"><span data-stu-id="39776-195">The following example shows two uses of this method.</span></span> <span data-ttu-id="39776-196">在一种方案，此方法找到中的元素`srcTree`。</span><span class="sxs-lookup"><span data-stu-id="39776-196">In one case, the method finds the element in `srcTree`.</span></span> <span data-ttu-id="39776-197">在第二个用例，该方法不查找元素，在源树中，不将元素添加到`xmlTree`，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="39776-197">In the second case, the method does not find the element in the source tree, no element is added to `xmlTree`, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="39776-198">请注意 Visual Basic 示例中使用的子级 XML 属性。</span><span class="sxs-lookup"><span data-stu-id="39776-198">Note that the Visual Basic example uses the child XML property.</span></span> <span data-ttu-id="39776-199">它也是允许使用<xref:System.Xml.Linq.XContainer.Element%2A>直接在 Visual Basic 中的方法。</span><span class="sxs-lookup"><span data-stu-id="39776-199">It is also allowable to use the <xref:System.Xml.Linq.XContainer.Element%2A> method directly in Visual Basic.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    srcTree.Element("Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element("Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <%= srcTree.<Element3> %>  
            <%= srcTree.<Element9> %>  
        </Root>  
  
' Even though Element9 does not exist in srcTree, adding it to the tree  
' will not throw an exception.  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="39776-200">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-200">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <Element3>3</Element3>  
</Root>  
```  
  
 <span data-ttu-id="39776-201">下面是相同的示例中，但在这种情况下 XML 命名空间中。</span><span class="sxs-lookup"><span data-stu-id="39776-201">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="39776-202">有关详细信息，请参阅[处理 XML 命名空间](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="39776-202">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement srcTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Element1", 1),  
    new XElement(aw + "Element2", 2),  
    new XElement(aw + "Element3", 3),  
    new XElement(aw + "Element4", 4),  
    new XElement(aw + "Element5", 5)  
);  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    srcTree.Element(aw + "Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element(aw + "Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim srcTree As XElement = _   
            <aw:Root>  
                <aw:Element1>1</aw:Element1>  
                <aw:Element2>2</aw:Element2>  
                <aw:Element3>3</aw:Element3>  
                <aw:Element4>4</aw:Element4>  
                <aw:Element5>5</aw:Element5>  
            </aw:Root>  
  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
                <%= srcTree.<aw:Element3> %>  
                <%= srcTree.<aw:Element9> %>  
            </aw:Root>  
  
        ' Even though Element9 does not exist in srcTree, adding it to the tree  
        ' will not throw an exception.  
  
        Console.WriteLine(xmlTree)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="39776-203">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-203">This example produces the following output:</span></span>  
  
```xml  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child1>1</aw:Child1>  
  <aw:Child2>2</aw:Child2>  
  <aw:Child3>3</aw:Child3>  
  <aw:Child4>4</aw:Child4>  
  <aw:Child5>5</aw:Child5>  
  <aw:Element3>3</aw:Element3>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Elements">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39776-204">按文档顺序返回此元素或文档的子元素集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-204">Returns a collection of the child elements of this element or document, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-205">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-205">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="39776-206">按文档顺序返回此元素或文档的子元素集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-206">Returns a collection of the child elements of this element or document, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-207">
            <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中按文档顺序包含此 <see cref="T:System.Xml.Linq.XContainer" /> 的子元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-207">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-208">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-208">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-209">下面的示例将创建 XML 树，然后选择使用此轴方法的某些元素。</span><span class="sxs-lookup"><span data-stu-id="39776-209">The following example creates an XML tree, and then selects some elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim elements = From el In xmlTree.Elements _  
               Where el.Value <= 3 _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="39776-210">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-210">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<Child3>3</Child3>  
```  
  
 <span data-ttu-id="39776-211">下面是相同的示例中，但在这种情况下 XML 命名空间中。</span><span class="sxs-lookup"><span data-stu-id="39776-211">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="39776-212">有关详细信息，请参阅[处理 XML 命名空间](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="39776-212">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.Elements _  
                       Where el.Value <= 3 _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="39776-213">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-213">This example produces the following output:</span></span>  
  
```  
<aw:Child1 xmlns:aw="http://www.adventure-works.com">1</aw:Child1>  
<aw:Child2 xmlns:aw="http://www.adventure-works.com">2</aw:Child2>  
<aw:Child3 xmlns:aw="http://www.adventure-works.com">3</aw:Child3>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="39776-214">要匹配的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-214">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-215">按文档顺序返回此元素或文档的已筛选的子元素集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-215">Returns a filtered collection of the child elements of this element or document, in document order.</span>
          </span>
          <span data-ttu-id="39776-216">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-216">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-217">
            <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中按文档顺序包含具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的 <see cref="T:System.Xml.Linq.XContainer" /> 的子级。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-217">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-218">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-218">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-219">下面的示例将创建 XML 树，然后选择几个使用此轴方法的子元素。</span><span class="sxs-lookup"><span data-stu-id="39776-219">The following example creates an XML tree, and then selects several child elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Type1", 1),  
    new XElement("Type1", 2),  
    new XElement("Type2", 3),  
    new XElement("Type2", 4),  
    new XElement("Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements("Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Type1>1</Type1>  
            <Type1>2</Type1>  
            <Type2>3</Type2>  
            <Type2>4</Type2>  
            <Type2>5</Type2>  
        </Root>  
  
Dim elements = From el In xmlTree.<Type2> _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="39776-220">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-220">This example produces the following output:</span></span>  
  
```  
<Type2>3</Type2>  
<Type2>4</Type2>  
<Type2>5</Type2>  
```  
  
 <span data-ttu-id="39776-221">下面是相同的示例中，但在这种情况下 XML 命名空间中。</span><span class="sxs-lookup"><span data-stu-id="39776-221">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="39776-222">有关详细信息，请参阅[处理 XML 命名空间](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="39776-222">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Type1", 1),  
    new XElement(aw + "Type1", 2),  
    new XElement(aw + "Type2", 3),  
    new XElement(aw + "Type2", 4),  
    new XElement(aw + "Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements(aw + "Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _   
            <aw:Root>  
                <aw:Type1>1</aw:Type1>  
                <aw:Type1>2</aw:Type1>  
                <aw:Type2>3</aw:Type2>  
                <aw:Type2>4</aw:Type2>  
                <aw:Type2>5</aw:Type2>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.<aw:Type2> _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="39776-223">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-223">This example produces the following output:</span></span>  
  
```  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">3</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">4</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">5</aw:Type2>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="FirstNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode FirstNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode FirstNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.FirstNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ FirstNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="39776-224">获取此节点的第一个子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-224">Get the first child node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="39776-225">一个 <see cref="T:System.Xml.Linq.XNode" />，其中包含 <see cref="T:System.Xml.Linq.XContainer" /> 的第一个子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-225">An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="39776-226">下面的示例创建一个包含子元素的元素。</span><span class="sxs-lookup"><span data-stu-id="39776-226">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="39776-227">然后获取父元素的第一个子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-227">It then gets the first child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode firstNode = xmlTree.FirstNode;  
Console.WriteLine(firstNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim firstNode As XNode = xmlTree.FirstNode  
Console.WriteLine(firstNode)  
```  
  
 <span data-ttu-id="39776-228">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-228">This example produces the following output:</span></span>  
  
```xml  
<Child1>1</Child1>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.LastNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="LastNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode LastNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode LastNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.LastNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ LastNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="39776-229">获取此节点的最后一个子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-229">Get the last child node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="39776-230">一个 <see cref="T:System.Xml.Linq.XNode" />，其中包含 <see cref="T:System.Xml.Linq.XContainer" /> 的最后一个子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-230">An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="39776-231">下面的示例创建一个包含子元素的元素。</span><span class="sxs-lookup"><span data-stu-id="39776-231">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="39776-232">然后获取父元素的最后一个子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-232">It then gets the last child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode lastNode = xmlTree.LastNode;  
Console.WriteLine(lastNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim lastNode As XNode = xmlTree.LastNode  
Console.WriteLine(lastNode)  
```  
  
 <span data-ttu-id="39776-233">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-233">This example produces the following output:</span></span>  
  
```xml  
<Child5>5</Child5>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.FirstNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="Nodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; Nodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Nodes" />
      <MemberSignature Language="VB.NET" Value="Public Function Nodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ Nodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="39776-234">按文档顺序返回此元素或文档的子节点集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-234">Returns a collection of the child nodes of this element or document, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39776-235">
            <see cref="T:System.Xml.Linq.XNode" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中按文档顺序包含此 <see cref="T:System.Xml.Linq.XContainer" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-235">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-236">请注意，该内容不包括特性。</span><span class="sxs-lookup"><span data-stu-id="39776-236">Note that the content does not include attributes.</span></span> <span data-ttu-id="39776-237">在[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]，特性不被视为是树的节点。</span><span class="sxs-lookup"><span data-stu-id="39776-237">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], attributes are not considered to be nodes of the tree.</span></span> <span data-ttu-id="39776-238">它们是与元素关联的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="39776-238">They are name/value pairs associated with an element.</span></span>  
  
 <span data-ttu-id="39776-239">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="39776-239">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-240">下面的示例与各种类型的节点创建 XML 树。</span><span class="sxs-lookup"><span data-stu-id="39776-240">The following example creates an XML tree with a variety of types of nodes.</span></span> <span data-ttu-id="39776-241">然后查询此轴方法，以枚举并打印节点。</span><span class="sxs-lookup"><span data-stu-id="39776-241">It then queries this axis method to enumerate and print the nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
IEnumerable<XNode> nodes =  
    from nd in xmlTree.Nodes()  
    select nd;  
foreach (XNode node in nodes)  
    Console.WriteLine(node);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <!--a comment-->  
            <Child3>3</Child3>  
            <Child4>4</Child4>mixed content<Child5>5</Child5>  
            </Root>  
  
Dim nodes = From nd In xmlTree.Nodes() _  
            Select nd  
  
For Each node In nodes  
    Console.WriteLine(node)  
Next  
```  
  
 <span data-ttu-id="39776-242">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-242">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<!--a comment-->  
<Child3>3</Child3>  
<Child4>4</Child4>  
mixed content  
<Child5>5</Child5>  
```  
  
 <span data-ttu-id="39776-243">下面的示例创建一个包含各种类型的节点的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="39776-243">The following example creates an XML tree that contains a variety of types of nodes.</span></span> <span data-ttu-id="39776-244">它然后枚举通过树中，打印的节点类型的部分。</span><span class="sxs-lookup"><span data-stu-id="39776-244">It then enumerates through portions of the tree, printing the node types.</span></span>  
  
```csharp  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2",  
            new XText("Text content")  
        )  
    )  
);  
  
foreach (XNode node in xmlTree.Nodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
        foreach (XNode node2 in ((XElement)node).Nodes())  
        {  
            Console.WriteLine(node2.NodeType);  
            if (node2.NodeType == XmlNodeType.Element)  
                foreach (XNode node3 in ((XElement)node2).Nodes())  
                    Console.WriteLine(node3.NodeType);  
        }  
    }  
}  
```  
  
```vb  
Dim xmlTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
    <!--a comment-->  
    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  
    <Root Att="attContent">  
        <Child1><![CDATA[CDATA content]]]><![CDATA[]></Child1>  
        <Child2>Text content</Child2>  
    </Root>  
  
' Note that XNode uses XmlNodeType, which is in the System.Xml namespace  
For Each node In xmlTree.Nodes  
    Console.WriteLine(node.NodeType.ToString())  
    If node.NodeType = XmlNodeType.Element Then  
        For Each att In DirectCast(node, XElement).Attributes  
            Console.WriteLine(att.NodeType.ToString())  
        Next  
        For Each node2 In DirectCast (node, XElement).Nodes()  
            Console.WriteLine(node2.NodeType.ToString())  
            If node2.NodeType = XmlNodeType.Element Then  
                For Each node3 In DirectCast (node2, XElement).Nodes  
                    Console.WriteLine(node3.NodeType.ToString())  
                Next  
            End If  
        Next  
    End If  
Next  
```  
  
 <span data-ttu-id="39776-245">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-245">This example produces the following output:</span></span>  
  
```  
Comment  
ProcessingInstruction  
Element  
Attribute  
Element  
CDATA  
Element  
Text  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes">
      <MemberSignature Language="C#" Value="public void RemoveNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.RemoveNodes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveNodes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveNodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="39776-246">从此文档或元素中移除子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-246">Removes the child nodes from this document or element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-247">如果在包含属性的元素上调用此方法，此方法不会删除属性。</span><span class="sxs-lookup"><span data-stu-id="39776-247">If you call this method on an element that contains attributes, this method will not remove the attributes.</span></span> <span data-ttu-id="39776-248">若要删除元素的属性，使用<xref:System.Xml.Linq.XElement.RemoveAttributes%2A>。</span><span class="sxs-lookup"><span data-stu-id="39776-248">To remove the attributes of an element, use <xref:System.Xml.Linq.XElement.RemoveAttributes%2A>.</span></span>  
  
 <span data-ttu-id="39776-249"><xref:System.Xml.Linq.Extensions.Remove%2A>方法有相关的功能。</span><span class="sxs-lookup"><span data-stu-id="39776-249">The <xref:System.Xml.Linq.Extensions.Remove%2A> method has related functionality.</span></span> <span data-ttu-id="39776-250">它移除集合中的每个节点的子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-250">It removes the child nodes of every node in a collection.</span></span>  
  
 <span data-ttu-id="39776-251">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-251">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-252">下面的示例创建一个包含某些子节点的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="39776-252">The following example creates an XML tree that contains some child nodes.</span></span> <span data-ttu-id="39776-253">它然后调用此方法以删除的子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-253">It then calls this method to remove the child nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
xmlTree.RemoveNodes();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmltree As XElement = _   
    <Root>  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <!--a comment-->  
        <Child3>3</Child3>  
        <Child4>4</Child4>mixed content<Child5>5</Child5>  
    </Root>  
  
xmltree.RemoveNodes()  
Console.WriteLine(xmltree)  
```  
  
 <span data-ttu-id="39776-254">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-254">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceNodes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39776-255">使用指定内容替换此文档或元素的子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-255">Replaces the children nodes of this document or element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-256">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-256">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-257">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-257">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="39776-258">此方法有快照语义。</span><span class="sxs-lookup"><span data-stu-id="39776-258">This method has snapshot semantics.</span></span> <span data-ttu-id="39776-259">它首先创建新的内容的副本。</span><span class="sxs-lookup"><span data-stu-id="39776-259">It first creates a copy of the new content.</span></span> <span data-ttu-id="39776-260">然后，它会删除此节点的所有子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-260">It then removes all children nodes of this node.</span></span> <span data-ttu-id="39776-261">最后，它将新的内容添加为子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-261">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="39776-262">这意味着，你可以替换在自己的子节点上使用查询的子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-262">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-263">下面的示例创建两个 XML 树，，，然后使用此方法将其中之一的内容替换为查询的结果。</span><span class="sxs-lookup"><span data-stu-id="39776-263">The following example creates two XML trees, and then uses this method to replace the contents of one of them with the results of a query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="39776-264">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-264">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="39776-265">用于替换子节点的包含简单内容的内容对象或内容对象集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-265">A content object containing simple content or a collection of content objects that replace the children nodes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-266">使用指定内容替换此文档或元素的子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-266">Replaces the children nodes of this document or element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-267">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-267">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-268">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-268">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="39776-269">此方法有快照语义。</span><span class="sxs-lookup"><span data-stu-id="39776-269">This method has snapshot semantics.</span></span> <span data-ttu-id="39776-270">它首先创建新的内容的副本。</span><span class="sxs-lookup"><span data-stu-id="39776-270">It first creates a copy of the new content.</span></span> <span data-ttu-id="39776-271">然后，它会删除此节点的所有子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-271">It then removes all children nodes of this node.</span></span> <span data-ttu-id="39776-272">最后，它将新的内容添加为子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-272">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="39776-273">这意味着，你可以替换在自己的子节点上使用查询的子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-273">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-274">下面的示例创建一个包含子节点的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="39776-274">The following example creates an XML tree that contains children nodes.</span></span> <span data-ttu-id="39776-275">它然后将替换所有子节点具有单个元素。</span><span class="sxs-lookup"><span data-stu-id="39776-275">It then replaces all of the children nodes with a single element.</span></span>  
  
 <span data-ttu-id="39776-276">若要查看的子节点替换的结果示例[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查询，请参阅<xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>。</span><span class="sxs-lookup"><span data-stu-id="39776-276">To see an example of replacing the children nodes with the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query, see <xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="39776-277">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-277">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="39776-278">内容对象的参数列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-278">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39776-279">使用指定内容替换此文档或元素的子节点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39776-279">Replaces the children nodes of this document or element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39776-280">有关可以传递给此函数的有效内容的详细信息，请参阅[有效的内容的 XElement 和 XDocument 对象](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="39776-280">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="39776-281">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="39776-281">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="39776-282">此方法有快照语义。</span><span class="sxs-lookup"><span data-stu-id="39776-282">This method has snapshot semantics.</span></span> <span data-ttu-id="39776-283">它首先创建新的内容的副本。</span><span class="sxs-lookup"><span data-stu-id="39776-283">It first creates a copy of the new content.</span></span> <span data-ttu-id="39776-284">然后，它会删除此节点的所有子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-284">It then removes all children nodes of this node.</span></span> <span data-ttu-id="39776-285">最后，它将新的内容添加为子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-285">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="39776-286">这意味着，你可以替换在自己的子节点上使用查询的子节点。</span><span class="sxs-lookup"><span data-stu-id="39776-286">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39776-287">下面的示例创建一个字典和 XML 树。</span><span class="sxs-lookup"><span data-stu-id="39776-287">The following example creates a dictionary and an XML tree.</span></span> <span data-ttu-id="39776-288">然后它查询字典，将结果投影到<xref:System.Collections.Generic.IEnumerable%601>的<xref:System.Xml.Linq.XElement>，并将 XML 树的内容替换查询的结果。</span><span class="sxs-lookup"><span data-stu-id="39776-288">It then queries the dictionary, projects the results to an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, and replaces the contents of the XML tree with the results of the query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="39776-289">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="39776-289">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
  </Members>
</Type>