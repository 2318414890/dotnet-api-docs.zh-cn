<Type Name="XAttribute" FullName="System.Xml.Linq.XAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c3ca0b79ae2d94d785e52a83f69cedfb7271085" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XAttribute : System.Xml.Linq.XObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XAttribute extends System.Xml.Linq.XObject" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XAttribute&#xA;Inherits XObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class XAttribute : System::Xml::Linq::XObject" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XAttribute&gt;))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="00977-101">表示 XML 特性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="00977-101">Represents an XML attribute.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-102">XML 特性是一个 XML 元素与关联的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="00977-102">An XML attribute is a name/value pair associated with an XML element.</span></span>  
  
 <span data-ttu-id="00977-103">每个<xref:System.Xml.Linq.XElement>包含该元素的特性的列表。</span><span class="sxs-lookup"><span data-stu-id="00977-103">Each <xref:System.Xml.Linq.XElement> contains a list of the attributes for that element.</span></span> <span data-ttu-id="00977-104">属性必须是唯一的元素的限定的名称。</span><span class="sxs-lookup"><span data-stu-id="00977-104">Attributes must have a qualified name that is unique to the element.</span></span> <span data-ttu-id="00977-105">特性不派生自<xref:System.Xml.Linq.XNode>; 它们不是 XML 树中的节点。</span><span class="sxs-lookup"><span data-stu-id="00977-105">Attributes are not derived from <xref:System.Xml.Linq.XNode>; they are not nodes in the XML tree.</span></span> <span data-ttu-id="00977-106">相反，它们是只需与元素关联的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="00977-106">Instead, they are simply name/value pairs associated with an element.</span></span>  
  
 <span data-ttu-id="00977-107">属性保留的 XML 树中它们添加到元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="00977-107">Attributes are maintained in the XML tree in the order that they were added to the element.</span></span> <span data-ttu-id="00977-108">当通过返回的属性的集合时<xref:System.Xml.Linq.XElement.Attributes%2A>，它们以它们已添加到了元素，和未排序的顺序返回。</span><span class="sxs-lookup"><span data-stu-id="00977-108">When a collection of attributes is returned by <xref:System.Xml.Linq.XElement.Attributes%2A>, they are returned in the order that they were added to the element, and are not sorted.</span></span>  
  
 <span data-ttu-id="00977-109">从技术上讲，在 XML 中，命名空间声明不是正确的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-109">Technically, in XML, namespace declarations are not attributes proper.</span></span> <span data-ttu-id="00977-110">但是，许多 XML 程序员通常不加以这一区别。</span><span class="sxs-lookup"><span data-stu-id="00977-110">However, this distinction is not normally made by many XML programmers.</span></span> <span data-ttu-id="00977-111">相反，由于命名空间声明的 XML 语法与属性完全相同，因此大多数 XML 程序员来说将命名空间视为属性。</span><span class="sxs-lookup"><span data-stu-id="00977-111">Instead, because namespace declarations have exactly the same XML syntax as attributes, most XML programmers think of namespaces as attributes.</span></span> <span data-ttu-id="00977-112">若要简化[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]编程接口，命名空间表示 XML 树中作为属性。</span><span class="sxs-lookup"><span data-stu-id="00977-112">To simplify the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming interface, namespaces are represented in the XML tree as attributes.</span></span> <span data-ttu-id="00977-113">此类命名空间属性会影响序列化 XML 树。</span><span class="sxs-lookup"><span data-stu-id="00977-113">Such namespace attributes impact serialization of an XML tree.</span></span> <span data-ttu-id="00977-114">序列时，[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]尝试序列化时使用命名空间属性中指定的命名空间前缀。</span><span class="sxs-lookup"><span data-stu-id="00977-114">When serializing, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] attempts to serialize with the namespace prefix specified in namespace attributes.</span></span> <span data-ttu-id="00977-115">你可以使用<xref:System.Xml.Linq.XAttribute.IsNamespaceDeclaration%2A>来确定属性是否真正命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="00977-115">You can use the <xref:System.Xml.Linq.XAttribute.IsNamespaceDeclaration%2A> to determine if an attribute is really a namespace declaration.</span></span>  
  
 <span data-ttu-id="00977-116"><xref:System.Xml.Linq.XAttribute> 类派生自 <xref:System.Xml.Linq.XObject>。</span><span class="sxs-lookup"><span data-stu-id="00977-116">The <xref:System.Xml.Linq.XAttribute> class derives from <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="00977-117">你可以将批注添加到属性，并观察发生的事件。</span><span class="sxs-lookup"><span data-stu-id="00977-117">You can add annotations to attributes, and observe events for them.</span></span>  
  
 <span data-ttu-id="00977-118">某些<xref:System.Xml.Linq.XAttribute>方法可从 XAML 中使用。</span><span class="sxs-lookup"><span data-stu-id="00977-118">Some <xref:System.Xml.Linq.XAttribute> methods can be used from XAML.</span></span> <span data-ttu-id="00977-119">有关详细信息，请参阅 [LINQ to XML 动态属性](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)。</span><span class="sxs-lookup"><span data-stu-id="00977-119">For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Linq.XElement" />
    <altmember cref="T:System.Xml.Linq.XDocument" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00977-120">初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-120">Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class.</span>
          </span>
        </summary>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="P:System.Xml.Linq.XAttribute.NodeType" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XAttribute (System.Xml.Linq.XAttribute other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XAttribute other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XAttribute(System::Xml::Linq::XAttribute ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="00977-121">要从其复制的 <see cref="T:System.Xml.Linq.XAttribute" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-121">An <see cref="T:System.Xml.Linq.XAttribute" /> object to copy from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-122">从另一个 <see cref="T:System.Xml.Linq.XAttribute" /> 对象初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-122">Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from another <see cref="T:System.Xml.Linq.XAttribute" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-123">在创建 XML 树的深层副本时，主要是内部使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="00977-123">This constructor is primarily used internally when making a deep copy of an XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-124">此示例演示了创建 XML 树的深层副本创建的副本，不是复本的树中的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-124">This example demonstrates that creating a deep copy of an XML tree creates a copy, not a clone, of an attribute in the tree.</span></span>  
  
```csharp  
XElement root1 = XElement.Parse("<Root Att1='abc' />");  
// Make a deep copy.  
XElement root2 = new XElement(root1);  
if (root1.Attribute("Att1") == root2.Attribute("Att1"))  
    Console.WriteLine("This will not be printed");  
else  
    Console.WriteLine("Creating a deep copy created a new attribute from the original.");  
```  
  
```vb  
Dim root1 As XElement = <Root Att1='abc'/>  
' Make a deep copy.  
Dim root2 As XElement = New XElement(root1)  
If root1.Attribute("Att1") Is root2.Attribute("Att1") Then  
    Console.WriteLine("This will not be printed")  
Else  
    Console.WriteLine("Creating a deep copy created a new attribute from the original.")  
End If  
```  
  
 <span data-ttu-id="00977-125">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-125">This example produces the following output:</span></span>  
  
```  
  
Creating a deep copy created a new attribute from the original.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-126">
            <paramref name="other" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-126">The <paramref name="other" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="P:System.Xml.Linq.XAttribute.NodeType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XAttribute (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XAttribute(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="00977-127">属性的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-127">The <see cref="T:System.Xml.Linq.XName" /> of the attribute.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="00977-128">一个包含属性值的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-128">An <see cref="T:System.Object" /> containing the value of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-129">从指定的名称和值初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-129">Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from the specified name and value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-130">没有从字符串到隐式转换<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="00977-130">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="00977-131">此构造函数的典型用途是将字符串而不是创建一个新的第一个参数指定<xref:System.Xml.Linq.XName>、，如下所示：</span><span class="sxs-lookup"><span data-stu-id="00977-131">Typical use of this constructor is to specify a string as the first parameter instead of creating a new <xref:System.Xml.Linq.XName>, as follows:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("AnAttributeName", "Content")  
);  
```  
  
 <span data-ttu-id="00977-132">你还可以使用与加法运算符重载<xref:System.Xml.Linq.XNamespace>和字符串从而创建<xref:System.Xml.Linq.XName>、，如下所示：</span><span class="sxs-lookup"><span data-stu-id="00977-132">You can also use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>, as follows:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(aw + "AnAttributeName", "Content")  
);  
```  
  
 <span data-ttu-id="00977-133">有关详细信息，请参阅[处理 XML 命名空间](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="00977-133">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="00977-134">这些相同的方法将适用于 Visual Basic 中，但是 XML 文本提供更好的方法，用于创建 XML 树。</span><span class="sxs-lookup"><span data-stu-id="00977-134">These same approaches will work for Visual Basic, however XML literals provide a better approach for creating XML trees.</span></span>  
  
 <span data-ttu-id="00977-135">`value`参数可以为<xref:System.String>， `double`， `float`， `decimal`， `bool`， <xref:System.DateTime>，或<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="00977-135">The `value` parameter can be a <xref:System.String>, `double`, `float`, `decimal`, `bool`, <xref:System.DateTime>, or <xref:System.TimeSpan>.</span></span> <span data-ttu-id="00977-136">如果值为<xref:System.DateTime>或<xref:System.TimeSpan>，根据 W3C 规范的属性值的格式是否正确。</span><span class="sxs-lookup"><span data-stu-id="00977-136">If the value is a <xref:System.DateTime> or <xref:System.TimeSpan>, the value of the attribute is formatted correctly per the W3C specifications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-137">下面的示例使用此构造函数来创建属性。</span><span class="sxs-lookup"><span data-stu-id="00977-137">The following example uses this constructor to create attributes.</span></span> <span data-ttu-id="00977-138">它将字符串传递的第一个参数作为<xref:System.Xml.Linq.XAttribute>构造函数，然后隐式转换为<xref:System.Xml.Linq.XName>对象。</span><span class="sxs-lookup"><span data-stu-id="00977-138">It passes strings as the first argument to the <xref:System.Xml.Linq.XAttribute> constructor, which are then implicitly converted to <xref:System.Xml.Linq.XName> objects.</span></span> <span data-ttu-id="00977-139">属性添加到元素中。</span><span class="sxs-lookup"><span data-stu-id="00977-139">The attributes are added to an element.</span></span>  
  
```csharp  
XElement root;  
  
double dbl = 12.345;  
XAttribute[] attArray = {  
    new XAttribute("Att4", 1),  
    new XAttribute("Att5", 2),  
    new XAttribute("Att6", 3)  
};  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
  
// string content  
root = new XElement("Root",  
    new XAttribute("Att1", "Some text"),  
  
    // double content  
    new XAttribute("Att2", dbl),  
  
    // DateTime content  
    new XAttribute("Att3", dt),  
  
    // XAttribute array content  
    attArray  
);  
  
Console.WriteLine(root);  
```  
  
```vb  
Dim dbl As Double = 12.345  
Dim attArray As XAttribute() = { _  
    New XAttribute("Att4", 1), _  
    New XAttribute("Att5", 2), _  
    New XAttribute("Att6", 3) _  
}  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
Dim root As XElement = <Root Att1="Some text"  
                           Att2=<%= dbl %>  
                           Att3=<%= dt %>  
                           <%= attArray %>  
                       />  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="00977-140">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-140">This example produces the following output:</span></span>  
  
```  
  
<Root Att1="Some text" Att2="12.345" Att3="2006-10-06T12:30:00" Att4="1" Att5="2" Att6="3" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-141">
            <paramref name="name" /> 或 <paramref name="value" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-141">The <paramref name="name" /> or <paramref name="value" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="P:System.Xml.Linq.XAttribute.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00977-142">获取空的属性集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-142">Gets an empty collection of attributes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00977-143">一个包含空集合的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-143">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> containing an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-144">当编写返回的属性集合的方法，类实施者通常使用此属性。</span><span class="sxs-lookup"><span data-stu-id="00977-144">This property is typically used by class implementers when writing a method that returns a collection of attributes.</span></span> <span data-ttu-id="00977-145">如果该方法需要返回空集合的属性，它可使用此属性以获取空的集合<xref:System.Xml.Linq.XAttribute>对象。</span><span class="sxs-lookup"><span data-stu-id="00977-145">If the method needs to return an empty collection of attributes, it could use this property to get an empty collection of <xref:System.Xml.Linq.XAttribute> objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XElement.EmptySequence" />
        <altmember cref="Overload:System.Xml.Linq.XAttribute.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceDeclaration">
      <MemberSignature Language="C#" Value="public bool IsNamespaceDeclaration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNamespaceDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNamespaceDeclaration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00977-146">确定此属性是否为命名空间声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-146">Determines if this attribute is a namespace declaration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00977-147">如果此属性为命名空间声明，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-147">
              <see langword="true" /> if this attribute is a namespace declaration; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-148">从技术上讲，在 XML 中，命名空间声明不是正确的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-148">Technically, in XML, namespace declarations are not attributes proper.</span></span> <span data-ttu-id="00977-149">但是，大多数 XML 程序员来说通常不加以这一区别。</span><span class="sxs-lookup"><span data-stu-id="00977-149">However, this distinction is not normally made by most XML programmers.</span></span> <span data-ttu-id="00977-150">相反，由于命名空间声明属性的语法完全相同，因此大多数 XML 程序员来说将命名空间视为属性。</span><span class="sxs-lookup"><span data-stu-id="00977-150">Instead, because namespace declarations have exactly the same syntax as attributes, most XML programmers think of namespaces as attributes.</span></span> <span data-ttu-id="00977-151">若要简化[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]编程接口，命名空间表示 XML 树中作为属性。</span><span class="sxs-lookup"><span data-stu-id="00977-151">To simplify the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming interface, namespaces are represented in the XML tree as attributes.</span></span> <span data-ttu-id="00977-152">你可以使用此属性来确定特定[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]属性实际上是命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="00977-152">You can use this property to determine if a particular [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] attribute is really a namespace declaration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-153">下面的示例创建是命名空间声明属性和不是属性。</span><span class="sxs-lookup"><span data-stu-id="00977-153">The following example creates an attribute that is a namespace declaration and an attribute that is not.</span></span> <span data-ttu-id="00977-154">它然后使用此属性来显示每个属性或不是命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="00977-154">It then uses this property to display whether each attribute is a namespace declaration or not.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "content")  
);  
  
foreach (XAttribute att in root.Attributes()) {  
    if (att.IsNamespaceDeclaration)  
        Console.WriteLine("{0} is a namespace declaration", att.Name);  
    else  
        Console.WriteLine("{0} is not a namespace declaration", att.Name);  
}  
```  
  
```vb  
Dim root As XElement = <aw:Root xmlns:aw='http://www.adventure-works.com'  
                           aw:Att='content'/>  
  
For Each att As XAttribute In root.Attributes()  
    If (att.IsNamespaceDeclaration) Then  
        Console.WriteLine("{0} is a namespace declaration", att.Name)  
    Else  
        Console.WriteLine("{0} is not a namespace declaration", att.Name)  
    End If  
Next  
```  
  
 <span data-ttu-id="00977-155">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-155">This example produces the following output:</span></span>  
  
```  
{http://www.w3.org/2000/xmlns/}aw is a namespace declaration  
{http://www.adventure-works.com}Att is not a namespace declaration  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XNamespace" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00977-156">获取此属性的扩展名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-156">Gets the expanded name of this attribute.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00977-157">一个包含此属性 (Attribute) 名称的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-157">An <see cref="T:System.Xml.Linq.XName" /> containing the name of this attribute.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-158">此属性返回的展开的名称所采用的形式`{namespace}localname`。</span><span class="sxs-lookup"><span data-stu-id="00977-158">The expanded name returned by this property is in the form of `{namespace}localname`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-159">下面的示例创建具有三个特性的元素。</span><span class="sxs-lookup"><span data-stu-id="00977-159">The following example creates an element with three attributes.</span></span> <span data-ttu-id="00977-160">它然后使用此属性来打印出的每个属性的名称。</span><span class="sxs-lookup"><span data-stu-id="00977-160">It then uses this property to print out the name of each attribute.</span></span> <span data-ttu-id="00977-161">该示例还演示创建新的属性使用的现有属性的名称。</span><span class="sxs-lookup"><span data-stu-id="00977-161">The example also shows creation of a new attribute using the name of an existing attribute.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "content"),  
    new XAttribute("Att2", "different content")  
);  
  
foreach (XAttribute att in root.Attributes())  
    Console.WriteLine("{0}={1}", att.Name, att.Value);  
Console.WriteLine("");  
  
XElement newRoot = new XElement(aw + "Root",  
    from att in root.Attributes("Att2")  
    select new XAttribute(att.Name, "new content"));  
  
foreach (XAttribute att in newRoot.Attributes())  
    Console.WriteLine("{0}={1}", att.Name, att.Value);  
```  
  
```vb  
Dim root As XElement = _   
    <aw:Root xmlns:aw='http://www.adventure-works.com'  
        aw:Att='content'  
        Att2='different content'/>  
  
For Each att As XAttribute In root.Attributes()  
    Console.WriteLine("{0}={1}", att.Name, att.Value)  
Next  
Console.WriteLine("")  
  
Dim NewRoot As XElement = _  
<Root  
    <%= _  
        From att In root.Attributes("Att2") _  
        Select New XAttribute(att.Name, "new content") _  
    %>>_  
</Root>  
  
For Each att As XAttribute In NewRoot.Attributes()  
    Console.WriteLine("{0}={1}", att.Name, att.Value)  
Next  
  
```  
  
 <span data-ttu-id="00977-162">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-162">This example produces the following output:</span></span>  
  
```  
{http://www.w3.org/2000/xmlns/}aw=http://www.adventure-works.com  
{http://www.adventure-works.com}Att=content  
Att2=different content  
  
Att2=new content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XName" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="M:System.Xml.Linq.XAttribute.ToString" />
      </Docs>
    </Member>
    <Member MemberName="NextAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute NextAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute NextAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.NextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ NextAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00977-163">获取父元素的下一个属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-163">Gets the next attribute of the parent element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00977-164">一个包含父元素下一个属性 (Attribute) 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-164">An <see cref="T:System.Xml.Linq.XAttribute" /> containing the next attribute of the parent element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-165">属性保留的 XML 树中它们添加到元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="00977-165">Attributes are maintained in the XML tree in the order that they were added to the element.</span></span> <span data-ttu-id="00977-166">当通过返回的属性的集合时<xref:System.Xml.Linq.XElement.Attributes%2A>，它们已添加，并且未排序顺序返回它们。</span><span class="sxs-lookup"><span data-stu-id="00977-166">When a collection of attributes is returned by <xref:System.Xml.Linq.XElement.Attributes%2A>, they are returned in the order that they were added, and are not sorted.</span></span> <span data-ttu-id="00977-167">当请求通过此属性的下一个属性时，此属性将返回此属性后，添加的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-167">When you request the next attribute through this property, this property returns the attribute that was added after this attribute.</span></span>  
  
 <span data-ttu-id="00977-168">如果此属性不具有父级，或如果没有下一步的属性，则此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="00977-168">If this attribute does not have a parent, or if there is no next attribute, then this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-169">下面的示例演示如何循环访问使用此属性的元素的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-169">The following example shows how to iterate through the attributes of an element using this property.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XAttribute("Att4", 4)  
);  
  
XAttribute att = root.FirstAttribute;  
do {  
    Console.WriteLine(att);  
}  
while((att = att.NextAttribute) != null);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3" Att4="4"/>  
Dim att As XAttribute = root.FirstAttribute  
Dim val As Boolean = True  
Do  
    Console.WriteLine(att)  
    att = att.NextAttribute  
Loop While (Not (att Is Nothing))  
```  
  
 <span data-ttu-id="00977-170">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-170">This example produces the following output:</span></span>  
  
```  
Att1="1"  
Att2="2"  
Att3="3"  
Att4="4"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XAttribute.PreviousAttribute" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00977-171">获取此节点的节点类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-171">Gets the node type for this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00977-172">节点类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-172">The node type.</span>
          </span>
          <span data-ttu-id="00977-173">对于 <see cref="T:System.Xml.Linq.XAttribute" /> 对象，此值为 <see cref="F:System.Xml.XmlNodeType.Attribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-173">For <see cref="T:System.Xml.Linq.XAttribute" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Attribute" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-174">因为派生自的所有类<xref:System.Xml.Linq.XObject>包含<xref:System.Xml.Linq.XObject.NodeType%2A>属性，你可以编写代码进行操作的具体子类的集合<xref:System.Xml.Linq.XObject>。</span><span class="sxs-lookup"><span data-stu-id="00977-174">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="00977-175">集合中每个节点的节点类型随后可以测试你的代码。</span><span class="sxs-lookup"><span data-stu-id="00977-175">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-176">下面的示例创建一个特性，，然后显示使用此属性的节点类型。</span><span class="sxs-lookup"><span data-stu-id="00977-176">The following example creates an attribute, and then displays the node type using this property.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "content")  
);  
  
XAttribute att = root.FirstAttribute;  
Console.WriteLine(att.NodeType);  
```  
  
```vb  
Dim root As XElement = <Root Att="content"/>  
Dim att As XAttribute = root.FirstAttribute  
Console.WriteLine(att.NodeType.ToString)  
```  
  
 <span data-ttu-id="00977-177">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-177">This example produces the following output:</span></span>  
  
```  
  
Attribute  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeType" />
        <altmember cref="T:System.Xml.Linq.XNode" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-178">要强制转换为 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-178">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-179">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-179">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Boolean" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-180">一个 <see cref="T:System.Boolean" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-180">A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-181">将转换为时<xref:System.Boolean>从某个属性或元素，允许的值为"0"、"1"和任何字符串，它会生成"true"或"false"转换为小写。</span><span class="sxs-lookup"><span data-stu-id="00977-181">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>  
 
## Examples  
 <span data-ttu-id="00977-182">下面的示例创建一个带属性<xref:System.Boolean>值，然后将强制转换到<xref:System.Boolean>。</span><span class="sxs-lookup"><span data-stu-id="00977-182">The following example creates an attribute with a <xref:System.Boolean> value, then casts it to <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("BoolValue", true)  
);  
bool bv = (bool)root.Attribute("BoolValue");  
Console.WriteLine("(bool)BoolValue={0}", bv);  
```  
  
```vb  
Dim root As XElement = <root BoolValue="true"/>  
Dim bv As Boolean = CBool(root.Attribute("BoolValue"))  
Console.WriteLine("(bool)BoolValue={0}", bv)  
```  
  
 <span data-ttu-id="00977-183">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-183">This example produces the following output:</span></span>  
  
```  
(bool)BoolValue=True  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-184">属性不包含有效的 <see cref="T:System.Boolean" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-184">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-185">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-185">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-186">要强制转换为 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-186">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTime" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-187">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.DateTime" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-187">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTime" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-188">一个 <see cref="T:System.DateTime" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-188">A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-189">某个属性或包含日期和时间的内容的元素值空间与的日期和时间 ISO 8601 中所述紧密相关。</span><span class="sxs-lookup"><span data-stu-id="00977-189">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="00977-190">在创建某个属性或元素包含日期和时间的内容时，请按照 W3C 规范格式化的属性或元素值。</span><span class="sxs-lookup"><span data-stu-id="00977-190">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="00977-191">请参阅 W3C 规范的更多详细信息。</span><span class="sxs-lookup"><span data-stu-id="00977-191">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="00977-192">当强制转换为行为并不严格<xref:System.DateTime>从某个属性或元素。</span><span class="sxs-lookup"><span data-stu-id="00977-192">Behavior is lax when casting to a <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="00977-193">即使未完全按照 W3C 规范格式化的属性或元素值，值适当地转换为<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="00977-193">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="00977-194">此转换运算符使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>将从转换<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="00977-194">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>  
 
## Examples  
 <span data-ttu-id="00977-195">下面的示例创建具有日期和时间的内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-195">The following example creates an attribute with date and time content.</span></span> <span data-ttu-id="00977-196">它然后将其强制转换到<xref:System.DateTime>要检索其值。</span><span class="sxs-lookup"><span data-stu-id="00977-196">It then casts it to <xref:System.DateTime> to retrieve the value.</span></span>  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
Console.WriteLine(root);  
  
// casting from a strictly formatted XML attribute  
DateTime dt = (DateTime)root.Attribute("Att");  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// if root is formatted in some different way than the standard ISO 8601, if at all possible,  
// the value is appropriately converted to DateTime  
  
XAttribute dtAtt = new XAttribute("OrderDate", "October 6, 2006");  
Console.WriteLine(dtAtt);  
DateTime orderDate = (DateTime)dtAtt;  
Console.WriteLine("OrderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root Att=<%= New DateTime(2006, 10, 6, 12, 30, 0) %>/>  
  
Console.WriteLine(root)  
  
' casting from a strictly formatted XML attribute  
Dim dt As DateTime = CType(root.Attribute("Att"), DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' if root is formatted in some different way than the standard ISO 8601, if at all possible,  
' the value is appropriately converted to DateTime  
Dim dtAtt As XAttribute = New XAttribute("OrderDate", "October 6, 2006")  
Console.WriteLine(dtAtt)  
Dim orderDate As DateTime = CType(dtAtt, DateTime)  
Console.WriteLine("OrderDate={0:d}", orderDate)  
```  
  
 <span data-ttu-id="00977-197">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-197">This example produces the following output:</span></span>  
  
```  
<Root Att="2006-10-06T12:30:00" />  
dt=10/6/2006 12:30:00 PM  
-----  
OrderDate="October 6, 2006"  
OrderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-198">属性不包含有效的 <see cref="T:System.DateTime" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-198">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-199">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-199">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-200">要强制转换为 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-200">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-201">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.DateTimeOffset" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-201">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-202">一个 <see cref="T:System.DateTimeOffset" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-202">A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-203">此转换运算符使用<xref:System.Xml.XmlConvert>类来执行此转换。</span><span class="sxs-lookup"><span data-stu-id="00977-203">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  

## Examples  
 <span data-ttu-id="00977-204">下面的示例创建具有日期和时间的内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-204">The following example creates an attribute with date and time content.</span></span> <span data-ttu-id="00977-205">它然后将其强制转换到<xref:System.DateTimeOffset>要检索其值。</span><span class="sxs-lookup"><span data-stu-id="00977-205">It then casts it to <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
// casting from a strictly formatted XML attribute  
DateTimeOffset dt = (DateTimeOffset)root.Attribute("Att");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root  
        Att=<%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %>/>  
Console.WriteLine(root)  
  
' casting from a strictly formatted XML attribute  
Dim dt As DateTimeOffset = CType(root.Attribute("Att"), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="00977-206">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-206">This example produces the following output:</span></span>  
  
```  
<Root Att="2006-10-06T12:30:00-07:00" />  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-207">属性不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-207">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-208">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-208">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-209">要强制转换为 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-209">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Decimal" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-210">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Decimal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-210">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Decimal" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-211">一个 <see cref="T:System.Decimal" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-211">A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-212">下面的示例创建十进制值的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-212">The following example creates an attribute with a decimal value.</span></span> <span data-ttu-id="00977-213">然后检索属性的值通过强制转换为<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="00977-213">It then retrieves the value of the attribute by casting to <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "79228162514264337593543950335")  
);  
decimal value = (decimal)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="79228162514264337593543950335"/>  
Dim value As Decimal = CDec(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-214">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-214">This example produces the following output:</span></span>  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-215">属性不包含有效的 <see cref="T:System.Decimal" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-215">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-216">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-216">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-217">要强制转换为 <see cref="T:System.Double" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-217">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Double" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-218">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Double" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-218">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-219">一个 <see cref="T:System.Double" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-219">A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-220">下面的示例创建一个带属性<xref:System.Double>内容。</span><span class="sxs-lookup"><span data-stu-id="00977-220">The following example creates an attribute with <xref:System.Double> content.</span></span> <span data-ttu-id="00977-221">然后检索的值通过强制转换为<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="00977-221">It then retrieves the value by casting to <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 1.79769313486231e308)  
);  
double value = (double)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="1.79769313486231E+308"/>  
Dim value As Double = CDbl(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-222">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-222">This example produces the following output:</span></span>  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-223">属性不包含有效的 <see cref="T:System.Double" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-223">The attribute does not contain a valid <see cref="T:System.Double" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-224">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-224">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-225">要强制转换为 <see cref="T:System.Guid" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-225">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Guid" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-226">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Guid" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-226">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Guid" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-227">一个 <see cref="T:System.Guid" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-227">A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-228">下面的示例将创建 GUID 作为内容属性</span><span class="sxs-lookup"><span data-stu-id="00977-228">The following example creates an attribute with a GUID as content.</span></span> <span data-ttu-id="00977-229">然后检索的值通过强制转换为<xref:System.Guid>。</span><span class="sxs-lookup"><span data-stu-id="00977-229">It then retrieves the value by casting to <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid value = (Guid)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %>/>  
Dim value As Guid = CType(root.Attribute("Att"), Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-230">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-230">This example produces the following output:</span></span>  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-231">属性不包含有效的 <see cref="T:System.Guid" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-231">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-232">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-232">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-233">要强制转换为 <see cref="T:System.Int32" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-233">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-234">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Int32" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-234">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-235">一个 <see cref="T:System.Int32" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-235">A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-236">下面的示例创建一个属性以一个整数作为内容。</span><span class="sxs-lookup"><span data-stu-id="00977-236">The following example creates an attribute with an integer as content.</span></span> <span data-ttu-id="00977-237">然后检索的值通过强制转换为<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="00977-237">It then retrieves the value by casting to <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 2147483647)  
);  
int value = (int)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="2147483647"/>  
Dim value As Integer = CInt(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-238">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-238">This example produces the following output:</span></span>  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-239">属性不包含有效的 <see cref="T:System.Int32" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-239">The attribute does not contain a valid <see cref="T:System.Int32" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-240">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-240">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-241">要强制转换为 <see cref="T:System.Int64" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-241">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-242">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Int64" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-242">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-243">一个 <see cref="T:System.Int64" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-243">A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-244">下面的示例将创建一个长整型，作为内容属性</span><span class="sxs-lookup"><span data-stu-id="00977-244">The following example creates an attribute with a long integer as content.</span></span> <span data-ttu-id="00977-245">然后检索属性的值通过强制转换为<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="00977-245">It then retrieves the value of the attribute by casting to <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 9223372036854775807)  
);  
long value = (long)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="9223372036854775807"/>  
Dim value As Long = CLng(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-246">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-246">This example produces the following output:</span></span>  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-247">属性不包含有效的 <see cref="T:System.Int64" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-247">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-248">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-248">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-249">要强制转换为 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-249">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-250">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-250">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-251">一个 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-251">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-252">将转换为时<xref:System.Boolean>从某个属性或元素，允许的值为"0"、"1"和任何字符串，它会生成"true"或"false"转换为小写。</span><span class="sxs-lookup"><span data-stu-id="00977-252">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>  

## Examples  
 <span data-ttu-id="00977-253">下面的示例创建具有布尔内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-253">The following example creates an attribute with Boolean content.</span></span> <span data-ttu-id="00977-254">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.Boolean>。</span><span class="sxs-lookup"><span data-stu-id="00977-254">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("BoolValue1", true),  
    new XAttribute("BoolValue2", false)  
);  
bool? bool1 = (bool?)root.Attribute("BoolValue1");  
bool? bool2 = (bool?)root.Attribute("BoolValue2");  
Console.WriteLine("Nullable boolean: BoolValue1={0}", bool1);  
Console.WriteLine("Nullable boolean: BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = <Root BoolValue1="true" BoolValue2="false"/>  
Dim bool1 As Nullable(Of Boolean) = CType(root.Attribute("BoolValue1"), Nullable(Of Boolean))  
Dim bool2 As Nullable(Of Boolean) = CType(root.Attribute("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable boolean: BoolValue1={0}", bool1)  
Console.WriteLine("Nullable boolean: BoolValue2={0}", bool2)  
```  
  
 <span data-ttu-id="00977-255">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-255">This example produces the following output:</span></span>  
  
```  
Nullable boolean: BoolValue1=True  
Nullable boolean: BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-256">属性不包含有效的 <see cref="T:System.Boolean" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-256">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-257">要强制转换为 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-257">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-258">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-258">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-259">一个 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-259">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-260">某个属性或包含日期和时间的内容的元素值空间与的日期和时间 ISO 8601 中所述紧密相关。</span><span class="sxs-lookup"><span data-stu-id="00977-260">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="00977-261">在创建某个属性或元素包含日期和时间的内容时，请按照 W3C 规范格式化的属性或元素值。</span><span class="sxs-lookup"><span data-stu-id="00977-261">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="00977-262">请参阅 W3C 规范的更多详细信息。</span><span class="sxs-lookup"><span data-stu-id="00977-262">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="00977-263">当强制转换为行为并不严格<xref:System.Nullable%601>的<xref:System.DateTime>从某个属性或元素。</span><span class="sxs-lookup"><span data-stu-id="00977-263">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="00977-264">即使未完全按照 W3C 规范格式化的属性或元素值，值适当地转换为<xref:System.Nullable%601>的<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="00977-264">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="00977-265">此转换运算符使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>将从转换<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="00977-265">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>  
  
## Examples  
 <span data-ttu-id="00977-266">下面的示例创建具有日期和时间作为内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-266">The following example creates an attribute with a date and time as content.</span></span> <span data-ttu-id="00977-267">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="00977-267">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Attribute("Att");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New DateTime(2006, 10, 6, 12, 30, 0) %>/>  
Dim value As Nullable(Of DateTime) = CType(root.Attribute("Att"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-268">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-268">This example produces the following output:</span></span>  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-269">属性不包含有效的 <see cref="T:System.DateTime" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-269">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-270">要强制转换为 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-270">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-271">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-271">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-272">一个 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-272">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-273">此转换运算符使用<xref:System.Xml.XmlConvert>类来执行此转换。</span><span class="sxs-lookup"><span data-stu-id="00977-273">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  
 
## Examples  
 <span data-ttu-id="00977-274">下面的示例创建具有日期和时间作为内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-274">The following example creates an attribute with a date and time as content.</span></span> <span data-ttu-id="00977-275">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.DateTimeOffset>。</span><span class="sxs-lookup"><span data-stu-id="00977-275">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTimeOffset>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
DateTimeOffset? value = (DateTimeOffset?)root.Attribute("Att");  
Console.WriteLine("Nullable DateTimeOffset: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root  
        Att=<%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %>/>  
Dim value As Nullable(Of DateTimeOffset) = CType(root.Attribute("Att"), Nullable(Of DateTimeOffset))  
Console.WriteLine("Nullable DateTimeOffset: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-276">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-276">This example produces the following output:</span></span>  
  
```  
Nullable DateTimeOffset: value=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-277">属性不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-277">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-278">要强制转换为 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-278">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-279">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-279">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-280">一个 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-280">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-281">下面的示例创建具有十进制内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-281">The following example creates an attribute with decimal content.</span></span> <span data-ttu-id="00977-282">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="00977-282">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Attribute("Att");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="79228162514264337593543950335"/>  
Dim value As Nullable(Of Decimal) = CType(root.Attribute("Att"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-283">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-283">This example produces the following output:</span></span>  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-284">属性不包含有效的 <see cref="T:System.Decimal" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-284">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-285">要强制转换为 <see cref="T:System.Double" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-285">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-286">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Double" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-286">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-287">一个 <see cref="T:System.Double" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-287">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-288">下面的示例创建具有双精度浮点数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-288">The following example creates an attribute with double precision floating point content.</span></span> <span data-ttu-id="00977-289">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="00977-289">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 1.79769313486231e308)  
);  
double? value = (double?)root.Attribute("Att");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="1.79769313486231E+308"/>  
Dim value As Nullable(Of Double) = CType(root.Attribute("Att"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-290">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-290">This example produces the following output:</span></span>  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-291">属性不包含有效的 <see cref="T:System.Double" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-291">The attribute does not contain a valid <see cref="T:System.Double" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-292">要强制转换为 <see cref="T:System.Guid" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-292">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-293">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Guid" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-293">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-294">一个 <see cref="T:System.Guid" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-294">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-295">下面的示例创建具有 guid 内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-295">The following example creates an attribute with guid content.</span></span> <span data-ttu-id="00977-296">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.Guid>。</span><span class="sxs-lookup"><span data-stu-id="00977-296">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Attribute("Att");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %>/>  
Dim value As Nullable(Of Guid) = CType(root.Attribute("Att"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-297">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-297">This example produces the following output:</span></span>  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-298">属性不包含有效的 <see cref="T:System.Guid" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-298">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-299">要强制转换为 <see cref="T:System.Int32" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-299">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-300">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Int32" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-300">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-301">一个 <see cref="T:System.Int32" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-301">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-302">下面的示例创建具有整数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-302">The following example creates an attribute with integer content.</span></span> <span data-ttu-id="00977-303">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="00977-303">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 2147483647)  
);  
int? value = (int?)root.Attribute("Att");  
Console.WriteLine("Nullable int: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="2147483647"/>  
Dim value As Nullable(Of Integer) = CType(root.Attribute("Att"), Nullable(Of Integer))  
Console.WriteLine("Nullable int: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-304">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-304">This example produces the following output:</span></span>  
  
```  
Nullable int: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-305">要强制转换为 <see cref="T:System.Int64" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-305">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-306">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Int64" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-306">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-307">一个 <see cref="T:System.Int64" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-307">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-308">下面的示例创建具有长整型内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-308">The following example creates an attribute with long integer content.</span></span> <span data-ttu-id="00977-309">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="00977-309">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 9223372036854775807)  
);  
long? value = (long?)root.Attribute("Att");  
Console.WriteLine("Nullable long: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="9223372036854775807"/>  
Dim value As Nullable(Of Long) = CType(root.Attribute("Att"), Nullable(Of Long))  
Console.WriteLine("Nullable long: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-310">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-310">This example produces the following output:</span></span>  
  
```  
Nullable long: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-311">属性不包含有效的 <see cref="T:System.Int64" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-311">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-312">要强制转换为 <see cref="T:System.Single" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-312">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-313">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Single" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-313">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-314">一个 <see cref="T:System.Single" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-314">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-315">下面的示例创建具有单精度浮点数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-315">The following example creates an attribute with single precision floating point content.</span></span> <span data-ttu-id="00977-316">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="00977-316">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 3.402823e38)  
);  
float? value = (float?)root.Attribute("Att");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="3.402823E+38"/>  
Dim value As Nullable(Of Single) = CType(root.Attribute("Att"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-317">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-317">This example produces the following output:</span></span>  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-318">属性不包含有效的 <see cref="T:System.Single" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-318">The attribute does not contain a valid <see cref="T:System.Single" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-319">要强制转换为 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-319">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-320">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-320">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-321">一个 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-321">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-322">某个属性或包含时间跨度内容的元素值空间与 ISO 8601 中所述的持续时间内容紧密相关。</span><span class="sxs-lookup"><span data-stu-id="00977-322">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="00977-323">在创建某个属性或包含时间跨度内容的元素时，请按照 W3C 规范格式化的属性或元素值。</span><span class="sxs-lookup"><span data-stu-id="00977-323">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="00977-324">请参阅更多详细信息的 W3C 规范。</span><span class="sxs-lookup"><span data-stu-id="00977-324">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="00977-325">当强制转换为行为并不严格<xref:System.Nullable%601>的<xref:System.TimeSpan>从某个属性或元素。</span><span class="sxs-lookup"><span data-stu-id="00977-325">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="00977-326">即使未完全按照 W3C 规范格式化的属性或元素值，值适当地转换为<xref:System.Nullable%601>的<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="00977-326">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  

## Examples  
 <span data-ttu-id="00977-327">下面的示例将创建具有时间跨度内容属性</span><span class="sxs-lookup"><span data-stu-id="00977-327">The following example creates an attribute with time span content.</span></span> <span data-ttu-id="00977-328">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="00977-328">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Attribute("Att");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New TimeSpan(1, 5, 30) %>/>  
Dim value As Nullable(Of TimeSpan) = CType(root.Attribute("Att"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-329">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-329">This example produces the following output:</span></span>  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-330">属性不包含有效的 <see cref="T:System.TimeSpan" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-330">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-331">要强制转换为 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-331">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-332">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-332">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-333">一个 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-333">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-334">下面的示例创建具有无符号的整数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-334">The following example creates an attribute with unsigned integer content.</span></span> <span data-ttu-id="00977-335">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.UInt32>。</span><span class="sxs-lookup"><span data-stu-id="00977-335">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 4294967295)  
);  
uint? value = (uint?)root.Attribute("Att");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="4294967295"/>  
Dim value As Nullable(Of UInteger) = CType(root.Attribute("Att"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-336">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-336">This example produces the following output:</span></span>  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-337">属性不包含有效的 <see cref="T:System.UInt32" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-337">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-338">要强制转换为 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-338">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-339">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Nullable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-339">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-340">一个 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-340">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-341">下面的示例创建具有无符号长整数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-341">The following example creates an attribute with unsigned long integer content.</span></span> <span data-ttu-id="00977-342">然后检索的值通过强制转换为<xref:System.Nullable%601>的<xref:System.UInt64>。</span><span class="sxs-lookup"><span data-stu-id="00977-342">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Attribute("Att");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="9223372036854775807"/>  
Dim value As Nullable(Of ULong) = CType(root.Attribute("Att"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="00977-343">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-343">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-344">属性不包含有效的 <see cref="T:System.UInt64" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-344">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-345">要强制转换为 <see cref="T:System.Single" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-345">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Single" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-346">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.Single" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-346">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Single" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-347">一个 <see cref="T:System.Single" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-347">A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-348">下面的示例创建具有单精度浮点数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-348">The following example creates an attribute with single precision floating point content.</span></span> <span data-ttu-id="00977-349">然后检索的值通过强制转换为<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="00977-349">It then retrieves the value by casting to <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 3.402823e38)  
);  
float value = (float)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="3.402823E+38"/>  
Dim value As Single = CSng(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-350">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-350">This example produces the following output:</span></span>  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-351">属性不包含有效的 <see cref="T:System.Single" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-351">The attribute does not contain a valid <see cref="T:System.Single" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-352">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-352">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-353">要强制转换为 <see cref="T:System.String" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-353">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-354">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-354">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-355">一个 <see cref="T:System.String" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-355">A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-356">下面的示例创建具有字符串内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-356">The following example creates an attribute with string content.</span></span> <span data-ttu-id="00977-357">然后检索的值通过强制转换为<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="00977-357">It then retrieves the value by casting to <xref:System.String>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = root.Attribute("Att");  
string str = (string)att;  
Console.WriteLine("(string)att={0}", str);  
```  
  
```vb  
Dim root As XElement = <Root Att="attribute content"/>  
Dim att As XAttribute = root.Attribute("Att")  
Dim str As String = CStr(att)  
Console.WriteLine("(string)att={0}", str)  
```  
  
 <span data-ttu-id="00977-358">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-358">This example produces the following output:</span></span>  
  
```  
(string)att=attribute content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XAttribute.ToString" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-359">要强制转换为 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-359">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.TimeSpan" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-360">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-360">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.TimeSpan" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-361">一个 <see cref="T:System.TimeSpan" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-361">A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-362">某个属性或包含时间跨度内容的元素值空间与 ISO 8601 中所述的持续时间内容紧密相关。</span><span class="sxs-lookup"><span data-stu-id="00977-362">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="00977-363">在创建某个属性或包含时间跨度内容的元素时，请按照 W3C 规范格式化的属性或元素值。</span><span class="sxs-lookup"><span data-stu-id="00977-363">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="00977-364">请参阅更多详细信息的 W3C 规范。</span><span class="sxs-lookup"><span data-stu-id="00977-364">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="00977-365">当强制转换为行为并不严格<xref:System.TimeSpan>从某个属性或元素。</span><span class="sxs-lookup"><span data-stu-id="00977-365">Behavior is lax when casting to a <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="00977-366">即使未完全按照 W3C 规范格式化的属性或元素值，值适当地转换为<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="00977-366">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.TimeSpan>.</span></span>  

## Examples  
 <span data-ttu-id="00977-367">下面的示例将创建具有时间跨度内容属性</span><span class="sxs-lookup"><span data-stu-id="00977-367">The following example creates an attribute with time span content.</span></span> <span data-ttu-id="00977-368">然后检索的值通过强制转换为<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="00977-368">It then retrieves the value by casting to <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new TimeSpan(1, 5, 30))  
);  
TimeSpan value = (TimeSpan)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New TimeSpan(1, 5, 30) %>/>  
Dim value As TimeSpan = CType(root.Attribute("Att"), TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-369">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-369">This example produces the following output:</span></span>  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-370">属性不包含有效的 <see cref="T:System.TimeSpan" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-370">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-371">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-371">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-372">要强制转换为 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-372">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-373">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.UInt32" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-373">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-374">一个 <see cref="T:System.UInt32" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-374">A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-375">下面的示例创建具有无符号的整数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-375">The following example creates an attribute with unsigned integer content.</span></span> <span data-ttu-id="00977-376">然后检索的值通过强制转换为<xref:System.UInt32>。</span><span class="sxs-lookup"><span data-stu-id="00977-376">It then retrieves the value by casting to <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 4294967295)  
);  
uint value = (uint)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="4294967295"/>  
Dim value As UInteger = CUInt(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-377">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-377">This example produces the following output:</span></span>  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-378">属性不包含有效的 <see cref="T:System.UInt32" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-378">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-379">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-379">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="00977-380">要强制转换为 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-380">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-381">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.UInt64" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-381">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-382">一个 <see cref="T:System.UInt64" />，其中包含此 <see cref="T:System.Xml.Linq.XAttribute" /> 的内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-382">A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="00977-383">下面的示例创建具有无符号长整数内容的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-383">The following example creates an attribute with unsigned long integer content.</span></span> <span data-ttu-id="00977-384">然后检索的值通过强制转换为<xref:System.UInt64>。</span><span class="sxs-lookup"><span data-stu-id="00977-384">It then retrieves the value by casting to <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 1844674407370955161)  
);  
ulong value = (ulong)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="1844674407370955161"/>  
Dim value As ULong = CULng(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="00977-385">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-385">This example produces the following output:</span></span>  
  
```  
value=1844674407370955161  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="00977-386">属性不包含有效的 <see cref="T:System.UInt64" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-386">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-387">
            <paramref name="attribute" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-387">The <paramref name="attribute" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}" />
      </Docs>
    </Member>
    <Member MemberName="PreviousAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute PreviousAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute PreviousAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.PreviousAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ PreviousAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00977-388">获取父元素的上一个属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-388">Gets the previous attribute of the parent element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00977-389">一个包含父元素的上一个属性 (Attribute) 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-389">An <see cref="T:System.Xml.Linq.XAttribute" /> containing the previous attribute of the parent element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-390">属性保留的 XML 树中它们添加到元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="00977-390">Attributes are maintained in the XML tree in the order that they were added to the element.</span></span> <span data-ttu-id="00977-391">当通过返回的属性的集合时<xref:System.Xml.Linq.XElement.Attributes%2A>，它们已添加，并且未排序顺序返回它们。</span><span class="sxs-lookup"><span data-stu-id="00977-391">When a collection of attributes is returned by <xref:System.Xml.Linq.XElement.Attributes%2A>, they are returned in the order that they were added, and are not sorted.</span></span> <span data-ttu-id="00977-392">当请求通过此属性的上一个特性时，此属性将返回之前此属性已添加的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-392">When you request the previous attribute through this property, this property returns the attribute that was added before this attribute.</span></span>  
  
 <span data-ttu-id="00977-393">如果此属性没有父级，或者如果此属性是第一个属性，则此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="00977-393">If this attribute does not have a parent, or if this attribute is the first attribute, then this property returns `null`.</span></span>  
  
 <span data-ttu-id="00977-394"><xref:System.Xml.Linq.XElement>类将其属性存储为单向链接列表的<xref:System.Xml.Linq.XAttribute>对象。</span><span class="sxs-lookup"><span data-stu-id="00977-394">The <xref:System.Xml.Linq.XElement> class stores its attributes as a singly-linked list of <xref:System.Xml.Linq.XAttribute> objects.</span></span> <span data-ttu-id="00977-395">这意味着，<xref:System.Xml.Linq.XAttribute.PreviousAttribute%2A>属性必须遍历属于元素的属性的列表。</span><span class="sxs-lookup"><span data-stu-id="00977-395">This means that the <xref:System.Xml.Linq.XAttribute.PreviousAttribute%2A> property must traverse the list of attributes that belong to the element.</span></span> <span data-ttu-id="00977-396">因此，使用此属性，这种情况可能会影响你的性能。</span><span class="sxs-lookup"><span data-stu-id="00977-396">Therefore, using this property might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-397">下面的示例演示如何循环访问使用此属性的元素的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-397">The following example shows how to iterate through the attributes of an element using this property.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XAttribute("Att4", 4)  
);  
XAttribute att = root.LastAttribute;  
do {  
    Console.WriteLine(att);  
}  
while((att = att.PreviousAttribute) != null);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3" Att4="4"/>  
Dim att As XAttribute = root.LastAttribute  
Dim val As Boolean = True  
Do  
    Console.WriteLine(att)  
    att = att.PreviousAttribute  
Loop While (Not (att Is Nothing))  
```  
  
 <span data-ttu-id="00977-398">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-398">This example produces the following output:</span></span>  
  
```  
Att4="4"  
Att3="3"  
Att2="2"  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XAttribute.NextAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00977-399">将此属性从父元素中移除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-399">Removes this attribute from its parent element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-400">此方法可用于修改 XML 树。</span><span class="sxs-lookup"><span data-stu-id="00977-400">You can use this method to modify an XML tree.</span></span> <span data-ttu-id="00977-401">此方法将导致事件发生。</span><span class="sxs-lookup"><span data-stu-id="00977-401">This method will cause events to occur.</span></span>  
  
 <span data-ttu-id="00977-402">有很多情况下在其中你可能想要删除的一组属性。</span><span class="sxs-lookup"><span data-stu-id="00977-402">There are many scenarios in which you might want to remove a set of attributes.</span></span> <span data-ttu-id="00977-403">在[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]编程，你不应操作或修改的一组节点时进行查询的该组中的节点。</span><span class="sxs-lookup"><span data-stu-id="00977-403">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set.</span></span> <span data-ttu-id="00977-404">实际上，这意味着你不应循环访问一组属性并将其删除。</span><span class="sxs-lookup"><span data-stu-id="00977-404">In practical terms, this means that you should not iterate over a set of attributes and remove them.</span></span> <span data-ttu-id="00977-405">相反，你应将其具体化为<xref:System.Collections.Generic.List%601>使用<xref:System.Linq.Enumerable.ToList%2A>扩展方法。</span><span class="sxs-lookup"><span data-stu-id="00977-405">Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> using the <xref:System.Linq.Enumerable.ToList%2A> extension method.</span></span> <span data-ttu-id="00977-406">然后循环访问列表中，并删除的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-406">Then you can iterate over the list, removing the attributes.</span></span> <span data-ttu-id="00977-407">有关详细信息，请参阅[混合声明性代码/强制性代码 Bug (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)。</span><span class="sxs-lookup"><span data-stu-id="00977-407">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
 <span data-ttu-id="00977-408">或者，如果你想要删除的一组特性，建议你使用<xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="00977-408">Alternatively, if you want to remove a set of attributes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="00977-409">此方法将这些属性复制到列表中，然后循环访问列表中，删除的属性。</span><span class="sxs-lookup"><span data-stu-id="00977-409">This method copies the attributes to a list, then iterates over the list, removing the attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-410">下面的示例创建具有三个特性的元素。</span><span class="sxs-lookup"><span data-stu-id="00977-410">The following example creates an element with three attributes.</span></span> <span data-ttu-id="00977-411">它然后删除其中一个特性。</span><span class="sxs-lookup"><span data-stu-id="00977-411">It then removes one of the attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XAttribute("Att3", "content3")  
);  
XAttribute att = root.Attribute("Att2");  
att.Remove();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="content1" Att2="content2" Att3="content3"/>  
Dim att As XAttribute = root.Attribute("Att2")  
att.Remove()  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="00977-412">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-412">This example produces the following output:</span></span>  
  
```  
<Root Att1="content1" Att3="content3" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00977-413">父元素为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-413">The parent element is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00977-414">分配到此属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-414">The value to assign to this attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00977-415">设置此属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-415">Sets the value of this attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-416">将值转换为其字符串表示形式，并将此值分配给 <xref:System.Xml.Linq.XAttribute.Value%2A> 属性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="00977-416">The value is converted to its string representation and assigned to the <xref:System.Xml.Linq.XAttribute.Value%2A> property.</span></span>  
  
 <span data-ttu-id="00977-417">是无效将派生自的类的实例传递<xref:System.Xml.Linq.XObject>，如<xref:System.Xml.Linq.XElement>或<xref:System.Xml.Linq.XAttribute>。</span><span class="sxs-lookup"><span data-stu-id="00977-417">It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute>.</span></span>  
  
 <span data-ttu-id="00977-418">此方法将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="00977-418">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-419">下面的示例创建具有多个属性的元素。</span><span class="sxs-lookup"><span data-stu-id="00977-419">The following example creates an element with several attributes.</span></span> <span data-ttu-id="00977-420">然后将它更改其中一个特性的内容。</span><span class="sxs-lookup"><span data-stu-id="00977-420">It then changes the contents of one of the attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XAttribute("Att3", "content3")  
);  
XAttribute att = root.Attribute("Att2");  
att.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="content1" Att2="content2" Att3="content3"/>  
Dim att As XAttribute = root.Attribute("Att2")  
att.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="00977-421">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-421">This example produces the following output:</span></span>  
  
```  
<Root Att1="content1" Att2="new content" Att3="content3" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-422">
            <paramref name="value" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-422">The <paramref name="value" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00977-423">
            <paramref name="value" /> 是一个 <see cref="T:System.Xml.Linq.XObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-423">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00977-424">将当前的 <see cref="T:System.Xml.Linq.XAttribute" /> 对象转换为字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-424">Converts the current <see cref="T:System.Xml.Linq.XAttribute" /> object to a string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00977-425">一个 <see cref="T:System.String" />，其中包含一个属性及其值的 XML 文本表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-425">A <see cref="T:System.String" /> containing the XML text representation of an attribute and its value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-426">此方法返回的字符串的形式`AttributeName="content"`。</span><span class="sxs-lookup"><span data-stu-id="00977-426">This method returns a string in the form of `AttributeName="content"`.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="00977-427">当调用此方法和<xref:System.Xml.Linq.XAttribute>包含控制字符，与类似这样的消息将引发异常： 十六进制值 0x0B，是个无效字符。</span><span class="sxs-lookup"><span data-stu-id="00977-427">When this method is called and <xref:System.Xml.Linq.XAttribute> contains control character, an exception is thrown with a message like: hexadecimal value 0x0B, is an invalid character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-428">下面的示例创建具有多个属性的元素。</span><span class="sxs-lookup"><span data-stu-id="00977-428">The following example creates an element with several attributes.</span></span> <span data-ttu-id="00977-429">然后，获取属性，并通过调用此方法显示它和其内容。</span><span class="sxs-lookup"><span data-stu-id="00977-429">It then gets an attribute and displays it and its content by calling this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XAttribute("Att3", "content3")  
);  
XAttribute att = root.Attribute("Att2");  
Console.WriteLine(att.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att1="content1" Att2="content2" Att3="content3"/>  
Dim att As XAttribute = root.Attribute("Att2")  
Console.WriteLine(att.ToString())  
```  
  
 <span data-ttu-id="00977-430">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-430">This example produces the following output:</span></span>  
  
```  
Att2="content2"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00977-431">获取或设置此属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-431">Gets or sets the value of this attribute.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00977-432">包含此属性的值的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-432">A <see cref="T:System.String" /> containing the value of this attribute.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00977-433">此属性可用于获取或设置属性的值。</span><span class="sxs-lookup"><span data-stu-id="00977-433">You can use this property to get or set the value of an attribute.</span></span>  
  
 <span data-ttu-id="00977-434">设置此属性将引发<xref:System.Xml.Linq.XObject.Changed>和<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="00977-434">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="00977-435">如果正在获取的值和属性可能不存在，则更方便地使用显式转换运算符，并将该属性分配为 null 的类型如`string`或<xref:System.Nullable%601>的<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="00977-435">If you are getting the value and the attribute might not exist, it is more convenient to use the explicit conversion operators, and assign the attribute to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>.</span></span> <span data-ttu-id="00977-436">如果该属性不存在，则可以为 null 的类型设置为`null`。</span><span class="sxs-lookup"><span data-stu-id="00977-436">If the attribute does not exist, then the nullable type is set to `null`.</span></span> <span data-ttu-id="00977-437">使用此属性之前，必须确保<xref:System.Xml.Linq.XElement.Attribute%2A>方法不返回`null`。</span><span class="sxs-lookup"><span data-stu-id="00977-437">Before using this property, you must make sure that the <xref:System.Xml.Linq.XElement.Attribute%2A> method does not return `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00977-438">下面的示例创建具有属性的元素。</span><span class="sxs-lookup"><span data-stu-id="00977-438">The following example creates an element with an attribute.</span></span> <span data-ttu-id="00977-439">它然后检索属性的值，然后设置它。</span><span class="sxs-lookup"><span data-stu-id="00977-439">It then retrieves the value of the attribute, and then sets it.</span></span>  
  
 <span data-ttu-id="00977-440">请注意 Visual Basic 示例使用 XML 特性属性。</span><span class="sxs-lookup"><span data-stu-id="00977-440">Note that the Visual Basic example uses the XML attribute property.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "content")  
);  
XAttribute att = root.FirstAttribute;  
Console.WriteLine(att.Value);  
att.Value = "new text";  
Console.WriteLine(att.Value);  
```  
  
```vb  
Dim root As XElement = <Root Att="content"/>  
Console.WriteLine(root.@Att)  
root.@Att = "new text"  
Console.WriteLine(root.@Att)  
```  
  
 <span data-ttu-id="00977-441">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-441">This example produces the following output:</span></span>  
  
```  
content  
new text  
```  
  
 <span data-ttu-id="00977-442">下面的示例演示使用显式转换运算符来获取可能不存在的属性的值的优点：</span><span class="sxs-lookup"><span data-stu-id="00977-442">The following example shows the benefit of using the explicit conversion operators to get the value of an attribute that might not exist:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "attribute 1 content"),  
    new XAttribute("Att2", "2")  
);  
  
// The following assignments demonstrate why it is easier to use  
// casting when the attribute might or might not exist.  
  
string c1 = (string)root.Attribute("Att1");  
Console.WriteLine("c1:{0}", c1 == null ? "attribute does not exist" : c1);  
  
int? c2 = (int?)root.Attribute("Att2");  
Console.WriteLine("c2:{0}", c2 == null ? "attribute does not exist" : c2.ToString());  
  
string c3 = (string)root.Attribute("Att3");  
Console.WriteLine("c3:{0}", c3 == null ? "attribute does not exist" : c3);  
  
int? c4 = (int?)root.Attribute("Att4");  
Console.WriteLine("c4:{0}", c4 == null ? "attribute does not exist" : c4.ToString());  
  
Console.WriteLine();  
  
// The following assignments show the necessary code when using  
// the value property when the attribute might or might not exist.  
  
XAttribute att1 = root.Attribute("Att1");  
string v1;  
if (att1 == null)  
    v1 = null;  
else  
    v1 = att1.Value;  
Console.WriteLine("v1:{0}", v1 == null ? "attribute does not exist" : v1);  
  
XAttribute att2 = root.Attribute("Att2");  
int? v2;  
if (att2 == null)  
    v2 = null;  
else  
    v2 = Int32.Parse(att2.Value);  
Console.WriteLine("v2:{0}", v2 == null ? "attribute does not exist" : v2.ToString());  
  
XAttribute att3 = root.Attribute("Att3");  
string v3;  
if (att3 == null)  
    v3 = null;  
else  
    v3 = att3.Value;  
Console.WriteLine("v3:{0}", v3 == null ? "attribute does not exist" : v3);  
  
XAttribute att4 = root.Attribute("Att4");  
int? v4;  
if (att4 == null)  
    v4 = null;  
else  
    v4 = Int32.Parse(att4.Value);  
Console.WriteLine("v4:{0}", v4 == null ? "attribute does not exist" : v4.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att1="attribute 1 content" Att2="2"/>  
  
' The following assignments demonstrate why it is easier to use  
' casting when the attribute might or might not exist.  
  
Dim c1 As String = CStr(root.Attribute("Att1"))  
Console.WriteLine("c1:{0}", IIf(c1 Is Nothing, "attribute does not exist", c1))  
  
Dim c2 As Nullable(Of Integer) = CType(root.Attribute("Att2"), Nullable(Of Integer))  
Console.WriteLine("c2:{0}", IIf(c2.HasValue, c2, "attribute does not exist"))  
  
Dim c3 As String = CStr(root.Attribute("Att3"))  
Console.WriteLine("c3:{0}", IIf(c3 Is Nothing, "attribute does not exist", c3))  
  
Dim c4 As Nullable(Of Integer) = CType(root.Attribute("Att4"), Nullable(Of Integer))  
Console.WriteLine("c4:{0}", IIf(c4.HasValue, c4, "attribute does not exist"))  
  
Console.WriteLine()  
  
' The following assignments show the necessary code when using  
' the value property when the attribute might or might not exist.  
  
Dim att1 As XAttribute = root.Attribute("Att1")  
Dim v1 As String  
If att1 Is Nothing Then  
    v1 = Nothing  
Else  
    v1 = att1.Value  
End If  
  
Console.WriteLine("v1:{0}", IIf(v1 Is Nothing, "attribute does not exist", v1))  
  
Dim att2 As XAttribute = root.Attribute("Att2")  
Dim v2 As Nullable(Of Integer)  
If att2 Is Nothing Then  
    v2 = Nothing  
Else  
    v2 = Int32.Parse(att2.Value)  
End If  
  
Console.WriteLine("v2:{0}", IIf(v2.HasValue, v2, "attribute does not exist"))  
  
Dim att3 As XAttribute = root.Attribute("Att3")  
Dim v3 As String  
If att3 Is Nothing Then  
    v3 = Nothing  
Else  
    v3 = att3.Value  
End If  
  
Console.WriteLine("v3:{0}", IIf(v3 Is Nothing, "attribute does not exist", v3))  
  
Dim att4 As XAttribute = root.Attribute("Att4")  
Dim v4 As Nullable(Of Integer)  
If att4 Is Nothing Then  
    v4 = Nothing  
Else  
    v4 = Int32.Parse(att4.Value)  
End If  
  
Console.WriteLine("v4:{0}", IIf(v4.HasValue, v4, "attribute does not exist"))  
```  
  
 <span data-ttu-id="00977-443">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="00977-443">This example produces the following output:</span></span>  
  
```  
c1:attribute 1 content  
c2:2  
c3:attribute does not exist  
c4:attribute does not exist  
  
v1:attribute 1 content  
v2:2  
v3:attribute does not exist  
v4:attribute does not exist  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00977-444">设置时，<paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00977-444">When setting, the <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="M:System.Xml.Linq.XAttribute.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>