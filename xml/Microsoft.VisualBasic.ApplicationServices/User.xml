<Type Name="User" FullName="Microsoft.VisualBasic.ApplicationServices.User">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f77fd2917800e7f15fa7fb160d23edf74c600a8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36661083" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class User" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi User extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.User" />
  <TypeSignature Language="VB.NET" Value="Public Class User" />
  <TypeSignature Language="C++ CLI" Value="public ref class User" />
  <TypeSignature Language="F#" Value="type User = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供对有关当前用户的信息的访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性和方法公开的`My.User`对象提供对有关当前用户的信息的访问。 Windows 和 Web 应用程序之间，"当前用户"的含义略有不同。 在 Windows 应用中，当前用户是运行应用程序的用户。 在 Web 应用程序中，当前用户是访问该应用程序的用户。  
  
 `My.User`属性还提供对访问<xref:System.Security.Principal.IPrincipal>为当前用户。 主体对象表示用户的安全上下文，包括该用户的标识和用户属于任何角色。  
  
 对于 Windows 应用程序，此属性提供相同的功能<xref:System.Threading.Thread.CurrentPrincipal%2A>属性。 对于 Web 应用程序，此属性提供相同的功能<xref:System.Web.HttpContext.User%2A>属性返回的对象<xref:System.Web.HttpContext.Current%2A>属性。  
  
> [!NOTE]
>  对于 Windows 应用程序，只有项目基于**Windows 应用程序**模板初始化`My.User`默认情况下的对象。 在所有其他 Windows 项目类型中，你必须初始化`My.User`对象通过调用<xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>方法显式或分配到的值<xref:System.Threading.Thread.CurrentPrincipal%2A>。  
  
> [!NOTE]
>  `My.User`对象无法报告有关当前 Windows 用户在 Windows 95 和 Windows 98 下时运行，因为这些操作系统不支持登录的用户的概念的信息。 必须实现自定义身份验证用于`My.User`这些操作系统上的对象。  
  
   
  
## Examples  
 此示例检查是否应用程序正在使用 Windows 或自定义身份验证，并使用该信息来分析`My.User.Name`属性。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Principal.IPrincipal" />
    <altmember cref="P:System.Threading.Thread.CurrentPrincipal" />
    <altmember cref="P:System.Web.HttpContext.User" />
    <altmember cref="P:System.Web.HttpContext.Current" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public User ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; User();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.User" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性和方法公开的`My.User`对象提供对有关当前用户的信息的访问。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前主体（对基于角色的安全性而言）。</summary>
        <value>一个 <see cref="T:System.Security.Principal.IPrincipal" /> 值，表示安全上下文。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以设置`My.User.CurrentPrincipal`实现的对象属性<xref:System.Security.Principal.IPrincipal>界面，以启用自定义身份验证。  
  
 在大多数项目类型中，此属性获取和设置线程的当前负责人。 在 ASP.NET 应用程序，此属性会获取和设置当前 HTTP 请求的用户标识的安全信息。  
  
 这是一个高级的成员;除非你单击不显示在 IntelliSense 中**所有**选项卡。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|**是**|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例检查是否应用程序正在使用 Windows 或自定义身份验证，并使用该信息来分析`My.User.Name`属性。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">调用方没有设置该主体所需的权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一组应用于代码的安全权限。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
        <altmember cref="T:System.Security.Principal.IPrincipal" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithWindowsUser">
      <MemberSignature Language="C#" Value="public void InitializeWithWindowsUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void InitializeWithWindowsUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeWithWindowsUser ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeWithWindowsUser();" />
      <MemberSignature Language="F#" Value="member this.InitializeWithWindowsUser : unit -&gt; unit" Usage="user.InitializeWithWindowsUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将线程的当前主体设置为启动应用程序的 Windows 用户。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用`My.User.InitializeWithWindowsUser`方法以向 Windows 用户启动了应用程序中设置线程的当前负责人。 Windows 应用程序中的 Visual Basic 应用程序模型默认情况下，在启动时调用此方法。 在其他项目类型，你必须设置线程的当前主体，通过显式调用此方法或分配到的值<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>。  
  
 在 Windows 项目中，`My.User`对象基于线程的当前负责人; 因此，此方法可以更改的信息`My.User`返回。 ASP.NET 应用程序中`My.User`对象基于当前 HTTP 请求的用户标识，并且不受此方法。  
  
> [!NOTE]
>  具体的行为的`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。  
  
 这是一个高级的成员;除非你单击不显示在 IntelliSense 中**所有**选项卡。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|**是**|  
|Windows 服务|**是**|  
|网站|**是**|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一组应用于代码的安全权限。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="InternalPrincipal">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal InternalPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property InternalPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::Principal::IPrincipal ^ InternalPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InternalPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示当前用户的主体对象。</summary>
        <value>一个表示当前用户的 <see cref="T:System.Security.Principal.IPrincipal" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:Microsoft.VisualBasic.ApplicationServices.User>对象中，此属性包装<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性。 重写此方法在派生类来提供不同的行为。 例如，<xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=nameWithType>属性重写此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否验证了用户。</summary>
        <value>如果用户已经过验证，则为 <see langword="True" />；否则为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsAuthenticated`属性允许你的代码以确定当前用户已经过身份验证。  
  
> [!NOTE]
>  具体的行为的`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|**是**|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例验证已经过用户身份验证访问资源之前。  
  
 [!code-vb[VbVbalrMyUser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一组应用于代码的安全权限。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsInRole">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定当前用户是否属于指定的角色。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(valuetype Microsoft.VisualBasic.ApplicationServices.BuiltInRole role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As BuiltInRole) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(Microsoft::VisualBasic::ApplicationServices::BuiltInRole role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : Microsoft.VisualBasic.ApplicationServices.BuiltInRole -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Parameters>
      <Docs>
        <param name="role">要检查其成员资格的内置 Windows 角色。</param>
        <summary>确定当前用户是否属于指定的角色。</summary>
        <returns>如果当前用户是指定角色的成员，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsInRole`方法允许你的代码以确定当前用户是否指定角色的成员。  
  
 重载`My.User.IsInRole`采用字符串的方法提供轻松访问<xref:System.Security.Principal.IPrincipal.IsInRole%2A>的当前主体的方法。  
  
 重载`My.User.IsInRole`采用的方法`BuiltInRole`枚举的行为不同，具体取决于当前的主体。 如果它是一个 Windows 用户主体 (<xref:System.Security.Principal.WindowsPrincipal>)，此函数将转换`role`为等效<xref:System.Security.Principal.WindowsBuiltInRole>枚举并返回调用的结果<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>。 如果当前的主体是任何其他主体，此函数将传递中的枚举值的名称`role`给该主体的<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。  
  
> [!NOTE]
>  具体的行为的`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|**是**|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例检查用户是否是管理员在访问资源之前。  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一组应用于代码的安全权限。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (string role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(System::String ^ role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : string -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="role">要检查其成员资格的角色的名称。</param>
        <summary>确定当前用户是否属于指定的角色。</summary>
        <returns>如果当前用户是指定角色的成员，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsInRole`方法允许你的代码以确定当前用户是否指定角色的成员。  
  
 重载`My.User.IsInRole`采用字符串的方法提供轻松访问<xref:System.Security.Principal.IPrincipal.IsInRole%2A>的当前主体的方法。  
  
 重载`My.User.IsInRole`采用的方法`BuiltInRole`枚举的行为不同，具体取决于当前的主体。 如果它是一个 Windows 用户主体 (<xref:System.Security.Principal.WindowsPrincipal>)，此函数将转换`role`为等效<xref:System.Security.Principal.WindowsBuiltInRole>枚举并返回调用的结果<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>。 如果当前的主体是任何其他主体，此函数将传递中的枚举值的名称`role`给该主体的<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。  
  
> [!NOTE]
>  具体的行为的`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|**是**|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例检查用户是否是管理员在访问资源之前。  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一组应用于代码的安全权限。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前用户的名称。</summary>
        <value>
          <see langword="String" />。 当前用户的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用`My.User`对象以获取有关当前用户的信息。  
  
 用户进行身份验证的主体还控制的用户名称的格式。 默认情况下，应用程序使用 Windows 身份验证，并且用户名称域 \ 用户名格式。 主体的自定义实现不一定使用相同的格式。  
  
> [!NOTE]
>  `My.User.Name`属性返回一个空字符串，当运行在 Windows 95 和 Windows 98，因为这些操作系统不能识别用户名。  
  
> [!NOTE]
>  具体的行为的`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|**是**|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例检查是否应用程序正在使用 Windows 或自定义身份验证，并使用该信息来分析`My.User.Name`属性。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一组应用于代码的安全权限。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
  </Members>
</Type>