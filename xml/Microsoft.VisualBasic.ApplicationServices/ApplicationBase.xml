<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="55884720d3b7799efefdd39219c90718bddd44db" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36729700" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <TypeSignature Language="F#" Value="type ApplicationBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供与当前应用程序相关的属性、方法和事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 公开的属性`My.Application`对象仅与当前应用程序或 DLL 相关联的返回数据。 无法使用 `My.Application` 更改任何系统级信息。  
  
 `My.Application` 对象由以下类组成：  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> 提供了所有项目中的可用成员。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 提供 Windows 窗体应用程序中可用的成员。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> 提供控制台应用程序中可用的成员。  
  
   
  
## Examples  
 此示例使用`My.Application.GetEnvironmentVariable`方法以获取并显示路径环境变量的值，如果此值为可用。 否则，将显示一条消息，指示的 PATH 环境变量不存在。  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeCulture : string -&gt; unit" Usage="applicationBase.ChangeCulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />。 字符串形式的区域性名称。 有关可能名称的列表，请参见 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>更改当前线程用于字符串操作和字符串格式设置的区域性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.ChangeCulture`方法更改当前线程的<xref:System.Threading.Thread.CurrentCulture%2A>属性。 <xref:System.Threading.Thread.CurrentCulture%2A> 为日期、 时间、 货币、 数字、 文本、 字符串比较和用于该线程上的所有计算的大小写的排序顺序确定的默认格式。  
  
 若要检索的当前区域性，可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A>属性或<xref:System.Threading.Thread.CurrentCulture%2A>属性。  
  
 <xref:System.Threading.Thread.CurrentCulture%2A>设置是不同的语言设置。 它包含仅与地理区域的标准设置相关的数据。 因此，<xref:System.Threading.Thread.CurrentCulture%2A>到特定区域性或，才可以设置属性<xref:System.Globalization.CultureInfo.InvariantCulture%2A>。  
  
 使用`My.Application.ChangeUICulture`方法可以更改用于检索特定于区域性的资源使用当前线程的区域性。  
  
> [!IMPORTANT]
>  `My.Application.ChangeCulture`方法需要<xref:System.Security.Permissions.SecurityPermission>与<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread>设置。 由于与线程关联的安全状态，对线程进行操作很危险。 因此，应仅对可信的代码根据需要授予此权限。 无法更改在不完全受信任的代码中的线程的区域性。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例演示如何更改区域性更改的字符串表示形式日期。  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> 不是有效的区域性名称。</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeUICulture : string -&gt; unit" Usage="applicationBase.ChangeUICulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />。 字符串形式的区域性名称。 有关可能名称的列表，请参见 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>更改当前线程用来检索特定于区域性的资源的区域性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.ChangeUICulture`方法更改当前线程的<xref:System.Threading.Thread.CurrentUICulture%2A>属性。 <xref:System.Threading.Thread.CurrentUICulture%2A>属性确定的资源管理器使用的区域性和`My.Resources`对象; 它将使用此信息以在运行时查找查找区域性特定资源。  
  
 若要检索的当前 UI 区域性，可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A>属性或<xref:System.Threading.Thread.CurrentUICulture%2A>属性。  
  
 使用`My.Application.ChangeCulture`方法可以更改当前线程使用的字符串操作函数和字符串格式设置的区域性。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Application.ChangeUICulture`方法将区域性设置`My.Resources`对象将用于检索资源。  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 为此示例正常工作，你的应用程序必须具有名为字符串`Message`在应用程序的资源文件和应用程序应具有的资源文件，法语区域性版本`Resources.fr-FR.resx`。 有关详细信息，请参阅[如何： 添加或删除资源](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)。  
  
 如果应用程序不具有的资源文件，法语区域性版本`My.Resources`对象将从默认区域性资源文件中检索资源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> 不是有效的区域性名称。</exception>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前线程用于字符串操作和字符串格式设置的区域性。</summary>
        <value>一个 <see cref="T:System.Globalization.CultureInfo" /> 对象，它表示当前线程用于字符串操作和字符串格式设置的区域性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.CurrentCulture`属性可以获取<xref:System.Globalization.CultureInfo>当前线程使用的字符串操作函数和字符串格式设置的对象。 此对象在等同于由代码<xref:System.Threading.Thread.CurrentCulture%2A>属性，用于控制许多字符串相关的计算该线程上。 <xref:System.Threading.Thread.CurrentCulture%2A>属性确定的默认格式的日期、 时间、 货币和数字。 它还确定如何排序、 比较和利用字符串。  
  
 若要更改的区域性，可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A>方法或分配一个不同<xref:System.Globalization.CultureInfo>对象传递给<xref:System.Threading.Thread.CurrentCulture%2A>属性。  
  
 <xref:System.Threading.Thread.CurrentCulture%2A>设置是不同的语言设置。 它包含仅与地理区域的标准设置相关的数据。  
  
 使用`My.Application.CurrentUICulture`要获取当前线程使用来检索区域性特定资源的区域性属性。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例演示区域性如何影响日期的字符串表示。  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetEnvironmentVariable : string -&gt; string" Usage="applicationBase.GetEnvironmentVariable name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">一个 <see langword="String" />，包含环境变量名。</param>
        <summary>返回指定环境变量的值。</summary>
        <returns>一个 <see langword="String" />，包含名为 <paramref name="name" /> 的环境变量的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.GetEnvironmentVariable`方法返回具有名称的环境变量`name`。 此方法类似于是<xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType>，只不过此方法会引发异常，如果指定环境变量按`name`不存在。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Application.GetEnvironmentVariable`方法以获取并显示路径环境变量的值，如果可用。 否则，将显示一条消息指出的 PATH 环境变量不存在。  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 指定的环境变量不存在。</exception>
        <exception cref="T:System.Security.SecurityException">调用代码没有访问权限为 <see langword="Read" /> 的 <see cref="T:System.Security.Permissions.EnvironmentPermission" />。</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象提供用来获取有关应用程序的程序集的信息（如版本号、说明等等）的属性。</summary>
        <value>当前应用程序的 <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例使用`My.Application.Info.Version`属性来显示应用程序的版本。  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Log : Microsoft.VisualBasic.Logging.Log" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象提供用来将事件和异常信息写入应用程序的日志侦听器的属性和方法。</summary>
        <value>当前应用程序的 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 本示例将演示如何使用 `My.Application.Log.WriteEntry` 方法来记录跟踪信息。 有关详细信息，请参阅[如何： 编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前线程用来检索特定于区域性的资源的区域性。</summary>
        <value>一个 <see cref="T:System.Globalization.CultureInfo" /> 对象，它表示当前线程用来检索特定于区域性的资源的区域性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.CurrentUICulture`属性可以获取<xref:System.Globalization.CultureInfo>对象当前线程，使用用于检索特定于区域性的资源。 此对象在等同于由代码<xref:System.Threading.Thread.CurrentUICulture%2A>属性。 <xref:System.Threading.Thread.CurrentUICulture%2A>属性确定的资源管理器使用的区域性和`My.Resources`对象，它需要在运行时查找查找区域性特定资源的信息。  
  
 若要更改的区域性，可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>方法或分配一个不同<xref:System.Globalization.CultureInfo>对象传递给<xref:System.Threading.Thread.CurrentUICulture%2A>属性。  
  
 <xref:System.Threading.Thread.CurrentCulture%2A>设置是不同的语言设置。 它包含仅与地理区域的标准设置相关的数据。  
  
 使用`My.Application.CurrentCulture`要获取当前线程使用的字符串操作函数和字符串格式设置的区域性属性。  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用`My.Application.CurrentCulture`属性，然后再更改通过使用缓存的当前区域性<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>。 `My.Application.ChangeUICulture`方法设置的区域性`My.Resources`对象将用于检索资源。  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 为此示例正常工作，你的应用程序必须具有名为字符串`Message`在应用程序的资源文件和应用程序应具有的资源文件，法语区域性版本`Resources.fr-FR.resx`。 有关详细信息，请参阅[如何： 添加或删除资源](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)。  
  
 如果应用程序不具有的资源文件，法语区域性版本`My.Resources`对象将从默认区域性资源文件中检索资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
      </Docs>
    </Member>
  </Members>
</Type>