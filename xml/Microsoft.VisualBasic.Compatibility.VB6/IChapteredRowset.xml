<Type Name="IChapteredRowset" FullName="Microsoft.VisualBasic.Compatibility.VB6.IChapteredRowset">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eae7a04cdc8a71e026b755438f7dbe9295ef93a5" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36728436" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IChapteredRowset" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChapteredRowset" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Compatibility.VB6.IChapteredRowset" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChapteredRowset" />
  <TypeSignature Language="C++ CLI" Value="public interface class IChapteredRowset" />
  <TypeSignature Language="F#" Value="type IChapteredRowset = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0c733a93-2a1c-11ce-ade5-00aa0044773d")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 OLE DB <see langword="IAccessor" /> 接口的实现，以供从 Visual Basic 6.0 升级的应用程序使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddRefChapter">
      <MemberSignature Language="C#" Value="public void AddRefChapter (int hChapter, out int cRefCount);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void AddRefChapter([in]int32 hChapter, [out] int32&amp; cRefCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.IChapteredRowset.AddRefChapter(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRefChapter (hChapter As Integer, ByRef cRefCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRefChapter(int hChapter, [Runtime::InteropServices::Out] int % cRefCount);" />
      <MemberSignature Language="F#" Value="abstract member AddRefChapter : int *  -&gt; unit" Usage="iChapteredRowset.AddRefChapter (hChapter, cRefCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hChapter" Type="System.Int32" />
        <Parameter Name="cRefCount" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="hChapter">要递增其引用数的章节句柄。</param>
        <param name="cRefCount">一个指向内存的指针，该内存用于返回章节句柄的引用数。</param>
        <summary>向现有的章节添加引用数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseChapter">
      <MemberSignature Language="C#" Value="public void ReleaseChapter (int hChapter, out int cRefCount);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void ReleaseChapter([in]int32 hChapter, [out] int32&amp; cRefCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.IChapteredRowset.ReleaseChapter(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseChapter (hChapter As Integer, ByRef cRefCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseChapter(int hChapter, [Runtime::InteropServices::Out] int % cRefCount);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseChapter : int *  -&gt; unit" Usage="iChapteredRowset.ReleaseChapter (hChapter, cRefCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hChapter" Type="System.Int32" />
        <Parameter Name="cRefCount" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="hChapter">章节句柄。</param>
        <param name="cRefCount">一个指向内存的指针，该内存用于返回章节句柄的引用数。</param>
        <summary>释放一个章节。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.Compatibility.VB6> 命名空间中的函数和对象用于工具从 Visual Basic 6.0 升级到 Visual Basic。 大多数情况下，这些函数和对象可再现 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中其他命名空间的功能。 只有 Visual Basic 6.0 代码模型与 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 实现有显著区别时才需要这些函数和对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>