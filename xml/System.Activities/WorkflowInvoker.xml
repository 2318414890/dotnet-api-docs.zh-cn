<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c72945be5ca2e82d6b9cbb6f146755c137b85aa0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="fb7ec-101">提供一种调用工作流的方法，调用过程如同方法调用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb7ec-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-102"><xref:System.Activities.WorkflowInvoker> 包含同步调用工作流的实例方法和静态方法，以及异步调用工作流的实例方法。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="fb7ec-103"><xref:System.Activities.WorkflowInvoker> 不允许实例控件，如保持、卸载或恢复书签。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="fb7ec-104">如果需要实例控件，请改为使用 <xref:System.Activities.WorkflowApplication>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="fb7ec-105">若要在没有实例控件的情况下同步执行工作流，请调用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="fb7ec-106">若要在没有实例控件的情况下异步执行工作流，请使用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 和 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法对，或使用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-107">下面的示例使用 <xref:System.Activities.Statements.WriteLine> 同步调用包含单个 <xref:System.Activities.WorkflowInvoker> 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="fb7ec-108">要由 <see cref="T:System.Activities.WorkflowInvoker" /> 类的这一实例调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-109">初始化 <see cref="T:System.Activities.WorkflowInvoker" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-110"><xref:System.Activities.WorkflowInvoker> 包含同步调用工作流的实例方法和静态方法，以及异步调用工作流的实例方法。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-111">下面的示例调用包含单个 <xref:System.Activities.Statements.WriteLine> 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fb7ec-112">使用 <see cref="T:System.IAsyncResult" /> 异步设计模式以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-113"> [异步编程概述](http://go.microsoft.com/fwlink/?LinkId=141764)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-113"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="fb7ec-114">工作流已完成后要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fb7ec-115">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-116">使用指定的 <see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-117">对异步调用操作的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-118">若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="fb7ec-119">如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="fb7ec-120">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="fb7ec-121">此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-122"> [异步编程概述](http://go.microsoft.com/fwlink/?LinkId=141764)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-122"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-123">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-124">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-125">通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="fb7ec-126">当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由参数名键控的每个输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-127">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="fb7ec-128">工作流已完成后要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fb7ec-129">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-130">使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-131">对异步调用操作的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-132">若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="fb7ec-133">如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="fb7ec-134">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="fb7ec-135">此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-136"> [异步编程概述](http://go.microsoft.com/fwlink/?LinkId=141764)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-136"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-137">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-138">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-139">通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="fb7ec-140">当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由参数名键控的每个输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fb7ec-141">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="fb7ec-142">工作流已完成后要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fb7ec-143">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-144">使用指定的超时间隔、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-145">对异步调用操作的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-146">若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="fb7ec-147">如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="fb7ec-148">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且在调用 <xref:System.TimeoutException> 方法时会引发 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-149">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-150">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="fb7ec-151">此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-152"> [异步编程概述](http://go.microsoft.com/fwlink/?LinkId=141764)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-152"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-153">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-154">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-155">通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="fb7ec-156">当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由参数名键控的每个输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-157">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-158">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="fb7ec-159">工作流已完成后要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="fb7ec-160">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-161">使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、超时间隔、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-162">对异步调用操作的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-163">若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="fb7ec-164">如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="fb7ec-165">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且在调用 <xref:System.TimeoutException> 时会引发 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-166">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-167">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="fb7ec-168">此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-169"> [异步编程概述](http://go.microsoft.com/fwlink/?LinkId=141764)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-169"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-170">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-171">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-172">通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="fb7ec-173">当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由参数名键控的每个输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="fb7ec-174">要取消的工作流的标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-175">尝试取消使用指定的 <paramref name="userState" /> 调用的工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-176">只能取消由一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 参数的 `userState` 重载调用的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="fb7ec-177">如果取消成功，<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>属性<xref:System.Activities.InvokeCompletedEventArgs>传递给<xref:System.Activities.WorkflowInvoker.InvokeCompleted>处理程序设置为`true`; 否则为它设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-178">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-179">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-180">一旦调用了工作流，宿主将尝试取消工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="fb7ec-181">引用启动工作流的 <see cref="T:System.IAsyncResult" /> 操作的 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-182">返回使用一种 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 重载调用的工作流的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-183">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-183">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-184">若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 指定的 `callback` 方法的 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="fb7ec-185">如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="fb7ec-186">此方法返回使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用的工作流的结果。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-187"> [异步编程概述](http://go.microsoft.com/fwlink/?LinkId=141764)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-187"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-188">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-189">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-190">通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="fb7ec-191">当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由参数名键控的每个输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fb7ec-192">获取对 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 实例调用的工作流可用的扩展的 <see cref="T:System.Activities.WorkflowInvoker" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fb7ec-193">由 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 实例调用的工作流可用的扩展的 <see cref="T:System.Activities.WorkflowInvoker" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-194">工作流宿主作者使用此属性将扩展添加到 <xref:System.Activities.WorkflowInvoker> 实例，以便这些扩展在由该实例调用的工作流上可用。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-195">下面的示例向 <xref:System.Activities.Tracking.TrackingParticipant> 实例的 <xref:System.Activities.WorkflowInvoker.Extensions%2A> 集合注册一个自定义 <xref:System.Activities.WorkflowInvoker>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="fb7ec-196">此代码示例摘自[自定义跟踪](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)示例。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fb7ec-197">以同步方式调用工作流，返回根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典（由表示工作流输出的参数名键控）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-197">Invokes a workflow synchronously and returns a dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-198">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-199">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-200">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb7ec-201">使用传递给 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的工作流定义以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-202">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-202">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-203">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-204">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-205">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-206">下面的示例调用包含单个 `DiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-207">`DiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-208">当对 `Invoke` 的调用返回时，将在输出字典中返回由参数名键控的每个输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="fb7ec-209">工作流调用两次，使用传入工作流定义`WorkflowInvoker`构造函数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="fb7ec-210">如果工作流的根活动没有输出自变量或宿主不需要输出自变量，则可忽略输出自变量。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="fb7ec-211">下面的示例调用一个工作流，该工作流包含单个没有任何输出参数的 <xref:System.Activities.Statements.WriteLine> 活动。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="fb7ec-212">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-213">使用指定的工作流定义以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-214">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-214">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-215">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-216">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-217">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-218">下面的示例调用包含单个 `DiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-219">`DiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-220">当对 `Invoke` 的调用返回时，将在输出字典中返回由参数名键控的每个输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="fb7ec-221">如果工作流的根活动没有输出自变量或宿主不需要输出自变量，则可忽略输出自变量。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="fb7ec-222">下面的示例调用一个工作流，该工作流包含单个没有任何输出参数的 <xref:System.Activities.Statements.WriteLine> 活动。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-223">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-224">使用指定的输入参数的 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 以同步方式调用传递到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 构造函数的活动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-225">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-225">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-226">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-227">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-228">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-229">下面的示例调用一个工作流，该工作流包含有两个输入参数和两个输出参数的单个 `Divide` 活动。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="fb7ec-230">调用工作流时，会传递包含每个输入参数的值的 `arguments` 字典（由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="fb7ec-231">当对 `Invoke` 的调用返回时，将在 `outputs` 字典中返回每个输出参数（也由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="fb7ec-232">如果工作流派生自<xref:System.Activities.ActivityWithResult>，如`CodeActivity<TResult>`或`Activity<TResult>`，并且除了正确定义的输出自变量<xref:System.Activities.Activity%601.Result%2A>输出自变量的非泛型重载`Invoke`，例如此必须使用中若要检索其他参数的顺序。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="fb7ec-233">若要执行此操作，工作流定义，传递到`WorkflowInvoker`构造函数的类型必须为<xref:System.Activities.Activity>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="fb7ec-234">在此示例中`Divide`活动派生自`CodeActivity<int>`，但被声明为<xref:System.Activities.Activity>，以便此重载`Invoke`，并返回字典，而不是单个的返回值的自变量的使用。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fb7ec-235">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-236">使用指定的超时间隔以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-237">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-237">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-238">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-239">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-240">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-241">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-242">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-243">下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="fb7ec-244">此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="fb7ec-245">第一个工作流成功完成，但第二个工作流未成功完成，而是引发 <xref:System.TimeoutException> 并显示下面的消息。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="fb7ec-246">有关使用示例`Invoke`与输出自变量，请参阅的重载<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用此重载不超时间隔的情况下与相同的参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="fb7ec-247">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="fb7ec-248">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-249">使用指定的工作流定义和输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-250">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-250">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-251">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-252">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-253">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-254">下面的示例调用一个工作流，该工作流包含有两个输入参数和两个输出参数的单个 `Divide` 活动。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="fb7ec-255">调用工作流时，会传递包含每个输入参数的值的 `arguments` 字典（由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="fb7ec-256">当对 `Invoke` 的调用返回时，将在 `outputs` 字典中返回每个输出参数（也由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="fb7ec-257">如果工作流派生自<xref:System.Activities.ActivityWithResult>，如`CodeActivity<TResult>`或`Activity<TResult>`，并且除了正确定义的输出自变量<xref:System.Activities.Activity%601.Result%2A>输出自变量的非泛型重载`Invoke`，例如此必须使用中若要检索其他参数的顺序。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="fb7ec-258">为此，传递给 `Invoke` 的工作流定义必须为 <xref:System.Activities.Activity> 类型。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="fb7ec-259">在此示例中`Divide`活动派生自`CodeActivity<int>`，但被声明为<xref:System.Activities.Activity>，以便此重载`Invoke`，并返回字典，而不是单个的返回值的自变量的使用。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="fb7ec-260">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-261">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-262">使用指定的工作流定义和超时间隔以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-263">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-263">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-264">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-265">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-266">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-267">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-268">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-269">下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="fb7ec-270">此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="fb7ec-271">第一个工作流成功完成，但第二个工作流未成功完成并引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="fb7ec-272">有关使用示例`Invoke`与输出自变量，请参阅的重载<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用此重载不超时间隔的情况下与相同的参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-273">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-274">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-275">使用指定的输入参数的 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 和指定的超时间隔以同步方式调用传递到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 构造函数的活动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-276">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-276">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-277">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-278">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-279">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-280">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-281">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-282">下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="fb7ec-283">此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="fb7ec-284">第一个工作流成功完成，但第二个工作流未成功完成，而是引发 <xref:System.TimeoutException> 并显示下面的消息。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="fb7ec-285">有关使用示例`Invoke`输入和输出参数，请参阅的重载<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用此重载不超时间隔的情况下与相同的参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="fb7ec-286">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="fb7ec-287">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-288">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-289">使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-290">根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-290">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-291">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-292">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-293">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-294">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-295">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-296">下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="fb7ec-297">此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="fb7ec-298">第一个工作流成功完成，但第二个工作流未成功完成并引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="fb7ec-299">有关使用示例`Invoke`输入和输出参数，请参阅的重载<xref:System.Activities.WorkflowInvoker.Invoke%2A>使用此重载不超时间隔的情况下与相同的参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="fb7ec-300">工作流的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="fb7ec-301">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="fb7ec-302">工作流定义需要从 <see cref="T:System.Activities.ActivityWithResult" /> 派生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-303">使用传递给 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的工作流定义以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-304">用于活动执行结果的 TResult 类型的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-305">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-306">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-307">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-308">下面的示例调用包含单个工作流`Add`有两个输入的参数的活动并且自它派生自`CodeActivity<int>`它有一个明确定义<xref:System.Activities.Activity%601.Result%2A>输出自变量。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="fb7ec-309">调用工作流时，会传递包含每个输入参数的值的 `arguments` 字典（由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="fb7ec-310">当调用`Invoke`返回的值<xref:System.Activities.Activity%601.Result%2A>返回输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="fb7ec-311">基于此代码示例[使用 WorkflowInvoker 类](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)示例。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="fb7ec-312">工作流的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="fb7ec-313">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="fb7ec-314">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-315">使用指定的工作流定义和输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-316">用于活动执行结果的 TResult 类型的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-317">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-318">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-319">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-320">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-321">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-322">下面的示例调用包含单个工作流`Add`有两个输入的参数的活动并且自它派生自`CodeActivity<int>`它有一个明确定义<xref:System.Activities.Activity%601.Result%2A>输出自变量。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="fb7ec-323">调用工作流时，会传递包含每个输入参数的值的 `arguments` 字典（由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="fb7ec-324">当调用`Invoke`返回的值<xref:System.Activities.Activity%601.Result%2A>返回输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="fb7ec-325">基于此代码示例[使用 WorkflowInvoker 类](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)示例。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="fb7ec-326">工作流的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="fb7ec-327">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="fb7ec-328">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-329">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-330">使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-331">用于活动执行结果的 TResult 类型的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-332">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-333">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-334">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-335">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-336">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-337">下面的示例调用包含单个工作流`Add`有两个输入的参数的活动并且自它派生自`CodeActivity<int>`它有一个明确定义<xref:System.Activities.Activity%601.Result%2A>输出自变量。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="fb7ec-338">调用工作流时，会传递包含每个输入参数的值的 `arguments` 字典（由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="fb7ec-339">当调用`Invoke`返回的值<xref:System.Activities.Activity%601.Result%2A>返回输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="fb7ec-340">基于此代码示例[使用 WorkflowInvoker 类](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)示例。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="fb7ec-341">工作流的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="fb7ec-342">要调用的工作流的工作流定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="fb7ec-343">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="fb7ec-344">工作流的其他输出参数字典，由自变量名称键控。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-345">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-346">使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、其他输出参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb7ec-347">用于活动执行结果的 TResult 类型的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-348">此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="fb7ec-349">保证所有工作流执行都在调用线程上执行。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="fb7ec-350">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-351">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-352">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-353">下面的示例调用包含单个工作流`Add`有两个输入的参数的活动并且自它派生自`CodeActivity<int>`它有一个明确定义<xref:System.Activities.Activity%601.Result%2A>输出自变量。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="fb7ec-354">调用工作流时，会传递包含每个输入参数的值的 `arguments` 字典（由参数名键控）。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="fb7ec-355">当调用`Invoke`返回的值<xref:System.Activities.Activity%601.Result%2A>返回输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="fb7ec-356">基于此代码示例[使用 WorkflowInvoker 类](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)示例。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fb7ec-357">使用基于事件的异步设计模式以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-358">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-359">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="fb7ec-360">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-361"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-361"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb7ec-362">以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-363">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-364">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="fb7ec-365">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-366"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-366"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-367">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-368">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-369">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-370">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-371">使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-372">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-373">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="fb7ec-374">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-375"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-375"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-376">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-377">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-378">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="fb7ec-379">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-380">使用指定的唯一标识符以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-381">`userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="fb7ec-382">如果 `userState` 参数不唯一，则引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="fb7ec-383">`userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="fb7ec-384">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-385">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="fb7ec-386">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-387"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-387"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-388">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-389">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-390">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fb7ec-391">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-392">使用指定的超时间隔以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-393">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-394">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-395">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-396">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="fb7ec-397">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-398"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-398"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-399">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-400">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-401">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-402">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="fb7ec-403">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-404">使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和唯一标识符以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-405">`userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="fb7ec-406">如果 `userState` 不唯一，则引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="fb7ec-407">`userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="fb7ec-408">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-409">若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="fb7ec-410">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-411"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-411"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-412">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-413">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-414">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-415">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-416">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-417">使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和指定的超时间隔以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-418">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-419">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-420">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-421">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="fb7ec-422">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-423"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-423"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-424">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-425">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-426">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="fb7ec-427">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="fb7ec-428">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-429">使用指定的超时间隔和唯一标识符以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-430">`userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="fb7ec-431">如果 `userState` 不唯一，则引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="fb7ec-432">`userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="fb7ec-433">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-434">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-435">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-436">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="fb7ec-437">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-438"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-438"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-439">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-440">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-441">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="fb7ec-442">由自变量名称键控的工作流输入参数字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="fb7ec-443">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="fb7ec-444">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb7ec-445">使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、指定的超时间隔和唯一标识符以异步方式调用工作流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-446">`userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="fb7ec-447">如果 `userState` 不唯一，则引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="fb7ec-448">`userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="fb7ec-449">若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="fb7ec-450">如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb7ec-451">仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="fb7ec-452">如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="fb7ec-453">此方法使用基于事件的异步设计模式以异步方式调用工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="fb7ec-454"> [基于事件的异步模式概述](http://go.microsoft.com/fwlink/?LinkId=141765)。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-454"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-455">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-456">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-457">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fb7ec-458">在完成或取消由一种 <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> 重载调用的工作流时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb7ec-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb7ec-459">处理此事件可确定使用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 重载之一调用的工作流是否成功完成，并检索完成的工作流的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb7ec-460">下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="fb7ec-461">`LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="fb7ec-462">当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。</span><span class="sxs-lookup"><span data-stu-id="fb7ec-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>