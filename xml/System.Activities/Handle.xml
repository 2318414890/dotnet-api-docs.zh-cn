<Type Name="Handle" FullName="System.Activities.Handle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="46c4d6d7eb59a8bbb0c894992a1a3e08db58975c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30357451" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Handle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Handle extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Handle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Handle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Handle abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e8bf7-101">表示一种生存期由工作流运行时控制的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e8bf7-101">Represents a type that has its lifetime controlled by the workflow runtime.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8bf7-102">从 <xref:System.Activities.Handle> 派生的类型的生存期由工作流运行时控制。</span><span class="sxs-lookup"><span data-stu-id="e8bf7-102">Types derived from <xref:System.Activities.Handle> have their lifetimes controlled by the workflow runtime.</span></span> <span data-ttu-id="e8bf7-103">对于句柄类型的工作流变量，在初始化环境时，运行时使用必需的默认构造函数创建类型的实例，将该实例分配给 <xref:System.Activities.Variable> 并调用 <xref:System.Activities.Handle.OnInitialize%2A>。</span><span class="sxs-lookup"><span data-stu-id="e8bf7-103">For workflow variables of handle types, the runtime uses the required default constructor to create an instance of the type, assigns it to the <xref:System.Activities.Variable>, and calls <xref:System.Activities.Handle.OnInitialize%2A> when initializing the environment.</span></span> <span data-ttu-id="e8bf7-104">当变量超出作用域时，将调用 <xref:System.Activities.Handle.OnUninitialize%2A>。</span><span class="sxs-lookup"><span data-stu-id="e8bf7-104">When the variable goes out of scope, <xref:System.Activities.Handle.OnUninitialize%2A> is called.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Handle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Handle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e8bf7-105">初始化 <see cref="T:System.Activities.Handle" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-105">Initializes a new instance of the <see cref="T:System.Activities.Handle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8bf7-106">从 <xref:System.Activities.Handle> 派生的类必须提供一个默认构造函数。</span><span class="sxs-lookup"><span data-stu-id="e8bf7-106">Classes that derive from <xref:System.Activities.Handle> must provide a default constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionPropertyName">
      <MemberSignature Language="C#" Value="public string ExecutionPropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExecutionPropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Handle.ExecutionPropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionPropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExecutionPropertyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e8bf7-107">当添加到活动的执行属性时，获取此 <see cref="T:System.Activities.Handle" /> 要使用的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-107">Gets the name to be used by this <see cref="T:System.Activities.Handle" /> when added to an activity’s execution properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e8bf7-108">由 <see cref="P:System.Type.FullName" /> 提供的派生类型的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-108">The name of derived type as provided by <see cref="P:System.Type.FullName" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialize (System.Activities.HandleInitializationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialize(class System.Activities.HandleInitializationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.OnInitialize(System.Activities.HandleInitializationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialize (context As HandleInitializationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialize(System::Activities::HandleInitializationContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.HandleInitializationContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="e8bf7-109">将在其中创建句柄的环境。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-109">The environment in which the handle is being created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8bf7-110">当初始化包含 <see cref="T:System.Activities.Handle" /> 的环境时，由工作流运行时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-110">Called by the workflow runtime when the environment that contains the <see cref="T:System.Activities.Handle" /> is initialized.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUninitialize">
      <MemberSignature Language="C#" Value="protected virtual void OnUninitialize (System.Activities.HandleInitializationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUninitialize(class System.Activities.HandleInitializationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUninitialize (context As HandleInitializationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUninitialize(System::Activities::HandleInitializationContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.HandleInitializationContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="e8bf7-111">在其中创建了句柄的环境。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-111">The environment in which the handle was created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8bf7-112">当 <see cref="T:System.Activities.Variable" /> 的 <see cref="T:System.Activities.Handle" /> 超出作用域时，由工作流运行时调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-112">Called by the workflow runtime when the <see cref="T:System.Activities.Variable" /> for the <see cref="T:System.Activities.Handle" /> goes out of scope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Activities.ActivityInstance Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.ActivityInstance Owner" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Handle.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As ActivityInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::ActivityInstance ^ Owner { System::Activities::ActivityInstance ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.ActivityInstance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e8bf7-113">获取包含 <see cref="T:System.Activities.ActivityInstance" />（其中包含 <see cref="T:System.Activities.Variable" />）的 <see cref="T:System.Activities.Handle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-113">Gets the <see cref="T:System.Activities.ActivityInstance" /> that contains the <see cref="T:System.Activities.Variable" /> that contains the <see cref="T:System.Activities.Handle" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e8bf7-114">包含 <see cref="T:System.Activities.Variable" />（其中包含 <see cref="T:System.Activities.Handle" />）的活动实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-114">The activity instance that contains the <see cref="T:System.Activities.Variable" /> that contains the <see cref="T:System.Activities.Handle" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfUninitialized">
      <MemberSignature Language="C#" Value="protected void ThrowIfUninitialized ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ThrowIfUninitialized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Handle.ThrowIfUninitialized" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ThrowIfUninitialized ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ThrowIfUninitialized();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e8bf7-115">如果尚未初始化 <see cref="T:System.InvalidOperationException" />，则将引发 <see cref="T:System.Activities.Handle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8bf7-115">Throws an <see cref="T:System.InvalidOperationException" /> if the <see cref="T:System.Activities.Handle" /> has not been initialized.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8bf7-116"><xref:System.Activities.Handle.ThrowIfUninitialized%2A> 为自定义句柄派生类作者提供一种便捷方法，让他们能够从任何在 <xref:System.Activities.Handle> 未初始化之前无效的派生类的方法或属性中进行调用。</span><span class="sxs-lookup"><span data-stu-id="e8bf7-116"><xref:System.Activities.Handle.ThrowIfUninitialized%2A> gives custom handle derived class authors a convenient method to call from any methods or properties of the derived class that are not valid if the <xref:System.Activities.Handle> is uninitialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>