<Type Name="ObjectParameter" FullName="System.Data.Objects.ObjectParameter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="06efc60e5a1f7331a4df2519751005fb7125f2da" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30389281" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ObjectParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectParameter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectParameter sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示传递给对象查询的查询参数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示传递给 <xref:System.Data.Objects.ObjectQuery%601> 或查询生成器方法的查询参数。 有关详细信息，请参阅[查询生成器方法](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 对象参数由名称、类型和值组成。  
  
 此类不能被继承。 有关详情，请参阅<xref:System.Data.Objects.ObjectParameterCollection>。  
  
   
  
## Examples  
 本主题中的示例基于[AdventureWorks 销售模型](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectParameter (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectParameter(System::String ^ name, System::Object ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">参数名称。 此名称不应包含“@”参数标记（它用在 [!INCLUDE[esql](~/includes/esql-md.md)] 语句中），只能为实际名称。 表达式的第一个字符必须为字母。 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
        <param name="value">参数的初始值（及固有类型）。</param>
        <summary>使用指定的名称和值初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数使用指定的名称和值创建一个参数。 根据参数的值推断其类型。  
  
 添加到 <xref:System.Data.Objects.ObjectParameterCollection> 后，该参数名称不能进行更改。 该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行更改。 编译查询后，该值不能进行更改。 有关详细信息，请参阅[查询生成器方法](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
   
  
## Examples  
 本主题中的示例基于[AdventureWorks 销售模型](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果任一自变量的值为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">如果名称自变量的值无效。 参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectParameter (string name, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectParameter(System::String ^ name, Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">参数名称。 此名称不应包含“@”参数标记（它用在 [!INCLUDE[esql](~/includes/esql-md.md)] 语句中），只能为实际名称。 表达式的第一个字符必须为字母。 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
        <param name="type">参数的公共语言运行库 (CLR) 类型。</param>
        <summary>使用指定的名称和类型初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例化后，该参数名称不能进行更改。 该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行设置或更改。 编译查询后，该值不能进行更改。 有关详细信息，请参阅[查询生成器方法](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果任一自变量的值为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">如果名称自变量的值无效。 参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数名称，该名称只能通过构造函数进行设置。</summary>
        <value>参数名称，它只能通过构造函数进行设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例化后，该参数名称不能进行更改。 该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行设置或更改。 编译查询后，该值不能进行更改。 有关详细信息，请参阅[查询生成器方法](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
   
  
## Examples  
 本主题中的示例基于[AdventureWorks 销售模型](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public Type ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ParameterType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数类型。</summary>
        <value>参数的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参数类型只能通过构造函数进行设置。  
  
   
  
## Examples  
 本主题中的示例基于[AdventureWorks 销售模型](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数值。</summary>
        <value>参数值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 编译查询后，该值不能进行更改。 有关详细信息，请参阅[查询生成器方法](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 如果新值与构造函数中声明的类型不兼容，可能引发运行时异常。 提供程序必须确定该值是否与声明的类型兼容。 例如，如果初始类型为 <xref:System.Int32>，而新值为 <xref:System.Guid>，则可能接收到异常。  
  
   
  
## Examples  
 本主题中的示例基于[AdventureWorks 销售模型](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>