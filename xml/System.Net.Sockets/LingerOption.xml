<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa3b5a0c61a16eefd0401f21d8f0736cd2719249" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460721" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <TypeSignature Language="VB.NET" Value="Public Class LingerOption" />
  <TypeSignature Language="C++ CLI" Value="public ref class LingerOption" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定在调用 <see cref="T:System.Net.Sockets.Socket" /> 或 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法之后，如果仍有数据要发送，<see cref="M:System.Net.Sockets.TcpClient.Close" /> 是否保持连接以及保持多长时间。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能仍有数据可用传出的网络缓冲区中后应用程序调用<xref:System.Net.Sockets.Socket>或<xref:System.Net.Sockets.TcpClient>方法。 如果你想要指定的量时间<xref:System.Net.Sockets.Socket>将尝试关闭之后传输未发送的数据，创建<xref:System.Net.Sockets.LingerOption>与`enable`参数设置为`true`，和`seconds`参数设置为所需的时间量. `seconds`参数用于指示你希望如何时间<xref:System.Net.Sockets.Socket>以保持在超时前的连接。如果不希望<xref:System.Net.Sockets.Socket>继续保持连接任何长度的时间关闭之后，创建<xref:System.Net.Sockets.LingerOption>实例与`enable`参数设置为`true`和`seconds`参数设置为零。 在这种情况下，<xref:System.Net.Sockets.Socket>将立即关闭，并且任何未发送的数据将会丢失。 创建后，将传递<xref:System.Net.Sockets.LingerOption>到<xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=nameWithType>方法。 如果你发送和接收的数据与<xref:System.Net.Sockets.TcpClient>，然后设置<xref:System.Net.Sockets.LingerOption>实例中<xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType>属性。  
  
 IP 堆栈计算默认 IP 协议超时期限为使用基于连接的往返时间。 在大多数情况下，该堆栈计算的该超时是个应用程序定义更具相关性。 这是默认行为<xref:System.Net.Sockets.Socket>时<xref:System.Net.Sockets.Socket.LingerState%2A>未设置属性和<xref:System.Net.Sockets.TcpClient>时<xref:System.Net.Sockets.TcpClient.LingerState%2A>未设置属性。  
  
   
  
## Examples  
 下面的示例设置以前创建<xref:System.Net.Sockets.Socket>以之后调用逗留一秒<xref:System.Net.Sockets.Socket.Close%2A>方法。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enable As Boolean, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LingerOption(bool enable, int seconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable">
          如果调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后保持连接，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="seconds">调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后保持连接的秒数。</param>
        <summary>初始化 <see cref="T:System.Net.Sockets.LingerOption" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能仍有数据可用传出的网络缓冲区中在关闭之后<xref:System.Net.Sockets.Socket>。 使用`enable`参数来指定你是否希望<xref:System.Net.Sockets.Socket>继续在调用 close 方法后传输未发送的数据。 使用`seconds`参数以指示你希望如何时间<xref:System.Net.Sockets.Socket>尝试传输在超时前的未发送的数据。如果指定`true`为`enable`参数，使用 0 表示`seconds`参数，<xref:System.Net.Sockets.Socket>会尝试将数据发送传出的网络缓冲区中没有剩余数据之前。 如果指定`false`为`enable`参数，<xref:System.Net.Sockets.Socket>将立即关闭，并且任何未发送的数据将会丢失。  
  
 下表介绍上行为<xref:System.Net.Sockets.Socket.Close%2A?displayProperty=nameWithType>和<xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=nameWithType>方法上的可能的值基于`enable`和`seconds`请实例时创建，并在中设置的参数<xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=nameWithType>或<xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType>属性。  
  
|`enable`|`seconds`|行为|  
|--------------|---------------|--------------|  
|`false` （禁用），默认值|超时不适用，（默认值）。|尝试发送挂起的数据对于面向连接的套接字 (例如 TCP) 直到默认 IP 协议超时过期。|  
|`true` （已启用）|非零的超时|尝试发送挂起的数据，直到指定的超时时间已到，如果尝试失败，然后 Winsock 重置连接。|  
|`true` （已启用）|零超时。|丢弃所有挂起的数据。 对于面向连接的套接字 (例如 TCP)，Winsock 重置连接。|  
  
 IP 堆栈计算默认 IP 协议超时期限为使用基于连接的往返时间。 在大多数情况下，该堆栈计算的该超时是个应用程序定义更具相关性。 这是一个套接字的默认行为时<xref:System.Net.Sockets.Socket.LingerState%2A>未设置属性。  
  
 当<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在<xref:System.Net.Sockets.Socket.LingerState%2A>属性设置大于默认 IP 协议超时值，则仍将应用和重写的默认 IP 协议超时时间。  
  
   
  
## Examples  
 下面的示例设置以前创建<xref:System.Net.Sockets.Socket>以之后调用逗留一秒<xref:System.Net.Sockets.Socket.Close%2A>方法。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，指示 <see cref="T:System.Net.Sockets.Socket" /> 关闭后是否逗留。</summary>
        <value>
          如果 <see cref="T:System.Net.Sockets.Socket" /> 在调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 之后将逗留，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Net.Sockets.LingerOption.Enabled%2A>属性来确定是否<xref:System.Net.Sockets.Socket>关闭之后将逗留。 将该值更改为`true`或`false`并传递更改<xref:System.Net.Sockets.LingerOption>到<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法或一组<xref:System.Net.Sockets.TcpClient.LingerState%2A>或<xref:System.Net.Sockets.Socket.LingerState%2A>属性，以禁用或启用延迟。  
  
 下表描述的可能值的行为<xref:System.Net.Sockets.LingerOption.Enabled%2A>属性和<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在<xref:System.Net.Sockets.Socket.LingerState%2A>属性。  
  
|`enable`|`seconds`|行为|  
|--------------|---------------|--------------|  
|`false` （禁用），默认值|超时不适用，（默认值）。|尝试发送挂起的数据对于面向连接的套接字 (例如 TCP) 直到默认 IP 协议超时过期。|  
|`true` （已启用）|非零的超时|尝试发送挂起的数据，直到指定的超时时间已到，如果尝试失败，然后 Winsock 重置连接。|  
|`true` （已启用）|零超时。|丢弃所有挂起的数据。 对于面向连接的套接字 (例如 TCP)，Winsock 重置连接。|  
  
 IP 堆栈计算默认 IP 协议超时期限为使用基于连接的往返时间。 在大多数情况下，该堆栈计算的该超时是个应用程序定义更具相关性。 这是一个套接字的默认行为时<xref:System.Net.Sockets.Socket.LingerState%2A>未设置属性。  
  
 当<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在<xref:System.Net.Sockets.Socket.LingerState%2A>属性设置大于默认 IP 协议超时值，则仍将应用和重写的默认 IP 协议超时时间。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LingerTime { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后仍有数据要发送的情况下将保持连接的时间量。</summary>
        <value>调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 后保持连接的时间量（以秒为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此值，如果你想要确定如何长时间关闭<xref:System.Net.Sockets.Socket>将尝试传输在超时前的未发送的数据。你还可以将此值设置为所需的超时时段，以秒为单位。  
  
 如果<xref:System.Net.Sockets.LingerOption.Enabled%2A>属性是`true`，你将设置为<xref:System.Net.Sockets.LingerOption.LingerTime%2A>为 0，<xref:System.Net.Sockets.Socket>丢弃所有挂起的传出的网络缓冲区中发送的数据。 如果更改此值，则必须传递更改<xref:System.Net.Sockets.LingerOption>到实例<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法或一组<xref:System.Net.Sockets.TcpClient.LingerState%2A>或<xref:System.Net.Sockets.Socket.LingerState%2A>属性。  
  
 下表描述的可能值的行为<xref:System.Net.Sockets.LingerOption.Enabled%2A>属性和<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在<xref:System.Net.Sockets.Socket.LingerState%2A>属性。  
  
|`enable`|`seconds`|行为|  
|--------------|---------------|--------------|  
|`false` （禁用），默认值|超时不适用，（默认值）。|尝试发送挂起的数据对于面向连接的套接字 (例如 TCP) 直到默认 IP 协议超时过期。|  
|`true` （已启用）|非零的超时|尝试发送挂起的数据，直到指定的超时时间已到，如果尝试失败，然后 Winsock 重置连接。|  
|`true` （已启用）|零超时。|丢弃所有挂起的数据。 对于面向连接的套接字 (例如 TCP)，Winsock 重置连接。|  
  
 IP 堆栈计算默认 IP 协议超时期限为使用基于连接的往返时间。 在大多数情况下，该堆栈计算的该超时是个应用程序定义更具相关性。 这是一个套接字的默认行为时<xref:System.Net.Sockets.Socket.LingerState%2A>未设置属性。  
  
 当<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在<xref:System.Net.Sockets.Socket.LingerState%2A>属性设置大于默认 IP 协议超时值，则仍将应用和重写的默认 IP 协议超时时间。  
  
   
  
## Examples  
 下面的示例显示此属性的值。  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>