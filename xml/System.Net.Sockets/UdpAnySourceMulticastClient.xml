<Type Name="UdpAnySourceMulticastClient" FullName="System.Net.Sockets.UdpAnySourceMulticastClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="94e7c12b25013e9068d039de548b5a75458cf4fc" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53297797" /></Metadata><TypeSignature Language="C#" Value="public class UdpAnySourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpAnySourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpAnySourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpAnySourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpAnySourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpAnySourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>从任意源接收多播流量的客户端接收器，亦称为任意源多播 (ASM) 或 Internet 标准多播 (ISM)。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpAnySourceMulticastClient (System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpAnySourceMulticastClient(System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpAnySourceMulticastClient : System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpAnySourceMulticastClient" Usage="new System.Net.Sockets.UdpAnySourceMulticastClient (groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupAddress">此接收器要订阅的多播组地址。</param>
        <param name="localPort">此接收器要绑定到的本地端口。</param>
        <summary>创建一个可以订阅组地址并从任意源接收数据报的新 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> UDP 客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A>构造函数相关联的 UDP 多播套接字组地址和端口，但不会将绑定或以其他方式使用套接字。  
  
 `groupAddress`参数可以为 IPv6 或 IPv4 多播地址。  
  
 `localPort`参数必须指定一个端口小于 1024。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="groupAddress" /> 为 <see langword="null" />。 引用</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="localPort" /> 小于 0，或 <paramref name="localPort" /> 大于 65,535。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">要在此操作完成时调用的回调方法。</param>
        <param name="state">要为此操作传递给 <paramref name="callback" /> 方法的可选状态信息。</param>
        <summary>绑定套接字并开始执行多播组的联接操作，以便允许接收来自任何组参与者的数据报。</summary>
        <returns>引用此操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup%2A>方法将 UDP 多播套接字绑定到本地端口，并加入多播的组以允许从任何多路广播的组参与者收到的数据报。 中指定的本地端口和多路广播的组地址<xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A>构造函数。  
  
 中指定的方法`callback`参数调用时要加入多播的组的操作已完成。  
  
 如果所需的运行时，<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup%2A>方法还执行策略检查，以验证客户端是否可以访问多路广播的组。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>将引发<xref:System.Net.Sockets.SocketError.AccessDenied>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已经联接多播组，或联接操作正在进行。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromGroup(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromGroup (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromGroup(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromGroup : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginReceiveFromGroup (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">用于存储已接收数据的缓冲区。</param>
        <param name="offset">应存储数据的 <paramref name="buffer" /> 开始处的偏移量（以字节为单位）。</param>
        <param name="count">要接收并存储在 <paramref name="buffer" /> 中的最大字节数。</param>
        <param name="callback">要在此操作完成时调用的回调方法。</param>
        <param name="state">要为此操作传递给 <paramref name="callback" /> 方法的可选状态信息。</param>
        <summary>开始执行从已联接的多播组接收数据包的操作，并在来自任何发送方的数据包到达组时调用指定的回调。</summary>
        <returns>引用此操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>方法开始从来自任何发件人已联接的多播组接收 UDP 数据包的操作。 中指定的本地端口和多路广播的组地址<xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A>构造函数。 多播客户端必须具有已完成到多路广播组的联接。  
  
 中指定的方法`callback`已接收数据包时要调用参数。  
  
 很可能将出现套接字故障，如果接收操作失败以同步方式，尽管这并不常见使用 UDP。 如果套接字失败，则<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于 0 
- 或 - 
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
或 
 <paramref name="count" /> 小于 0 
或 
 <paramref name="offset" /> 加上此计数大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendTo">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int count, System.Net.IPEndPoint remoteEndPoint, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 count, class System.Net.IPEndPoint remoteEndPoint, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendTo (buffer As Byte(), offset As Integer, count As Integer, remoteEndPoint As IPEndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Net::IPEndPoint ^ remoteEndPoint, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendTo : byte[] * int * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginSendTo (buffer, offset, count, remoteEndPoint, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remoteEndPoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要发送的数据的缓冲区。</param>
        <param name="offset">要从中读取待发送数据的从 <paramref name="buffer" /> 开始处的偏移量（以字节为单位）。</param>
        <param name="count">要从 <paramref name="buffer" /> 发送的字节数。</param>
        <param name="remoteEndPoint">要向其发送数据包的远程终结点。</param>
        <param name="callback">要在此操作完成时调用的回调方法。</param>
        <param name="state">要为此操作传递给 <paramref name="callback" /> 方法的可选状态信息。</param>
        <summary>开始执行向指定目标发送单播数据包的操作。</summary>
        <returns>引用此操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A>方法开始将 UDP 数据包发送到已联接的多播组的操作。  
  
 客户端必须已完成到多路广播组的联接。 中指定的目标地址`remoteEndPoint`参数必须具有已向计算机发送多播的数据包向此接收方。 某些协议使用此信息来传递流控制，质量的服务统计信息或恢复消息。  
  
 中指定的方法`callback`已接收数据包时要调用参数。  
  
 如果在指定的地址，则仅允许传输`remoteEndPoint`参数已具有多路广播的数据包发送到此接收方。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>将引发<xref:System.Net.Sockets.SocketError.AccessDenied>。  
  
 如果在指定目标端口`remoteEndPoint`参数是小于 1024<xref:System.Net.Sockets.SocketException>引发与<xref:System.Net.Sockets.SocketError.AccessDenied>。  
  
 很可能将出现套接字故障，如果接收操作失败以同步方式，尽管这并不常见使用 UDP。 如果套接字失败，则<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于 0 
或 
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
或 
 <paramref name="count" /> 小于 0 
- 或 - 
 <paramref name="offset" /> 加上此计数大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToGroup(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToGroup (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToGroup(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToGroup : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginSendToGroup (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要发送的数据的缓冲区。</param>
        <param name="offset">要从中读取待发送数据的从 <paramref name="buffer" /> 开始处的偏移量（以字节为单位）。</param>
        <param name="count">要从 <paramref name="buffer" /> 发送的字节数。</param>
        <param name="callback">要在此操作完成时调用的回调方法。</param>
        <param name="state">要为此操作传递给 <paramref name="callback" /> 方法的可选状态信息。</param>
        <summary>开始执行将数据包发送到已联接的多播组的操作，并在已将数据包发送到组时调用指定的回调。</summary>
        <returns>引用此操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A>方法开始将 UDP 数据包发送到已联接的多播组的操作。  
  
 客户端必须已完成到多路广播组的联接。  
  
 中指定的方法`callback`已接收数据包时要调用参数。  
  
 很可能将出现套接字故障，如果接收操作失败以同步方式，尽管这并不常见使用 UDP。 如果套接字失败，则<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于 0 
- 或 - 
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
- 或 - 
 <paramref name="count" /> 小于 0 
或 
 <paramref name="offset" /> 加上此计数大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="BlockSource">
      <MemberSignature Language="C#" Value="public void BlockSource (System.Net.IPAddress sourceAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BlockSource(class System.Net.IPAddress sourceAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BlockSource (sourceAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BlockSource(System::Net::IPAddress ^ sourceAddress);" />
      <MemberSignature Language="F#" Value="member this.BlockSource : System.Net.IPAddress -&gt; unit" Usage="udpAnySourceMulticastClient.BlockSource sourceAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">要阻止的源地址。</param>
        <summary>阻止源，从而不再接收源自它的多播数据包。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A>方法进行阻止，源自于一个指定的源地址接收多路广播的数据包。 客户端必须已完成到多路广播组的联接。  
  
 `sourceAddress`参数可以为 IPv6 或 IPv4 地址，但`sourceAddress`参数必须与匹配客户端加入多播组的地址族。  
  
 中指定的方法`callback`已接收数据包时要调用参数。  
  
 如果在执行块源操作，套接字失败<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpAnySourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>离开多播组并释放 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> 类和基础 <see cref="T:System.Net.Sockets.Socket" /> 的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A> 后，应调用 <xref:System.Net.Sockets.UdpAnySourceMulticastClient>。 Dispose 方法将使<xref:System.Net.Sockets.UdpAnySourceMulticastClient>中不可用状态。 在调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A>，必须释放对所有引用<xref:System.Net.Sockets.UdpAnySourceMulticastClient>这样垃圾回收器才能收回内存的<xref:System.Net.Sockets.UdpAnySourceMulticastClient>占用。  
  
 每次释放对 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Net.Sockets.UdpAnySourceMulticastClient>。 否则，在垃圾回收器调用 <xref:System.Net.Sockets.UdpAnySourceMulticastClient> 对象的 <xref:System.Object.Finalize%2A> 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">异步联接操作的结果。</param>
        <summary>完成多播组的异步联接组操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup%2A>方法完成异步绑定到多播组的套接字和联接操作。  
  
 如果所需的运行时，<xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup%2A>方法还执行策略检查，以验证客户端是否可以访问多路广播的组。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>将引发<xref:System.Net.Sockets.SocketError.AccessDenied>。  
  
 如果在执行联接组操作，套接字失败<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromGroup">
      <MemberSignature Language="C#" Value="public int EndReceiveFromGroup (IAsyncResult result, out System.Net.IPEndPoint source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromGroup(class System.IAsyncResult result, [out] class System.Net.IPEndPoint&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromGroup (result As IAsyncResult, ByRef source As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromGroup(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::Net::IPEndPoint ^ % source);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromGroup : IAsyncResult *  -&gt; int" Usage="udpAnySourceMulticastClient.EndReceiveFromGroup (result, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="source" Type="System.Net.IPEndPoint" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">异步接收操作的结果。</param>
        <param name="source">从中接收数据包的源终结点。</param>
        <summary>完成从已联接的多播组接收数据包的异步操作并提供接收到的信息。</summary>
        <returns>存储在传递给 <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法的缓冲区参数中的消息长度（以字节为单位）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A>方法完成异步操作以从多播组接收数据包。  
  
 如果在执行接收操作时出现套接字故障<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendTo">
      <MemberSignature Language="C#" Value="public void EndSendTo (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendTo(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendTo (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendTo(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendTo : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndSendTo result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">异步发送操作的结果。</param>
        <summary>完成向指定目标发送单播数据包的操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo%2A>方法完成异步操作以将数据包发送到指定的目标地址。  
  
 如果在执行接收操作时出现套接字故障<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToGroup">
      <MemberSignature Language="C#" Value="public void EndSendToGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToGroup : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndSendToGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">异步发送操作的结果。</param>
        <summary>完成将数据包发送到多播组的操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup%2A>方法完成异步操作以将数据包发送到多播组。  
  
 如果在执行接收操作时出现套接字故障<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定传出的多路广播数据包是否传递到发送应用程序。</summary>
        <value>返回 <see cref="T:System.Boolean" />。  
  
一个值，该值指示向多路广播组发送的传出数据包是否传递到发送应用程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多播的通信是在 Internet 上的多对多通信的可缩放方法。 一个过程订阅多路广播的组地址。 然后，可由其他每个订阅的多播地址的过程接收已订阅进程发送到多播组的任何数据包。 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback%2A>由此客户端发送到多播组的属性控制是否任何处理本地计算机上接收多路广播的数据包。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Net.Sockets.Socket" /> 的接收缓冲区的大小（以字节为单位），该缓冲区用于此 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> 实例上的多播接收操作。</summary>
        <value>返回 <see cref="T:System.Int32" />。  
  
接收缓冲区的大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize%2A>属性获取或设置大小，以字节为单位的接收缓冲区的基础<xref:System.Net.Sockets.Socket>用于对此的多播的接收操作<xref:System.Net.Sockets.UdpAnySourceMulticastClient>实例。 具体而言，<xref:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize%2A>属性控制当数据包到达时，但尚未调用应用程序时使用堆栈的缓冲区的大小<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>方法。 如果此缓冲区被填满，并且在应用程序调用之前不断传入数据包<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>和<xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A>方法，旧的数据包将被丢弃。 应用程序永远无法接收旧的数据包，并改为调用时才接收较新的数据包<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>方法。  
  
 Windows 上的接收缓冲区的默认大小为 8192 个字节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的缓冲区大小小于 0。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Net.Sockets.Socket" /> 的发送缓冲区的大小（以字节为单位），该缓冲区用于此 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> 实例上的多播发送操作。</summary>
        <value>返回 <see cref="T:System.Int32" />。  
  
发送缓冲区的大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A>属性获取或设置大小，以字节为单位，用于对此的多播的发送操作的基础套接字的发送缓冲区的<xref:System.Net.Sockets.UdpAnySourceMulticastClient>实例。  
  
 调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A>或<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A>方法需要较长时间调用的回调，具体取决于值<xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A>属性如果发送缓冲区已满。 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A>属性仅控制是否在用户的缓冲区保持在物理内存中锁定，直到在发送完成。  
  
 Windows 上的发送缓冲区的默认大小为 8192 个字节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的缓冲区大小小于 0。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UnblockSource">
      <MemberSignature Language="C#" Value="public void UnblockSource (System.Net.IPAddress sourceAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnblockSource(class System.Net.IPAddress sourceAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnblockSource (sourceAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnblockSource(System::Net::IPAddress ^ sourceAddress);" />
      <MemberSignature Language="F#" Value="member this.UnblockSource : System.Net.IPAddress -&gt; unit" Usage="udpAnySourceMulticastClient.UnblockSource sourceAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">要取消阻止的源的地址。</param>
        <summary>取消阻止以前通过调用 <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)" /> 方法阻止的源，以便接收来自该源的多播数据包。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource%2A>方法取消阻止源自指定的源地址，以便可以接收多路广播的数据包。 指定的源地址必须之前已被阻止通过调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A>方法。  
  
 客户端必须已完成到多路广播组的联接。  
  
 `sourceAddress`参数可以为 IPv6 或 IPv4 多播地址。  
  
 如果中的指定的源地址`sourceAddress`参数不阻止以前通过调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A>方法，<xref:System.Net.Sockets.SocketException>将引发<xref:System.Net.Sockets.SocketError.AddressNotAvailable>。  
  
 如果在执行取消阻止源操作，套接字失败<xref:System.Net.Sockets.SocketException>引发。 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
  </Members>
</Type>