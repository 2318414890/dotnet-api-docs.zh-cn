<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TcpListener.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac570b4efe2d402b27e3285b56bb7a50aff7def9e09.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70b4efe2d402b27e3285b56bb7a50aff7def9e09</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Listens for connections from TCP network clients.</source>
          <target state="translated">侦听来自 TCP 网络客户端的连接。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>类提供侦听和接受传入连接请求，在阻止同步模式的简单方法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>You can use either a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> or a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to connect with a <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>或<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>连接与<ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Create a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> using an <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>, a Local IP address and port number, or just a port number.</source>
          <target state="translated">创建<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>使用<ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>，本地 IP 地址和端口号或只是端口号。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</source>
          <target state="translated">指定<ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph>本地 IP 地址和本地端口号，如果你想要为您分配这些值的基础服务提供程序为 0。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>If you choose to do this, you can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property to identify the assigned information, after the socket has connected.</source>
          <target state="translated">如果你选择这样做，则可以使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph>属性来标识已指定的信息后套接字连接。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection requests.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法，以开始侦听传入连接请求。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> will queue incoming connections until you either call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method or it has queued <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName.MaxConnections&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 将排队等待传入的连接，直到你可以调用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法或它已排队<ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName.MaxConnections&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Use either <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> to pull a connection from the incoming connection request queue.</source>
          <target state="translated">可以使用两种<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>请求从传入的连接请求队列的连接。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>These two methods will block.</source>
          <target state="translated">将阻止这两种方法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>If you want to avoid blocking, you can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method first to determine if connection requests are available in the queue.</source>
          <target state="translated">如果你想要避免阻止，则可以使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph>方法首先确定连接请求是否可在队列中。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法来关闭<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method does not close any accepted connections.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法不会关闭任何已接受的连接。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>You are responsible for closing these separately.</source>
          <target state="translated">你负责分别关闭这些连接。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>See <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> for a client example.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>有关客户端示例。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>to establish an outgoing connection or accept an incoming request.</source>
          <target state="translated">若要建立一个传出连接或接受传入请求。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">用来侦听传入的连接尝试的端口。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class that listens on the specified port.</source>
          <target state="translated">初始化在指定端口上侦听的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>This constructor is obsolete.</source>
          <target state="translated">此构造函数已过时。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType&gt;</ph> constructors.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>This constructor allows you to specify the port number on which to listen for incoming connection attempts.</source>
          <target state="translated">此构造函数，可指定用于侦听传入的连接尝试的端口号。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>With this constructor, the underlying service provider assigns the most appropriate network address.</source>
          <target state="translated">使用此构造函数，基础服务提供程序将分配的最合适的网络地址。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>If you do not care which local port is used, you can specify 0 for the port number.</source>
          <target state="translated">如果你不关心使用哪个本地端口，则可以指定的端口号 0。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>In this case, the service provider will assign an available ephemeral port number.</source>
          <target state="translated">在这种情况下，服务提供商将分配一个可用的临时端口号。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法，以开始侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> using a local port number.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>使用本地端口号。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="port" /&gt;</ph> is not between <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="port" /&gt;</ph> 不在 <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> 和 <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph> 之间。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPEndPoint" /&gt;</ph> that represents the local endpoint to which to bind the listener <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Net.IPEndPoint" /&gt;</ph>，它表示将侦听器 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 绑定到的本地终结点。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class with the specified local endpoint.</source>
          <target state="translated">使用指定的本地终结点初始化 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</source>
          <target state="translated">此构造函数允许你指定的本地 IP 地址和端口号用于侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Before using this constructor, you must create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the desired local IP address and port number.</source>
          <target state="translated">使用此构造函数之前，必须创建<ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph>使用所需的本地 IP 地址和端口号。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Pass this <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> to the constructor as the <ph id="ph2">`localEP`</ph> parameter.</source>
          <target state="translated">将此传递<ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph>到构造函数、 作为<ph id="ph2">`localEP`</ph>参数。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you do not care which local address is assigned, you can create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using <ph id="ph2">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> as the address parameter, and the underlying service provider will assign the most appropriate network address.</source>
          <target state="translated">如果你不关心哪些本地地址分配，你可以创建<ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph>使用<ph id="ph2">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph>地址参数，以及基础服务提供程序将分配的最合适的网络地址。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This might help simplify your application if you have multiple network interfaces.</source>
          <target state="translated">这可能有助于简化你的应用程序，如果你有多个网络接口。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you do not care which local port is used, you can create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using 0 for the port number.</source>
          <target state="translated">如果你不关心使用哪个本地端口，则可以创建<ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph>使用 0 作为端口号。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>In this case, the service provider will assign an available ephemeral port number.</source>
          <target state="translated">在这种情况下，服务提供商将分配一个可用的临时端口号。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法，以开始侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>The following code example creates an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class using the local endpoint.</source>
          <target state="translated">下面的代码示例创建的实例<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>类使用的本地终结点。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source><ph id="ph1">&lt;paramref name="localEP" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localEP" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> that represents the local IP address.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>，它表示本地 IP 地址。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">用来侦听传入的连接尝试的端口。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class that listens for incoming connection attempts on the specified local IP address and port number.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 类的新实例，该类在指定的本地 IP 地址和端口号上侦听是否有传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</source>
          <target state="translated">此构造函数允许你指定的本地 IP 地址和端口号用于侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Before calling this constructor you must first create an <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> using the desired local address.</source>
          <target state="translated">在调用此构造函数之前你必须首先创建<ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph>使用所需的本地地址。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Pass this <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> to the constructor as the <ph id="ph2">`localaddr`</ph> parameter.</source>
          <target state="translated">将此传递<ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph>到构造函数、 作为<ph id="ph2">`localaddr`</ph>参数。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you do not care which local address is assigned, specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> for the <ph id="ph2">`localaddr`</ph> parameter, and the underlying service provider will assign the most appropriate network address.</source>
          <target state="translated">如果你不关心分配的本地地址，指定<ph id="ph1">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph>为<ph id="ph2">`localaddr`</ph>参数，并且基础服务提供程序将分配的最合适的网络地址。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This might help simplify your application if you have multiple network interfaces.</source>
          <target state="translated">这可能有助于简化你的应用程序，如果你有多个网络接口。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you do not care which local port is used, you can specify 0 for the port number.</source>
          <target state="translated">如果你不关心使用哪个本地端口，则可以指定的端口号 0。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>In this case, the service provider will assign an available port number between 1024 and 5000.</source>
          <target state="translated">在这种情况下，服务提供商将分配 1024年和 5000 之间可用的端口号。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法，以开始侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>The following code example creates an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class using a local IP address and port number.</source>
          <target state="translated">下面的代码示例创建的实例<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>类使用本地 IP 地址和端口号。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="localaddr" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localaddr" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="port" /&gt;</ph> is not between <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="port" /&gt;</ph> 不在 <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> 和 <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph> 之间。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>Accepts a pending connection request.</source>
          <target state="translated">接受挂起的连接请求。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">用于发送和接收数据的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> is a blocking method that returns a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 是一个返回的阻止方法<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>可用于发送和接收数据。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>If you want to avoid blocking, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method to determine if connection requests are available in the incoming connection queue.</source>
          <target state="translated">如果你想要避免阻止，使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph>方法来确定是否可在传入的连接队列连接请求。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned is initialized with the IP address and port number of the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>返回初始化与远程主机的 IP 地址和端口号。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>You can use any of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> methods available in the <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class to communicate with the remote host.</source>
          <target state="translated">你可以使用任一<ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph>方法中提供<ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>类与远程主机通信。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> method.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>，一定要调用其<ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>If your application is relatively simple, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method rather than the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">如果你的应用程序相对简单，请考虑使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法而不是<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 用于发送和接收数据通过阻止同步模式下的网络提供了简单的方法。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>In the following code example, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method is used to return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">在下面的代码示例中，<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法用于返回<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>This <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is used to communicate with the newly connected client.</source>
          <target state="translated">这<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>用于与新连接的客户端通信。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">尚未通过调用 <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> 来启动该侦听器。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>Accepts a pending connection request as an asynchronous operation.</source>
          <target state="translated">接受挂起的连接请求以作为异步操作。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">任务对象上的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 属性返回了用于发送和接收数据的 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the socket connection has been accepted.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象都完成后的套接字连接已被接受。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned in <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is initialized with the IP address and port number of the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>中返回<ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>初始化与远程主机的 IP 地址和端口号。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>You can use any of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> methods available in the <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class to communicate with the remote host.</source>
          <target state="translated">你可以使用任一<ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph>方法中提供<ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>类与远程主机通信。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> method.</source>
          <target state="translated">完成之后使用<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>，一定要调用其<ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>If your application is relatively simple, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method rather than the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph> method.</source>
          <target state="translated">如果你的应用程序相对简单，请考虑使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法而不是<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 用于发送和接收数据通过阻止同步模式下的网络提供了简单的方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">尚未通过调用 <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> 来启动该侦听器。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Accepts a pending connection request.</source>
          <target state="translated">接受挂起的连接请求。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">用于发送和接收数据的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> is a blocking method that returns a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 是一个返回的阻止方法<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>可用于发送和接收数据。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph>方法来确定是否连接请求将传入的连接队列中可用，是否你想要避免阻止。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> of the returned <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph>方法来获取基础<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>返回<ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> will provide you with methods for sending and receiving with the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>将为你提供方法用于发送和接收与远程主机。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>When you are through with the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method.</source>
          <target state="translated">当您将通过与<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>，一定要调用其<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>If you want greater flexibility than a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offers, consider using <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</source>
          <target state="translated">如果你想更大的灵活性比<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>优惠，请考虑使用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>In the following code example, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method is used to return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">在下面的代码示例中，<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法用于返回<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>This <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> is used to communicate with the newly connected client.</source>
          <target state="translated">这<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>用于与新连接的客户端通信。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">尚未通过调用 <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> 来启动该侦听器。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 属性获取指定的错误代码。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Accepts a pending connection request as an asynchronous operation.</source>
          <target state="translated">接受挂起的连接请求以作为异步操作。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">表示异步操作的任务对象。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">任务对象上的 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 属性返回了用于发送和接收数据的 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>This operation will not block.</source>
          <target state="translated">不会阻止此操作。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the TCP connection has been accepted.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>对象都完成后已被接受 TCP 连接。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> of the returned <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> in the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph>方法来获取基础<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>返回<ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>中<ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> will provide you with methods for sending and receiving with the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>将为你提供方法用于发送和接收与远程主机。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>When you are through with the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method.</source>
          <target state="translated">当您将通过与<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>，一定要调用其<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>If you want greater flexibility than a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offers, consider using <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph>.</source>
          <target state="translated">如果你想更大的灵活性比<ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>优惠，请考虑使用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">尚未通过调用 <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> 来启动该侦听器。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 属性获取指定的错误代码。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>Gets a value that indicates whether <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> is actively listening for client connections.</source>
          <target state="translated">获取一个值，该值指示 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 是否正主动侦听客户端连接。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> is actively listening; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 正主动侦听，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> can use this property to determine if the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is currently listening for incoming connection attempts.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>可以使用此属性来确定如果<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>程序当前正在侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt;</ph> property can be used to avoid redundant <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> attempts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt;</ph>属性可以用于避免冗余<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>尝试。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>A Boolean value that specifies whether to enable or disable NAT traversal.</source>
          <target state="translated">一个布尔值，该值指定是启用还是禁用 NAT 遍历。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>Enables or disables Network Address Translation (NAT) traversal on a <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance.</source>
          <target state="translated">启用或禁用针对 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 实例的网络地址转换 (NAT) 遍历。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method is used to enable or disable NAT traversal for a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph>方法用于启用或禁用的 NAT 遍历<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</source>
          <target state="translated">可能使用 Teredo、 6to4 或 ISATAP 隧道提供 NAT 遍历。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is false, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>.</source>
          <target state="translated">当<ph id="ph1">`allowed`</ph>参数为 false，<ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph>关联的套接字上的选项设置为<ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>This explicitly disables NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> instance.</source>
          <target state="translated">这将显式禁止 NAT 遍历<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is true, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>.</source>
          <target state="translated">当<ph id="ph1">`allowed`</ph>参数为 true，<ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph>关联的套接字上的选项设置为<ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>This may allow NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> depending on firewall rules in place on the system.</source>
          <target state="translated">这可能使 NAT 遍历<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>具体取决于系统上实施防火墙规则。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method must be invoked prior to calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection requests (before the socket is bound).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph>必须在调用之前调用方法<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法，以开始侦听传入的连接请求 （之前不会绑定套接字）。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method is called after the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method, then an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph>方法后，会调用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法，则<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>将引发。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>A Teredo address is an IPv6 address with the prefix of 2001::/32.</source>
          <target state="translated">Teredo 地址是 IPv6 地址的前缀为 2001年:: / 32。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</source>
          <target state="translated">Teredo 地址可以返回通过正常的 DNS 名称解析或枚举为分配给了本地接口的 IPv6 地址。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /&gt;</ph> method was called after calling the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> method</source>
          <target state="translated">在调用 <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /&gt;</ph> 方法之后调用 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> 方法</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委托，它引用操作完成时要调用的方法。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>A user-defined object containing information about the accept operation.</source>
          <target state="translated">一个用户定义对象，其中包含接收操作的相关信息。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This object is passed to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> delegate when the operation is complete.</source>
          <target state="translated">操作完成后，此对象会被传递给 <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> 委托。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to accept an incoming connection attempt.</source>
          <target state="translated">开始一个异步操作来接受一个传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous creation of the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，它引用 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 的异步创建。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">异步<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph>操作必须通过调用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>Typically, the method is invoked by the <ph id="ph1">`callback`</ph> delegate.</source>
          <target state="translated">通常情况下，通过调用该方法<ph id="ph1">`callback`</ph>委托。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This method does not block until the operation completes.</source>
          <target state="translated">此方法不会阻止该操作完成之前。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>To block until the operation completes, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">若要阻止该操作完成之前，请使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">有关使用异步编程模型的详细信息，请参阅<bpt id="p1">[</bpt>异步调用同步方法<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to identify the remote host's network address and port number.</source>
          <target state="translated">你可以调用<ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph>属性返回的<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>来标识远程主机的网络地址和端口号。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">如果你收到<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指<bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept>为详细错误说明。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">下面的代码示例演示如何将<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph>方法创建并连接套接字。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">回调委托调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph>方法来结束该异步请求。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An error occurred while attempting to access the socket.</source>
          <target state="translated">尝试访问套接字时出错。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 已关闭。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委托，它引用操作完成时要调用的方法。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>A user-defined object containing information about the accept operation.</source>
          <target state="translated">一个用户定义对象，其中包含接收操作的相关信息。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This object is passed to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> delegate when the operation is complete.</source>
          <target state="translated">操作完成后，此对象会被传递给 <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> 委托。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to accept an incoming connection attempt.</source>
          <target state="translated">开始一个异步操作来接受一个传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous creation of the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，它引用 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> 的异步创建。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">异步<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph>操作必须通过调用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>Typically, the method is invoked by the <ph id="ph1">`callback`</ph> delegate.</source>
          <target state="translated">通常情况下，通过调用该方法<ph id="ph1">`callback`</ph>委托。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This method does not block until the operation completes.</source>
          <target state="translated">此方法不会阻止该操作完成之前。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>To block until the operation completes, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">若要阻止该操作完成之前，请使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">有关使用异步编程模型的详细信息，请参阅<bpt id="p1">[</bpt>异步调用同步方法<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">如果你收到<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指<bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept>为详细错误说明。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">下面的代码示例演示如何将<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph>方法创建并连接套接字。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">回调委托调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph>方法来结束该异步请求。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An error occurred while attempting to access the socket.</source>
          <target state="translated">尝试访问套接字时出错。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 已关闭。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">用来侦听传入的连接尝试的端口。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance to listen on the specified port.</source>
          <target state="translated">创建一个新的侦听指定端口的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance to listen on the specified port.</source>
          <target state="translated">一个新的用于侦听指定端口的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 实例。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">通过调用 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 方法返回 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>Asynchronously accepts an incoming connection attempt and creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> to handle remote host communication.</source>
          <target state="translated">异步接受传入的连接尝试，并创建新的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 来处理远程主机通信。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">用于发送和接收数据的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>This method blocks until the operation is complete.</source>
          <target state="translated">此方法受到阻止，直到操作完成。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">若要以同步方式执行此操作，使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to identify the remote host's network address and port number.</source>
          <target state="translated">你可以调用<ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph>属性返回的<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>来标识远程主机的网络地址和端口号。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">如果你收到<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指<bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept>为详细错误说明。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">下面的代码示例演示如何将<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph>方法创建并连接套接字。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">回调委托调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph>方法来结束该异步请求。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">已关闭基础 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter was not created by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">调用 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> 方法后，未创建 <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 参数。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /&gt;</ph> method was previously called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /&gt;</ph> 方法以前被调用过。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>An error occurred while attempting to access the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">尝试访问 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 时发生错误。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">通过调用 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 方法返回 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>Asynchronously accepts an incoming connection attempt and creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> to handle remote host communication.</source>
          <target state="translated">异步接受传入的连接尝试，并创建新的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> 来处理远程主机通信。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">用于发送和接收数据的 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>This method blocks until the operation is complete.</source>
          <target state="translated">此方法受到阻止，直到操作完成。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">若要以同步方式执行此操作，使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the underlying socket (<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph>) to identify the remote host's network address and port number.</source>
          <target state="translated">你可以调用<ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph>基础套接字的属性 (<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph>) 来标识远程主机的网络地址和端口号。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">如果你收到<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指<bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept>为详细错误说明。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">下面的代码示例演示如何将<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph>方法创建并连接套接字。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">回调委托调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph>方法来结束该异步请求。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Gets or sets a <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value that specifies whether the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> allows only one underlying socket to listen to a specific port.</source>
          <target state="translated">获取或设置一个 <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> 值，该值指定 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 是否只允许一个基础套接字来侦听特定端口。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> allows only one <ph id="ph3">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> to listen to a specific port; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 只允许一个 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 来侦听特定端口，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <ph id="ph2">&lt;see langword="false" /&gt;</ph> for all other versions.</source>
          <target state="translated">在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；在所有其他版本中，默认为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>By default, multiple listeners can listen to a specific port.</source>
          <target state="translated">默认情况下，多个侦听器可以侦听特定端口。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>However, only one of the listeners can perform operations on the network traffic sent to the port.</source>
          <target state="translated">但是，只有一个侦听器可以执行网络流量发送到端口的操作。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</source>
          <target state="translated">如果多个侦听器尝试将绑定到特定端口，则采用更具体的 IP 地址处理发送到该端口的网络流量。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A&gt;</ph> property to prevent multiple listeners from listening to a specific port.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A&gt;</ph>属性以防止多个侦听器侦听特定端口。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Set this property before calling <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>, or call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method and then set this property.</source>
          <target state="translated">将之前调用此属性设置<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>，或调用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法并将此属性。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The following code example gets and sets the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A&gt;</ph> property.</source>
          <target state="translated">下面的代码示例获取和设置<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> has been started.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 已经启动。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Call the <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method and then set the <ph id="ph2">&lt;see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /&gt;</ph> property.</source>
          <target state="translated">调用 <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> 方法，然后设置 <ph id="ph2">&lt;see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>An error occurred when attempting to access the underlying socket.</source>
          <target state="translated">尝试访问基础套接字时出错。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">已关闭基础 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> of the current <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> 的基础 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> to which the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is bound.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> 绑定到的 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph>属性来标识用于侦听传入的客户端连接请求，套接字连接后的本地网络接口和端口号。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You must first cast this <ph id="ph1">&lt;xref:System.Net.EndPoint&gt;</ph> to an <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>.</source>
          <target state="translated">您必须首先将转换这<ph id="ph1">&lt;xref:System.Net.EndPoint&gt;</ph>到<ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You can then call the <ph id="ph1">&lt;xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType&gt;</ph> property to retrieve the local IP address, and the <ph id="ph2">&lt;xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType&gt;</ph> property to retrieve the local port number.</source>
          <target state="translated">然后，你可以调用<ph id="ph1">&lt;xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType&gt;</ph>属性来检索本地 IP 地址，与<ph id="ph2">&lt;xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType&gt;</ph>属性来检索本地端口号。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>The following code example displays the local IP address and port number on which the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> is listening for incoming connection requests.</source>
          <target state="translated">下面的代码示例显示在其上的本地 IP 地址和端口号<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>侦听传入连接请求。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>Determines if there are pending connection requests.</source>
          <target state="translated">确定是否有挂起的连接请求。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if connections are pending; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果连接正挂起，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>This non-blocking method determines if there are any pending connection requests.</source>
          <target state="translated">此非阻止方法确定是否有任何挂起的连接请求。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>Because the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> methods block execution until the <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method has queued an incoming connection request, the <ph id="ph4">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method can be used to determine if connections are available before attempting to accept them.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法阻止执行，直到<ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法已排队的传入连接请求，<ph id="ph4">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph>方法可以用于确定连接之前尝试接受这些条款是否可用。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>The following code example checks the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例检查<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>If a connection request is waiting to be accepted, then a call to the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method is made.</source>
          <target state="translated">如果连接请求正在等待可接受，然后调用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法由。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">尚未通过调用 <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> 来启动该侦听器。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Gets the underlying network <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">获取基础网络 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">基础 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to listen for incoming client connection requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 创建<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>侦听传入的客户端连接请求。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> can use this property to get this <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>可以使用此属性来获取这<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> provides.</source>
          <target state="translated">使用基础<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>返回<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph>以外的属性，如果你需要访问这些<ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>提供。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property only returns the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> used to listen for incoming client connection requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph>属性仅返回<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>用来侦听传入的客户端连接请求。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method to accept a pending connection request and obtain a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> for sending and receiving data.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法接受挂起的连接请求并获取<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>用于发送和接收数据。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method to accept a pending connection request and obtain a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> for sending and receiving data.</source>
          <target state="translated">你还可以使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法接受挂起的连接请求并获取<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>用于发送和接收数据。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property.</source>
          <target state="translated">下面的代码示例演示如何将<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is retrieved and the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.Linger&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</source>
          <target state="translated">基础<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>检索和<ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.Linger&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>选项配置为超时在 10 秒后如果数据仍会保留在网络缓冲区后的连接将关闭。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Starts listening for incoming connection requests.</source>
          <target state="translated">开始侦听传入的连接请求。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Starts listening for incoming connection requests.</source>
          <target state="translated">开始侦听传入的连接请求。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method initializes the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, binds it to a local endpoint, and listens for incoming connection attempts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法初始化基础<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>、 将其绑定到的本地终结点，并侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If a connection request is received, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method will queue the request and continue listening for additional requests until you call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method.</source>
          <target state="translated">如果收到连接请求时，<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法将对请求进行排队并继续侦听其他的请求，直到你调用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> receives a connection request after it has already queued the maximum number of connections, it will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> on the client.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>接收连接请求它已排入队列的最大连接数后，它会引发<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>客户端上。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>To remove a connection from the incoming connection queue, use either the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">若要从传入的连接队列中删除的连接，使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method will remove a connection from the queue and return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法将从队列删除的连接并返回<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>可用于发送和接收数据。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method will return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to do the same.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法将返回<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>可用于执行相同操作。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If your application only requires synchronous I/O, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</source>
          <target state="translated">如果你的应用程序仅需要同步 I/O，使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>For more detailed behavioral control, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</source>
          <target state="translated">有关详细行为的控件，请使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Both of these methods block until a connection request is available in the queue.</source>
          <target state="translated">连接请求队列中出现一直进行阻止这两种方法。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> and stop listening.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法来关闭<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>并停止侦听。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">你负责分别关闭所接受的连接。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> is used to listen for incoming client connection attempts.</source>
          <target state="translated">下面的代码示例演示如何<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>用于侦听传入的客户端连接尝试。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 属性获取指定的错误代码。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The maximum length of the pending connections queue.</source>
          <target state="translated">挂起连接队列的最大长度。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Starts listening for incoming connection requests with a maximum number of pending connection.</source>
          <target state="translated">启动对具有最大挂起连接数的传入连接请求的侦听。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method initializes the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, binds it to a local endpoint, and listens for incoming connection attempts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>方法初始化基础<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>、 将其绑定到的本地终结点，并侦听传入的连接尝试。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If a connection request is received, <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> will queue the request and continue listening for additional requests until you call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method.</source>
          <target state="translated">如果收到连接请求时，<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>将对请求进行排队并继续侦听其他的请求，直到你调用<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> receives a connection request after it has already queued the maximum number of connections it will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> on the client.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>接收连接请求之后它已排入队列的最大，它将引发的连接数,<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>客户端上。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>To remove a connection from the incoming connection queue, use either the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">若要从传入的连接队列中删除的连接，使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method will remove a connection from the queue and return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>方法将从队列删除的连接并返回<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>可用于发送和接收数据。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method will return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to do the same.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法将返回<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>可用于执行相同操作。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If your application only requires synchronous I/O, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</source>
          <target state="translated">如果你的应用程序仅需要同步 I/O，使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>For more detailed behavioral control, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">有关详细行为的控件，请使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Both of these methods block until a connection request is available in the queue.</source>
          <target state="translated">连接请求队列中出现一直进行阻止这两种方法。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> and stop listening.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法来关闭<ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>并停止侦听。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">你负责分别关闭所接受的连接。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph2">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指<bpt id="p1">[</bpt> <ph id="ph2">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept>有关错误的详细说明。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> is used to listen for incoming client connection attempts.</source>
          <target state="translated">下面的代码示例演示如何<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>用于侦听传入的客户端连接尝试。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>An error occurred while accessing the socket.</source>
          <target state="translated">访问套接字时出错。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="backlog" /&gt;</ph> parameter is less than zero or exceeds the maximum number of permitted connections.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="backlog" /&gt;</ph> 参数小于零或超出允许的最大连接数。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is null.</source>
          <target state="translated">基础 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 为空。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Closes the listener.</source>
          <target state="translated">关闭侦听器。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> closes the listener.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 关闭侦听器。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Any unaccepted connection requests in the queue will be lost.</source>
          <target state="translated">在队列中的任何不可接受的连接请求将会丢失。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Remote hosts waiting for a connection to be accepted will throw a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">远程主机等待连接接受将引发<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">你负责分别关闭所接受的连接。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在.NET Framework 中进行网络跟踪<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph>方法来关闭基础<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 属性获取指定的错误代码。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method also closes the underlying <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>, and creates a new <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> for the <ph id="ph4">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph>方法也会关闭基础<ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>，并创建一个新<ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>为<ph id="ph4">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>If you set any properties on the underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> prior to calling the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method, those properties will not carry over to the new <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">如果基础上设置任何属性<ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>之前调用<ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph>方法，这些属性将不会延续到新<ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>