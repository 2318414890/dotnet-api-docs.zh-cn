<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70b4efe2d402b27e3285b56bb7a50aff7def9e09" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461081" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4c491-101">侦听来自 TCP 网络客户端的连接。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4c491-101">Listens for connections from TCP network clients.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-102"><xref:System.Net.Sockets.TcpListener>类提供侦听和接受传入连接请求，在阻止同步模式的简单方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-102">The <xref:System.Net.Sockets.TcpListener> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</span></span> <span data-ttu-id="4c491-103">你可以使用<xref:System.Net.Sockets.TcpClient>或<xref:System.Net.Sockets.Socket>连接与<xref:System.Net.Sockets.TcpListener>。</span><span class="sxs-lookup"><span data-stu-id="4c491-103">You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a <xref:System.Net.Sockets.TcpListener>.</span></span> <span data-ttu-id="4c491-104">创建<xref:System.Net.Sockets.TcpListener>使用<xref:System.Net.IPEndPoint>，本地 IP 地址和端口号或只是端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-104">Create a <xref:System.Net.Sockets.TcpListener> using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number.</span></span> <span data-ttu-id="4c491-105">指定<xref:System.Net.IPAddress.Any>本地 IP 地址和本地端口号，如果你想要为您分配这些值的基础服务提供程序为 0。</span><span class="sxs-lookup"><span data-stu-id="4c491-105">Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</span></span> <span data-ttu-id="4c491-106">如果你选择这样做，则可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性来标识已指定的信息后套接字连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-106">If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.</span></span>  
  
 <span data-ttu-id="4c491-107">使用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入连接请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-107">Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests.</span></span> <span data-ttu-id="4c491-108"><xref:System.Net.Sockets.TcpListener.Start%2A> 将排队等待传入的连接，直到你可以调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法或它已排队<xref:System.Net.Sockets.SocketOptionName.MaxConnections>。</span><span class="sxs-lookup"><span data-stu-id="4c491-108"><xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span></span> <span data-ttu-id="4c491-109">可以使用两种<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>请求从传入的连接请求队列的连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-109">Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue.</span></span> <span data-ttu-id="4c491-110">将阻止这两种方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-110">These two methods will block.</span></span> <span data-ttu-id="4c491-111">如果你想要避免阻止，则可以使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法首先确定连接请求是否可在队列中。</span><span class="sxs-lookup"><span data-stu-id="4c491-111">If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.</span></span>  
  
 <span data-ttu-id="4c491-112">调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭<xref:System.Net.Sockets.TcpListener>。</span><span class="sxs-lookup"><span data-stu-id="4c491-112">Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-113"><xref:System.Net.Sockets.TcpListener.Stop%2A>方法不会关闭任何已接受的连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-113">The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections.</span></span> <span data-ttu-id="4c491-114">你负责分别关闭这些连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-114">You are responsible for closing these separately.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-115">下面的代码示例创建<xref:System.Net.Sockets.TcpListener>。</span><span class="sxs-lookup"><span data-stu-id="4c491-115">The following code example creates a <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 <span data-ttu-id="4c491-116">请参阅<xref:System.Net.Sockets.TcpClient>有关客户端示例。</span><span class="sxs-lookup"><span data-stu-id="4c491-116">See <xref:System.Net.Sockets.TcpClient> for a client example.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">
      <span data-ttu-id="4c491-117">若要建立一个传出连接或接受传入请求。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4c491-117">to establish an outgoing connection or accept an incoming request.</span>
      </span>
    </permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c491-118">初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-118">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">
          <span data-ttu-id="4c491-119">用来侦听传入的连接尝试的端口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-119">The port on which to listen for incoming connection attempts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-120">初始化在指定端口上侦听的 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens on the specified port.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-121">此构造函数已过时。</span><span class="sxs-lookup"><span data-stu-id="4c491-121">This constructor is obsolete.</span></span> <span data-ttu-id="4c491-122">使用<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType>或<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="4c491-122">Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> constructors.</span></span>  
  
 <span data-ttu-id="4c491-123">此构造函数，可指定用于侦听传入的连接尝试的端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-123">This constructor allows you to specify the port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="4c491-124">使用此构造函数，基础服务提供程序将分配的最合适的网络地址。</span><span class="sxs-lookup"><span data-stu-id="4c491-124">With this constructor, the underlying service provider assigns the most appropriate network address.</span></span> <span data-ttu-id="4c491-125">如果你不关心使用哪个本地端口，则可以指定的端口号 0。</span><span class="sxs-lookup"><span data-stu-id="4c491-125">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="4c491-126">在这种情况下，服务提供商将分配一个可用的临时端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-126">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="4c491-127">如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="4c491-127">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="4c491-128">调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-128">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-129">下面的代码示例创建<xref:System.Net.Sockets.TcpListener>使用本地端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-129">The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4c491-130">
            <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-130">
              <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <span data-ttu-id="4c491-131">一个 <see cref="T:System.Net.IPEndPoint" />，它表示将侦听器 <see cref="T:System.Net.Sockets.Socket" /> 绑定到的本地终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-131">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-132">使用指定的本地终结点初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-132">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified local endpoint.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-133">此构造函数允许你指定的本地 IP 地址和端口号用于侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-133">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="4c491-134">使用此构造函数之前，必须创建<xref:System.Net.IPEndPoint>使用所需的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-134">Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number.</span></span> <span data-ttu-id="4c491-135">将此传递<xref:System.Net.IPEndPoint>到构造函数、 作为`localEP`参数。</span><span class="sxs-lookup"><span data-stu-id="4c491-135">Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.</span></span>  
  
 <span data-ttu-id="4c491-136">如果你不关心哪些本地地址分配，你可以创建<xref:System.Net.IPEndPoint>使用<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>地址参数，以及基础服务提供程序将分配的最合适的网络地址。</span><span class="sxs-lookup"><span data-stu-id="4c491-136">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="4c491-137">这可能有助于简化你的应用程序，如果你有多个网络接口。</span><span class="sxs-lookup"><span data-stu-id="4c491-137">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="4c491-138">如果你不关心使用哪个本地端口，则可以创建<xref:System.Net.IPEndPoint>使用 0 作为端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-138">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="4c491-139">在这种情况下，服务提供商将分配一个可用的临时端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-139">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="4c491-140">如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="4c491-140">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="4c491-141">调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-141">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-142">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-142">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-143">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-143">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-144">下面的代码示例创建的实例<xref:System.Net.Sockets.TcpListener>类使用的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="4c491-144">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c491-145">
            <paramref name="localEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-145">
              <paramref name="localEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr">
          <span data-ttu-id="4c491-146">一个 <see cref="T:System.Net.IPAddress" />，它表示本地 IP 地址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-146">An <see cref="T:System.Net.IPAddress" /> that represents the local IP address.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="4c491-147">用来侦听传入的连接尝试的端口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-147">The port on which to listen for incoming connection attempts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-148">初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例，该类在指定的本地 IP 地址和端口号上侦听是否有传入的连接尝试。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-148">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens for incoming connection attempts on the specified local IP address and port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-149">此构造函数允许你指定的本地 IP 地址和端口号用于侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-149">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="4c491-150">在调用此构造函数之前你必须首先创建<xref:System.Net.IPAddress>使用所需的本地地址。</span><span class="sxs-lookup"><span data-stu-id="4c491-150">Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address.</span></span> <span data-ttu-id="4c491-151">将此传递<xref:System.Net.IPAddress>到构造函数、 作为`localaddr`参数。</span><span class="sxs-lookup"><span data-stu-id="4c491-151">Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter.</span></span> <span data-ttu-id="4c491-152">如果你不关心分配的本地地址，指定<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>为`localaddr`参数，并且基础服务提供程序将分配的最合适的网络地址。</span><span class="sxs-lookup"><span data-stu-id="4c491-152">If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="4c491-153">这可能有助于简化你的应用程序，如果你有多个网络接口。</span><span class="sxs-lookup"><span data-stu-id="4c491-153">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="4c491-154">如果你不关心使用哪个本地端口，则可以指定的端口号 0。</span><span class="sxs-lookup"><span data-stu-id="4c491-154">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="4c491-155">在这种情况下，服务提供商将分配 1024年和 5000 之间可用的端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-155">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span> <span data-ttu-id="4c491-156">如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="4c491-156">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="4c491-157">调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-157">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-158">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-158">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-159">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-159">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-160">下面的代码示例创建的实例<xref:System.Net.Sockets.TcpListener>类使用本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-160">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c491-161">
            <paramref name="localaddr" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-161">
              <paramref name="localaddr" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4c491-162">
            <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-162">
              <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c491-163">接受挂起的连接请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-163">Accepts a pending connection request.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-164">用于发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-164">A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 是一个返回的阻止方法<xref:System.Net.Sockets.Socket>可用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="4c491-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data.</span></span> <span data-ttu-id="4c491-166">如果你想要避免阻止，使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法来确定是否可在传入的连接队列连接请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-166">If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.</span></span>  
  
 <span data-ttu-id="4c491-167"><xref:System.Net.Sockets.Socket>返回初始化与远程主机的 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-167">The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="4c491-168">你可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>和<xref:System.Net.Sockets.Socket.Receive%2A>方法中提供<xref:System.Net.Sockets.Socket>类与远程主机通信。</span><span class="sxs-lookup"><span data-stu-id="4c491-168">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="4c491-169">完成之后使用<xref:System.Net.Sockets.Socket>，一定要调用其<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-169">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="4c491-170">如果你的应用程序相对简单，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而不是<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-170">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4c491-171"><xref:System.Net.Sockets.TcpClient> 用于发送和接收数据通过阻止同步模式下的网络提供了简单的方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-171"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-172">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-172">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-173">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-173">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-174">在下面的代码示例中，<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法用于返回<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="4c491-174">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method is used to return a <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="4c491-175">这<xref:System.Net.Sockets.Socket>用于与新连接的客户端通信。</span><span class="sxs-lookup"><span data-stu-id="4c491-175">This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-176">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-176">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c491-177">接受挂起的连接请求以作为异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-177">Accepts a pending connection request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-178">返回 <see cref="T:System.Threading.Tasks.Task`1" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-178">Returns <see cref="T:System.Threading.Tasks.Task`1" /></span>
          </span>
          <span data-ttu-id="4c491-179">表示异步操作的任务对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-179">The task object representing the asynchronous operation.</span>
          </span>
          <span data-ttu-id="4c491-180">任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性返回了用于发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-180">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-181">不会阻止此操作。</span><span class="sxs-lookup"><span data-stu-id="4c491-181">This operation will not block.</span></span> <span data-ttu-id="4c491-182">返回<xref:System.Threading.Tasks.Task%601>对象都完成后的套接字连接已被接受。</span><span class="sxs-lookup"><span data-stu-id="4c491-182">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.</span></span>  
  
 <span data-ttu-id="4c491-183"><xref:System.Net.Sockets.Socket>中返回<xref:System.Threading.Tasks.Task%601>初始化与远程主机的 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-183">The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="4c491-184">你可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>和<xref:System.Net.Sockets.Socket.Receive%2A>方法中提供<xref:System.Net.Sockets.Socket>类与远程主机通信。</span><span class="sxs-lookup"><span data-stu-id="4c491-184">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="4c491-185">完成之后使用<xref:System.Net.Sockets.Socket>，一定要调用其<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-185">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="4c491-186">如果你的应用程序相对简单，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而不是<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-186">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> method.</span></span> <span data-ttu-id="4c491-187"><xref:System.Net.Sockets.TcpClient> 用于发送和接收数据通过阻止同步模式下的网络提供了简单的方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-187"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-188">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-188">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-189">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-189">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-190">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-190">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c491-191">接受挂起的连接请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-191">Accepts a pending connection request.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-192">用于发送和接收数据的 <see cref="T:System.Net.Sockets.TcpClient" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-192">A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-193"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 是一个返回的阻止方法<xref:System.Net.Sockets.TcpClient>可用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="4c491-193"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="4c491-194">使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法来确定是否连接请求将传入的连接队列中可用，是否你想要避免阻止。</span><span class="sxs-lookup"><span data-stu-id="4c491-194">Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</span></span>  
  
 <span data-ttu-id="4c491-195">使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法来获取基础<xref:System.Net.Sockets.NetworkStream>返回<xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="4c491-195">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="4c491-196"><xref:System.Net.Sockets.NetworkStream>将为你提供方法用于发送和接收与远程主机。</span><span class="sxs-lookup"><span data-stu-id="4c491-196">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="4c491-197">当您将通过与<xref:System.Net.Sockets.TcpClient>，一定要调用其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-197">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="4c491-198">如果你想更大的灵活性比<xref:System.Net.Sockets.TcpClient>优惠，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。</span><span class="sxs-lookup"><span data-stu-id="4c491-198">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-199">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-199">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-200">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-200">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-201">在下面的代码示例中，<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法用于返回<xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="4c491-201">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is used to return a <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="4c491-202">这<xref:System.Net.Sockets.TcpClient>用于与新连接的客户端通信。</span><span class="sxs-lookup"><span data-stu-id="4c491-202">This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-203">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-203">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-204">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-204">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="4c491-205">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-205">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c491-206">接受挂起的连接请求以作为异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-206">Accepts a pending connection request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-207">返回 <see cref="T:System.Threading.Tasks.Task`1" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-207">Returns <see cref="T:System.Threading.Tasks.Task`1" /></span>
          </span>
          <span data-ttu-id="4c491-208">表示异步操作的任务对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-208">The task object representing the asynchronous operation.</span>
          </span>
          <span data-ttu-id="4c491-209">任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性返回了用于发送和接收数据的 <see cref="T:System.Net.Sockets.TcpClient" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-209">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-210">不会阻止此操作。</span><span class="sxs-lookup"><span data-stu-id="4c491-210">This operation will not block.</span></span> <span data-ttu-id="4c491-211">返回<xref:System.Threading.Tasks.Task%601>对象都完成后已被接受 TCP 连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-211">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.</span></span>  
  
 <span data-ttu-id="4c491-212">使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法来获取基础<xref:System.Net.Sockets.NetworkStream>返回<xref:System.Net.Sockets.TcpClient>中<xref:System.Threading.Tasks.Task%601>。</span><span class="sxs-lookup"><span data-stu-id="4c491-212">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="4c491-213"><xref:System.Net.Sockets.NetworkStream>将为你提供方法用于发送和接收与远程主机。</span><span class="sxs-lookup"><span data-stu-id="4c491-213">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="4c491-214">当您将通过与<xref:System.Net.Sockets.TcpClient>，一定要调用其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-214">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="4c491-215">如果你想更大的灵活性比<xref:System.Net.Sockets.TcpClient>优惠，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="4c491-215">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-216">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-216">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-217">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-217">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-218">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-218">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-219">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-219">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="4c491-220">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-220">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c491-221">获取一个值，该值指示 <see cref="T:System.Net.Sockets.TcpListener" /> 是否正主动侦听客户端连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-221">Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening for client connections.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c491-222">如果 <see cref="T:System.Net.Sockets.TcpListener" /> 正主动侦听，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-222">
              <see langword="true" /> if <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-223">类派生自<xref:System.Net.Sockets.TcpListener>可以使用此属性来确定如果<xref:System.Net.Sockets.Socket>程序当前正在侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-223">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts.</span></span> <span data-ttu-id="4c491-224"><xref:System.Net.Sockets.TcpClient.Active%2A>属性可以用于避免冗余<xref:System.Net.Sockets.TcpListener.Start%2A>尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-224">The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">
          <span data-ttu-id="4c491-225">一个布尔值，该值指定是启用还是禁用 NAT 遍历。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-225">A Boolean value that specifies whether to enable or disable NAT traversal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-226">启用或禁用针对 <see cref="T:System.Net.Sockets.TcpListener" /> 实例的网络地址转换 (NAT) 遍历。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-226">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-227"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法用于启用或禁用的 NAT 遍历<xref:System.Net.Sockets.TcpListener>实例。</span><span class="sxs-lookup"><span data-stu-id="4c491-227">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span> <span data-ttu-id="4c491-228">可能使用 Teredo、 6to4 或 ISATAP 隧道提供 NAT 遍历。</span><span class="sxs-lookup"><span data-stu-id="4c491-228">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="4c491-229">当`allowed`参数为 false，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>关联的套接字上的选项设置为<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>。</span><span class="sxs-lookup"><span data-stu-id="4c491-229">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="4c491-230">这将显式禁止 NAT 遍历<xref:System.Net.Sockets.TcpListener>实例。</span><span class="sxs-lookup"><span data-stu-id="4c491-230">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span>  
  
 <span data-ttu-id="4c491-231">当`allowed`参数为 true，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>关联的套接字上的选项设置为<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>。</span><span class="sxs-lookup"><span data-stu-id="4c491-231">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="4c491-232">这可能使 NAT 遍历<xref:System.Net.Sockets.TcpListener>具体取决于系统上实施防火墙规则。</span><span class="sxs-lookup"><span data-stu-id="4c491-232">This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="4c491-233"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>必须在调用之前调用方法<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接请求 （之前不会绑定套接字）。</span><span class="sxs-lookup"><span data-stu-id="4c491-233">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound).</span></span> <span data-ttu-id="4c491-234">如果<xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法后，会调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，则<xref:System.InvalidOperationException>将引发。</span><span class="sxs-lookup"><span data-stu-id="4c491-234">If <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
 <span data-ttu-id="4c491-235">Teredo 地址是 IPv6 地址的前缀为 2001年:: / 32。</span><span class="sxs-lookup"><span data-stu-id="4c491-235">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="4c491-236">Teredo 地址可以返回通过正常的 DNS 名称解析或枚举为分配给了本地接口的 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="4c491-236">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-237">在调用 <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 方法之后调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 方法</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-237">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start" /> method</span>
          </span>
        </exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="4c491-238">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-238">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="4c491-239">一个用户定义对象，其中包含接收操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-239">A user-defined object containing information about the accept operation.</span>
          </span>
          <span data-ttu-id="4c491-240">操作完成后，此对象会被传递给 <c>callback</c> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-240">This object is passed to the <c>callback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-241">开始一个异步操作来接受一个传入的连接尝试。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-241">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-242">一个 <see cref="T:System.IAsyncResult" />，它引用 <see cref="T:System.Net.Sockets.Socket" /> 的异步创建。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-242">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-243">异步<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>操作必须通过调用<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-243">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method.</span></span> <span data-ttu-id="4c491-244">通常情况下，通过调用该方法`callback`委托。</span><span class="sxs-lookup"><span data-stu-id="4c491-244">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="4c491-245">此方法不会阻止该操作完成之前。</span><span class="sxs-lookup"><span data-stu-id="4c491-245">This method does not block until the operation completes.</span></span> <span data-ttu-id="4c491-246">若要阻止该操作完成之前，请使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-246">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
 <span data-ttu-id="4c491-247">有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-247">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-248">你可以调用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性返回的<xref:System.Net.Sockets.Socket>来标识远程主机的网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-248">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-249">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。</span><span class="sxs-lookup"><span data-stu-id="4c491-249">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-250">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-250">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-251">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-251">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-252">下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法创建并连接套接字。</span><span class="sxs-lookup"><span data-stu-id="4c491-252">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4c491-253">回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法来结束该异步请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-253">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-254">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-254">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4c491-255">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-255">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="4c491-256">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-256">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="4c491-257">一个用户定义对象，其中包含接收操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-257">A user-defined object containing information about the accept operation.</span>
          </span>
          <span data-ttu-id="4c491-258">操作完成后，此对象会被传递给 <c>callback</c> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-258">This object is passed to the <c>callback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-259">开始一个异步操作来接受一个传入的连接尝试。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-259">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-260">一个 <see cref="T:System.IAsyncResult" />，它引用 <see cref="T:System.Net.Sockets.TcpClient" /> 的异步创建。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-260">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-261">异步<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>操作必须通过调用<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-261">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method.</span></span> <span data-ttu-id="4c491-262">通常情况下，通过调用该方法`callback`委托。</span><span class="sxs-lookup"><span data-stu-id="4c491-262">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="4c491-263">此方法不会阻止该操作完成之前。</span><span class="sxs-lookup"><span data-stu-id="4c491-263">This method does not block until the operation completes.</span></span> <span data-ttu-id="4c491-264">若要阻止该操作完成之前，请使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-264">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
 <span data-ttu-id="4c491-265">有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-265">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-266">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。</span><span class="sxs-lookup"><span data-stu-id="4c491-266">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-267">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-267">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-268">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-268">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-269">下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法创建并连接套接字。</span><span class="sxs-lookup"><span data-stu-id="4c491-269">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4c491-270">回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法来结束该异步请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-270">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-271">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-271">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4c491-272">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-272">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">
          <span data-ttu-id="4c491-273">用来侦听传入的连接尝试的端口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-273">The port on which to listen for incoming connection attempts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-274">创建一个新的侦听指定端口的 <see cref="T:System.Net.Sockets.TcpListener" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-274">Creates a new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-275">返回 <see cref="T:System.Net.Sockets.TcpListener" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-275">Returns <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          </span>
          <span data-ttu-id="4c491-276">一个新的用于侦听指定端口的 <see cref="T:System.Net.Sockets.TcpListener" /> 实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-276">A new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="4c491-277">通过调用 <see cref="T:System.IAsyncResult" /> 方法返回 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-277">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-278">异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 来处理远程主机通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-278">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-279">
            <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-279">A <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
          <span data-ttu-id="4c491-280">用于发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-280">The <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-281">此方法受到阻止，直到操作完成。</span><span class="sxs-lookup"><span data-stu-id="4c491-281">This method blocks until the operation is complete.</span></span> <span data-ttu-id="4c491-282">若要以同步方式执行此操作，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-282">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-283">你可以调用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性返回的<xref:System.Net.Sockets.Socket>来标识远程主机的网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-283">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-284">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。</span><span class="sxs-lookup"><span data-stu-id="4c491-284">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-285">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-285">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-286">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-286">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-287">下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法创建并连接套接字。</span><span class="sxs-lookup"><span data-stu-id="4c491-287">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4c491-288">回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法来结束该异步请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-288">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4c491-289">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-289">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4c491-290">
            <paramref name="asyncResult" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-290">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4c491-291">调用 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法后，未创建 <paramref name="asyncResult" /> 参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-291">The <paramref name="asyncResult" /> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-292">
            <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 方法以前被调用过。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-292">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-293">尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-293">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="4c491-294">通过调用 <see cref="T:System.IAsyncResult" /> 方法返回 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-294">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-295">异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.TcpClient" /> 来处理远程主机通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-295">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient" /> to handle remote host communication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-296">
            <see cref="T:System.Net.Sockets.TcpClient" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-296">A <see cref="T:System.Net.Sockets.TcpClient" />.</span>
          </span>
          <span data-ttu-id="4c491-297">用于发送和接收数据的 <see cref="T:System.Net.Sockets.TcpClient" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-297">The <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-298">此方法受到阻止，直到操作完成。</span><span class="sxs-lookup"><span data-stu-id="4c491-298">This method blocks until the operation is complete.</span></span> <span data-ttu-id="4c491-299">若要以同步方式执行此操作，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-299">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-300">你可以调用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>基础套接字的属性 (<xref:System.Net.Sockets.TcpClient.Client%2A>) 来标识远程主机的网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-300">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-301">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。</span><span class="sxs-lookup"><span data-stu-id="4c491-301">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-302">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-302">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-303">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-303">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-304">下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法创建并连接套接字。</span><span class="sxs-lookup"><span data-stu-id="4c491-304">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="4c491-305">回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法来结束该异步请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-305">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c491-306">获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.TcpListener" /> 是否只允许一个基础套接字来侦听特定端口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-306">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one underlying socket to listen to a specific port.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c491-307">如果 <see cref="T:System.Net.Sockets.TcpListener" /> 只允许一个 <see cref="T:System.Net.Sockets.TcpListener" /> 来侦听特定端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-307">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one <see cref="T:System.Net.Sockets.TcpListener" /> to listen to a specific port; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4c491-308">.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-308">.</span>
          </span>
          <span data-ttu-id="4c491-309">在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 <see langword="true" />；在所有其他版本中，默认为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-309">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-310">默认情况下，多个侦听器可以侦听特定端口。</span><span class="sxs-lookup"><span data-stu-id="4c491-310">By default, multiple listeners can listen to a specific port.</span></span> <span data-ttu-id="4c491-311">但是，只有一个侦听器可以执行网络流量发送到端口的操作。</span><span class="sxs-lookup"><span data-stu-id="4c491-311">However, only one of the listeners can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="4c491-312">如果多个侦听器尝试将绑定到特定端口，则采用更具体的 IP 地址处理发送到该端口的网络流量。</span><span class="sxs-lookup"><span data-stu-id="4c491-312">If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</span></span> <span data-ttu-id="4c491-313">你可以使用<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>属性以防止多个侦听器侦听特定端口。</span><span class="sxs-lookup"><span data-stu-id="4c491-313">You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.</span></span>  
  
 <span data-ttu-id="4c491-314">将之前调用此属性设置<xref:System.Net.Sockets.TcpListener.Start%2A>，或调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法并将此属性。</span><span class="sxs-lookup"><span data-stu-id="4c491-314">Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-315">下面的代码示例获取和设置<xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="4c491-315">The following code example gets and sets the <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-316">
            <see cref="T:System.Net.Sockets.TcpListener" /> 已经启动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-316">The <see cref="T:System.Net.Sockets.TcpListener" /> has been started.</span>
          </span>
          <span data-ttu-id="4c491-317">调用 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 方法，然后设置 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-317">Call the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-318">尝试访问基础套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-318">An error occurred when attempting to access the underlying socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4c491-319">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-319">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c491-320">获取当前 <see cref="T:System.Net.EndPoint" /> 的基础 <see cref="T:System.Net.Sockets.TcpListener" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-320">Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c491-321">
            <see cref="T:System.Net.EndPoint" /> 绑定到的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-321">The <see cref="T:System.Net.EndPoint" /> to which the <see cref="T:System.Net.Sockets.Socket" /> is bound.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-322">你可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性来标识用于侦听传入的客户端连接请求，套接字连接后的本地网络接口和端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-322">You can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</span></span> <span data-ttu-id="4c491-323">您必须首先将转换这<xref:System.Net.EndPoint>到<xref:System.Net.IPEndPoint>。</span><span class="sxs-lookup"><span data-stu-id="4c491-323">You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="4c491-324">然后，你可以调用<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>属性来检索本地 IP 地址，与<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>属性来检索本地端口号。</span><span class="sxs-lookup"><span data-stu-id="4c491-324">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> property to retrieve the local port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-325">下面的代码示例显示在其上的本地 IP 地址和端口号<xref:System.Net.Sockets.TcpListener>侦听传入连接请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-325">The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c491-326">确定是否有挂起的连接请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-326">Determines if there are pending connection requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c491-327">如果连接正挂起，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-327">
              <see langword="true" /> if connections are pending; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-328">此非阻止方法确定是否有任何挂起的连接请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-328">This non-blocking method determines if there are any pending connection requests.</span></span> <span data-ttu-id="4c491-329">因为<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>和<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法阻止执行，直到<xref:System.Net.Sockets.TcpListener.Start%2A>方法已排队的传入连接请求，<xref:System.Net.Sockets.TcpListener.Pending%2A>方法可以用于确定连接之前尝试接受这些条款是否可用。</span><span class="sxs-lookup"><span data-stu-id="4c491-329">Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the <xref:System.Net.Sockets.TcpListener.Pending%2A> method can be used to determine if connections are available before attempting to accept them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-330">下面的代码示例检查<xref:System.Net.Sockets.TcpListener.Pending%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-330">The following code example checks the <xref:System.Net.Sockets.TcpListener.Pending%2A> method.</span></span> <span data-ttu-id="4c491-331">如果连接请求正在等待可接受，然后调用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法由。</span><span class="sxs-lookup"><span data-stu-id="4c491-331">If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-332">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-332">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c491-333">获取基础网络 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-333">Gets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c491-334">基础 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-334">The underlying <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-335"><xref:System.Net.Sockets.TcpListener> 创建<xref:System.Net.Sockets.Socket>侦听传入的客户端连接请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-335"><xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests.</span></span> <span data-ttu-id="4c491-336">类派生自<xref:System.Net.Sockets.TcpListener>可以使用此属性来获取这<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="4c491-336">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="4c491-337">使用基础<xref:System.Net.Sockets.Socket>返回<xref:System.Net.Sockets.TcpListener.Server%2A>以外的属性，如果你需要访问这些<xref:System.Net.Sockets.TcpListener>提供。</span><span class="sxs-lookup"><span data-stu-id="4c491-337">Use the underlying <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpListener.Server%2A> property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-338"><xref:System.Net.Sockets.TcpListener.Server%2A>属性仅返回<xref:System.Net.Sockets.Socket>用来侦听传入的客户端连接请求。</span><span class="sxs-lookup"><span data-stu-id="4c491-338">The <xref:System.Net.Sockets.TcpListener.Server%2A> property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests.</span></span> <span data-ttu-id="4c491-339">使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法接受挂起的连接请求并获取<xref:System.Net.Sockets.Socket>用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="4c491-339">Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data.</span></span> <span data-ttu-id="4c491-340">你还可以使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法接受挂起的连接请求并获取<xref:System.Net.Sockets.TcpClient>用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="4c491-340">You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-341">下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.Server%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="4c491-341">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.Server%2A> property.</span></span> <span data-ttu-id="4c491-342">基础<xref:System.Net.Sockets.Socket>检索和<xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket>选项配置为超时在 10 秒后如果数据仍会保留在网络缓冲区后的连接将关闭。</span><span class="sxs-lookup"><span data-stu-id="4c491-342">The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</span></span>  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c491-343">开始侦听传入的连接请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-343">Starts listening for incoming connection requests.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c491-344">开始侦听传入的连接请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-344">Starts listening for incoming connection requests.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-345"><xref:System.Net.Sockets.TcpListener.Start%2A>方法初始化基础<xref:System.Net.Sockets.Socket>、 将其绑定到的本地终结点，并侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-345">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="4c491-346">如果收到连接请求时，<xref:System.Net.Sockets.TcpListener.Start%2A>方法将对请求进行排队并继续侦听其他的请求，直到你调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-346">If a connection request is received, the <xref:System.Net.Sockets.TcpListener.Start%2A> method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="4c491-347">如果<xref:System.Net.Sockets.TcpListener>接收连接请求它已排入队列的最大连接数后，它会引发<xref:System.Net.Sockets.SocketException>客户端上。</span><span class="sxs-lookup"><span data-stu-id="4c491-347">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="4c491-348">若要从传入的连接队列中删除的连接，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-348">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4c491-349"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法将从队列删除的连接并返回<xref:System.Net.Sockets.TcpClient>可用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="4c491-349">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="4c491-350"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法将返回<xref:System.Net.Sockets.Socket>可用于执行相同操作。</span><span class="sxs-lookup"><span data-stu-id="4c491-350">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="4c491-351">如果你的应用程序仅需要同步 I/O，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。</span><span class="sxs-lookup"><span data-stu-id="4c491-351">If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="4c491-352">有关详细行为的控件，请使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。</span><span class="sxs-lookup"><span data-stu-id="4c491-352">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span> <span data-ttu-id="4c491-353">连接请求队列中出现一直进行阻止这两种方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-353">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="4c491-354">使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭<xref:System.Net.Sockets.TcpListener>并停止侦听。</span><span class="sxs-lookup"><span data-stu-id="4c491-354">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="4c491-355">你负责分别关闭所接受的连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-355">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-356">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-356">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-357">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-357">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-358">下面的代码示例演示如何<xref:System.Net.Sockets.TcpListener.Start%2A>用于侦听传入的客户端连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-358">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-359">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-359">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="4c491-360">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-360">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">
          <span data-ttu-id="4c491-361">挂起连接队列的最大长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-361">The maximum length of the pending connections queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c491-362">启动对具有最大挂起连接数的传入连接请求的侦听。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-362">Starts listening for incoming connection requests with a maximum number of pending connection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-363"><xref:System.Net.Sockets.TcpListener.Start%2A>方法初始化基础<xref:System.Net.Sockets.Socket>、 将其绑定到的本地终结点，并侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-363">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="4c491-364">如果收到连接请求时，<xref:System.Net.Sockets.TcpListener.Start%2A>将对请求进行排队并继续侦听其他的请求，直到你调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-364">If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="4c491-365">如果<xref:System.Net.Sockets.TcpListener>接收连接请求之后它已排入队列的最大，它将引发的连接数,<xref:System.Net.Sockets.SocketException>客户端上。</span><span class="sxs-lookup"><span data-stu-id="4c491-365">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="4c491-366">若要从传入的连接队列中删除的连接，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-366">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4c491-367"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法将从队列删除的连接并返回<xref:System.Net.Sockets.TcpClient>可用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="4c491-367">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="4c491-368"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法将返回<xref:System.Net.Sockets.Socket>可用于执行相同操作。</span><span class="sxs-lookup"><span data-stu-id="4c491-368">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="4c491-369">如果你的应用程序仅需要同步 I/O，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。</span><span class="sxs-lookup"><span data-stu-id="4c491-369">If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="4c491-370">有关详细行为的控件，请使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-370">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="4c491-371">连接请求队列中出现一直进行阻止这两种方法。</span><span class="sxs-lookup"><span data-stu-id="4c491-371">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="4c491-372">使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭<xref:System.Net.Sockets.TcpListener>并停止侦听。</span><span class="sxs-lookup"><span data-stu-id="4c491-372">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="4c491-373">你负责分别关闭所接受的连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-373">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-374">使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="4c491-374">Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-375">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-375">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-376">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-376">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-377">下面的代码示例演示如何<xref:System.Net.Sockets.TcpListener.Start%2A>用于侦听传入的客户端连接尝试。</span><span class="sxs-lookup"><span data-stu-id="4c491-377">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-378">访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-378">An error occurred while accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4c491-379">
            <paramref name="backlog" /> 参数小于零或超出允许的最大连接数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-379">The <paramref name="backlog" /> parameter is less than zero or exceeds the maximum number of permitted connections.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c491-380">基础 <see cref="T:System.Net.Sockets.Socket" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-380">The underlying <see cref="T:System.Net.Sockets.Socket" /> is null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c491-381">关闭侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-381">Closes the listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c491-382"><xref:System.Net.Sockets.TcpListener.Stop%2A> 关闭侦听器。</span><span class="sxs-lookup"><span data-stu-id="4c491-382"><xref:System.Net.Sockets.TcpListener.Stop%2A> closes the listener.</span></span> <span data-ttu-id="4c491-383">在队列中的任何不可接受的连接请求将会丢失。</span><span class="sxs-lookup"><span data-stu-id="4c491-383">Any unaccepted connection requests in the queue will be lost.</span></span> <span data-ttu-id="4c491-384">远程主机等待连接接受将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="4c491-384">Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="4c491-385">你负责分别关闭所接受的连接。</span><span class="sxs-lookup"><span data-stu-id="4c491-385">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c491-386">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="4c491-386">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="4c491-387">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="4c491-387">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c491-388">下面的代码示例演示如何使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭基础<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="4c491-388">The following code example demonstrates using the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="4c491-389">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-389">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="4c491-390">获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c491-390">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="4c491-391">
              <see cref="M:System.Net.Sockets.TcpListener.Stop" />方法也会关闭基础<see cref="T:System.Net.Sockets.Socket" />，并创建一个新<see cref="T:System.Net.Sockets.Socket" />为<see cref="T:System.Net.Sockets.TcpListener" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="4c491-391">The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />.</span>
            </span>
            <span data-ttu-id="4c491-392">如果基础上设置任何属性<see cref="T:System.Net.Sockets.Socket" />之前调用<see cref="M:System.Net.Sockets.TcpListener.Stop" />方法，这些属性将不会延续到新<see cref="T:System.Net.Sockets.Socket" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="4c491-392">If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>