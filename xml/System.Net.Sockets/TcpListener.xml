<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70b4efe2d402b27e3285b56bb7a50aff7def9e09" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461081" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>侦听来自 TCP 网络客户端的连接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener>类提供侦听和接受传入连接请求，在阻止同步模式的简单方法。 你可以使用<xref:System.Net.Sockets.TcpClient>或<xref:System.Net.Sockets.Socket>连接与<xref:System.Net.Sockets.TcpListener>。 创建<xref:System.Net.Sockets.TcpListener>使用<xref:System.Net.IPEndPoint>，本地 IP 地址和端口号或只是端口号。 指定<xref:System.Net.IPAddress.Any>本地 IP 地址和本地端口号，如果你想要为您分配这些值的基础服务提供程序为 0。 如果你选择这样做，则可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性来标识已指定的信息后套接字连接。  
  
 使用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入连接请求。 <xref:System.Net.Sockets.TcpListener.Start%2A> 将排队等待传入的连接，直到你可以调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法或它已排队<xref:System.Net.Sockets.SocketOptionName.MaxConnections>。 可以使用两种<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>请求从传入的连接请求队列的连接。 将阻止这两种方法。 如果你想要避免阻止，则可以使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法首先确定连接请求是否可在队列中。  
  
 调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭<xref:System.Net.Sockets.TcpListener>。  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Stop%2A>方法不会关闭任何已接受的连接。 你负责分别关闭这些连接。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Net.Sockets.TcpListener>。  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 请参阅<xref:System.Net.Sockets.TcpClient>有关客户端示例。  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">若要建立一个传出连接或接受传入请求。</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">用来侦听传入的连接尝试的端口。</param>
        <summary>初始化在指定端口上侦听的 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数已过时。 使用<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType>或<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>构造函数。  
  
 此构造函数，可指定用于侦听传入的连接尝试的端口号。 使用此构造函数，基础服务提供程序将分配的最合适的网络地址。 如果你不关心使用哪个本地端口，则可以指定的端口号 0。 在这种情况下，服务提供商将分配一个可用的临时端口号。 如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性。  
  
 调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接尝试。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Net.Sockets.TcpListener>使用本地端口号。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">一个 <see cref="T:System.Net.IPEndPoint" />，它表示将侦听器 <see cref="T:System.Net.Sockets.Socket" /> 绑定到的本地终结点。</param>
        <summary>使用指定的本地终结点初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数允许你指定的本地 IP 地址和端口号用于侦听传入的连接尝试。 使用此构造函数之前，必须创建<xref:System.Net.IPEndPoint>使用所需的本地 IP 地址和端口号。 将此传递<xref:System.Net.IPEndPoint>到构造函数、 作为`localEP`参数。  
  
 如果你不关心哪些本地地址分配，你可以创建<xref:System.Net.IPEndPoint>使用<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>地址参数，以及基础服务提供程序将分配的最合适的网络地址。 这可能有助于简化你的应用程序，如果你有多个网络接口。 如果你不关心使用哪个本地端口，则可以创建<xref:System.Net.IPEndPoint>使用 0 作为端口号。 在这种情况下，服务提供商将分配一个可用的临时端口号。 如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性。  
  
 调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接尝试。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例创建的实例<xref:System.Net.Sockets.TcpListener>类使用的本地终结点。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localEP" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr">一个 <see cref="T:System.Net.IPAddress" />，它表示本地 IP 地址。</param>
        <param name="port">用来侦听传入的连接尝试的端口。</param>
        <summary>初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例，该类在指定的本地 IP 地址和端口号上侦听是否有传入的连接尝试。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数允许你指定的本地 IP 地址和端口号用于侦听传入的连接尝试。 在调用此构造函数之前你必须首先创建<xref:System.Net.IPAddress>使用所需的本地地址。 将此传递<xref:System.Net.IPAddress>到构造函数、 作为`localaddr`参数。 如果你不关心分配的本地地址，指定<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>为`localaddr`参数，并且基础服务提供程序将分配的最合适的网络地址。 这可能有助于简化你的应用程序，如果你有多个网络接口。 如果你不关心使用哪个本地端口，则可以指定的端口号 0。 在这种情况下，服务提供商将分配 1024年和 5000 之间可用的端口号。 如果使用此方法时，你可能会发现已使用分配了哪些本地网络地址和端口数量<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性。  
  
 调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接尝试。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例创建的实例<xref:System.Net.Sockets.TcpListener>类使用本地 IP 地址和端口号。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localaddr" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受挂起的连接请求。</summary>
        <returns>用于发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 是一个返回的阻止方法<xref:System.Net.Sockets.Socket>可用于发送和接收数据。 如果你想要避免阻止，使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法来确定是否可在传入的连接队列连接请求。  
  
 <xref:System.Net.Sockets.Socket>返回初始化与远程主机的 IP 地址和端口号。 你可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>和<xref:System.Net.Sockets.Socket.Receive%2A>方法中提供<xref:System.Net.Sockets.Socket>类与远程主机通信。 完成之后使用<xref:System.Net.Sockets.Socket>，一定要调用其<xref:System.Net.Sockets.Socket.Close%2A>方法。 如果你的应用程序相对简单，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而不是<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 <xref:System.Net.Sockets.TcpClient> 用于发送和接收数据通过阻止同步模式下的网络提供了简单的方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 在下面的代码示例中，<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法用于返回<xref:System.Net.Sockets.Socket>。 这<xref:System.Net.Sockets.Socket>用于与新连接的客户端通信。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受挂起的连接请求以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />  
  
 表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性返回了用于发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后的套接字连接已被接受。  
  
 <xref:System.Net.Sockets.Socket>中返回<xref:System.Threading.Tasks.Task%601>初始化与远程主机的 IP 地址和端口号。 你可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>和<xref:System.Net.Sockets.Socket.Receive%2A>方法中提供<xref:System.Net.Sockets.Socket>类与远程主机通信。 完成之后使用<xref:System.Net.Sockets.Socket>，一定要调用其<xref:System.Net.Sockets.Socket.Close%2A>方法。 如果你的应用程序相对简单，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而不是<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>方法。 <xref:System.Net.Sockets.TcpClient> 用于发送和接收数据通过阻止同步模式下的网络提供了简单的方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受挂起的连接请求。</summary>
        <returns>用于发送和接收数据的 <see cref="T:System.Net.Sockets.TcpClient" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 是一个返回的阻止方法<xref:System.Net.Sockets.TcpClient>可用于发送和接收数据。 使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法来确定是否连接请求将传入的连接队列中可用，是否你想要避免阻止。  
  
 使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法来获取基础<xref:System.Net.Sockets.NetworkStream>返回<xref:System.Net.Sockets.TcpClient>。 <xref:System.Net.Sockets.NetworkStream>将为你提供方法用于发送和接收与远程主机。 当您将通过与<xref:System.Net.Sockets.TcpClient>，一定要调用其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。 如果你想更大的灵活性比<xref:System.Net.Sockets.TcpClient>优惠，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 在下面的代码示例中，<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法用于返回<xref:System.Net.Sockets.TcpClient>。 这<xref:System.Net.Sockets.TcpClient>用于与新连接的客户端通信。  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。 获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受挂起的连接请求以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />  
  
 表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性返回了用于发送和接收数据的 <see cref="T:System.Net.Sockets.TcpClient" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后已被接受 TCP 连接。  
  
 使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法来获取基础<xref:System.Net.Sockets.NetworkStream>返回<xref:System.Net.Sockets.TcpClient>中<xref:System.Threading.Tasks.Task%601>。 <xref:System.Net.Sockets.NetworkStream>将为你提供方法用于发送和接收与远程主机。 当您将通过与<xref:System.Net.Sockets.TcpClient>，一定要调用其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。 如果你想更大的灵活性比<xref:System.Net.Sockets.TcpClient>优惠，请考虑使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。 获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Net.Sockets.TcpListener" /> 是否正主动侦听客户端连接。</summary>
        <value>
          如果 <see cref="T:System.Net.Sockets.TcpListener" /> 正主动侦听，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类派生自<xref:System.Net.Sockets.TcpListener>可以使用此属性来确定如果<xref:System.Net.Sockets.Socket>程序当前正在侦听传入的连接尝试。 <xref:System.Net.Sockets.TcpClient.Active%2A>属性可以用于避免冗余<xref:System.Net.Sockets.TcpListener.Start%2A>尝试。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">一个布尔值，该值指定是启用还是禁用 NAT 遍历。</param>
        <summary>启用或禁用针对 <see cref="T:System.Net.Sockets.TcpListener" /> 实例的网络地址转换 (NAT) 遍历。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法用于启用或禁用的 NAT 遍历<xref:System.Net.Sockets.TcpListener>实例。 可能使用 Teredo、 6to4 或 ISATAP 隧道提供 NAT 遍历。  
  
 当`allowed`参数为 false，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>关联的套接字上的选项设置为<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>。 这将显式禁止 NAT 遍历<xref:System.Net.Sockets.TcpListener>实例。  
  
 当`allowed`参数为 true，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>关联的套接字上的选项设置为<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>。 这可能使 NAT 遍历<xref:System.Net.Sockets.TcpListener>具体取决于系统上实施防火墙规则。  
  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>必须在调用之前调用方法<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以开始侦听传入的连接请求 （之前不会绑定套接字）。 如果<xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法后，会调用<xref:System.Net.Sockets.TcpListener.Start%2A>方法，则<xref:System.InvalidOperationException>将引发。  
  
 Teredo 地址是 IPv6 地址的前缀为 2001年:: / 32。 Teredo 地址可以返回通过正常的 DNS 名称解析或枚举为分配给了本地接口的 IPv6 地址。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在调用 <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 方法之后调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 方法</exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
        <param name="state">一个用户定义对象，其中包含接收操作的相关信息。 操作完成后，此对象会被传递给 <c>callback</c> 委托。</param>
        <summary>开始一个异步操作来接受一个传入的连接尝试。</summary>
        <returns>一个 <see cref="T:System.IAsyncResult" />，它引用 <see cref="T:System.Net.Sockets.Socket" /> 的异步创建。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 异步<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>操作必须通过调用<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法。 通常情况下，通过调用该方法`callback`委托。  
  
 此方法不会阻止该操作完成之前。 若要阻止该操作完成之前，请使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。  
  
 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。  
  
> [!NOTE]
>  你可以调用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性返回的<xref:System.Net.Sockets.Socket>来标识远程主机的网络地址和端口号。  
  
> [!NOTE]
>  如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法创建并连接套接字。 回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法来结束该异步请求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
        <param name="state">一个用户定义对象，其中包含接收操作的相关信息。 操作完成后，此对象会被传递给 <c>callback</c> 委托。</param>
        <summary>开始一个异步操作来接受一个传入的连接尝试。</summary>
        <returns>一个 <see cref="T:System.IAsyncResult" />，它引用 <see cref="T:System.Net.Sockets.TcpClient" /> 的异步创建。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 异步<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>操作必须通过调用<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法。 通常情况下，通过调用该方法`callback`委托。  
  
 此方法不会阻止该操作完成之前。 若要阻止该操作完成之前，请使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。  
  
 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。  
  
> [!NOTE]
>  如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法创建并连接套接字。 回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法来结束该异步请求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">用来侦听传入的连接尝试的端口。</param>
        <summary>创建一个新的侦听指定端口的 <see cref="T:System.Net.Sockets.TcpListener" /> 实例。</summary>
        <returns>返回 <see cref="T:System.Net.Sockets.TcpListener" />。  
  
 一个新的用于侦听指定端口的 <see cref="T:System.Net.Sockets.TcpListener" /> 实例。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 方法返回 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />。</param>
        <summary>异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 来处理远程主机通信。</summary>
        <returns>
          <see cref="T:System.Net.Sockets.Socket" />。  
  
 用于发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法受到阻止，直到操作完成。 若要以同步方式执行此操作，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。  
  
> [!NOTE]
>  你可以调用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性返回的<xref:System.Net.Sockets.Socket>来标识远程主机的网络地址和端口号。  
  
> [!NOTE]
>  如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法创建并连接套接字。 回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法来结束该异步请求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">调用 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法后，未创建 <paramref name="asyncResult" /> 参数。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 方法以前被调用过。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 方法返回 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />。</param>
        <summary>异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.TcpClient" /> 来处理远程主机通信。</summary>
        <returns>
          <see cref="T:System.Net.Sockets.TcpClient" />。  
  
 用于发送和接收数据的 <see cref="T:System.Net.Sockets.TcpClient" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法受到阻止，直到操作完成。 若要以同步方式执行此操作，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。  
  
> [!NOTE]
>  你可以调用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>基础套接字的属性 (<xref:System.Net.Sockets.TcpClient.Client%2A>) 来标识远程主机的网络地址和端口号。  
  
> [!NOTE]
>  如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)为详细错误说明。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法创建并连接套接字。 回调委托调用<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法来结束该异步请求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.TcpListener" /> 是否只允许一个基础套接字来侦听特定端口。</summary>
        <value>
          如果 <see cref="T:System.Net.Sockets.TcpListener" /> 只允许一个 <see cref="T:System.Net.Sockets.TcpListener" /> 来侦听特定端口，则为 <see langword="true" />；否则为 <see langword="false" />。 . 在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 <see langword="true" />；在所有其他版本中，默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，多个侦听器可以侦听特定端口。 但是，只有一个侦听器可以执行网络流量发送到端口的操作。 如果多个侦听器尝试将绑定到特定端口，则采用更具体的 IP 地址处理发送到该端口的网络流量。 你可以使用<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>属性以防止多个侦听器侦听特定端口。  
  
 将之前调用此属性设置<xref:System.Net.Sockets.TcpListener.Start%2A>，或调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法并将此属性。  
  
   
  
## Examples  
 下面的代码示例获取和设置<xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A>属性。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.TcpListener" /> 已经启动。 调用 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 方法，然后设置 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 属性。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问基础套接字时出错。</exception>
        <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Net.EndPoint" /> 的基础 <see cref="T:System.Net.Sockets.TcpListener" />。</summary>
        <value>
          <see cref="T:System.Net.EndPoint" /> 绑定到的 <see cref="T:System.Net.Sockets.Socket" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>属性来标识用于侦听传入的客户端连接请求，套接字连接后的本地网络接口和端口号。 您必须首先将转换这<xref:System.Net.EndPoint>到<xref:System.Net.IPEndPoint>。 然后，你可以调用<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>属性来检索本地 IP 地址，与<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>属性来检索本地端口号。  
  
   
  
## Examples  
 下面的代码示例显示在其上的本地 IP 地址和端口号<xref:System.Net.Sockets.TcpListener>侦听传入连接请求。  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定是否有挂起的连接请求。</summary>
        <returns>
          如果连接正挂起，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此非阻止方法确定是否有任何挂起的连接请求。 因为<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>和<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法阻止执行，直到<xref:System.Net.Sockets.TcpListener.Start%2A>方法已排队的传入连接请求，<xref:System.Net.Sockets.TcpListener.Pending%2A>方法可以用于确定连接之前尝试接受这些条款是否可用。  
  
   
  
## Examples  
 下面的代码示例检查<xref:System.Net.Sockets.TcpListener.Pending%2A>方法。 如果连接请求正在等待可接受，然后调用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法由。  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取基础网络 <see cref="T:System.Net.Sockets.Socket" />。</summary>
        <value>基础 <see cref="T:System.Net.Sockets.Socket" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener> 创建<xref:System.Net.Sockets.Socket>侦听传入的客户端连接请求。 类派生自<xref:System.Net.Sockets.TcpListener>可以使用此属性来获取这<xref:System.Net.Sockets.Socket>。 使用基础<xref:System.Net.Sockets.Socket>返回<xref:System.Net.Sockets.TcpListener.Server%2A>以外的属性，如果你需要访问这些<xref:System.Net.Sockets.TcpListener>提供。  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Server%2A>属性仅返回<xref:System.Net.Sockets.Socket>用来侦听传入的客户端连接请求。 使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法接受挂起的连接请求并获取<xref:System.Net.Sockets.Socket>用于发送和接收数据。 你还可以使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法接受挂起的连接请求并获取<xref:System.Net.Sockets.TcpClient>用于发送和接收数据。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Net.Sockets.TcpListener.Server%2A>属性。 基础<xref:System.Net.Sockets.Socket>检索和<xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket>选项配置为超时在 10 秒后如果数据仍会保留在网络缓冲区后的连接将关闭。  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>开始侦听传入的连接请求。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>开始侦听传入的连接请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Start%2A>方法初始化基础<xref:System.Net.Sockets.Socket>、 将其绑定到的本地终结点，并侦听传入的连接尝试。 如果收到连接请求时，<xref:System.Net.Sockets.TcpListener.Start%2A>方法将对请求进行排队并继续侦听其他的请求，直到你调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。 如果<xref:System.Net.Sockets.TcpListener>接收连接请求它已排入队列的最大连接数后，它会引发<xref:System.Net.Sockets.SocketException>客户端上。  
  
 若要从传入的连接队列中删除的连接，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法将从队列删除的连接并返回<xref:System.Net.Sockets.TcpClient>可用于发送和接收数据。 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法将返回<xref:System.Net.Sockets.Socket>可用于执行相同操作。 如果你的应用程序仅需要同步 I/O，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 有关详细行为的控件，请使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。 连接请求队列中出现一直进行阻止这两种方法。  
  
 使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭<xref:System.Net.Sockets.TcpListener>并停止侦听。 你负责分别关闭所接受的连接。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何<xref:System.Net.Sockets.TcpListener.Start%2A>用于侦听传入的客户端连接尝试。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。 获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">挂起连接队列的最大长度。</param>
        <summary>启动对具有最大挂起连接数的传入连接请求的侦听。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Start%2A>方法初始化基础<xref:System.Net.Sockets.Socket>、 将其绑定到的本地终结点，并侦听传入的连接尝试。 如果收到连接请求时，<xref:System.Net.Sockets.TcpListener.Start%2A>将对请求进行排队并继续侦听其他的请求，直到你调用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。 如果<xref:System.Net.Sockets.TcpListener>接收连接请求之后它已排入队列的最大，它将引发的连接数,<xref:System.Net.Sockets.SocketException>客户端上。  
  
 若要从传入的连接队列中删除的连接，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法将从队列删除的连接并返回<xref:System.Net.Sockets.TcpClient>可用于发送和接收数据。 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法将返回<xref:System.Net.Sockets.Socket>可用于执行相同操作。 如果你的应用程序仅需要同步 I/O，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 有关详细行为的控件，请使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 连接请求队列中出现一直进行阻止这两种方法。  
  
 使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭<xref:System.Net.Sockets.TcpListener>并停止侦听。 你负责分别关闭所接受的连接。  
  
> [!NOTE]
>  使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定的错误代码和在 MSDN 库中的 Windows 套接字版本 2 API 错误代码文档是指[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)有关错误的详细说明。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何<xref:System.Net.Sockets.TcpListener.Start%2A>用于侦听传入的客户端连接尝试。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="backlog" /> 参数小于零或超出允许的最大连接数。</exception>
        <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Net.Sockets.Socket" /> 为空。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭侦听器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Stop%2A> 关闭侦听器。 在队列中的任何不可接受的连接请求将会丢失。 远程主机等待连接接受将引发<xref:System.Net.Sockets.SocketException>。 你负责分别关闭所接受的连接。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法来关闭基础<xref:System.Net.Sockets.Socket>。  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。 获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.Net.Sockets.TcpListener.Stop" />方法也会关闭基础<see cref="T:System.Net.Sockets.Socket" />，并创建一个新<see cref="T:System.Net.Sockets.Socket" />为<see cref="T:System.Net.Sockets.TcpListener" />。 如果基础上设置任何属性<see cref="T:System.Net.Sockets.Socket" />之前调用<see cref="M:System.Net.Sockets.TcpListener.Stop" />方法，这些属性将不会延续到新<see cref="T:System.Net.Sockets.Socket" />。</para>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>