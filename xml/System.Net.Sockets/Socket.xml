<Type Name="Socket" FullName="System.Net.Sockets.Socket">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4c9b8ad5848a918ca2056d55d97c296040610b26" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37480453" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Socket : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Socket extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.Socket" />
  <TypeSignature Language="VB.NET" Value="Public Class Socket&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Socket : IDisposable" />
  <TypeSignature Language="F#" Value="type Socket = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="0c8e6-101">实现 Berkeley 套接字接口。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c8e6-101">Implements the Berkeley sockets interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-102"><xref:System.Net.Sockets.Socket>类提供一组丰富的方法和属性的网络通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-102">The <xref:System.Net.Sockets.Socket> class provides a rich set of methods and properties for network communications.</span></span> <span data-ttu-id="0c8e6-103"><xref:System.Net.Sockets.Socket>类使您能够同时同步和异步数据传输使用的任何通信协议中列出<xref:System.Net.Sockets.ProtocolType>枚举。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-103">The <xref:System.Net.Sockets.Socket> class allows you to perform both synchronous and asynchronous data transfer using any of the communication protocols listed in the <xref:System.Net.Sockets.ProtocolType> enumeration.</span></span>  
  
 <span data-ttu-id="0c8e6-104"><xref:System.Net.Sockets.Socket>类遵循异步方法的.NET Framework 命名模式。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-104">The <xref:System.Net.Sockets.Socket> class follows the .NET Framework naming pattern for asynchronous methods.</span></span> <span data-ttu-id="0c8e6-105">例如，同步<xref:System.Net.Sockets.Socket.Receive%2A>方法对应于异步<xref:System.Net.Sockets.Socket.BeginReceive%2A>和<xref:System.Net.Sockets.Socket.EndReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-105">For example, the synchronous <xref:System.Net.Sockets.Socket.Receive%2A> method corresponds to the asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods.</span></span>  
  
 <span data-ttu-id="0c8e6-106">如果你的应用程序在执行期间只需要一个线程，使用以下方法，适用于同步操作模式。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-106">If your application only requires one thread during execution, use the following methods, which are designed for synchronous operation mode.</span></span>  
  
-   <span data-ttu-id="0c8e6-107">如果使用的面向连接的 TCP 协议，你的服务器可以使用侦听连接<xref:System.Net.Sockets.Socket.Listen%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-107">If you are using a connection-oriented protocol such as TCP, your server can listen for connections using the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="0c8e6-108"><xref:System.Net.Sockets.Socket.Accept%2A>方法处理任何传入连接请求并返回<xref:System.Net.Sockets.Socket>可用来与远程主机通信数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-108">The <xref:System.Net.Sockets.Socket.Accept%2A> method processes any incoming connection requests and returns a <xref:System.Net.Sockets.Socket> that you can use to communicate data with the remote host.</span></span> <span data-ttu-id="0c8e6-109">使用此返回<xref:System.Net.Sockets.Socket>来调用<xref:System.Net.Sockets.Socket.Send%2A>或<xref:System.Net.Sockets.Socket.Receive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-109">Use this returned <xref:System.Net.Sockets.Socket> to call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span> <span data-ttu-id="0c8e6-110">调用<xref:System.Net.Sockets.Socket.Bind%2A>方法之前调用<xref:System.Net.Sockets.Socket.Listen%2A>方法如果你想要指定本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-110">Call the <xref:System.Net.Sockets.Socket.Bind%2A> method prior to calling the <xref:System.Net.Sockets.Socket.Listen%2A> method if you want to specify the local IP address and port number.</span></span> <span data-ttu-id="0c8e6-111">如果你想要为你分配了可用端口的基础服务提供程序，请使用端口号 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-111">Use a port number of zero if you want the underlying service provider to assign a free port for you.</span></span> <span data-ttu-id="0c8e6-112">如果你想要连接到侦听主机，则调用<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-112">If you want to connect to a listening host, call the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-113">若要进行通信的数据，调用<xref:System.Net.Sockets.Socket.Send%2A>或<xref:System.Net.Sockets.Socket.Receive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-113">To communicate data, call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
-   <span data-ttu-id="0c8e6-114">如果使用如 UDP 是无连接协议，你不需要在所有侦听连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-114">If you are using a connectionless protocol such as UDP, you do not need to listen for connections at all.</span></span> <span data-ttu-id="0c8e6-115">调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法以接受任何传入的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-115">Call the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method to accept any incoming datagrams.</span></span> <span data-ttu-id="0c8e6-116">使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法以将数据报发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-116">Use the <xref:System.Net.Sockets.Socket.SendTo%2A> method to send datagrams to a remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-117">若要处理在执行期间使用单独的线程通信，请使用以下方法，适用于异步操作模式。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-117">To process communications using separate threads during execution, use the following methods, which are designed for asynchronous operation mode.</span></span>  
  
-   <span data-ttu-id="0c8e6-118">如果使用的面向连接的 TCP 协议，使用<xref:System.Net.Sockets.Socket>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>，和<xref:System.Net.Sockets.Socket.EndConnect%2A>方法来侦听主机的连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-118">If you are using a connection-oriented protocol such as TCP, use the <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, and <xref:System.Net.Sockets.Socket.EndConnect%2A> methods to connect with a listening host.</span></span> <span data-ttu-id="0c8e6-119">使用<xref:System.Net.Sockets.Socket.BeginSend%2A>并<xref:System.Net.Sockets.Socket.EndSend%2A>或<xref:System.Net.Sockets.Socket.BeginReceive%2A>和<xref:System.Net.Sockets.Socket.EndReceive%2A>方法进行异步通信数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-119">Use the <xref:System.Net.Sockets.Socket.BeginSend%2A> and <xref:System.Net.Sockets.Socket.EndSend%2A> or <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods to communicate data asynchronously.</span></span> <span data-ttu-id="0c8e6-120">可以使用处理传入的连接请求<xref:System.Net.Sockets.Socket.BeginAccept%2A>和<xref:System.Net.Sockets.Socket.EndAccept%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-120">Incoming connection requests can be processed using <xref:System.Net.Sockets.Socket.BeginAccept%2A> and <xref:System.Net.Sockets.Socket.EndAccept%2A>.</span></span>  
  
-   <span data-ttu-id="0c8e6-121">如果使用如 UDP 是无连接协议，则可以使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>并<xref:System.Net.Sockets.Socket.EndSendTo%2A>来发送数据报，并<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>和<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>来接收数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-121">If you are using a connectionless protocol such as UDP, you can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.EndSendTo%2A> to send datagrams, and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> and <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> to receive datagrams.</span></span>  
  
 <span data-ttu-id="0c8e6-122">如果执行套接字上的多个异步操作，它们不一定会完成启动它们的顺序中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-122">If you perform multiple asynchronous operations on a socket, they do not necessarily complete in the order in which they are started.</span></span>  
  
 <span data-ttu-id="0c8e6-123">当你已完成发送和接收数据，请使用<xref:System.Net.Sockets.Socket.Shutdown%2A>方法，以禁用<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-123">When you are finished sending and receiving data, use the <xref:System.Net.Sockets.Socket.Shutdown%2A> method to disable the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-124">在调用<xref:System.Net.Sockets.Socket.Shutdown%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法来释放与关联的所有资源<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-124">After calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method to release all resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 <span data-ttu-id="0c8e6-125"><xref:System.Net.Sockets.Socket>类允许您配置您<xref:System.Net.Sockets.Socket>使用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-125">The <xref:System.Net.Sockets.Socket> class allows you to configure your <xref:System.Net.Sockets.Socket> using the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span> <span data-ttu-id="0c8e6-126">检索这些设置，请使用<xref:System.Net.Sockets.Socket.GetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-126">Retrieve these settings using the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-127">如果您正在编写相对简单的应用程序并不需要最大的性能，请考虑使用<xref:System.Net.Sockets.TcpClient>， <xref:System.Net.Sockets.TcpListener>，和<xref:System.Net.Sockets.UdpClient>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-127">If you are writing a relatively simple application and do not require maximum performance, consider using <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, and <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="0c8e6-128">这些类提供的更简单并且更加用户友好界面<xref:System.Net.Sockets.Socket>通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-128">These classes provide a simpler and more user-friendly interface to <xref:System.Net.Sockets.Socket> communications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-129">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket>类可用于将数据发送到 HTTP 服务器并接收响应。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-129">The following code example shows how the <xref:System.Net.Sockets.Socket> class can be used to send data to an HTTP server and receive the response.</span></span> <span data-ttu-id="0c8e6-130">此示例中阻止，直到收到整个页面。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-130">This example blocks until the entire page is received.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CPP/socket.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CS/socket.cs#1)]
 [!code-vb[System.Net.Sockets.Socket#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Socket/VB/socket.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">
      <span data-ttu-id="0c8e6-131">若要建立传出连接，或接受传入的请求。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c8e6-131">To establish an outgoing connection or accept an incoming request.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="0c8e6-132">此类的实例都是线程安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c8e6-132">Instances of this class are thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="N:System.Net" />
    <altmember cref="N:System.Net.Cache" />
    <altmember cref="N:System.Net.Security" />
    <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-133">初始化 <see cref="T:System.Net.Sockets.Socket" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-133">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketInformation socketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketInformation socketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketInformation socketInformation);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.SocketInformation -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket socketInformation" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketInformation" Type="System.Net.Sockets.SocketInformation" />
      </Parameters>
      <Docs>
        <param name="socketInformation">
          <span data-ttu-id="0c8e6-134">
            <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> 返回的套接字信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-134">The socket information returned by <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-135">使用 <see cref="T:System.Net.Sockets.Socket" /> 返回的指定的值初始化 <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-135">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified value returned from <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-136">如果您调用<xref:System.Net.Sockets.Socket.%23ctor%2A>多次使用相同的字节数组，作为每个调用的参数的构造函数，您将创建多个托管<xref:System.Net.Sockets.Socket>与同一个基础套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-136">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket>s with the same underlying socket.</span></span> <span data-ttu-id="0c8e6-137">这种做法是强烈建议不要使用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-137">This practice is strongly discouraged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket (socketType, protocolType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="socketType">
          <span data-ttu-id="0c8e6-138">
            <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-138">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </param>
        <param name="protocolType">
          <span data-ttu-id="0c8e6-139">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-139">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-140">使用指定的地址族、套接字类型和协议初始化 <see cref="T:System.Net.Sockets.Socket" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-140">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified socket type and protocol.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-141">`socketType`参数指定的类型<xref:System.Net.Sockets.Socket>类和`protocolType`参数指定使用的协议<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-141">The `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-142">两个参数不是独立的。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-142">The two parameters are not independent.</span></span> <span data-ttu-id="0c8e6-143">通常<xref:System.Net.Sockets.Socket>类型是隐式的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-143">Often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="0c8e6-144">如果的组合<xref:System.Net.Sockets.Socket>类型和协议类型结果无效<xref:System.Net.Sockets.Socket>，此构造函数引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-144">If the combination of <xref:System.Net.Sockets.Socket> type and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-145">如果此构造函数将引发<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-145">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-146">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-146">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-147">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-147">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-148">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-148">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-149">
            <paramref name="socketType" /> 和 <paramref name="protocolType" /> 组合将导致套接字无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-149">The combination of  <paramref name="socketType" /> and <paramref name="protocolType" /> results in an invalid socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily addressFamily, valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::AddressFamily addressFamily, System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.AddressFamily * System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket (addressFamily, socketType, protocolType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addressFamily" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="addressFamily">
          <span data-ttu-id="0c8e6-150">
            <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-150">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span>
          </span>
        </param>
        <param name="socketType">
          <span data-ttu-id="0c8e6-151">
            <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-151">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </param>
        <param name="protocolType">
          <span data-ttu-id="0c8e6-152">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-152">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-153">使用指定的地址族、套接字类型和协议初始化 <see cref="T:System.Net.Sockets.Socket" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-153">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified address family, socket type and protocol.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-154">`addressFamily`参数指定的寻址方案<xref:System.Net.Sockets.Socket>类使用，`socketType`参数指定的类型<xref:System.Net.Sockets.Socket>类，并且`protocolType`参数指定使用的协议<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-154">The `addressFamily` parameter specifies the addressing scheme that the <xref:System.Net.Sockets.Socket> class uses, the `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class, and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-155">三个参数不是独立的。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-155">The three parameters are not independent.</span></span> <span data-ttu-id="0c8e6-156">有些地址族限制可以使用哪些协议，使用它们，并经常<xref:System.Net.Sockets.Socket>类型是隐式的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-156">Some address families restrict which protocols can be used with them, and often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="0c8e6-157">如果地址族的组合<xref:System.Net.Sockets.Socket>类型和协议类型无效<xref:System.Net.Sockets.Socket>，此构造函数引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-157">If the combination of address family, <xref:System.Net.Sockets.Socket> type, and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-158">如果此构造函数将引发<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-158">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-159">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-159">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-160">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-160">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-161">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-161">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-162">下面的代码示例演示如何创建的实例<xref:System.Net.Sockets.Socket>类。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-162">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
 [!code-cpp[Socket_Send_Recieve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Recieve/CPP/source.cpp#1)]
 [!code-csharp[Socket_Send_Recieve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Recieve/CS/source.cs#1)]
 [!code-vb[Socket_Send_Recieve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Recieve/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-163">
            <paramref name="addressFamily" />、<paramref name="socketType" /> 和 <paramref name="protocolType" /> 的组合会导致无效套接字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-163">The combination of <paramref name="addressFamily" />, <paramref name="socketType" />, and <paramref name="protocolType" /> results in an invalid socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketException" />
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
        <altmember cref="T:System.Net.Sockets.ProtocolType" />
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Accept ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket Accept() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Accept" />
      <MemberSignature Language="VB.NET" Value="Public Function Accept () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ Accept();" />
      <MemberSignature Language="F#" Value="member this.Accept : unit -&gt; System.Net.Sockets.Socket" Usage="socket.Accept " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-164">为新建连接创建新的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-164">Creates a new <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-165">新建连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-165">A <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-166"><xref:System.Net.Sockets.Socket.Accept%2A> 以同步方式从侦听套接字，在连接请求队列中提取第一个挂起的连接请求，然后创建并返回一个新<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-166"><xref:System.Net.Sockets.Socket.Accept%2A> synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and returns a new <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-167">不能使用此返回<xref:System.Net.Sockets.Socket>为接受任何其他连接的连接队列。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-167">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="0c8e6-168">但是，可以调用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>方法所返回的<xref:System.Net.Sockets.Socket>来标识远程主机的网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-168">However, you can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> method of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
 <span data-ttu-id="0c8e6-169">在阻止模式下，<xref:System.Net.Sockets.Socket.Accept%2A>阻止，直到传入的连接尝试排入队列。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-169">In blocking mode, <xref:System.Net.Sockets.Socket.Accept%2A> blocks until an incoming connection attempt is queued.</span></span> <span data-ttu-id="0c8e6-170">连接被接受后，原始<xref:System.Net.Sockets.Socket>继续队列传入的连接请求直到您关闭它。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-170">Once a connection is accepted, the original <xref:System.Net.Sockets.Socket> continues queuing incoming connection requests until you close it.</span></span>  
  
 <span data-ttu-id="0c8e6-171">如果调用此方法使用非阻塞<xref:System.Net.Sockets.Socket>，并请求排队，没有连接<xref:System.Net.Sockets.Socket.Accept%2A>引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-171">If you call this method using a non-blocking <xref:System.Net.Sockets.Socket>, and no connection requests are queued, <xref:System.Net.Sockets.Socket.Accept%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-172">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-172">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-173">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-173">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-174">然后再调用<xref:System.Net.Sockets.Socket.Accept%2A>方法，必须首先调用<xref:System.Net.Sockets.Socket.Listen%2A>方法来侦听并对传入连接请求进行排队。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-174">Before calling the <xref:System.Net.Sockets.Socket.Accept%2A> method, you must first call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-175">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-175">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-176">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-176">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-177">下面的代码示例接受简单<xref:System.Net.Sockets.Socket>连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-177">The following code example accepts a simple <xref:System.Net.Sockets.Socket> connection.</span></span>  
  
 [!code-cpp[Classic Socket.Accept Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Accept Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Accept Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Accept Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Accept Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Accept Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-178">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-178">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-179">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-179">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-180">正在接受的套接字不会侦听连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-180">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="0c8e6-181">在调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 和 <see cref="M:System.Net.Sockets.Socket.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-181">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.Accept" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AcceptAsync">
      <MemberSignature Language="C#" Value="public bool AcceptAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AcceptAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AcceptAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AcceptAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.AcceptAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-182">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-182">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-183">开始一个异步操作来接受一个传入的连接尝试。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-183">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-184">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-184">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-185">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-185">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-186">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-186">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-187">将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-187">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-188">可以使用面向连接的协议<xref:System.Net.Sockets.Socket.AcceptAsync%2A>方法以异步处理传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-188">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="0c8e6-189">以异步方式接受连接使你能够发送和接收单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-189">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="0c8e6-190">然后再调用<xref:System.Net.Sockets.Socket.AcceptAsync%2A>方法时，必须调用<xref:System.Net.Sockets.Socket.Listen%2A>方法来侦听并对传入连接请求进行排队。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-190">Before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="0c8e6-191">若要在完成时得到通知，必须创建实现事件处理程序的回调方法\<SocketAsyncEventArgs > 委托并将其到挂钩<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-191">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and hook it to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="0c8e6-192">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>对象所需：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-192">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-193">调用方可以选择指定的现有<xref:System.Net.Sockets.Socket>要通过指定用于将传入连接<xref:System.Net.Sockets.Socket>用于<xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-193">The caller can optionally specify an existing <xref:System.Net.Sockets.Socket> to use for the incoming connection by specifying the <xref:System.Net.Sockets.Socket> to use with the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="0c8e6-194">如果<xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>属性为 null，一个新<xref:System.Net.Sockets.Socket>具有相同构造<xref:System.Net.Sockets.Socket.AddressFamily%2A>， <xref:System.Net.Sockets.Socket.SocketType%2A>，并<xref:System.Net.Sockets.Socket.ProtocolType%2A>与当前<xref:System.Net.Sockets.Socket>并将设置为<xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-194">If the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property is null, a new <xref:System.Net.Sockets.Socket> is constructed with the same <xref:System.Net.Sockets.Socket.AddressFamily%2A>, <xref:System.Net.Sockets.Socket.SocketType%2A>, and <xref:System.Net.Sockets.Socket.ProtocolType%2A> as the current <xref:System.Net.Sockets.Socket> and set as the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="0c8e6-195">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.AcceptAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-195">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-196">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-196">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-197">（可选） 一个缓冲区可能会提供用来接收后的套接字上的数据的初始块<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法成功。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-197">Optionally, a buffer may be provided in which to receive the initial block of data on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="0c8e6-198">在这种情况下，<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>属性应设置为包含数据的缓冲区，以接收和<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>属性应设置为的最大的数据的字节数，以接收缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-198">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to receive and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the maximum number of bytes of data to receive in the buffer.</span></span> <span data-ttu-id="0c8e6-199">这些属性可以设置使用<xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-199">These properties can be set using the <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0c8e6-200">在传递的缓冲区的一部分将使用在内部用于基础 Winsock AcceptEx 调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-200">Part of the buffer passed in will be consumed internally for use by the underlying Winsock AcceptEx call.</span></span> <span data-ttu-id="0c8e6-201">这意味着返回的数据量始终为的值小于<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>属性上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>提供实例。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-201">This means that the amount of data returned will always be less than the value of the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> instance provided.</span></span> <span data-ttu-id="0c8e6-202">在内部使用的缓冲区数量根据不同而异的套接字地址族。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-202">The amount of the buffer used internally varies based on the address family of the socket.</span></span> <span data-ttu-id="0c8e6-203">所需的最小缓冲区大小是 288 个字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-203">The minimum buffer size required is 288 bytes.</span></span> <span data-ttu-id="0c8e6-204">如果指定较大的缓冲区大小，则<xref:System.Net.Sockets.Socket>希望一些额外的数据以外的 Winsock AcceptEx 调用收到的地址数据，并且将等待，直到收到此额外数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-204">If a larger buffer size is specified, then the <xref:System.Net.Sockets.Socket> will expect some extra data other than the address data received by the Winsock AcceptEx call and will wait until this extra data is received.</span></span> <span data-ttu-id="0c8e6-205">如果发生超时，将重置连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-205">If a timeout occurs, the connection is reset.</span></span> <span data-ttu-id="0c8e6-206">因此如果特定量的预期额外的数据，则应缓冲区大小设置为最小缓冲区大小加上此段中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-206">So if extra data is expected of  a specific amount, then the buffer size should be set to the minimum buffer size plus this amount.</span></span>  
  
 <span data-ttu-id="0c8e6-207">完成回调方法应检查<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>属性来确定如果<xref:System.Net.Sockets.Socket.AcceptAsync%2A>操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-207">The completion callback method should examine the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to determine if the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> operation was successful.</span></span>  
  
 <span data-ttu-id="0c8e6-208"><xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>事件可能在某些情况下不接受任何连接时发生，并导致<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>属性设置为<xref:System.Net.Sockets.SocketError.ConnectionReset>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-208">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event can occur in some cases when no connection has been accepted and cause the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to be set to <xref:System.Net.Sockets.SocketError.ConnectionReset>.</span></span> <span data-ttu-id="0c8e6-209">这可以导致端口扫描使用半开 SYN 类型扫描 (SYN-> SYN ACK-> RST 序列)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-209">This can occur as a result of port scanning using a half-open SYN type scan (a SYN -> SYN-ACK -> RST sequence).</span></span> <span data-ttu-id="0c8e6-210">使用应用程序<xref:System.Net.Sockets.Socket.AcceptAsync%2A>方法应准备好处理这种情况。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-210">Applications using the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method should be prepared to handle this condition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-211">自变量无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-211">An argument is not valid.</span>
          </span>
          <span data-ttu-id="0c8e6-212">如果所提供的缓冲区不够大，将会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-212">This exception occurs if the buffer provided is not large enough.</span>
          </span>
          <span data-ttu-id="0c8e6-213">缓冲区必须至少为 2 \* (sizeof(SOCKADDR_STORAGE + 16) 字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-213">The buffer must be at least 2 \* (sizeof(SOCKADDR_STORAGE + 16) bytes.</span>
          </span>
          <span data-ttu-id="0c8e6-214">如果指定了多个缓冲区，即 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null，也会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-214">This exception also occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-215">参数超出范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-215">An argument is out of range.</span>
          </span>
          <span data-ttu-id="0c8e6-216">如果 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> 小于 0，将会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-216">The exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-217">请求了无效操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-217">An invalid operation was requested.</span>
          </span>
          <span data-ttu-id="0c8e6-218">如果接收方 <see cref="T:System.Net.Sockets.Socket" /> 未侦听连接或者绑定了接受的套接字，将发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-218">This exception occurs if the accepting <see cref="T:System.Net.Sockets.Socket" /> is not listening for connections or the accepted socket is bound.</span>
          </span>
          <span data-ttu-id="0c8e6-219">
            <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 方法必须先于 <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-219">You must call the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> method before calling the <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> method.</span>
          </span>
          <span data-ttu-id="0c8e6-220">如果套接字已连接或使用指定的 <paramref name="e" /> 参数的套接字操作已经在进行中，也会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-220">This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-221">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-221">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-222">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-222">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-223">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-223">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberSignature Language="F#" Value="member this.AddressFamily : System.Net.Sockets.AddressFamily" Usage="System.Net.Sockets.Socket.AddressFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-224">获取 <see cref="T:System.Net.Sockets.Socket" /> 的地址族。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-224">Gets the address family of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-225">
            <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-225">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-226"><xref:System.Net.Sockets.AddressFamily>指定的寻址方案的一个实例<xref:System.Net.Sockets.Socket>类可以使用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-226">The <xref:System.Net.Sockets.AddressFamily> specifies the addressing scheme that an instance of the <xref:System.Net.Sockets.Socket> class can use.</span></span> <span data-ttu-id="0c8e6-227">此属性是只读的则会设置<xref:System.Net.Sockets.Socket>创建。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-227">This property is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-228">下面的代码示例显示<xref:System.Net.Sockets.AddressFamily>， <xref:System.Net.Sockets.SocketType>，和<xref:System.Net.Sockets.ProtocolType>到控制台。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-228">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.Socket.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-229">获取已经从网络接收且可供读取的数据量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-229">Gets the amount of data that has been received from the network and is available to be read.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-230">从网络接收的、可供读取的数据的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-230">The number of bytes of data received from the network and available to be read.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-231">如果使用非阻塞<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Available%2A>是好的方法，以确定是否将数据排队以进行读取，然后才能调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-231">If you are using a non-blocking <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Available%2A> is a good way to determine whether data is queued for reading, before calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-232">可用的数据是在读取的网络缓冲区中对排队的总数据量。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-232">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="0c8e6-233">如果无数据排队网络缓冲区中<xref:System.Net.Sockets.Socket.Available%2A>返回 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-233">If no data is queued in the network buffer, <xref:System.Net.Sockets.Socket.Available%2A> returns 0.</span></span>  
  
 <span data-ttu-id="0c8e6-234">如果远程主机关闭，或关闭的连接<xref:System.Net.Sockets.Socket.Available%2A>可能会引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-234">If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.Socket.Available%2A> can throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-235">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-235">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-236">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-236">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-237">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-237">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-238">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-238">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-239">下面的代码示例将调用 IOControl 使用 FIONREAD 和可用属性的结果进行比较。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-239">The following code example compares the results of calling IOControl with FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-240">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-240">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-241">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-241">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="F:System.Net.Sockets.SocketType.Dgram" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-242">开始一个异步操作来接受一个传入的连接尝试。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-242">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="0c8e6-243">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-243">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-244">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-244">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-245">开始一个异步操作来接受一个传入的连接尝试。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-245">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-246">一个 <see cref="T:System.IAsyncResult" />，它引用异步 <see cref="T:System.Net.Sockets.Socket" /> 创建。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-246">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-247">可以使用面向连接的协议<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法以异步处理传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-247">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="0c8e6-248">以异步方式接受连接使你能够发送和接收单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-248">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="0c8e6-249">然后再调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法时，必须调用<xref:System.Net.Sockets.Socket.Listen%2A>方法来侦听并对传入连接请求进行排队。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-249">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="0c8e6-250">必须创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-250">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-251">为此，请在最低限度下，必须通过侦听<xref:System.Net.Sockets.Socket>对象传递给<xref:System.Net.Sockets.Socket.BeginAccept%2A>通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-251">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="0c8e6-252">如果回调需要详细信息，可以创建一个小类来保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-252">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-253">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-253">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-254">回调方法应该调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-254">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-255">当应用程序调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>，系统通常使用一个单独的线程来执行指定的回调方法，并阻止上<xref:System.Net.Sockets.Socket.EndAccept%2A>直到检索到挂起的连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-255">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span> <span data-ttu-id="0c8e6-256"><xref:System.Net.Sockets.Socket.EndAccept%2A> 将返回一个新<xref:System.Net.Sockets.Socket>对象可用于发送和接收数据与远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-256"><xref:System.Net.Sockets.Socket.EndAccept%2A> will return a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="0c8e6-257">不能使用此返回<xref:System.Net.Sockets.Socket>为接受任何其他连接的连接队列。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-257">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="0c8e6-258">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-258">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-259">在调用 Set 方法<xref:System.Threading.ManualResetEvent>在回调方法时所需的原始线程继续执行。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-259">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="0c8e6-260">系统还可能使用调用线程来调用该回调方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-260">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="0c8e6-261">在这种情况下，<xref:System.IAsyncResult.CompletedSynchronously%2A>对返回的属性<xref:System.IAsyncResult>会将设置为指示<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法以同步方式完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-261">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="0c8e6-262">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-262">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-263">若要取消挂起调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法，关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-263">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-264">当<xref:System.Net.Sockets.Socket.Close%2A>回调的异步操作正在进行中时，调用方法，提供给<xref:System.Net.Sockets.Socket.BeginAccept%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-264">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="0c8e6-265">随后调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法将引发<xref:System.ObjectDisposedException>以指示已取消该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-265">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-266">可以使用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性所返回的<xref:System.Net.Sockets.Socket>来标识远程主机的网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-266">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-267">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-267">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-268">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 中有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-268">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-269">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-269">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-270">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-270">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-271">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-271">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-272">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-272">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-273">下面的代码示例尝试以异步方式接收传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-273">The following code example attempts to receive an incoming connection asynchronously.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Async_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Async_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-274">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-274">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-275">此方法需要 Windows NT。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-275">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-276">正在接受的套接字不会侦听连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-276">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="0c8e6-277">在调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 和 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-277">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
          <span data-ttu-id="0c8e6-278">- 或 -  已接受的套接字是绑定的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-278">-or-  The accepted socket is bound.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-279">
            <paramref name="receiveSize" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-279">
              <paramref name="receiveSize" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-280">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-280">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (receiveSize, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveSize" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="receiveSize">
          <span data-ttu-id="0c8e6-281">要从发送方读取的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-281">The number of bytes to accept from the sender.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-282">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-282">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-283">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-283">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-284">开始异步操作以接受传入的连接尝试并接收客户端应用程序发送的第一个数据块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-284">Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data sent by the client application.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-285">一个 <see cref="T:System.IAsyncResult" />，它引用异步 <see cref="T:System.Net.Sockets.Socket" /> 创建。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-285">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-286">可以使用面向连接的协议<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法以异步处理传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-286">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="0c8e6-287">以异步方式接受连接，可发送和接收单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-287">Accepting connections asynchronously enables you to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="0c8e6-288">此重载允许您指定要接受初始传输中的字节数`receiveSize`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-288">This overload allows you to specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-289">然后再调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法时，必须调用<xref:System.Net.Sockets.Socket.Listen%2A>方法来侦听并对传入连接请求进行排队。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-289">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="0c8e6-290">必须创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-290">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-291">为此，请在最低限度下，必须通过侦听<xref:System.Net.Sockets.Socket>对象传递给<xref:System.Net.Sockets.Socket.BeginAccept%2A>通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-291">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="0c8e6-292">如果回调需要详细信息，可以创建一个小类来保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-292">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-293">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-293">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-294">回调方法应该调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-294">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-295">当应用程序调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>，系统通常使用一个单独的线程来执行指定的回调方法，并阻止上<xref:System.Net.Sockets.Socket.EndAccept%2A>直到检索到挂起的连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-295">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="0c8e6-296"><xref:System.Net.Sockets.Socket.EndAccept%2A> 返回一个新<xref:System.Net.Sockets.Socket>可用于发送和接收数据与远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-296"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="0c8e6-297">不能使用此返回<xref:System.Net.Sockets.Socket>为接受任何其他连接的连接队列。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-297">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="0c8e6-298">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-298">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-299">在调用 Set 方法<xref:System.Threading.ManualResetEvent>在回调方法时所需的原始线程继续执行。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-299">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="0c8e6-300">系统还可能使用调用线程来调用该回调方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-300">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="0c8e6-301">在这种情况下，<xref:System.IAsyncResult.CompletedSynchronously%2A>对返回的属性<xref:System.IAsyncResult>会将设置为指示<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法以同步方式完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-301">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="0c8e6-302">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-302">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-303">若要取消挂起调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法，关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-303">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span>  <span data-ttu-id="0c8e6-304">当<xref:System.Net.Sockets.Socket.Close%2A>回调的异步操作正在进行中时，调用方法，提供给<xref:System.Net.Sockets.Socket.BeginAccept%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-304">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="0c8e6-305">随后调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法将引发<xref:System.ObjectDisposedException>以指示已取消该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-305">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-306">您可以调用使用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性所返回的<xref:System.Net.Sockets.Socket>对象来标识远程主机的网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-306">You can call use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-307">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-307">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-308">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-308">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-309">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-309">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-310">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-310">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-311">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-311">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-312">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-312">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-313">下面的代码示例打开一个套接字并接受异步连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-313">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="0c8e6-314">在此示例中，套接字接受前 10 个字节的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-314">In this example, the socket accepts the initial 10 bytes of data.</span></span> <span data-ttu-id="0c8e6-315">接收的字节数和数据的回调委托显示在控制台上。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-315">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="0c8e6-316">请参阅<xref:System.Net.Sockets.Socket.BeginReceive%2A>如何接收剩余数据的说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-316">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-317">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-317">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-318">此方法需要 Windows NT。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-318">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-319">正在接受的套接字不会侦听连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-319">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="0c8e6-320">在调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 和 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-320">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
          <span data-ttu-id="0c8e6-321">- 或 -  已接受的套接字是绑定的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-321">-or-  The accepted socket is bound.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-322">
            <paramref name="receiveSize" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-322">
              <paramref name="receiveSize" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-323">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-323">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (System.Net.Sockets.Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.Net.Sockets.Socket acceptSocket, int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (acceptSocket As Socket, receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(System::Net::Sockets::Socket ^ acceptSocket, int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : System.Net.Sockets.Socket * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (acceptSocket, receiveSize, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptSocket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="receiveSize" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="acceptSocket">
          <span data-ttu-id="0c8e6-324">接受的 <see cref="T:System.Net.Sockets.Socket" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-324">The accepted <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
          <span data-ttu-id="0c8e6-325">此值可为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-325">This value may be <see langword="null" />.</span>
          </span>
        </param>
        <param name="receiveSize">
          <span data-ttu-id="0c8e6-326">要接收的最大字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-326">The maximum number of bytes to receive.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-327">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-327">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-328">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-328">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-329">开始异步操作以接受从指定套接字传入的连接尝试并接收客户端应用程序发送的第一个数据块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-329">Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and receives the first block of data sent by the client application.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-330">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步 <see cref="T:System.Net.Sockets.Socket" /> 对象创建。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-330">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> object creation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-331">可以使用面向连接的协议<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法以异步处理传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-331">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="0c8e6-332">以异步方式接受连接使你能够发送和接收单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-332">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="0c8e6-333">此重载允许您指定在接受的套接字`acceptSocket`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-333">This overload allows you to specify the accepted socket in the `acceptSocket` parameter.</span></span> <span data-ttu-id="0c8e6-334">如果此参数为`null`，通过创建接受的套接字<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-334">If this parameter is `null`, the accepted socket is created by the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-335">可以指定要接受初始传输中的字节数`receiveSize`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-335">You can specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-336">然后再调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法时，必须调用<xref:System.Net.Sockets.Socket.Listen%2A>方法来侦听并对传入连接请求进行排队。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-336">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="0c8e6-337">必须创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-337">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-338">为此，请在最低限度下，必须通过侦听<xref:System.Net.Sockets.Socket>对象传递给<xref:System.Net.Sockets.Socket.BeginAccept%2A>通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-338">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="0c8e6-339">如果回调需要详细信息，可以创建一个小类来保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-339">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-340">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-340">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-341">回调方法应该调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-341">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-342">当应用程序调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>，系统通常使用一个单独的线程来执行指定的回调方法，并阻止上<xref:System.Net.Sockets.Socket.EndAccept%2A>直到检索到挂起的连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-342">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="0c8e6-343"><xref:System.Net.Sockets.Socket.EndAccept%2A> 返回一个新<xref:System.Net.Sockets.Socket>对象可用于发送和接收数据与远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-343"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="0c8e6-344">不能使用此返回<xref:System.Net.Sockets.Socket>为接受任何其他连接的连接队列。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-344">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="0c8e6-345">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-345">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-346">在调用 Set 方法<xref:System.Threading.ManualResetEvent>在回调方法时所需的原始线程继续执行。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-346">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="0c8e6-347">系统还可能使用调用线程来调用该回调方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-347">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="0c8e6-348">在这种情况下，<xref:System.IAsyncResult.CompletedSynchronously%2A>对返回的属性<xref:System.IAsyncResult>会将设置为指示<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法以同步方式完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-348">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="0c8e6-349">有关编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-349">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-350">若要取消挂起调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法，关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-350">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-351">当<xref:System.Net.Sockets.Socket.Close%2A>回调的异步操作正在进行中时，调用方法，提供给<xref:System.Net.Sockets.Socket.BeginAccept%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-351">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="0c8e6-352">随后调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法将引发<xref:System.ObjectDisposedException>以指示已取消该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-352">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-353">可以使用<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性所返回的<xref:System.Net.Sockets.Socket>对象来标识远程主机的网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-353">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-354">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-354">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-355">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-355">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-356">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-356">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-357">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-357">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-358">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-358">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-359">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-359">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-360">下面的代码示例打开一个套接字并接受异步连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-360">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="0c8e6-361">在此示例中，套接字接受前 10 个字节的数据并`acceptSocket`参数是`null`，这将强制<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法来创建接受的套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-361">In this example, the socket accepts the initial 10 bytes of data and the `acceptSocket` parameter is `null`, which forces the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to create the accepted socket.</span></span> <span data-ttu-id="0c8e6-362">接收的字节数和数据的回调委托显示在控制台上。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-362">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="0c8e6-363">请参阅<xref:System.Net.Sockets.Socket.BeginReceive%2A>如何接收剩余数据的说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-363">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#7)]
 [!code-csharp[NCLSocketEnhancements#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-364">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-364">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-365">此方法需要 Windows NT。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-365">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-366">正在接受的套接字不会侦听连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-366">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="0c8e6-367">在调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 和 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-367">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
          <span data-ttu-id="0c8e6-368">- 或 -  已接受的套接字是绑定的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-368">-or-  The accepted socket is bound.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-369">
            <paramref name="receiveSize" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-369">
              <paramref name="receiveSize" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-370">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-370">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-371">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-371">Begins an asynchronous request for a remote host connection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (remoteEP As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint end_point, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint end_point, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (end_point As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ end_point, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.EndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (end_point, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="end_point" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="1" />
        <Parameter Name="state" Type="System.Object" Index="2" />
      </Parameters>
      <Docs>
        <param name="remoteEP">To be added.</param>
        <param name="end_point">To be added.</param>
        <param name="callback">
          <span data-ttu-id="0c8e6-372">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-372">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-373">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-373">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-374">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-374">Begins an asynchronous request for a remote host connection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-375">引用异步连接的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-375">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-376">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法启动的连接的异步请求`remoteEP`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-376">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method starts an asynchronous request for a connection to the `remoteEP` parameter.</span></span> <span data-ttu-id="0c8e6-377">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.BeginConnect%2A>建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-377">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.BeginConnect%2A> establishes a default remote host.</span></span> <span data-ttu-id="0c8e6-378">连接或以异步方式设置默认远程主机使你能够发送和接收单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-378">Connecting or setting the default remote host asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-379">可以创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-379">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span> <span data-ttu-id="0c8e6-380">至少，您必须传递<xref:System.Net.Sockets.Socket>到<xref:System.Net.Sockets.Socket.BeginConnect%2A>通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-380">At the very minimum, you must pass the <xref:System.Net.Sockets.Socket> to <xref:System.Net.Sockets.Socket.BeginConnect%2A> through the `state` parameter.</span></span> <span data-ttu-id="0c8e6-381">如果回调需要详细信息，可以创建一个小类来保存<xref:System.Net.Sockets.Socket>，和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-381">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="0c8e6-382">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-382">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-383">回调方法应该调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-383">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="0c8e6-384">当应用程序调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>，系统将使用一个单独的线程来执行指定的回调方法，并阻止<xref:System.Net.Sockets.Socket.EndConnect%2A>直到<xref:System.Net.Sockets.Socket>已成功连接或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-384">When your application calls <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndConnect%2A> until the <xref:System.Net.Sockets.Socket> connects successfully or throws an exception.</span></span> <span data-ttu-id="0c8e6-385">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-385">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="0c8e6-386">在调用 Set 方法<xref:System.Threading.ManualResetEvent>在回调方法时所需的原始线程继续执行。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-386">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="0c8e6-387">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-387">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-388">如果使用如 UDP 是无连接协议，不需要调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>之前发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-388">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.BeginConnect%2A> before sending and receiving data.</span></span> <span data-ttu-id="0c8e6-389">可以使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>和<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>与远程主机通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-389">You can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> to communicate with a remote host.</span></span> <span data-ttu-id="0c8e6-390">如果调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>，将丢弃来自指定的默认值以外的地址的任何数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-390">If you do call <xref:System.Net.Sockets.Socket.BeginConnect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="0c8e6-391">如果你想要将默认远程主机到广播地址，必须先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>设置为广播和`true`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-391">If you wish to set your default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="0c8e6-392">如果您不能<xref:System.Net.Sockets.Socket.BeginConnect%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-392">If you cannot, <xref:System.Net.Sockets.Socket.BeginConnect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-393">如果您使用的是面向连接的协议，并且不会调用<xref:System.Net.Sockets.Socket.Bind%2A>之前调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>，基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-393">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="0c8e6-394">如果您使用的是无连接协议，直到您调用，服务提供程序将不分配本地网络地址和端口号<xref:System.Net.Sockets.Socket.BeginSend%2A>或<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-394">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-395">如果你想要更改默认远程主机，则调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法再次使用所需终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-395">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="0c8e6-396">若要取消挂起调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法，关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-396">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-397">当<xref:System.Net.Sockets.Socket.Close%2A>回调的异步操作正在进行中时，调用方法，提供给<xref:System.Net.Sockets.Socket.BeginConnect%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-397">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="0c8e6-398">随后调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法将引发<xref:System.ObjectDisposedException>以指示已取消该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-398">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-399">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-399">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-400">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-400">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-401">如果以前已断开此套接字，然后<xref:System.Net.Sockets.Socket.BeginConnect%2A>必须在操作完成之前不会退出的线程上调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-401">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="0c8e6-402">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-402">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-403">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-403">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-404">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-404">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-405">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-405">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-406">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-406">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-407">下面的代码示例启动异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-407">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Async_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Async_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-408">
            <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-408">
              <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-409">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-409">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-410">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-410">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-411">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-411">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-412">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态，或异步操作已在进行中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-412">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (address, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="0c8e6-413">远程主机的 <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-413">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="0c8e6-414">远程主机的端口号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-414">The port number of the remote host.</span>
          </span>
        </param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">
          <span data-ttu-id="0c8e6-415">一个用户定义对象，其中包含连接操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-415">A user-defined object that contains information about the connect operation.</span>
          </span>
          <span data-ttu-id="0c8e6-416">操作完成后，此对象会被传递给 <c>requestCallback</c> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-416">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-417">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-417">Begins an asynchronous request for a remote host connection.</span>
          </span>
          <span data-ttu-id="0c8e6-418">主机由 <see cref="T:System.Net.IPAddress" /> 和端口号指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-418">The host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-419">引用异步连接的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-419">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-420">异步<xref:System.Net.Sockets.Socket.BeginConnect%2A>完成操作，必须通过调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-420">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="0c8e6-421">通常情况下，通过调用该方法`requestCallback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-421">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-422">此方法不会阻止，直到完成该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-422">This method does not block until the operation is complete.</span></span> <span data-ttu-id="0c8e6-423">若要阻止，直到完成该操作后，使用之一<xref:System.Net.Sockets.Socket.Connect%2A>方法重载或<xref:System.Net.Sockets.Socket.EndConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-423">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads, or <xref:System.Net.Sockets.Socket.EndConnect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-424">若要取消挂起调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法，关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-424">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-425">当<xref:System.Net.Sockets.Socket.Close%2A>回调的异步操作正在进行中时，调用方法，提供给<xref:System.Net.Sockets.Socket.BeginConnect%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-425">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="0c8e6-426">随后调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法将引发<xref:System.ObjectDisposedException>以指示已取消该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-426">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="0c8e6-427">有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="0c8e6-427">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-428">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-428">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-429">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-429">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-430">如果以前已断开此套接字，然后<xref:System.Net.Sockets.Socket.BeginConnect%2A>必须在操作完成之前不会退出的线程上调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-430">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="0c8e6-431">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-431">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="0c8e6-432">此外<xref:System.Net.EndPoint>，它是使用必须不同。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-432">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-433">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-433">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-434">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-434">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-435">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-435">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-436">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-436">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-437">下面的代码示例启动异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-437">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#7)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-438">
            <paramref name="address" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-438">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-439">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-439">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-440">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-440">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-441">
            <see cref="T:System.Net.Sockets.Socket" /> 不在套接字族中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-441">The <see cref="T:System.Net.Sockets.Socket" /> is not in the socket family.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-442">端口号无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-442">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-443">
            <paramref name="address" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-443">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-444">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态，或异步操作已在进行中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-444">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (addresses, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="addresses">
          <span data-ttu-id="0c8e6-445">至少一个用于指定远程主机的 <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-445">At least one <see cref="T:System.Net.IPAddress" />, designating the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="0c8e6-446">远程主机的端口号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-446">The port number of the remote host.</span>
          </span>
        </param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">
          <span data-ttu-id="0c8e6-447">一个用户定义对象，其中包含连接操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-447">A user-defined object that contains information about the connect operation.</span>
          </span>
          <span data-ttu-id="0c8e6-448">操作完成后，此对象会被传递给 <c>requestCallback</c> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-448">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-449">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-449">Begins an asynchronous request for a remote host connection.</span>
          </span>
          <span data-ttu-id="0c8e6-450">主机由 <see cref="T:System.Net.IPAddress" /> 数组和端口号指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-450">The host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-451">引用异步连接的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-451">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connections.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-452">异步<xref:System.Net.Sockets.Socket.BeginConnect%2A>完成操作，必须通过调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-452">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="0c8e6-453">通常情况下，通过调用该方法`requestCallback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-453">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-454">此方法不会阻止，直到完成该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-454">This method does not block until the operation is complete.</span></span> <span data-ttu-id="0c8e6-455">若要阻止，直到完成该操作后，使用之一<xref:System.Net.Sockets.Socket.Connect%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-455">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="0c8e6-456">若要取消挂起调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法，关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-456">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-457">当<xref:System.Net.Sockets.Socket.Close%2A>回调的异步操作正在进行中时，调用方法，提供给<xref:System.Net.Sockets.Socket.BeginConnect%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-457">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="0c8e6-458">随后调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法将引发<xref:System.ObjectDisposedException>以指示已取消该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-458">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="0c8e6-459">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-459">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-460">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-460">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-461">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-461">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-462">如果以前已断开此套接字，然后<xref:System.Net.Sockets.Socket.BeginConnect%2A>必须在操作完成之前不会退出的线程上调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-462">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="0c8e6-463">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-463">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="0c8e6-464">此外<xref:System.Net.EndPoint>，它是使用必须不同。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-464">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-465">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-465">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-466">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-466">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-467">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-467">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-468">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-468">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-469">下面的代码示例启动异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-469">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-470">
            <paramref name="addresses" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-470">
              <paramref name="addresses" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-471">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-471">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-472">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-472">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-473">此方法对使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 的套接字有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-473">This method is valid for sockets that use <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-474">端口号无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-474">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-475">
            <paramref name="address" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-475">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-476">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态，或异步操作已在进行中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-476">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (host, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="host">
          <span data-ttu-id="0c8e6-477">远程主机的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-477">The name of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="0c8e6-478">远程主机的端口号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-478">The port number of the remote host.</span>
          </span>
        </param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">
          <span data-ttu-id="0c8e6-479">一个用户定义对象，其中包含连接操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-479">A user-defined object that contains information about the connect operation.</span>
          </span>
          <span data-ttu-id="0c8e6-480">操作完成后，此对象会被传递给 <c>requestCallback</c> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-480">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-481">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-481">Begins an asynchronous request for a remote host connection.</span>
          </span>
          <span data-ttu-id="0c8e6-482">主机由主机名和端口号指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-482">The host is specified by a host name and a port number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-483">引用异步连接的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-483">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-484">异步<xref:System.Net.Sockets.Socket.BeginConnect%2A>完成操作，必须通过调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-484">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="0c8e6-485">通常情况下，通过调用该方法`requestCallback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-485">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-486">此方法不会阻止，直到完成该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-486">This method does not block until the operation is complete.</span></span> <span data-ttu-id="0c8e6-487">若要阻止，直到完成该操作后，使用之一<xref:System.Net.Sockets.Socket.Connect%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-487">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="0c8e6-488">若要取消挂起调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法，关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-488">To cancel a pending call to the  <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-489">当<xref:System.Net.Sockets.Socket.Close%2A>回调的异步操作正在进行中时，调用方法，提供给<xref:System.Net.Sockets.Socket.BeginConnect%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-489">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="0c8e6-490">随后调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法将引发<xref:System.ObjectDisposedException>以指示已取消该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-490">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="0c8e6-491">有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="0c8e6-491">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-492">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-492">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-493">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-493">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-494">如果以前已断开此套接字，然后<xref:System.Net.Sockets.Socket.BeginConnect%2A>必须在操作完成之前不会退出的线程上调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-494">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="0c8e6-495">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-495">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="0c8e6-496">此外<xref:System.Net.EndPoint>，它是使用必须不同。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-496">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-497">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-497">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-498">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-498">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-499">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-499">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-500">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-500">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-501">下面的代码示例启动异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-501">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#3)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-502">
            <paramref name="host" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-502">
              <paramref name="host" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-503">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-503">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-504">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-504">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-505">端口号无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-505">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-506">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态，或异步操作已在进行中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-506">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginDisconnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisconnect (bool reuseSocket, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginDisconnect(bool reuseSocket, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginDisconnect (reuseSocket As Boolean, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginDisconnect(bool reuseSocket, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginDisconnect : bool * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginDisconnect (reuseSocket, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reuseSocket">
          <span data-ttu-id="0c8e6-507">如果关闭该连接后可以重用此套接字，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-507">
              <see langword="true" /> if this socket can be reused after the connection is closed; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-508">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-508">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-509">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-509">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-510">开始异步请求从远程终结点断开连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-510">Begins an asynchronous request to disconnect from a remote endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-511">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-511">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-512">如果使用的是面向连接的协议，则可以调用<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>方法来请求从远程终结点断开连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-512">If you are using a connection-oriented protocol, you can call the <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method to request a disconnect from a remote endpoint.</span></span> <span data-ttu-id="0c8e6-513">如果`reuseSocket`是`true`，可以重复使用套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-513">If `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="0c8e6-514"><xref:System.Net.Sockets.Socket.BeginDisconnect%2A>方法使用一个单独的线程来调用指定的回调方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-514">The <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method uses a separate thread to invoke the specified callback method.</span></span> <span data-ttu-id="0c8e6-515"><xref:System.Net.Sockets.Socket.EndDisconnect%2A>方法进行阻止，直到挂起的断开连接已完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-515">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the pending disconnect is complete.</span></span> <span data-ttu-id="0c8e6-516">有关编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-516">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-517">如果你收到<xref:System.Net.Sockets.SocketException>异常，请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-517">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-518">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-518">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-519">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-519">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-520">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-520">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-521">下面的代码示例创建的套接字进行异步通信，并将一些数据发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-521">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="0c8e6-522">已发送数据，<xref:System.Net.Sockets.Socket.Shutdown%2A>调用来停止发送和接收活动。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-522">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="0c8e6-523">然后<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>调用以开始断开连接请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-523">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="0c8e6-524">完成请求后，<xref:System.Net.Sockets.Socket.Connected%2A>属性进行查询，以测试是否已断开连接的套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-524">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-525">操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-525">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-526">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-526">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-527">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-527">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-528">开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-528">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffers, socketFlags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-529">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-529">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-530">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-530">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-531">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-531">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-532">一个用户定义的对象，其中包含接收操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-532">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="0c8e6-533">当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-533">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-534">开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-534">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-535">引用异步读的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-535">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-536">异步<xref:System.Net.Sockets.Socket.BeginReceive%2A>完成操作，必须通过调用<xref:System.Net.Sockets.Socket.EndReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-536">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-537">通常情况下，通过调用该方法`callback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-537">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-538">此方法不会阻止，直到完成该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-538">This method does not block until the operation is complete.</span></span> <span data-ttu-id="0c8e6-539">若要阻止，直到完成该操作后，使用之一<xref:System.Net.Sockets.Socket.Receive%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-539">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="0c8e6-540">若要取消挂起<xref:System.Net.Sockets.Socket.BeginReceive%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-540">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-541">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-541">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-542">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-542">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-543">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-543">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-544">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-544">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-545">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-545">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-546">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-546">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-547">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-547">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-548">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-548">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-549">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-549">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-550">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-550">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-551">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-551">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-552">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-552">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-553">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-553">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffers, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-554">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-554">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-555">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-555">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-556">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-556">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-557">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-557">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-558">一个用户定义的对象，其中包含接收操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-558">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="0c8e6-559">当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-559">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-560">开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-560">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-561">引用异步读的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-561">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-562">异步<xref:System.Net.Sockets.Socket.BeginReceive%2A>完成操作，必须通过调用<xref:System.Net.Sockets.Socket.EndReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-562">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-563">通常情况下，通过调用该方法`callback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-563">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-564">此方法不会阻止，直到完成该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-564">This method does not block until the operation is complete.</span></span> <span data-ttu-id="0c8e6-565">若要阻止，直到完成该操作后，使用之一<xref:System.Net.Sockets.Socket.Receive%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-565">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="0c8e6-566">若要取消挂起<xref:System.Net.Sockets.Socket.BeginReceive%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-566">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-567">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-567">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-568">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-568">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-569">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-569">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-570">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-570">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-571">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-571">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-572">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-572">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-573">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-573">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-574">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-574">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-575">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-575">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-576">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-576">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-577">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-577">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-578">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-578">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-579">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-579">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : byte[] * int * int * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffer, offset, size, socket_flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" />
        <Parameter Name="state" Type="System.Object" Index="5" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-580">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-580">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-581">
            <c>buffer</c> 参数中存储所接收数据的位置，该位置从零开始计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-581">The zero-based position in the <c>buffer</c> parameter at which to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-582">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-582">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="callback">
          <span data-ttu-id="0c8e6-583">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-583">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-584">一个用户定义的对象，其中包含接收操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-584">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="0c8e6-585">当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-585">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-586">开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-586">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-587">引用异步读的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-587">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-588">异步<xref:System.Net.Sockets.Socket.BeginReceive%2A>完成操作，必须通过调用<xref:System.Net.Sockets.Socket.EndReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-588">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-589">通常情况下，通过调用该方法`callback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-589">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-590">此方法不会阻止，直到完成该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-590">This method does not block until the operation is complete.</span></span> <span data-ttu-id="0c8e6-591">若要阻止，直到完成该操作后，使用之一<xref:System.Net.Sockets.Socket.Receive%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-591">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="0c8e6-592">若要取消挂起<xref:System.Net.Sockets.Socket.BeginReceive%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-592">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-593">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-593">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-594">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-594">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-595">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-595">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-596">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-596">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-597">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-597">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-598">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-598">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-599">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-599">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-600">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-600">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-601">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-601">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-602">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-602">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-603">下面的代码示例开始以异步方式从连接接收数据<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-603">The following code example begins to asynchronously receive data from a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Async_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Async_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#11)]  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-604">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-604">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-605">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-605">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-606">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-606">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-607">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-607">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-608">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-608">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-609">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-609">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-610">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-610">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags flags, out System.Net.Sockets.SocketError error, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags flags, [out] valuetype System.Net.Sockets.SocketError&amp; error, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, flags As SocketFlags, ByRef error As SocketError, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags flags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % error, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffer, offset, size, flags, error, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="error" Type="System.Net.Sockets.SocketError&amp;" RefType="out" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-611">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-611">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-612">
            <c>buffer</c> 中存储所接收数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-612">The location in <c>buffer</c> to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-613">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-613">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="flags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <param name="error">To be added.</param>
        <param name="callback">
          <span data-ttu-id="0c8e6-614">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-614">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-615">一个用户定义的对象，其中包含接收操作的相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-615">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="0c8e6-616">当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-616">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-617">开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-617">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-618">引用异步读的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-618">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-619">异步<xref:System.Net.Sockets.Socket.BeginReceive%2A>完成操作，必须通过调用<xref:System.Net.Sockets.Socket.EndReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-619">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-620">通常情况下，通过调用该方法`callback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-620">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-621">此方法不会阻止，直到完成该操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-621">This method does not block until the operation is complete.</span></span> <span data-ttu-id="0c8e6-622">若要阻止，直到完成该操作后，使用之一<xref:System.Net.Sockets.Socket.Receive%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-622">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="0c8e6-623">若要取消挂起<xref:System.Net.Sockets.Socket.BeginReceive%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-623">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-624">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-624">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-625">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-625">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-626">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-626">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-627">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-627">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-628">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-628">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-629">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-629">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-630">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-630">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-631">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-631">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-632">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-632">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-633">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-633">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-634">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-634">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-635">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-635">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-636">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-636">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-637">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-637">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-638">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-638">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-639">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-639">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-640">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-640">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, ref System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint&amp; remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFrom (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, ByRef remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ % remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceiveFrom (buffer, offset, size, socket_flags, remote_end, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint&amp;" RefType="ref" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-641">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-641">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-642">
            <c>buffer</c> 参数中存储数据的位置，该位置从零开始计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-642">The zero-based position in the <c>buffer</c> parameter at which to store the data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-643">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-643">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="remoteEP">To be added.</param>
        <param name="remote_end">To be added.</param>
        <param name="callback">
          <span data-ttu-id="0c8e6-644">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-644">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-645">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-645">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-646">开始从指定网络设备中异步接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-646">Begins to asynchronously receive data from a specified network device.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-647">引用异步读的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-647">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-648"><xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法开始以异步方式从远程主机中读取无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-648">The <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method starts asynchronously reading connectionless datagrams from a remote host.</span></span> <span data-ttu-id="0c8e6-649">调用<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法使您能够收到单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-649">Calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method gives you the ability to receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-650">可以创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-650">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-651">为此，至少，你`state`参数必须包含已连接或默认<xref:System.Net.Sockets.Socket>正用于通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-651">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="0c8e6-652">如果回调需要详细信息，可以创建一个小类来保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-652">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-653">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-653">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-654">回调方法应该调用<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-654">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-655">当应用程序调用<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>，系统将使用一个单独的线程来执行指定的回调方法，且它将阻止上<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>直到<xref:System.Net.Sockets.Socket>读取数据或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-655">When your application calls <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, the system will use a separate thread to execute the specified callback method, and it will block on <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> until the <xref:System.Net.Sockets.Socket> reads data or throws an exception.</span></span> <span data-ttu-id="0c8e6-656">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-656">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-657">当你想要继续执行的原始线程时请在回调方法调用 Set 方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-657">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="0c8e6-658">有关编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-658">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-659">然后再调用<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>，则必须显式将绑定<xref:System.Net.Sockets.Socket>到本地终结点使用<xref:System.Net.Sockets.Socket.Bind%2A>方法，或<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-659">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method, or <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-660">此方法将数据读入`buffer`参数，并捕获的远程主机终结点从其发送数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-660">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent.</span></span> <span data-ttu-id="0c8e6-661">有关如何检索此终结点的信息，请参阅<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-661">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="0c8e6-662">此方法是最有用，如果你想要以异步方式从未知的主机或多个主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-662">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span> <span data-ttu-id="0c8e6-663">在这些情况下，<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>将读取第一个排队数据报接收到的本地网络缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-663">In these cases, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="0c8e6-664">如果你收到的数据报大于的大小`buffer`，则<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法将填充`buffer`太多的是，且引发的消息与<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-664">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-665">如果使用的不可靠的协议，则多余的数据将丢失。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-665">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="0c8e6-666">如果您使用的是可靠的协议，多余的数据将保留由服务提供商可以通过调用检索它<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法使用一个足够大的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-666">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="0c8e6-667">若要保证始终返回远程主机终结点、 应用程序应显式将绑定<xref:System.Net.Sockets.Socket>到本地终结点使用<xref:System.Net.Sockets.Socket.Bind%2A>方法，然后调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法替换`optionLevel`参数设置为<xref:System.Net.Sockets.SocketOptionLevel.IP>或<xref:System.Net.Sockets.SocketOptionLevel.IPv6>根据需要，`optionName`参数设置为<xref:System.Net.Sockets.SocketOptionName.PacketInformation>，并`optionValue`参数来启用此选项之前，调用<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-667">To guarantee that the remote host endpoint is always returned, an application should explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method and then call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method with the `optionLevel` parameter set to <xref:System.Net.Sockets.SocketOptionLevel.IP> or <xref:System.Net.Sockets.SocketOptionLevel.IPv6> as appropriate, the `optionName` parameter set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation>, and the `optionValue` parameter to enable this option before calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-668">否则，它是可能的远程主机终结点以接收方已调用之前，发件人已发送的数据报的数量时不会返回<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-668">Otherwise, it is possible for the remote host endpoint to not be returned when the sender has sent a number of datagrams before the receiver has called the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-669">尽管<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>适用于无连接协议，你可以使用面向连接的协议也。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-669">Although <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="0c8e6-670">如果你选择这样做，则必须首先可以建立远程主机连接通过调用<xref:System.Net.Sockets.Socket.Connect%2A>  /  <xref:System.Net.Sockets.Socket.BeginConnect%2A>方法或通过调用接受传入连接请求<xref:System.Net.Sockets.Socket.Accept%2A>或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-670">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> / <xref:System.Net.Sockets.Socket.BeginConnect%2A> method or accept an incoming connection request by calling the <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-671">如果您调用<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法之前建立或接受的连接时，你将获取<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-671">If you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method before establishing or accepting a connection, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-672">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-672">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-673">在这些情况下，任一<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法将忽略`remoteEP`参数和仅接收来自连接的数据或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-673">In either of these cases, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-674">使用面向连接的套接字<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>将读取的数据，可最多指定的字节数`size`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-674">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-675">若要取消挂起<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-675">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-676">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-676">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-677">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-677">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-678">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-678">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-679">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-679">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-680">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-680">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-681">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-681">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-682">下面的代码示例以异步方式从远程主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-682">The following code example asynchronously receives connectionless datagrams from a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#41](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#41)]
 [!code-csharp[Socket_Async_Send_Receive#41](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#41)]
 [!code-vb[Socket_Async_Send_Receive#41](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-683">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-683">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-684">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-684">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-685">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-685">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-686">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-686">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-687">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-687">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-688">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-688">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-689">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-689">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-690">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-690">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-691">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-691">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveMessageFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveMessageFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceiveMessageFrom (buffer, offset, size, socketFlags, remoteEP, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-692">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-692">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-693">
            <c>buffer</c> 参数中存储数据的位置，该位置从零开始计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-693">The zero-based position in the <c>buffer</c> parameter at which to store the data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-694">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-694">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-695">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-695">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-696">一个 <see cref="T:System.Net.EndPoint" />，它表示数据的来源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-696">An <see cref="T:System.Net.EndPoint" /> that represents the source of the data.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-697">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-697">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-698">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-698">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-699">开始使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定字节数的数据异步接收到数据缓冲区的指定位置，然后存储终结点和数据包信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-699">Begins to asynchronously receive the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-700">引用异步读的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-700">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-701">异步接收操作必须通过调用完成<xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-701">The asynchronous receive operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-702">通常情况下，通过调用该方法`asyncCallback`委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-702">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="0c8e6-703">此方法不会阻止，直到操作完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-703">This method does not block until the operation completes.</span></span> <span data-ttu-id="0c8e6-704">若要阻止在操作完成之前，请使用<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-704">To block until the operation completes, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-705">若要取消挂起<xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-705">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-706">有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="0c8e6-706">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="0c8e6-707">此方法将数据读入`buffer`参数，并捕获的远程主机终结点从其发送数据，以及有关接收的数据包的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-707">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent, as well as information about the received packet.</span></span> <span data-ttu-id="0c8e6-708">有关如何检索此终结点的信息，请参阅<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-708">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="0c8e6-709">此方法是最有用，如果你想要以异步方式从未知的主机或多个主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-709">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-710">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-710">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-711">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-711">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-712">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-712">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-713">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-713">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-714">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-714">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-715">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-715">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-716">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-716">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-717">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-717">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-718">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-718">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-719">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-719">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-720">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-720">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-721">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-721">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-722">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-722">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-723">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-723">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-724">操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-724">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-725">将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-725">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffers, socketFlags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-726">
            <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-726">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-727">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-727">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-728">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-728">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-729">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-729">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-730">将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-730">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-731">引用异步发送的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-731">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-732"><xref:System.Net.Sockets.Socket.BeginSend%2A>方法启动异步发送操作中建立的远程主机<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-732">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-733"><xref:System.Net.Sockets.Socket.BeginSend%2A> 如果不首先调用将引发异常<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-733"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-734">调用<xref:System.Net.Sockets.Socket.BeginSend%2A>方法使你能够发送单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-734">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-735">可以创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-735">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="0c8e6-736">为此，至少，你`state`参数必须包含已连接或默认<xref:System.Net.Sockets.Socket>正用于通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-736">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="0c8e6-737">如果回调需要详细信息，可以创建较小的类或结构，用于保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-737">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-738">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginSend%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-738">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-739">回调方法应该调用<xref:System.Net.Sockets.Socket.EndSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-739">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="0c8e6-740">当应用程序调用<xref:System.Net.Sockets.Socket.BeginSend%2A>，系统将使用一个单独的线程来执行指定的回调方法，并阻止<xref:System.Net.Sockets.Socket.EndSend%2A>直到<xref:System.Net.Sockets.Socket>发送请求的字节数或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-740">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="0c8e6-741">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginSend%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-741">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0c8e6-742">当你想要继续执行的原始线程时请在回调方法调用 Set 方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-742">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="0c8e6-743">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-743">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-744">适用于面向连接的协议，尽管<xref:System.Net.Sockets.Socket.BeginSend%2A>无连接协议，也适用，前提是先调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法以建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-744">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="0c8e6-745">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-745">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="0c8e6-746">可以使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-746">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-747">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.BeginSend%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-747">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-748">使用无连接协议时，您还必须确保在缓冲区的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-748">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-749">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.BeginSend%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-749">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-750">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-750">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-751">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-751">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-752">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-752">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-753">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-753">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-754">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-754">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-755">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-755">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-756">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-756">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-757">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-757">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-758">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-758">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-759">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-759">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-760">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-760">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-761">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-761">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-762">
            <paramref name="buffers" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-762">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-763">
            <paramref name="buffers" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-763">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-764">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-764">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-765">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-765">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-766">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-766">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffers, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-767">
            <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-767">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-768">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-768">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-769">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-769">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-770">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-770">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-771">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-771">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-772">将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-772">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-773">引用异步发送的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-773">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-774"><xref:System.Net.Sockets.Socket.BeginSend%2A>方法启动异步发送操作中建立的远程主机<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-774">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-775"><xref:System.Net.Sockets.Socket.BeginSend%2A> 如果不首先调用将引发异常<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-775"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-776">调用<xref:System.Net.Sockets.Socket.BeginSend%2A>方法使你能够发送单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-776">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-777">可以创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-777">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="0c8e6-778">为此，至少，你`state`参数必须包含已连接或默认<xref:System.Net.Sockets.Socket>正用于通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-778">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="0c8e6-779">如果回调需要详细信息，可以创建较小的类或结构，用于保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-779">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-780">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginSend%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-780">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-781">回调方法应该调用<xref:System.Net.Sockets.Socket.EndSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-781">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="0c8e6-782">当应用程序调用<xref:System.Net.Sockets.Socket.BeginSend%2A>，系统将使用一个单独的线程来执行指定的回调方法，并阻止<xref:System.Net.Sockets.Socket.EndSend%2A>直到<xref:System.Net.Sockets.Socket>发送请求的字节数或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-782">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="0c8e6-783">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginSend%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-783">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0c8e6-784">在调用 Set 方法<xref:System.Threading.ManualResetEvent>在回调方法时所需的原始线程继续执行。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-784">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="0c8e6-785">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-785">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-786">适用于面向连接的协议，尽管<xref:System.Net.Sockets.Socket.BeginSend%2A>无连接协议，也适用，前提是先调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法以建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-786">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="0c8e6-787">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-787">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="0c8e6-788">可以使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-788">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-789">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.BeginSend%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-789">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-790">使用无连接协议时，您还必须确保在缓冲区的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-790">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-791">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.BeginSend%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-791">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-792">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-792">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-793">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-793">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-794">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-794">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-795">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-795">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-796">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-796">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-797">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-797">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-798">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-798">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-799">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-799">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-800">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-800">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-801">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-801">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-802">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-802">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-803">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-803">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-804">
            <paramref name="buffers" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-804">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-805">
            <paramref name="buffers" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-805">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-806">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-806">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-807">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-807">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-808">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-808">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffer, offset, size, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-809">
            <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-809">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-810">
            <c>buffer</c> 参数中开始发送数据的位置，该位置从零开始计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-810">The zero-based position in the <c>buffer</c> parameter at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-811">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-811">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-812">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-812">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-813">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-813">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-814">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-814">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-815">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-815">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-816">将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-816">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-817">引用异步发送的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-817">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-818"><xref:System.Net.Sockets.Socket.BeginSend%2A>方法启动异步发送操作中建立的远程主机<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-818">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-819"><xref:System.Net.Sockets.Socket.BeginSend%2A> 如果不首先调用将引发异常<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-819"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-820">调用<xref:System.Net.Sockets.Socket.BeginSend%2A>方法使你能够发送单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-820">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-821">可以创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-821">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="0c8e6-822">为此，至少，你`state`参数必须包含已连接或默认<xref:System.Net.Sockets.Socket>正用于通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-822">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="0c8e6-823">如果回调需要详细信息，可以创建较小的类或结构，用于保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-823">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-824">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginSend%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-824">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-825">回调方法应该调用<xref:System.Net.Sockets.Socket.EndSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-825">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="0c8e6-826">当应用程序调用<xref:System.Net.Sockets.Socket.BeginSend%2A>，系统将使用一个单独的线程来执行指定的回调方法，并阻止<xref:System.Net.Sockets.Socket.EndSend%2A>直到<xref:System.Net.Sockets.Socket>发送请求的字节数或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-826">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="0c8e6-827">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginSend%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-827">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0c8e6-828">当你想要继续执行的原始线程时请在回调方法调用 Set 方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-828">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="0c8e6-829">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-829">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-830">适用于面向连接的协议，尽管<xref:System.Net.Sockets.Socket.BeginSend%2A>无连接协议，也适用，前提是先调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法以建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-830">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="0c8e6-831">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-831">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="0c8e6-832">可以使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-832">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-833">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.BeginSend%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-833">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-834">使用无连接协议时，您还必须确保在缓冲区的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-834">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-835">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.BeginSend%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-835">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-836">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-836">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-837">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-837">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-838">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-838">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-839">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-839">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-840">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-840">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-841">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-841">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-842">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-842">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-843">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-843">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-844">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-844">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-845">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-845">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-846">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-846">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-847">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-847">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-848">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-848">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-849">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-849">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-850">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-850">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-851">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-851">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-852">- 或 -  <paramref name="offset" /> 小于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-852">-or-  <paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-853">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-853">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-854">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-854">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-855">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-855">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * int * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffer, offset, size, socket_flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" />
        <Parameter Name="state" Type="System.Object" Index="5" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-856">
            <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-856">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-857">
            <c>buffer</c> 参数中开始发送数据的位置，该位置从零开始计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-857">The zero-based position in the <c>buffer</c> parameter at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-858">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-858">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="callback">
          <span data-ttu-id="0c8e6-859">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-859">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-860">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-860">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-861">将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-861">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-862">引用异步发送的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-862">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-863"><xref:System.Net.Sockets.Socket.BeginSend%2A>方法启动异步发送操作中建立的远程主机<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-863">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="0c8e6-864"><xref:System.Net.Sockets.Socket.BeginSend%2A> 如果不首先调用将引发异常<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-864"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-865">调用<xref:System.Net.Sockets.Socket.BeginSend%2A>方法使你能够发送单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-865">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-866">可以创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-866">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="0c8e6-867">为此，至少，你`state`参数必须包含已连接或默认<xref:System.Net.Sockets.Socket>正用于通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-867">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="0c8e6-868">如果回调需要详细信息，可以创建较小的类或结构，用于保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-868">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-869">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginSend%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-869">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-870">回调方法应该调用<xref:System.Net.Sockets.Socket.EndSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-870">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="0c8e6-871">当应用程序调用<xref:System.Net.Sockets.Socket.BeginSend%2A>，系统将使用一个单独的线程来执行指定的回调方法，并阻止<xref:System.Net.Sockets.Socket.EndSend%2A>直到<xref:System.Net.Sockets.Socket>发送请求的字节数或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-871">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="0c8e6-872">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginSend%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-872">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0c8e6-873">当你想要继续执行的原始线程时请在回调方法调用 Set 方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-873">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="0c8e6-874">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-874">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-875">适用于面向连接的协议，尽管<xref:System.Net.Sockets.Socket.BeginSend%2A>无连接协议，也适用，前提是先调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法以建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-875">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="0c8e6-876">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-876">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="0c8e6-877">可以使用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-877">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-878">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.BeginSend%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-878">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-879">使用无连接协议时，您还必须确保在缓冲区的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-879">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-880">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.BeginSend%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-880">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-881">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-881">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-882">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-882">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-883">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-883">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-884">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-884">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-885">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-885">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-886">`state` 是用户定义的实例化。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-886">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-887">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-887">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-888">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-888">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-889">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-889">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-890">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-890">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-891">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-891">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-892">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-892">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-893">下面的代码示例开始以异步方式将数据发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-893">The following code example begins asynchronously sending data to a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-894">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-894">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-895">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-895">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-896">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-896">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-897">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-897">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-898">- 或 -  <paramref name="offset" /> 小于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-898">-or-  <paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-899">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-899">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-900">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-900">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-901">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-901">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-902">将文件异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-902">Sends a file asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendFile : string * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendFile (fileName, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="0c8e6-903">一个字符串，它包含要发送的文件的路径和名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-903">A string that contains the path and name of the file to send.</span>
          </span>
          <span data-ttu-id="0c8e6-904">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-904">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-905">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-905">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-906">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-906">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-907">使用 <see cref="T:System.Net.Sockets.Socket" /> 标志，将文件 <paramref name="fileName" /> 发送到连接的 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-907">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> flag.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-908">一个 <see cref="T:System.IAsyncResult" /> 对象，它表示异步发送。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-908">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-909">此重载将该文件发送`fileName`到连接的套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-909">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="0c8e6-910">如果`fileName`是在本地目录中，它可能会标识只是该文件的名称; 否则，必须指定完整路径和文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-910">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="0c8e6-911">通配符 ("...\\\myfile.txt") 和 UNC 共享名 ("\\\\\\\shared directory\\\myfile.txt") 支持。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-911">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="0c8e6-912">如果未找到文件，该异常<xref:System.IO.FileNotFoundException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-912">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="0c8e6-913">此方法使用`TransmitFile`Windows Sockets 2 API 中找到函数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-913">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="0c8e6-914">有关详细信息`TransmitFile`函数和它的标志，请参阅 MSDN 库中的 Windows 套接字文档。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-914">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="0c8e6-915"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法启动异步发送操作中建立的远程主机<xref:System.Net.Sockets.Socket.Connect%2A>，<xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-915">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>,<xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="0c8e6-916"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 如果不首先调用将引发异常<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-916"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-917">调用<xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法使您能够发送单独的执行线程中的文件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-917">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method enables you to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-918">若要完成该操作，可以创建由调用的回调方法<xref:System.AsyncCallback>委托参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-918">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="0c8e6-919">为此，在最低限度下，`state`参数必须包含<xref:System.Net.Sockets.Socket>对象用于进行通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-919">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="0c8e6-920">如果回调需要详细信息，可以创建类或结构，用于保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-920">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-921">传递到此自定义对象的实例<xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-921">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-922">回调方法必须调用<xref:System.Net.Sockets.Socket.EndSendFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-922">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="0c8e6-923">当应用程序调用<xref:System.Net.Sockets.Socket.BeginSendFile%2A>，系统使用一个单独的线程来执行指定的回调方法，并阻止上<xref:System.Net.Sockets.Socket.EndSendFile%2A>直到<xref:System.Net.Sockets.Socket>发送整个文件或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-923">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="0c8e6-924">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-924">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-925">适用于面向连接的协议，尽管<xref:System.Net.Sockets.Socket.BeginSendFile%2A>无连接协议，也适用，前提是先调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法以建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-925">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="0c8e6-926">使用无连接协议时，您必须确保文件的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-926">With connectionless protocols, you must be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-927">如果是这样，不发送数据报并<xref:System.Net.Sockets.Socket.BeginSendFile%2A>引发<xref:System.Net.Sockets.SocketException>异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-927">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-928">如果你收到<xref:System.Net.Sockets.SocketException>异常，请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-928">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-929">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-929">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-930">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-930">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-931">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-931">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-932">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-932">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-933">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-933">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-934">下面的代码示例创建并连接的套接字进行异步通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-934">The following code example creates and connects a socket for asynchronous communication.</span></span> <span data-ttu-id="0c8e6-935">首先，"text.txt"的文件是以异步方式发送，到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-935">First, the file "text.txt" is sent asynchronously to the remote host.</span></span> <span data-ttu-id="0c8e6-936">回调委托调用<xref:System.Net.Sockets.Socket.EndSendFile%2A>完成传输。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-936">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-937">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-937">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-938">套接字未连接到远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-938">The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="0c8e6-939">未找到文件 <paramref name="fileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-939">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-940">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-940">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-941">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-941">See remarks section below.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendFile : string * byte[] * byte[] * System.Net.Sockets.TransmitFileOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendFile (fileName, preBuffer, postBuffer, flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="preBuffer" Type="System.Byte[]" />
        <Parameter Name="postBuffer" Type="System.Byte[]" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="0c8e6-942">一个字符串，它包含要发送的文件的路径和名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-942">A string that contains the path and name of the file to be sent.</span>
          </span>
          <span data-ttu-id="0c8e6-943">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-943">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="preBuffer">
          <span data-ttu-id="0c8e6-944">一个 <see cref="T:System.Byte" /> 数组，它包含发送文件前要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-944">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span>
          </span>
          <span data-ttu-id="0c8e6-945">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-945">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="postBuffer">
          <span data-ttu-id="0c8e6-946">一个 <see cref="T:System.Byte" /> 数组，它包含发送文件后要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-946">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span>
          </span>
          <span data-ttu-id="0c8e6-947">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-947">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="0c8e6-948">
            <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-948">A bitwise combination of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="0c8e6-949">一个 <see cref="T:System.AsyncCallback" /> 委托，将在此操作完成时调用它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-949">An <see cref="T:System.AsyncCallback" /> delegate to be invoked when this operation completes.</span>
          </span>
          <span data-ttu-id="0c8e6-950">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-950">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-951">一个用户定义的对象，它包含此请求的状态信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-951">A user-defined object that contains state information for this request.</span>
          </span>
          <span data-ttu-id="0c8e6-952">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-952">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-953">将文件和数据缓冲区异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-953">Sends a file and buffers of data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-954">一个 <see cref="T:System.IAsyncResult" /> 对象，它表示异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-954">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-955">此重载需要的名称以及你想要发送的文件的按位组合<xref:System.Net.Sockets.TransmitFileOptions>值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-955">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="0c8e6-956">`preBuffer`参数包含你想要前加上该文件的任何数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-956">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="0c8e6-957">`postBuffer` 包含你想要遵照该文件的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-957">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="0c8e6-958">如果`fileName`是在本地目录中，它可能会标识只是该文件的名称; 否则，必须指定完整路径和文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-958">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="0c8e6-959">通配符 ("...\\\myfile.txt") 和 UNC 共享名 ("\\\\\\\shared directory\\\myfile.txt") 支持。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-959">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="0c8e6-960">如果未找到文件，该异常<xref:System.IO.FileNotFoundException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-960">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="0c8e6-961">`flags`参数提供了关于文件传输的其他信息的窗口套接字服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-961">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="0c8e6-962">有关如何使用此参数的详细信息，请参阅<xref:System.Net.Sockets.TransmitFileOptions>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-962">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="0c8e6-963">此方法使用`TransmitFile`Windows Sockets 2 API 中找到函数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-963">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="0c8e6-964">有关详细信息`TransmitFile`函数和它的标志，请参阅 MSDN 库中的 Windows 套接字文档。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-964">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="0c8e6-965"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法启动异步发送操作中建立的远程主机<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-965">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="0c8e6-966"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 如果不首先调用将引发异常<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.BeginConnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-966"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="0c8e6-967">调用<xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法使你能够发送单独的执行线程中的文件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-967">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method gives you the ability to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-968">若要完成该操作，可以创建由调用的回调方法<xref:System.AsyncCallback>委托参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-968">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="0c8e6-969">为此，在最低限度下，`state`参数必须包含<xref:System.Net.Sockets.Socket>对象用于进行通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-969">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="0c8e6-970">如果回调需要详细信息，可以创建类或结构，用于保存<xref:System.Net.Sockets.Socket>和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-970">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="0c8e6-971">传递到此自定义对象的实例<xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-971">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-972">回调方法必须调用<xref:System.Net.Sockets.Socket.EndSendFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-972">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="0c8e6-973">当应用程序调用<xref:System.Net.Sockets.Socket.BeginSendFile%2A>，系统使用一个单独的线程来执行指定的回调方法，并阻止上<xref:System.Net.Sockets.Socket.EndSendFile%2A>直到<xref:System.Net.Sockets.Socket>发送整个文件或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-973">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="0c8e6-974">编写回调方法的其他信息，请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-974">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-975">适用于面向连接的协议，尽管<xref:System.Net.Sockets.Socket.BeginSendFile%2A>无连接协议，也适用，前提是先调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法以建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-975">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="0c8e6-976">使用无连接协议时，您还必须确保文件的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-976">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-977">如果是这样，不发送数据报并<xref:System.Net.Sockets.Socket.BeginSendFile%2A>引发<xref:System.Net.Sockets.SocketException>异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-977">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-978">如果你收到<xref:System.Net.Sockets.SocketException>异常，请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-978">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-979">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-979">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-980">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-980">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-981">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-981">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-982">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-982">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-983">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-983">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-984">下面的代码示例创建和连接进行异步通信套接字并开始将文件"text.txt"以异步方式发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-984">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="0c8e6-985">在此示例中，`preBuffer`和一个`postBuffer`的数据创建要与文件和默认值一起发送<xref:System.Net.Sockets.TransmitFileOptions>使用值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-985">In this example, a `preBuffer` and a `postBuffer` of data is created to send with the file and the default <xref:System.Net.Sockets.TransmitFileOptions> value is used.</span></span> <span data-ttu-id="0c8e6-986">回调委托调用<xref:System.Net.Sockets.Socket.EndSendFile%2A>完成传输。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-986">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#10)]
 [!code-csharp[NCLSocketEnhancements#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-987">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-987">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-988">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-988">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-989">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-989">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-990">操作系统不是 Windows NT 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-990">The operating system is not Windows NT or later.</span>
          </span>
          <span data-ttu-id="0c8e6-991">\- 或 -  套接字未连接到远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-991">\- or -  The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="0c8e6-992">未找到文件 <paramref name="fileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-992">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendTo">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendTo (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginSendTo : byte[] * int * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendTo (buffer, offset, size, socket_flags, remote_end, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-993">
            <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-993">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-994">
            <c>buffer</c> 中开始发送数据的位置，该位置从零开始计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-994">The zero-based position in <c>buffer</c> at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-995">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-995">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="remoteEP">To be added.</param>
        <param name="remote_end">To be added.</param>
        <param name="callback">
          <span data-ttu-id="0c8e6-996">
            <see cref="T:System.AsyncCallback" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-996">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0c8e6-997">包含此请求的状态信息的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-997">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-998">以异步方式将数据发送到特定远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-998">Sends data asynchronously to a specific remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-999">引用异步发送的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-999">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1000"><xref:System.Net.Sockets.Socket.BeginSendTo%2A>方法启动异步发送操作中指定的远程主机到`remoteEP`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1000">The <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method starts an asynchronous send operation to the remote host specified in the `remoteEP` parameter.</span></span> <span data-ttu-id="0c8e6-1001">调用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>方法使你能够发送单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1001">Calling the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="0c8e6-1002">适用于无连接协议，尽管<xref:System.Net.Sockets.Socket.BeginSendTo%2A>适用于无连接和面向连接的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1002">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.BeginSendTo%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-1003">可以创建实现一个回调方法<xref:System.AsyncCallback>委托并将传递到其名称<xref:System.Net.Sockets.Socket.BeginSendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1003">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-1004">为此，至少，你`state`参数必须包含已连接或默认<xref:System.Net.Sockets.Socket>正用于通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1004">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="0c8e6-1005">如果回调需要详细信息，可以创建一个小类来保存<xref:System.Net.Sockets.Socket>，和其他所需的信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1005">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="0c8e6-1006">传递到此类的实例<xref:System.Net.Sockets.Socket.BeginSendTo%2A>方法通过`state`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1006">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1007">回调方法应该调用<xref:System.Net.Sockets.Socket.EndSendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1007">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-1008">当应用程序调用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>，系统将使用一个单独的线程来执行指定的回调方法，并阻止<xref:System.Net.Sockets.Socket.EndSendTo%2A>直到<xref:System.Net.Sockets.Socket>发送请求的字节数或引发异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1008">When your application calls <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSendTo%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="0c8e6-1009">如果你想要阻止调用后的原始线程<xref:System.Net.Sockets.Socket.BeginSendTo%2A>方法，请使用<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1009">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0c8e6-1010">当你想要继续执行的原始线程时请在回调方法调用 Set 方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1010">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="0c8e6-1011">有关编写回调方法的其他信息请参阅[委托作为回调方法进行封送](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1011">For additional information about writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="0c8e6-1012">如果使用的是面向连接的协议，必须首先调用<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法，或<xref:System.Net.Sockets.Socket.BeginSendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1012">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, or <xref:System.Net.Sockets.Socket.BeginSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1013"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> 将忽略`remoteEP`参数并将数据发送到<xref:System.Net.EndPoint>中建立<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Accept%2A>，或<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1013"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> will ignore the `remoteEP` parameter and send data to the <xref:System.Net.EndPoint> established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1014">如果使用的是无连接协议，不需要建立默认远程主机使用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1014">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="0c8e6-1015">只需执行此操作，如果你想要调用<xref:System.Net.Sockets.Socket.BeginSend%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1015">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="0c8e6-1016">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法，然后调用<xref:System.Net.Sockets.Socket.SendTo%2A>，则`remoteEP`参数将替代指定的默认远程主机，只为发送操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1016">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="0c8e6-1017">也不需要调用<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1017">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="0c8e6-1018">在这种情况下，基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1018">In this case, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="0c8e6-1019">如果你想要选择可用端口的基础服务提供程序，请使用端口号 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1019">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="0c8e6-1020">如果你需要标识分配的本地网络地址和端口号，则可以使用<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性后的<xref:System.Net.Sockets.Socket.EndSendTo%2A>方法成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1020">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="0c8e6-1021">如果你想要将数据发送到的广播地址，则必须首先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1021">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-1022">-您还必须确保在缓冲区的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1022">-You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-1023">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.EndSendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1023">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.EndSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-1024">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1024">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1025">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1025">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1026">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1026">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1027">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1027">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1028">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1028">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1029">为异步缓存的执行上下文 （的安全上下文中，被模拟的用户，并在调用上下文）<xref:System.Net.Sockets.Socket>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1029">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="0c8e6-1030">后首次使用特定的上下文 (特定于异步<xref:System.Net.Sockets.Socket>方法中，特定<xref:System.Net.Sockets.Socket>实例和特定的回调)，以后使用该上下文将看到性能的改进。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1030">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1031">下面的代码示例以异步方式将数据发送到指定的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1031">The following code example asynchronously sends data to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Async_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Async_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1032">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1032">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1033">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1033">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1034">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1034">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-1035">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1035">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-1036">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1036">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1037">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1037">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-1038">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1038">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1039">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1039">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-1040">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1040">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public void Bind (System.Net.EndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Bind(class System.Net.EndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Bind (localEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Bind(System::Net::EndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="member this.Bind : System.Net.EndPoint -&gt; unit" Usage="socket.Bind localEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <span data-ttu-id="0c8e6-1041">要与 <see cref="T:System.Net.EndPoint" /> 关联的本地 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1041">The local <see cref="T:System.Net.EndPoint" /> to associate with the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1042">使 <see cref="T:System.Net.Sockets.Socket" /> 与一个本地终结点相关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1042">Associates a <see cref="T:System.Net.Sockets.Socket" /> with a local endpoint.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1043">使用<xref:System.Net.Sockets.Socket.Bind%2A>方法如果你需要使用特定的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1043">Use the <xref:System.Net.Sockets.Socket.Bind%2A> method if you need to use a specific local endpoint.</span></span> <span data-ttu-id="0c8e6-1044">必须调用<xref:System.Net.Sockets.Socket.Bind%2A>调用之前<xref:System.Net.Sockets.Socket.Listen%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1044">You must call <xref:System.Net.Sockets.Socket.Bind%2A> before you can call the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="0c8e6-1045">不需要调用<xref:System.Net.Sockets.Socket.Bind%2A>之前使用<xref:System.Net.Sockets.Socket.Connect%2A>方法除非您需要使用特定的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1045">You do not need to call <xref:System.Net.Sockets.Socket.Bind%2A> before using the <xref:System.Net.Sockets.Socket.Connect%2A> method unless you need to use a specific local endpoint.</span></span> <span data-ttu-id="0c8e6-1046">可以使用<xref:System.Net.Sockets.Socket.Bind%2A>上无连接和面向连接的协议方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1046">You can use the <xref:System.Net.Sockets.Socket.Bind%2A> method on both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-1047">然后再调用<xref:System.Net.Sockets.Socket.Bind%2A>，必须先创建本地<xref:System.Net.IPEndPoint>从想要进行数据通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1047">Before calling <xref:System.Net.Sockets.Socket.Bind%2A>, you must first create the local <xref:System.Net.IPEndPoint> from which you intend to communicate data.</span></span> <span data-ttu-id="0c8e6-1048">如果您不介意分配的本地地址，则可以创建<xref:System.Net.IPEndPoint>使用<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>地址参数，以及基础的服务提供程序将分配的最合适的网络地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1048">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="0c8e6-1049">这可能有助于简化您的应用程序，如果有多个网络接口。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1049">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="0c8e6-1050">如果你不关心使用哪个本地端口，可以创建<xref:System.Net.IPEndPoint>使用 0 作为端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1050">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="0c8e6-1051">在这种情况下，服务提供商将分配可用的端口号介于 1024年和 5000 之间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1051">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span>  
  
 <span data-ttu-id="0c8e6-1052">如果使用上述方法，可以发现哪些本地网络地址和端口号已分配通过调用<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1052">If you use the above approach, you can discover what local network address and port number has been assigned by calling the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>.</span></span> <span data-ttu-id="0c8e6-1053">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>进行调用后不会返回之前的本地分配的网络地址<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1053">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> will not return the locally assigned network address until after you have made a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="0c8e6-1054">如果使用的是无连接协议，将不具有访问此信息，直到已完成发送或接收。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1054">If you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive.</span></span>  
  
 <span data-ttu-id="0c8e6-1055">如果 UDP 套接字想要接收接口上接收数据包的信息<xref:System.Net.Sockets.Socket.SetSocketOption%2A>套接字选项设置为应显式调用方法<xref:System.Net.Sockets.SocketOptionName.PacketInformation>后立即调用<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1055">If a UDP socket wants to receive interface information on received packets,  the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method should be explicitly called with the socket option set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation> immediately after calling the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1056">如果您想要接收多播数据报，必须调用<xref:System.Net.Sockets.Socket.Bind%2A>方法具有多路广播的端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1056">If you intend to receive multicast datagrams, you must call the <xref:System.Net.Sockets.Socket.Bind%2A> method with a multicast port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1057">必须调用<xref:System.Net.Sockets.Socket.Bind%2A>方法，如果你想要接收无连接的数据报使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1057">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method if you intend to receive connectionless datagrams using the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1058">如果你收到<xref:System.Net.Sockets.SocketException>调用时<xref:System.Net.Sockets.Socket.Bind%2A>方法，请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1058">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1059">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1059">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1060">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1060">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1061">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1061">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1062">下面的代码示例绑定<xref:System.Net.Sockets.Socket>使用指定的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1062">The following code example binds a <xref:System.Net.Sockets.Socket> using the specified local endpoint.</span></span>  
  
 [!code-cpp[Classic Socket.Bind Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Bind Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Bind Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Bind Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Bind Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Bind Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1063">
            <paramref name="localEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1063">
              <paramref name="localEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1064">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1064">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1065">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1065">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-1066">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1066">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-1067">用于接受来自定义的主机的连接<paramref name="localEP" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1067">for accepting connections from the host defined by <paramref name="localEP" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1068">关联的枚举： <see cref="F:System.Net.NetworkAccess.Accept" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1068">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Blocking">
      <MemberSignature Language="C#" Value="public bool Blocking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Blocking" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Blocking" />
      <MemberSignature Language="VB.NET" Value="Public Property Blocking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Blocking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Blocking : bool with get, set" Usage="System.Net.Sockets.Socket.Blocking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1069">获取或设置一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 是否处于阻止模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1069">Gets or sets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is in blocking mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1070">如果 <see cref="T:System.Net.Sockets.Socket" /> 将阻止，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1070">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> will block; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1071">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1071">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1072"><xref:System.Net.Sockets.Socket.Blocking%2A>属性指示是否<xref:System.Net.Sockets.Socket>处于阻止模式。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1072">The <xref:System.Net.Sockets.Socket.Blocking%2A> property indicates whether a <xref:System.Net.Sockets.Socket> is in blocking mode.</span></span>  
  
 <span data-ttu-id="0c8e6-1073">如果您是在阻止模式下，并且进行方法调用这不会立即完成，你的应用程序将请求的操作完成之前阻止执行。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1073">If you are in blocking mode, and you make a method call which does not complete immediately, your application will block execution until the requested operation completes.</span></span> <span data-ttu-id="0c8e6-1074">如果要继续执行，即使请求的操作未完成，更改执行<xref:System.Net.Sockets.Socket.Blocking%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1074">If you want execution to continue even though the requested operation is not complete, change the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false`.</span></span> <span data-ttu-id="0c8e6-1075"><xref:System.Net.Sockets.Socket.Blocking%2A>属性不起对异步方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1075">The <xref:System.Net.Sockets.Socket.Blocking%2A> property has no effect on asynchronous methods.</span></span> <span data-ttu-id="0c8e6-1076">如果是发送和接收数据以异步方式并且想要阻止执行，使用<xref:System.Threading.ManualResetEvent>类。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1076">If you are sending and receiving data asynchronously and want to block execution, use the <xref:System.Threading.ManualResetEvent> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1077">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1077">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1078">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1078">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1079">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1079">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1080">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1080">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1081">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1081">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1082">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1082">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelConnectAsync">
      <MemberSignature Language="C#" Value="public static void CancelConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelConnectAsync (e As SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member CancelConnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; unit" Usage="System.Net.Sockets.Socket.CancelConnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-1083">
            <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象，该对象用于通过调用 <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> 方法之一，请求与远程主机的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1083">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object used to request the connection to the remote host by calling one of the <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1084">取消一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1084">Cancels an asynchronous request for a remote host connection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1085"><xref:System.Net.Sockets.Socket.CancelConnectAsync%2A>方法取消对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1085">The <xref:System.Net.Sockets.Socket.CancelConnectAsync%2A> method cancels an asynchronous request for a remote host connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1086">
            <paramref name="e" /> 参数不能为 null，并且 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1086">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1087">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1087">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1088">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1088">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-1089">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1089">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Close">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1090">关闭 <see cref="T:System.Net.Sockets.Socket" /> 连接并释放所有关联的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1090">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="socket.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1091">关闭 <see cref="T:System.Net.Sockets.Socket" /> 连接并释放所有关联的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1091">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1092"><xref:System.Net.Sockets.Socket.Close%2A>方法关闭远程主机连接和版本的所有托管和非托管资源与关联<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1092">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1093">在关闭之后<xref:System.Net.Sockets.Socket.Connected%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1093">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="0c8e6-1094">对于面向连接的协议，建议您调用<xref:System.Net.Sockets.Socket.Shutdown%2A>之前调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1094">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="0c8e6-1095">这可确保发送和关闭之前连接的套接字上接收到的所有数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1095">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="0c8e6-1096">如果您需要调用<xref:System.Net.Sockets.Socket.Close%2A>没有首先调用<xref:System.Net.Sockets.Socket.Shutdown%2A>，可以确保数据的情况下设置发送传出传输排入队列<xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket>选项设为`false`并指定非零的超时间隔。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1096">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="0c8e6-1097"><xref:System.Net.Sockets.Socket.Close%2A> 然后会阻止发送此数据之前或直到指定的超时时间已到。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1097"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="0c8e6-1098">如果您设置<xref:System.Net.Sockets.SocketOptionName.DontLinger>到`false`并指定为零的超时间隔、<xref:System.Net.Sockets.Socket.Close%2A>释放连接，并会自动放弃传出队列的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1098">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1099">若要设置<xref:System.Net.Sockets.SocketOptionName.DontLinger>套接字选项`false`，创建<xref:System.Net.Sockets.LingerOption>，将启用的属性设置为`true`，并设置<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性设置为所需的超时时间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1099">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time out period.</span></span> <span data-ttu-id="0c8e6-1100">使用此<xref:System.Net.Sockets.LingerOption>连同<xref:System.Net.Sockets.SocketOptionName.DontLinger>套接字选项调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1100">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1101">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1101">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1102">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1102">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1103">下面的代码示例关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1103">The following code example closes a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberSignature Language="F#" Value="member this.Close : int -&gt; unit" Usage="socket.Close timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="0c8e6-1104">等待最多 <c>timeout</c> 秒后，即可发送任何剩余数据，然后关闭套接字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1104">Wait up to <c>timeout</c> seconds to send any remaining data, then close the socket.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1105">关闭 <see cref="T:System.Net.Sockets.Socket" /> 连接并释放所有与指定超时关联的资源，以允许要发送的数据排队。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1105">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources with a specified timeout to allow queued data to be sent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1106"><xref:System.Net.Sockets.Socket.Close%2A>方法关闭远程主机连接和版本的所有托管和非托管资源与关联<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1106">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1107">在关闭之后<xref:System.Net.Sockets.Socket.Connected%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1107">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="0c8e6-1108">对于面向连接的协议，建议您调用<xref:System.Net.Sockets.Socket.Shutdown%2A>之前调用<xref:System.Net.Sockets.Socket.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1108">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling <xref:System.Net.Sockets.Socket.Close%2A>.</span></span> <span data-ttu-id="0c8e6-1109">这可确保发送和关闭之前连接的套接字上接收到的所有数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1109">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="0c8e6-1110">如果您需要调用<xref:System.Net.Sockets.Socket.Close%2A>没有首先调用<xref:System.Net.Sockets.Socket.Shutdown%2A>，可以确保数据的情况下设置发送传出传输排入队列<xref:System.Net.Sockets.SocketOptionName.DontLinger>选项设为`false`并指定非零的超时间隔。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1110">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="0c8e6-1111"><xref:System.Net.Sockets.Socket.Close%2A> 然后会阻止发送此数据之前或直到指定的超时时间已到。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1111"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="0c8e6-1112">如果您设置<xref:System.Net.Sockets.SocketOptionName.DontLinger>到`false`并指定为零的超时间隔、<xref:System.Net.Sockets.Socket.Close%2A>释放连接，并会自动放弃传出队列的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1112">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1113">若要设置<xref:System.Net.Sockets.SocketOptionName.DontLinger>套接字选项`false`，创建<xref:System.Net.Sockets.LingerOption>，将启用的属性设置为`true`，并设置<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性设置为所需的超时期限。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1113">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time-out period.</span></span> <span data-ttu-id="0c8e6-1114">使用此<xref:System.Net.Sockets.LingerOption>连同<xref:System.Net.Sockets.SocketOptionName.DontLinger>套接字选项调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1114">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1115">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1115">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1116">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1116">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1117">下面的代码示例演示如何关闭<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1117">The following code example demonstrates how to close a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1118">与远程主机建立连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1118">Establishes a connection to a remote host.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.EndPoint -&gt; unit" Usage="socket.Connect remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-1119">表示远程设备的 <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1119">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1120">与远程主机建立连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1120">Establishes a connection to a remote host.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1121">如果使用面向连接的协议 TCP，如<xref:System.Net.Sockets.Socket.Connect%2A>方法以同步方式建立网络连接之间<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>和指定的远程终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1121">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="0c8e6-1122">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.Connect%2A>建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1122">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="0c8e6-1123">调用后<xref:System.Net.Sockets.Socket.Connect%2A>，可以将数据发送到远程设备与<xref:System.Net.Sockets.Socket.Send%2A>方法，或从使用的远程设备接收数据<xref:System.Net.Sockets.Socket.Receive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1123">After you call <xref:System.Net.Sockets.Socket.Connect%2A>, you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1124">如果使用如 UDP 是无连接协议，不需要调用<xref:System.Net.Sockets.Socket.Connect%2A>之前发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1124">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="0c8e6-1125">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>和<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>能够与远程主机同步通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1125">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="0c8e6-1126">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>，将丢弃来自指定的默认值以外的地址的任何数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1126">If you do call <xref:System.Net.Sockets.Socket.Connect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="0c8e6-1127">如果你想要将默认远程主机到广播地址，必须先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>，或<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1127">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1128">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1128">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1129">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1129">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="0c8e6-1130"><xref:System.Net.Sockets.Socket.Connect%2A>方法将阻止，除非专门设置了相应<xref:System.Net.Sockets.Socket.Blocking%2A>属性设置为`false`之前调用<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1130">The <xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-1131">如果要使用面向连接的协议 TCP，并且确实禁用阻塞等<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>因为它需要时间来建立连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1131">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="0c8e6-1132">无连接协议将引发异常，因为它们只需建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1132">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="0c8e6-1133">可以使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1133">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1134">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1134">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="0c8e6-1135">如果 WSAEWOULDBLOCK 返回的错误，已通过面向连接的发起远程主机连接<xref:System.Net.Sockets.Socket>，但未尚未成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1135">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="0c8e6-1136">使用<xref:System.Net.Sockets.Socket.Poll%2A>方法来确定何时<xref:System.Net.Sockets.Socket>完成连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1136">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1137">如果使用的是面向连接的协议和未调用<xref:System.Net.Sockets.Socket.Bind%2A>之前调用<xref:System.Net.Sockets.Socket.Connect%2A>，基础服务提供程序将分配的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1137">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="0c8e6-1138">如果使用的是无连接协议，服务提供程序将不会分配本地网络地址和端口号，直到完成发送或接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1138">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="0c8e6-1139">如果你想要更改默认远程主机，则调用<xref:System.Net.Sockets.Socket.Connect%2A>再次使用所需终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1139">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1140">如果之前断开连接的套接字，则不能使用此方法以还原连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1140">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="0c8e6-1141">使用异步之一<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法来重新连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1141">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="0c8e6-1142">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1142">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1143">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1143">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1144">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1144">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1145">下面的代码示例连接到远程终结点，并接着验证连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1145">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1146">
            <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1146">
              <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1147">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1147">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1148">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1148">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-1149">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1149">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1150">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1150">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-1151">用于连接到远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1151">for connecting to the remote host.</span>
          </span>
          <span data-ttu-id="0c8e6-1152">关联的枚举： <see cref="F:System.Net.NetworkAccess.Connect" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1152">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Connect" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.Blocking" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="socket.Connect (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="0c8e6-1153">远程主机的 IP 地址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1153">The IP address of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="0c8e6-1154">远程主机的端口号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1154">The port number of the remote host.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1155">与远程主机建立连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1155">Establishes a connection to a remote host.</span>
          </span>
          <span data-ttu-id="0c8e6-1156">主机由 IP 地址和端口号指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1156">The host is specified by an IP address and a port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1157">如果使用面向连接的协议 TCP，如<xref:System.Net.Sockets.Socket.Connect%2A>方法以同步方式建立网络连接之间<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>和指定的远程终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1157">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="0c8e6-1158">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.Connect%2A>建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1158">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="0c8e6-1159">调用后<xref:System.Net.Sockets.Socket.Connect%2A>可以将数据发送到远程设备与<xref:System.Net.Sockets.Socket.Send%2A>方法，或从使用的远程设备接收数据<xref:System.Net.Sockets.Socket.Receive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1159">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1160">如果使用如 UDP 是无连接协议，不需要调用<xref:System.Net.Sockets.Socket.Connect%2A>之前发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1160">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="0c8e6-1161">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>和<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>能够与远程主机同步通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1161">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="0c8e6-1162">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>将丢弃来自指定的默认值以外的地址的任何数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1162">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="0c8e6-1163">如果你想要将默认远程主机到广播地址，必须先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>，或<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1163">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1164">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1164">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1165">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1165">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="0c8e6-1166"><xref:System.Net.Sockets.Socket.Connect%2A> 方法将阻止，除非专门设置了<xref:System.Net.Sockets.Socket.Blocking%2A>属性设置为`false`之前调用<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1166"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-1167">如果要使用面向连接的协议 TCP，并且确实禁用阻塞等<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>因为它需要时间来建立连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1167">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="0c8e6-1168">无连接协议将引发异常，因为它们只需建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1168">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="0c8e6-1169">可以使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1169">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1170">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1170">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="0c8e6-1171">如果 WSAEWOULDBLOCK 返回的错误，已通过面向连接的发起远程主机连接<xref:System.Net.Sockets.Socket>，但未尚未成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1171">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="0c8e6-1172">使用<xref:System.Net.Sockets.Socket.Poll%2A>方法来确定何时<xref:System.Net.Sockets.Socket>完成连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1172">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1173">如果使用的是面向连接的协议和未调用<xref:System.Net.Sockets.Socket.Bind%2A>之前调用<xref:System.Net.Sockets.Socket.Connect%2A>，基础服务提供程序将分配的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1173">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="0c8e6-1174">如果使用的是无连接协议，服务提供程序将不会分配本地网络地址和端口号，直到完成发送或接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1174">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="0c8e6-1175">如果你想要更改默认远程主机，则调用<xref:System.Net.Sockets.Socket.Connect%2A>再次使用所需终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1175">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1176">如果之前断开连接的套接字，则不能使用此方法以还原连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1176">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="0c8e6-1177">使用异步之一<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法来重新连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1177">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="0c8e6-1178">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1178">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1179">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1179">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1180">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1180">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1181">下面的代码示例连接到远程终结点，并接着验证连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1181">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#4)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1182">
            <paramref name="address" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1182">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-1183">端口号无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1183">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1184">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1184">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1185">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1185">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1186">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1186">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1187">
            <paramref name="address" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1187">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1188">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1188">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress[] * int -&gt; unit" Usage="socket.Connect (addresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addresses">
          <span data-ttu-id="0c8e6-1189">远程主机的 IP 地址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1189">The IP addresses of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="0c8e6-1190">远程主机的端口号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1190">The port number of the remote host.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1191">与远程主机建立连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1191">Establishes a connection to a remote host.</span>
          </span>
          <span data-ttu-id="0c8e6-1192">主机由 IP 地址数组和端口号指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1192">The host is specified by an array of IP addresses and a port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1193">此方法通常用于调用后立即<xref:System.Net.Dns.GetHostAddresses%2A>，这可以为单个主机返回多个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1193">This method is typically used immediately after a call to <xref:System.Net.Dns.GetHostAddresses%2A>, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="0c8e6-1194">如果使用面向连接的协议 TCP，如<xref:System.Net.Sockets.Socket.Connect%2A>方法以同步方式建立网络连接之间<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>和指定的远程终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1194">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="0c8e6-1195">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.Connect%2A>建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1195">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="0c8e6-1196">调用后<xref:System.Net.Sockets.Socket.Connect%2A>可以将数据发送到远程设备与<xref:System.Net.Sockets.Socket.Send%2A>方法，或从使用的远程设备接收数据<xref:System.Net.Sockets.Socket.Receive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1196">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1197">如果使用如 UDP 是无连接协议，不需要调用<xref:System.Net.Sockets.Socket.Connect%2A>之前发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1197">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="0c8e6-1198">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>和<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>能够与远程主机同步通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1198">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="0c8e6-1199">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>将丢弃来自指定的默认值以外的地址的任何数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1199">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="0c8e6-1200">如果你想要将默认远程主机到广播地址，必须先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>，或<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1200">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1201">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1201">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1202">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1202">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="0c8e6-1203"><xref:System.Net.Sockets.Socket.Connect%2A> 方法将阻止，除非专门设置了<xref:System.Net.Sockets.Socket.Blocking%2A>属性设置为`false`之前调用<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1203"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-1204">如果要使用面向连接的协议 TCP，并且确实禁用阻塞等<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>因为它需要时间来建立连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1204">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="0c8e6-1205">无连接协议将引发异常，因为它们只需建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1205">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="0c8e6-1206">可以使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1206">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1207">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1207">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="0c8e6-1208">如果 WSAEWOULDBLOCK 返回的错误，已通过面向连接的发起远程主机连接<xref:System.Net.Sockets.Socket>，但未尚未成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1208">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="0c8e6-1209">使用<xref:System.Net.Sockets.Socket.Poll%2A>方法来确定何时<xref:System.Net.Sockets.Socket>完成连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1209">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1210">如果使用的是面向连接的协议和未调用<xref:System.Net.Sockets.Socket.Bind%2A>之前调用<xref:System.Net.Sockets.Socket.Connect%2A>，基础服务提供程序将分配的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1210">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="0c8e6-1211">如果使用的是无连接协议，服务提供程序将不会分配本地网络地址和端口号，直到完成发送或接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1211">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="0c8e6-1212">如果你想要更改默认远程主机，则调用<xref:System.Net.Sockets.Socket.Connect%2A>再次使用所需终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1212">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1213">如果之前断开连接的套接字，则不能使用此方法以还原连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1213">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="0c8e6-1214">使用异步之一<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法来重新连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1214">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="0c8e6-1215">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1215">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1216">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1216">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1217">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1217">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1218">下面的代码示例连接到远程终结点，并接着验证连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1218">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#5)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1219">
            <paramref name="addresses" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1219">
              <paramref name="addresses" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-1220">端口号无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1220">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1221">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1221">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1222">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1222">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1223">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1223">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1224">
            <paramref name="address" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1224">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1225">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1225">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (host As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="socket.Connect (host, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">
          <span data-ttu-id="0c8e6-1226">远程主机的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1226">The name of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="0c8e6-1227">远程主机的端口号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1227">The port number of the remote host.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1228">与远程主机建立连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1228">Establishes a connection to a remote host.</span>
          </span>
          <span data-ttu-id="0c8e6-1229">主机由主机名和端口号指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1229">The host is specified by a host name and a port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1230">如果使用面向连接的协议 TCP，如<xref:System.Net.Sockets.Socket.Connect%2A>方法以同步方式建立网络连接之间<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>和指定的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1230">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote host.</span></span> <span data-ttu-id="0c8e6-1231">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.Connect%2A>建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1231">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="0c8e6-1232">调用后<xref:System.Net.Sockets.Socket.Connect%2A>可以将数据发送到远程设备与<xref:System.Net.Sockets.Socket.Send%2A>方法，或从使用的远程设备接收数据<xref:System.Net.Sockets.Socket.Receive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1232">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1233">如果使用如 UDP 是无连接协议，不需要调用<xref:System.Net.Sockets.Socket.Connect%2A>之前发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1233">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="0c8e6-1234">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>和<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>能够与远程主机同步通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1234">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="0c8e6-1235">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>将丢弃来自指定的默认值以外的地址的任何数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1235">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="0c8e6-1236">如果你想要将默认远程主机到广播地址，必须先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>，或<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1236">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1237">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1237">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1238">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1238">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="0c8e6-1239"><xref:System.Net.Sockets.Socket.Connect%2A> 方法将阻止，除非专门设置了<xref:System.Net.Sockets.Socket.Blocking%2A>属性设置为`false`之前调用<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1239"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-1240">如果要使用面向连接的协议 TCP，并且确实禁用阻塞等<xref:System.Net.Sockets.Socket.Connect%2A>将引发<xref:System.Net.Sockets.SocketException>因为它需要时间来建立连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1240">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="0c8e6-1241">无连接协议将引发异常，因为它们只需建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1241">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="0c8e6-1242">可以使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1242">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1243">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1243">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="0c8e6-1244">如果 WSAEWOULDBLOCK 返回的错误，已通过面向连接的发起远程主机连接<xref:System.Net.Sockets.Socket>，但未尚未成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1244">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="0c8e6-1245">使用<xref:System.Net.Sockets.Socket.Poll%2A>方法来确定何时<xref:System.Net.Sockets.Socket>完成连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1245">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
 <span data-ttu-id="0c8e6-1246">如果启用了 IPv6 和<xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29>调用方法来连接到的主机，解析为 IPv6 和 IPv4 地址、 IPv6 地址将与连接尝试之前的 IPv4 地址的第一个。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1246">If IPv6 is enabled and the <xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="0c8e6-1247">这可能会延迟的时间来建立连接，如果主机未侦听 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1247">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1248">如果使用的是面向连接的协议和未调用<xref:System.Net.Sockets.Socket.Bind%2A>之前调用<xref:System.Net.Sockets.Socket.Connect%2A>，基础服务提供程序将分配的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1248">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="0c8e6-1249">如果使用的是无连接协议，服务提供程序将不会分配本地网络地址和端口号，直到完成发送或接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1249">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="0c8e6-1250">如果你想要更改默认远程主机，则调用<xref:System.Net.Sockets.Socket.Connect%2A>再次使用所需终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1250">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1251">如果之前断开连接的套接字，则不能使用此方法以还原连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1251">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="0c8e6-1252">使用异步之一<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法来重新连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1252">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="0c8e6-1253">这是基础提供程序的限制。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1253">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1254">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1254">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1255">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1255">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1256">下面的代码示例连接到远程终结点，并接着验证连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1256">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#6)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1257">
            <paramref name="host" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1257">
              <paramref name="host" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-1258">端口号无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1258">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1259">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1259">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1260">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1260">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1261">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1261">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1262">已通过调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1262">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1263">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1263">Begins an asynchronous request for a connection to a remote host.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public bool ConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ConnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-1264">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1264">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1265">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1265">Begins an asynchronous request for a connection to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1266">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1266">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-1267">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1267">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-1268">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1268">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-1269">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1269">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1270">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法启动与远程主机的连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1270">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="0c8e6-1271">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.ConnectAsync%2A>建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1271">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-1272">若要在完成时得到通知，必须创建实现事件处理程序的回调方法\<SocketAsyncEventArgs > 委托并将附加到回调<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1272">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="0c8e6-1273">调用方必须设置<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>属性设置为<xref:System.Net.IPEndPoint>要连接到的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1273">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="0c8e6-1274">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1274">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-1275">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1275">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-1276">如果使用如 UDP 是无连接协议，不需要调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>之前发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1276">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="0c8e6-1277">可以使用<xref:System.Net.Sockets.Socket.SendToAsync%2A>和<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>与远程主机通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1277">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="0c8e6-1278">如果调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>，将丢弃来自指定的默认值以外的地址的任何数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1278">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="0c8e6-1279">如果你想要更改默认远程主机，则调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法再次使用所需终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1279">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="0c8e6-1280">如果你想要设置默认远程主机与广播地址，必须先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>设置为广播和`true`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1280">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="0c8e6-1281">如果不执行此操作，<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1281">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-1282">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>对象所需：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1282">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-1283">（可选） 一个缓冲区可能会提供它以原子方式发送后在套接字上<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法成功。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1283">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="0c8e6-1284">在这种情况下，<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>属性应设置为包含数据的缓冲区，以发送和<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>属性应设置为的数据的字节数，以从缓冲区发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1284">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="0c8e6-1285">一旦建立的连接，该缓冲区中的数据会被发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1285">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="0c8e6-1286">如果您使用的是面向连接的协议，并且不会调用<xref:System.Net.Sockets.Socket.Bind%2A>之前调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>，基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1286">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="0c8e6-1287">如果您使用的是无连接协议，直到您调用，服务提供程序将不分配本地网络 IP 地址和端口号<xref:System.Net.Sockets.Socket.SendAsync%2A>或<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1287">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="0c8e6-1288"><xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法会抛出<xref:System.NotSupportedException>如果的地址族<xref:System.Net.Sockets.Socket>和<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>不是同一地址系列。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1288">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1289">如果你收到<xref:System.Net.Sockets.SocketException>调用此方法时，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1289">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1290">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1290">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1291">自变量无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1291">An argument is not valid.</span>
          </span>
          <span data-ttu-id="0c8e6-1292">如果指定了多个缓冲区，即 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null，将会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1292">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1293">
            <paramref name="e" /> 参数不能为 null，并且 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1293">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1294">
            <see cref="T:System.Net.Sockets.Socket" /> 正在侦听或已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1294">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1295">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1295">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1296">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1296">Windows XP or later is required for this method.</span>
          </span>
          <span data-ttu-id="0c8e6-1297">如果本地终结点和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不是相同的地址族，也会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1297">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1298">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1298">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-1299">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1299">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public static bool ConnectAsync (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ConnectAsync(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType, class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ConnectAsync(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType, System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member ConnectAsync : System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType * System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="System.Net.Sockets.Socket.ConnectAsync (socketType, protocolType, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="socketType">
          <span data-ttu-id="0c8e6-1300">
            <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1300">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </param>
        <param name="protocolType">
          <span data-ttu-id="0c8e6-1301">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1301">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="0c8e6-1302">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1302">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1303">开始一个对远程主机连接的异步请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1303">Begins an asynchronous request for a connection to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1304">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1304">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-1305">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1305">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-1306">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1306">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-1307">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1307">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1308">如果使用的是面向连接的协议，M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) 方法启动的异步请求连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1308">If you are using a connection-oriented protocol, the M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="0c8e6-1309">如果使用的是无连接协议<xref:System.Net.Sockets.Socket.ConnectAsync%2A>建立默认远程主机由指定`socketType`和`protocolType`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1309">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host specified by the `socketType` and `protocolType` parameters.</span></span>  
  
 <span data-ttu-id="0c8e6-1310">若要在完成时得到通知，必须创建实现事件处理程序的回调方法\<SocketAsyncEventArgs > 委托并将附加到回调<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1310">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="0c8e6-1311">调用方必须设置<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>属性设置为<xref:System.Net.IPEndPoint>要连接到的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1311">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="0c8e6-1312">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1312">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-1313">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1313">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-1314">如果使用如 UDP 是无连接协议，不需要调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>之前发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1314">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="0c8e6-1315">可以使用<xref:System.Net.Sockets.Socket.SendToAsync%2A>和<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>与远程主机通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1315">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="0c8e6-1316">如果调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>，将丢弃来自指定的默认值以外的地址的任何数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1316">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="0c8e6-1317">如果你想要更改默认远程主机，则调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法再次使用所需终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1317">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="0c8e6-1318">如果你想要设置默认远程主机与广播地址，必须先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>设置为广播和`true`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1318">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="0c8e6-1319">如果不执行此操作，<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1319">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-1320">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>对象所需：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1320">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-1321">（可选） 一个缓冲区可能会提供它以原子方式发送后在套接字上<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法成功。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1321">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="0c8e6-1322">在这种情况下，<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>属性应设置为包含数据的缓冲区，以发送和<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>属性应设置为的数据的字节数，以从缓冲区发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1322">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="0c8e6-1323">一旦建立的连接，该缓冲区中的数据会被发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1323">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="0c8e6-1324">如果您使用的是面向连接的协议，并且不会调用<xref:System.Net.Sockets.Socket.Bind%2A>之前调用<xref:System.Net.Sockets.Socket.ConnectAsync%2A>，基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1324">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="0c8e6-1325">如果您使用的是无连接协议，直到您调用，服务提供程序将不分配本地网络 IP 地址和端口号<xref:System.Net.Sockets.Socket.SendAsync%2A>或<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1325">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="0c8e6-1326"><xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法会抛出<xref:System.NotSupportedException>如果的地址族<xref:System.Net.Sockets.Socket>和<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>不是同一地址系列。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1326">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1327">如果你收到<xref:System.Net.Sockets.SocketException>调用此方法时，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1327">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1328">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1328">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1329">自变量无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1329">An argument is not valid.</span>
          </span>
          <span data-ttu-id="0c8e6-1330">如果指定了多个缓冲区，即 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null，将会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1330">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1331">
            <paramref name="e" /> 参数不能为 null，并且 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1331">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1332">
            <see cref="T:System.Net.Sockets.Socket" /> 正在侦听或已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1332">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1333">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1333">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1334">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1334">Windows XP or later is required for this method.</span>
          </span>
          <span data-ttu-id="0c8e6-1335">如果本地终结点和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不是相同的地址族，也会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1335">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1336">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1336">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-1337">调用堆栈中的较高调用方无权执行所请求的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1337">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Connected : bool" Usage="System.Net.Sockets.Socket.Connected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1338">获取一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 是在上次 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 还是 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 操作时连接到远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1338">Gets a value that indicates whether a <see cref="T:System.Net.Sockets.Socket" /> is connected to a remote host as of the last <see cref="Overload:System.Net.Sockets.Socket.Send" /> or <see cref="Overload:System.Net.Sockets.Socket.Receive" /> operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1339">如果 <see cref="T:System.Net.Sockets.Socket" /> 在最近操作时连接到远程资源，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1339">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1340">`Connected`属性获取的连接状态<xref:System.Net.Sockets.Socket>截止到最后一个 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1340">The `Connected` property gets the connection state of the <xref:System.Net.Sockets.Socket> as of the last I/O operation.</span></span> <span data-ttu-id="0c8e6-1341">如果该属性返回`false`，则<xref:System.Net.Sockets.Socket>要么从未连接，或已断开连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1341">When it returns `false`, the <xref:System.Net.Sockets.Socket> was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="0c8e6-1342">值<xref:System.Net.Sockets.Socket.Connected%2A>属性反映最新操作时的连接的状态。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1342">The value of the <xref:System.Net.Sockets.Socket.Connected%2A> property reflects the state of the connection as of the most recent operation.</span></span> <span data-ttu-id="0c8e6-1343">如果您需要确定连接的当前状态，请调用非阻止性、 零字节发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1343">If you need to determine the current state of the connection, make a nonblocking, zero-byte Send call.</span></span> <span data-ttu-id="0c8e6-1344">如果调用成功返回或引发 WAEWOULDBLOCK 错误代码 (10035)，则仍连接套接字;否则，无法再连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1344">If the call returns successfully or throws a WAEWOULDBLOCK error code (10035), then the socket is still connected; otherwise, the socket is no longer connected.</span></span>  
  
 <span data-ttu-id="0c8e6-1345">如果您调用<xref:System.Net.Sockets.Socket.Connect%2A>对用户数据报协议 (UDP) 套接字<xref:System.Net.Sockets.Socket.Connected%2A>属性始终返回`true`; 但是，此操作不会更改无连接的固有 UDP 性质。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1345">If you call <xref:System.Net.Sockets.Socket.Connect%2A> on a User Datagram Protocol (UDP) socket, the <xref:System.Net.Sockets.Socket.Connected%2A> property always returns `true`; however, this action does not change the inherent connectionless nature of UDP.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1346">下面的代码示例连接到远程终结点，检查<xref:System.Net.Sockets.Socket.Connected%2A>属性，并检查连接的当前状态。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1346">The following code example connects to a remote endpoint, checks the <xref:System.Net.Sockets.Socket.Connected%2A> property, and checks the current state of the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect (bool reuseSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Disconnect(bool reuseSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disconnect (reuseSocket As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Disconnect(bool reuseSocket);" />
      <MemberSignature Language="F#" Value="member this.Disconnect : bool -&gt; unit" Usage="socket.Disconnect reuseSocket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reuseSocket">
          <span data-ttu-id="0c8e6-1347">如果关闭当前连接后可以重用此套接字，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1347">
              <see langword="true" /> if this socket can be reused after the current connection is closed; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1348">关闭套接字连接并允许重用套接字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1348">Closes the socket connection and allows reuse of the socket.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1349">如果使用的是面向连接的协议，可以使用此方法以关闭套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1349">If you are using a connection-oriented protocol, you can use this method to close the socket.</span></span> <span data-ttu-id="0c8e6-1350">此方法结束连接和集<xref:System.Net.Sockets.Socket.Connected%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1350">This method ends the connection and sets the <xref:System.Net.Sockets.Socket.Connected%2A> property to `false`.</span></span> <span data-ttu-id="0c8e6-1351">但是，如果`reuseSocket`是`true`，可以重复使用套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1351">However, if `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="0c8e6-1352">若要确保发送和接收套接字关闭之前的所有数据，应调用<xref:System.Net.Sockets.Socket.Shutdown%2A>之前调用<xref:System.Net.Sockets.Socket.Disconnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1352">To ensure that all data is sent and received before the socket is closed, you should call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Disconnect%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1353">如果您需要调用<xref:System.Net.Sockets.Socket.Disconnect%2A>没有首先调用<xref:System.Net.Sockets.Socket.Shutdown%2A>，可以设置<xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket>选项设为`false`而指定的非零的超时间隔，以确保排队等待发送传出的传输的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1353">If you need to call <xref:System.Net.Sockets.Socket.Disconnect%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can set the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specify a nonzero time-out interval to ensure that data queued for outgoing transmission is sent.</span></span> <span data-ttu-id="0c8e6-1354"><xref:System.Net.Sockets.Socket.Disconnect%2A> 然后阻止，直到发送数据或直到指定的超时时间已到。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1354"><xref:System.Net.Sockets.Socket.Disconnect%2A> then blocks until the data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="0c8e6-1355">如果您设置<xref:System.Net.Sockets.SocketOptionName.DontLinger>到`false`并指定为零的超时间隔、<xref:System.Net.Sockets.Socket.Close%2A>释放连接，并会自动放弃传出队列的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1355">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1356">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1356">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1357">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1357">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1358">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1358">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1359">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1359">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1360">下面的代码示例创建同步通信套接字，并将一些数据发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1360">The following code example creates a socket for synchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="0c8e6-1361">然后，它调用<xref:System.Net.Sockets.Socket.Shutdown%2A>，以停止发送和接收活动，并<xref:System.Net.Sockets.Socket.Disconnect%2A>以关闭套接字连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1361">It then calls <xref:System.Net.Sockets.Socket.Shutdown%2A>, to stop the send and receive activity, and <xref:System.Net.Sockets.Socket.Disconnect%2A>, to close the socket connection.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#12)]
 [!code-csharp[Nclsocketenhancements#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="0c8e6-1362">此方法需要 Windows 2000 或更低版本，否则将引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1362">This method requires Windows 2000 or earlier, or the exception will be thrown.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1363">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1363">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1364">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1364">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DisconnectAsync">
      <MemberSignature Language="C#" Value="public bool DisconnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DisconnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisconnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DisconnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.DisconnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.DisconnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-1365">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1365">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1366">开始异步请求从远程终结点断开连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1366">Begins an asynchronous request to disconnect from a remote endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1367">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1367">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-1368">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1368">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-1369">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1369">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-1370">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1370">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1371">使用面向连接的协议时，调用<xref:System.Net.Sockets.Socket.DisconnectAsync%2A>方法请求从远程终结点断开连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1371">When using a connection-oriented protocol, calling the <xref:System.Net.Sockets.Socket.DisconnectAsync%2A> method requests a disconnect from a remote endpoint.</span></span> <span data-ttu-id="0c8e6-1372">如果您设置<xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType>到`true`中`e`参数，可以重复使用套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1372">If you set <xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType> to `true` in the `e` parameter, the socket can be reused.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1373">
            <paramref name="e" /> 参数不能为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1373">The <paramref name="e" /> parameter cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1374">已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1374">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1375">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1375">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1376">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1376">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1377">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1377">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1378">释放 <see cref="T:System.Net.Sockets.Socket" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1378">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="socket.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1379">释放 <see cref="T:System.Net.Sockets.Socket" /> 类的当前实例所使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1379">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1380">在完成使用 `Dispose` 后，应调用 <xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1380">Call `Dispose` when you are finished using the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1381">`Dispose` 方法使 <xref:System.Net.Sockets.Socket> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1381">The `Dispose` method leaves the <xref:System.Net.Sockets.Socket> in an unusable state.</span></span> <span data-ttu-id="0c8e6-1382">在调用`Dispose`，必须释放对所有引用<xref:System.Net.Sockets.Socket>这样垃圾回收器才能收回内存的<xref:System.Net.Sockets.Socket>占用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1382">After calling `Dispose`, you must release all references to the <xref:System.Net.Sockets.Socket> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.Socket> was occupying.</span></span>  
  
 <span data-ttu-id="0c8e6-1383">有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1383">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1384">每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1384">Always call `Dispose` before you release your last reference to the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1385">否则，在垃圾回收器调用 <xref:System.Net.Sockets.Socket> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1385">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.Socket> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="socket.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="0c8e6-1386">如果释放托管资源和非托管资源，则为 <see langword="true" />；如果仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1386">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1387">释放由 <see cref="T:System.Net.Sockets.Socket" /> 使用的非托管资源，并可根据需要释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1387">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1388">调用此方法由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1388">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="0c8e6-1389">`Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1389">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="0c8e6-1390"><xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1390"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="0c8e6-1391">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Net.Sockets.Socket> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1391">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.Socket> references.</span></span> <span data-ttu-id="0c8e6-1392">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1392">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1393">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1393">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1394">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1394">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="0c8e6-1395">
            <para>
              <see langword="Dispose" /> 可以多次调用由其他对象。重写 <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。详细了解如何实现<see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />，请参阅 [实现 Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)。有关详细信息<see langword="Dispose" />并<see cref="M:System.Object.Finalize" />，请参阅 [清理了非托管 Resources](~/docs/standard/garbage-collection/unmanaged.md) 和 [重写 Finalize 方法] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1395">
              <para>
                <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.Socket.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1396">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 是否允许将 Internet 协议 (IP) 数据报分段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1396">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows Internet Protocol (IP) datagrams to be fragmented.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1397">如果 <see cref="T:System.Net.Sockets.Socket" /> 允许数据报分段，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1397">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows datagram fragmentation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1398">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1398">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1399">其大小超过最大传输单元 (MTU) 的传输媒体时，数据报要求碎片。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1399">Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</span></span> <span data-ttu-id="0c8e6-1400">数据报可能通过发送主机 （所有 Internet 协议版本） 或中间路由器 (Internet 协议版本 4 仅) 分段。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1400">Datagrams may be fragmented by the sending host (all Internet Protocol versions) or an intermediate router (Internet Protocol Version 4 only).</span></span> <span data-ttu-id="0c8e6-1401">如果必须碎片数据报，和<xref:System.Net.Sockets.Socket.DontFragment%2A>选项设置、 数据报将被放弃，并且 Internet 控制消息协议 (ICMP) 错误消息发送回发送方的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1401">If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</span></span>  
  
 <span data-ttu-id="0c8e6-1402">传输控制协议 (TCP) 套接字上设置此属性不会影响。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1402">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1403">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.DontFragment%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1403">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1404">只有对于在 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 族中的套接字，才可以设置此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1404">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1405">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1405">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1406">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1406">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DualMode">
      <MemberSignature Language="C#" Value="public bool DualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DualMode" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DualMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DualMode : bool with get, set" Usage="System.Net.Sockets.Socket.DualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1407">获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 是否是用于 IPv4 和 IPv6 的双模式套接字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1407">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> is a dual-mode socket used for both IPv4 and IPv6.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1408">如果 <see cref="T:System.Net.Sockets.Socket" /> 是双模式套接字，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1408">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is a  dual-mode socket; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1409">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1409">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DuplicateAndClose">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketInformation DuplicateAndClose (int targetProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Net.Sockets.SocketInformation DuplicateAndClose(int32 targetProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DuplicateAndClose (targetProcessId As Integer) As SocketInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::SocketInformation DuplicateAndClose(int targetProcessId);" />
      <MemberSignature Language="F#" Value="member this.DuplicateAndClose : int -&gt; System.Net.Sockets.SocketInformation" Usage="socket.DuplicateAndClose targetProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoLimitation("We do not support passing sockets across processes, we merely allow this API to pass the socket across AppDomains")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targetProcessId">
          <span data-ttu-id="0c8e6-1410">从中创建重复套接字引用的目标进程的 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1410">The ID of the target process where a duplicate of the socket reference is created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1411">重复目标进程的套接字引用，并关闭此进程的套接字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1411">Duplicates the socket reference for the target process, and closes the socket for this process.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1412">要传递到目标进程的套接字引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1412">The socket reference to be passed to the target process.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1413">目标进程应使用<xref:System.Net.Sockets.Socket.%23ctor%2A>创建重复套接字实例。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1413">The target process should use <xref:System.Net.Sockets.Socket.%23ctor%2A> to create the duplicate socket instance.</span></span>  
  
 <span data-ttu-id="0c8e6-1414">如果您调用<xref:System.Net.Sockets.Socket.%23ctor%2A>多次使用相同的字节数组，作为每个调用的参数的构造函数，您将创建多个托管<xref:System.Net.Sockets.Socket>具有相同的基础套接字的实例。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1414">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket> instances with the same underlying socket.</span></span> <span data-ttu-id="0c8e6-1415">这种做法是强烈建议不要使用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1415">This practice is strongly discouraged.</span></span>  
  
 <span data-ttu-id="0c8e6-1416">如果进程创建套接字使用的异步方法 (<xref:System.Net.Sockets.Socket.BeginReceive%2A>或<xref:System.Net.Sockets.Socket.BeginSend%2A>)，该过程必须首先设置<xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A>属性设置为 true; 否则为套接字绑定到完成端口的创建过程中，这可能会导致<xref:System.ArgumentNullException>目标进程中抛出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1416">If the process creating the socket uses asynchronous methods (<xref:System.Net.Sockets.Socket.BeginReceive%2A> or <xref:System.Net.Sockets.Socket.BeginSend%2A>), the process must first set the <xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A> property to true; otherwise, the socket is bound to the completion port of the creating process, which may cause an <xref:System.ArgumentNullException> to be thrown on the target process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1417">
            <paramref name="targetProcessID" /> 不是有效的进程 ID。  - 或 -  套接字引用的复制失败。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1417">
              <paramref name="targetProcessID" /> is not a valid process id.  -or-  Duplication of the socket reference failed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.Socket.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1418">获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 是否可以发送或接收广播数据包。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1418">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> can send or receive broadcast packets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1419">如果 <see cref="T:System.Net.Sockets.Socket" /> 允许广播数据包，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1419">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows broadcast packets; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1420">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1420">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1421">广播仅限于特定的子网，并且必须使用用户数据报协议 (UDP)。有关 Internet 协议版本 4，您可以通过将数据包发送到 255.255.255.255; 广播本地子网或者，可以使用定向广播的地址，这是使用中的主机部分设置的所有位的 Internet 协议 (IP) 地址的网络部分。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1421">Broadcasting is limited to a specific subnet, and must use User Datagram Protocol (UDP.) For Internet Protocol version 4, you can broadcast to your local subnet by sending a packet to 255.255.255.255; or you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</span></span> <span data-ttu-id="0c8e6-1422">例如，如果你的 IP 地址为 192.168.1.40 （C 类地址，网络掩码为 255.255.255.0-网络部分是前三个八位字节，而主机部分是最后一个八进制数），则定向广播的地址是 192.168.1.255。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1422">For example, if your IP address is 192.168.1.40 (a Class C address, with a netmask of 255.255.255.0 -- the network portion is the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</span></span>  
  
 <span data-ttu-id="0c8e6-1423">传输控制协议 (TCP) 套接字上设置此属性不会影响。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1423">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1424">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.EnableBroadcast%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1424">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.EnableBroadcast%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1425">此选项仅对数据报套接字有效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1425">This option is valid for a datagram socket only.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1426">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1426">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1427">异步接受传入的连接尝试。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1427">Asynchronously accepts an incoming connection attempt.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAccept :  * IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept (buffer, asyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]&amp;" RefType="out" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-1428">包含所传输字节的类型 <see cref="T:System.Byte" /> 的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1428">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span>
          </span>
        </param>
        <param name="asyncResult">
          <span data-ttu-id="0c8e6-1429">
            <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息以及任何用户定义数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1429">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1430">异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 对象来处理远程主机通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1430">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span>
          </span>
          <span data-ttu-id="0c8e6-1431">此方法返回包含所传输的初始数据的缓冲区。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1431">This method returns a buffer that contains the initial data transferred.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1432">一个 <see cref="T:System.Net.Sockets.Socket" /> 对象，它处理与远程主机的通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1432">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1433"><xref:System.Net.Sockets.Socket.EndAccept%2A> 完成对调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1433"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="0c8e6-1434">然后再调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>，你需要创建一个回调方法，它通过调用<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1434">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1435">该回调方法在一个单独的线程中执行并由系统后调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1435">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span>  
  
 <span data-ttu-id="0c8e6-1436">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法`asyncResult`参数来获取<xref:System.Net.Sockets.Socket>上可由连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1436">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="0c8e6-1437">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法才能成功完成连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1437">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="0c8e6-1438">`buffer`的此重载的参数包含对的调用中收到的数据<xref:System.Net.Sockets.Socket.BeginAccept%2A>和`bytesTransferred`参数包含已传输的调用中的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1438">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="0c8e6-1439"><xref:System.Net.Sockets.Socket.EndAccept%2A>方法进行阻止，直到挂起的连接，传入的连接队列中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1439">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="0c8e6-1440"><xref:System.Net.Sockets.Socket.EndAccept%2A>方法接受传入连接，并返回一个新<xref:System.Net.Sockets.Socket>可用来将数据发送到和从远程主机接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1440">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1441">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1441">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1442">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1442">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1443">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1443">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1444">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1444">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1445">下面的代码示例使用<xref:System.Net.Sockets.Socket.BeginAccept%2A>可创建和连接套接字接受前 10 个字节的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1445">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="0c8e6-1446">回调委托调用<xref:System.Net.Sockets.Socket.EndAccept%2A>结束异步请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1446">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="0c8e6-1447">在返回传输的字节数和数据`buffer`和`bytesTransferred`此方法的参数并在控制台上显示。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1447">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1448">此方法需要 Windows NT。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1448">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1449">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1449">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1450">
            <paramref name="asyncResult" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1450">
              <paramref name="asyncResult" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1451">
            <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 的调用创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1451">
              <paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1452">
            <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 方法以前被调用过。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1452">
              <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1453">尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 时出错</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1453">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (asyncResult As IAsyncResult) As Socket" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (result As IAsyncResult) As Socket" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndAccept : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="0c8e6-1454">异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 来处理远程主机通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1454">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1455">一个 <see cref="T:System.Net.Sockets.Socket" />，它处理与远程主机的通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1455">A <see cref="T:System.Net.Sockets.Socket" /> to handle communication with the remote host.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1456"><xref:System.Net.Sockets.Socket.EndAccept%2A> 完成对调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1456"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="0c8e6-1457">然后再调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1457">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1458">该回调方法在一个单独的线程中执行并由系统后调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1458">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="0c8e6-1459">必须接受`asyncResult`参数从返回<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1459">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1460">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法`asyncResult`参数来获取<xref:System.Net.Sockets.Socket>上可由连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1460">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="0c8e6-1461">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法才能成功完成连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1461">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span>  
  
 <span data-ttu-id="0c8e6-1462"><xref:System.Net.Sockets.Socket.EndAccept%2A>方法进行阻止，直到挂起的连接，传入的连接队列中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1462">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="0c8e6-1463"><xref:System.Net.Sockets.Socket.EndAccept%2A>方法接受传入连接，并返回一个新<xref:System.Net.Sockets.Socket>可用来将数据发送到和从远程主机接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1463">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1464">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1464">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1465">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1465">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1466">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1466">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1467">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1467">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1468">下面的代码示例结束的异步请求并创建一个新<xref:System.Net.Sockets.Socket>以接受传入连接请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1468">The following code example ends an asynchronous request and creates a new <xref:System.Net.Sockets.Socket> to accept an incoming connection request.</span></span> <span data-ttu-id="0c8e6-1469">有关演示如何使用套接字的异步通信的完整示例，请参阅[套接字代码示例](~/docs/framework/network-programming/socket-code-examples.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1469">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1470">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1470">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1471">
            <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 的调用创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1471">
              <paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1472">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1472">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-1473">有关详细信息，请参阅备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1473">See the Remarks section for more information.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1474">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1474">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1475">
            <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 方法以前被调用过。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1475">
              <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1476">此方法需要 Windows NT。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1476">Windows NT is required for this method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, [out] int32&amp; bytesTransferred, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), ByRef bytesTransferred As Integer, asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, [Runtime::InteropServices::Out] int % bytesTransferred, IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAccept :  *  * IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept (buffer, bytesTransferred, asyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]&amp;" RefType="out" />
        <Parameter Name="bytesTransferred" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-1477">包含所传输字节的类型 <see cref="T:System.Byte" /> 的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1477">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span>
          </span>
        </param>
        <param name="bytesTransferred">
          <span data-ttu-id="0c8e6-1478">已传输的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1478">The number of bytes transferred.</span>
          </span>
        </param>
        <param name="asyncResult">
          <span data-ttu-id="0c8e6-1479">
            <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息以及任何用户定义数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1479">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1480">异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 对象来处理远程主机通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1480">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span>
          </span>
          <span data-ttu-id="0c8e6-1481">此方法返回一个缓冲区，其中包含初始数据和传输的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1481">This method returns a buffer that contains the initial data and the number of bytes transferred.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1482">一个 <see cref="T:System.Net.Sockets.Socket" /> 对象，它处理与远程主机的通信。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1482">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1483"><xref:System.Net.Sockets.Socket.EndAccept%2A> 完成对调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1483"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="0c8e6-1484">然后再调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>，你需要创建一个回调方法，它通过调用<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1484">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1485">该回调方法在一个单独的线程中执行并由系统后调用<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1485">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="0c8e6-1486">必须接受`asyncResult`参数从返回<xref:System.Net.Sockets.Socket.BeginAccept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1486">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1487">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法`asyncResult`参数来获取<xref:System.Net.Sockets.Socket>上可由连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1487">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="0c8e6-1488">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndAccept%2A>方法才能成功完成连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1488">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="0c8e6-1489">`buffer`的此重载的参数包含对的调用中收到的数据<xref:System.Net.Sockets.Socket.BeginAccept%2A>和`bytesTransferred`参数包含已传输的调用中的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1489">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="0c8e6-1490"><xref:System.Net.Sockets.Socket.EndAccept%2A>方法进行阻止，直到挂起的连接，传入的连接队列中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1490">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="0c8e6-1491"><xref:System.Net.Sockets.Socket.EndAccept%2A>方法接受传入连接，并返回一个新<xref:System.Net.Sockets.Socket>可用来将数据发送到和从远程主机接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1491">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1492">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1492">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1493">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1493">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1494">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1494">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1495">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1495">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1496">下面的代码示例使用<xref:System.Net.Sockets.Socket.BeginAccept%2A>可创建和连接套接字接受前 10 个字节的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1496">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="0c8e6-1497">回调委托调用<xref:System.Net.Sockets.Socket.EndAccept%2A>结束异步请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1497">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="0c8e6-1498">在返回传输的字节数和数据`buffer`和`bytesTransferred`此方法的参数并在控制台上显示。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1498">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1499">此方法需要 Windows NT。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1499">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1500">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1500">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1501">
            <paramref name="asyncResult" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1501">
              <paramref name="asyncResult" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1502">
            <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 的调用创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1502">
              <paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1503">
            <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 方法以前被调用过。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1503">
              <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1504">尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1504">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (result As IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndConnect : IAsyncResult -&gt; unit" Usage="socket.EndConnect result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="0c8e6-1505">结束挂起的异步连接请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1505">Ends a pending asynchronous connection request.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1506"><xref:System.Net.Sockets.Socket.EndConnect%2A> 在中启动阻止方法，在完成异步远程主机连接请求<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1506"><xref:System.Net.Sockets.Socket.EndConnect%2A> is a blocking method that completes the asynchronous remote host connection request started in the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1507">然后再调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1507">Before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1508">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1508">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginConnect%2A> returns.</span></span> <span data-ttu-id="0c8e6-1509">回调方法必须接受<xref:System.IAsyncResult>返回的<xref:System.Net.Sockets.Socket.BeginConnect%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1509">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1510">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>参数来获取<xref:System.Net.Sockets.Socket>上可由连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1510">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="0c8e6-1511">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndConnect%2A>方法才能成功完成连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1511">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndConnect%2A> method to successfully complete the connection attempt.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1512">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1512">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1513">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1513">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1514">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1514">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1515">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1515">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1516">下面的代码示例结束异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1516">The following code example ends the asynchronous connection attempt.</span></span> <span data-ttu-id="0c8e6-1517">有关演示如何使用套接字的异步通信的完整示例，请参阅[套接字代码示例](~/docs/framework/network-programming/socket-code-examples.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1517">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1518">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1518">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1519">对 <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1519">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1520">先前曾为异步连接调用过 <see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1520">
              <see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1521">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1521">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1522">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1522">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndDisconnect">
      <MemberSignature Language="C#" Value="public void EndDisconnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndDisconnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndDisconnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndDisconnect(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndDisconnect : IAsyncResult -&gt; unit" Usage="socket.EndDisconnect asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="0c8e6-1523">
            <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息以及所有用户定义数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1523">An <see cref="T:System.IAsyncResult" /> object that stores state information and any user-defined data for this asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1524">结束挂起的异步断开连接请求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1524">Ends a pending asynchronous disconnect request.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1525"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> 完成对调用<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1525"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginDisconnect%2A>.</span></span> <span data-ttu-id="0c8e6-1526"><xref:System.Net.Sockets.Socket.EndDisconnect%2A>方法进行阻止，直到完成断开连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1526">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the disconnect completes.</span></span> <span data-ttu-id="0c8e6-1527">有关异步操作的信息，请参阅 MSDN library 中的异步编程的概述主题。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1527">For information about asynchronous operations, see the Asynchronous Programming Overview topic in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1528">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1528">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1529">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1529">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1530">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1530">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1531">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1531">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1532">下面的代码示例创建的套接字进行异步通信，并将一些数据发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1532">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="0c8e6-1533">已发送数据，<xref:System.Net.Sockets.Socket.Shutdown%2A>调用来停止发送和接收活动。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1533">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="0c8e6-1534">然后<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>调用以开始断开连接请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1534">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="0c8e6-1535">回调委托调用<xref:System.Net.Sockets.Socket.EndDisconnect%2A>结束异步请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1535">The callback delegate calls <xref:System.Net.Sockets.Socket.EndDisconnect%2A> to end the asynchronous request.</span></span> <span data-ttu-id="0c8e6-1536">完成请求后，<xref:System.Net.Sockets.Socket.Connected%2A>属性进行查询，以测试是否已断开连接的套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1536">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1537">操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1537">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1538">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1538">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1539">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1539">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1540">对 <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1540">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1541">先前曾为异步连接调用过 <see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1541">
              <see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1542">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1542">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.WebException">
          <span data-ttu-id="0c8e6-1543">断开连接请求已超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1543">The disconnect request has timed out.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1544">结束挂起的异步读取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1544">Ends a pending asynchronous read.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult -&gt; int" Usage="socket.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="0c8e6-1545">结束挂起的异步读取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1545">Ends a pending asynchronous read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1546">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1546">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1547"><xref:System.Net.Sockets.Socket.EndReceive%2A>方法完成异步读取的操作以启动<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1547">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1548">然后再调用<xref:System.Net.Sockets.Socket.BeginReceive%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1548">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1549">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginReceive%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1549">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="0c8e6-1550">回调方法必须接受<xref:System.IAsyncResult>返回的<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1550">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1551">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>若要获取状态对象传递给<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1551">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-1552">提取接收<xref:System.Net.Sockets.Socket>从该状态对象。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1552">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="0c8e6-1553">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndReceive%2A>方法成功完成读取的操作，并返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1553">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="0c8e6-1554"><xref:System.Net.Sockets.Socket.EndReceive%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1554">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-1555">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.EndReceive%2A>将读取传入的网络缓冲区中有可用的第一个排队数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1555">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="0c8e6-1556">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.EndReceive%2A>方法将读取的数据，可在指定的字节数目可高达`size`参数的<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1556">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-1557">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.EndReceive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1557">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-1558">若要获取所接收的数据，请调用<xref:System.IAsyncResult.AsyncState%2A>方法的<xref:System.IAsyncResult>，然后提取生成的状态对象中包含的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1558">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
 <span data-ttu-id="0c8e6-1559">若要取消挂起<xref:System.Net.Sockets.Socket.BeginReceive%2A>，调用<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1559">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1560">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1560">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1561">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1561">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1562">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1562">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-1563">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1563">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1564">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1564">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1565">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1565">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1566">下面的代码示例结束挂起的异步读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1566">The following code example ends a pending asynchronous read.</span></span> <span data-ttu-id="0c8e6-1567">有关演示如何使用套接字的异步通信的完整示例，请参阅[套接字代码示例](~/docs/framework/network-programming/socket-code-examples.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1567">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1568">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1568">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1569">对 <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1569">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1570">先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1570">
              <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1571">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1571">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1572">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1572">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; int" Usage="socket.EndReceive (asyncResult, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="0c8e6-1573">
            <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1573">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-1574">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1574">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1575">结束挂起的异步读取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1575">Ends a pending asynchronous read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1576">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1576">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1577"><xref:System.Net.Sockets.Socket.EndReceive%2A>方法完成异步读取的操作以启动<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1577">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1578">然后再调用<xref:System.Net.Sockets.Socket.BeginReceive%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1578">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1579">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginReceive%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1579">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="0c8e6-1580">回调方法必须接受<xref:System.IAsyncResult>返回的<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1580">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1581">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>若要获取状态对象传递给<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1581">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-1582">提取接收<xref:System.Net.Sockets.Socket>从该状态对象。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1582">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="0c8e6-1583">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndReceive%2A>方法成功完成读取的操作，并返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1583">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="0c8e6-1584"><xref:System.Net.Sockets.Socket.EndReceive%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1584">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-1585">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.EndReceive%2A>将读取传入的网络缓冲区中有可用的第一个排队数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1585">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="0c8e6-1586">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.EndReceive%2A>方法将读取的数据，可在指定的字节数目可高达`size`参数的<xref:System.Net.Sockets.Socket.BeginReceive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1586">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="0c8e6-1587">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.EndReceive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1587">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-1588">若要获取所接收的数据，请调用<xref:System.IAsyncResult.AsyncState%2A>方法的<xref:System.IAsyncResult>，然后提取生成的状态对象中包含的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1588">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1589">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1589">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1590">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1590">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1591">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1591">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-1592">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1592">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1593">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1593">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1594">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1594">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1595">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1595">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1596">对 <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1596">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1597">先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1597">
              <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1598">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1598">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1599">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1599">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult asyncResult, ref System.Net.EndPoint endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult asyncResult, class System.Net.EndPoint&amp; endPoint) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (asyncResult As IAsyncResult, ByRef endPoint As EndPoint) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ asyncResult, System::Net::EndPoint ^ % endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult result, ref System.Net.EndPoint end_point);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult result, class System.Net.EndPoint&amp; end_point) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (result As IAsyncResult, ByRef end_point As EndPoint) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ result, System::Net::EndPoint ^ % end_point);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFrom : IAsyncResult *  -&gt; int" Usage="socket.EndReceiveFrom (result, end_point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint&amp;" RefType="ref" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="end_point" Type="System.Net.EndPoint&amp;" RefType="ref" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <param name="endPoint">To be added.</param>
        <param name="end_point">To be added.</param>
        <summary>
          <span data-ttu-id="0c8e6-1600">结束挂起的、从特定终结点进行异步读取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1600">Ends a pending asynchronous read from a specific endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1601">如果成功，则返回已接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1601">If successful, the number of bytes received.</span>
          </span>
          <span data-ttu-id="0c8e6-1602">如果不成功，则返回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1602">If unsuccessful, returns 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1603"><xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>方法完成异步读取的操作以启动<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1603">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1604">然后再调用<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1604">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1605">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1605">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> returns.</span></span> <span data-ttu-id="0c8e6-1606">回调方法必须接受<xref:System.IAsyncResult>返回的<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1606">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1607">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>若要获取状态对象传递给<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1607">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-1608">提取接收<xref:System.Net.Sockets.Socket>从该状态对象。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1608">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="0c8e6-1609">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>方法成功完成读取的操作，并返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1609">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="0c8e6-1610"><xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1610">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-1611">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>将读取传入的网络缓冲区中有可用的第一个排队数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1611">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="0c8e6-1612">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>方法将读取的数据，可在指定的字节数目可高达`size`参数的<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1612">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-1613">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1613">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span> <span data-ttu-id="0c8e6-1614">若要获取所接收的数据，请调用<xref:System.IAsyncResult.AsyncState%2A>方法的<xref:System.IAsyncResult>对象，并提取生成的状态对象中包含的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1614">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> object, and extract the buffer contained in the resulting state object.</span></span> <span data-ttu-id="0c8e6-1615">若要标识原始主机，提取<xref:System.Net.EndPoint>将其转换为<xref:System.Net.IPEndPoint>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1615">To identify the originating host, extract the <xref:System.Net.EndPoint> and cast it to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="0c8e6-1616">使用<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>方法来获取 IP 地址和<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>方法来获取端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1616">Use the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to obtain the IP address and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to obtain the port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1617">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1617">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1618">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1618">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1619">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1619">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1620">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1620">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1621">下面的代码示例结束挂起的异步读取从特定<xref:System.Net.EndPoint>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1621">The following code example ends a pending asynchronous read from a specific <xref:System.Net.EndPoint>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Async_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Async_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1622">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1622">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1623">对 <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1623">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1624">先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1624">
              <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1625">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1625">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1626">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1626">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveMessageFrom (IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveMessageFrom(class System.IAsyncResult asyncResult, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; endPoint, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveMessageFrom (asyncResult As IAsyncResult, ByRef socketFlags As SocketFlags, ByRef endPoint As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveMessageFrom(IAsyncResult ^ asyncResult, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % endPoint, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveMessageFrom : IAsyncResult *  *  *  -&gt; int" Usage="socket.EndReceiveMessageFrom (asyncResult, socketFlags, endPoint, ipPacketInformation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags&amp;" RefType="ref" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="0c8e6-1627">
            <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1627">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-1628">所接收数据包的 <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1628">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values for the received packet.</span>
          </span>
        </param>
        <param name="endPoint">
          <span data-ttu-id="0c8e6-1629">源 <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1629">The source <see cref="T:System.Net.EndPoint" />.</span>
          </span>
        </param>
        <param name="ipPacketInformation">
          <span data-ttu-id="0c8e6-1630">所接收数据包的 <see cref="T:System.Net.IPAddress" /> 和接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1630">The <see cref="T:System.Net.IPAddress" /> and interface of the received packet.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1631">结束挂起的、从特定终结点进行异步读取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1631">Ends a pending asynchronous read from a specific endpoint.</span>
          </span>
          <span data-ttu-id="0c8e6-1632">此方法还显示有关数据包而不是 <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> 的更多信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1632">This method also reveals more information about the packet than <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1633">如果成功，则返回已接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1633">If successful, the number of bytes received.</span>
          </span>
          <span data-ttu-id="0c8e6-1634">如果不成功，则返回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1634">If unsuccessful, returns 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1635">如果该操作未完成，此方法阻止，直至它。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1635">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="0c8e6-1636">若要以同步方式执行此操作，请使用<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1636">To perform this operation synchronously, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-1637">检查`ipPacketInformation`如果您需要了解是否使用单播、 多播或广播地址发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1637">Examine `ipPacketInformation` if you need to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1638">
            <paramref name="asyncResult" /> 为 <see langword="null" />  - 或 -   <paramref name="endPoint" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1638">
              <paramref name="asyncResult" /> is <see langword="null" />  -or-  <paramref name="endPoint" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1639">对 <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1639">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1640">先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1640">
              <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1641">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1641">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1642">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1642">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1643">结束挂起的异步发送。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1643">Ends a pending asynchronous send.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="socket.EndSend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="0c8e6-1644">结束挂起的异步发送。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1644">Ends a pending asynchronous send.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1645">如果成功，则将返回向 <see cref="T:System.Net.Sockets.Socket" /> 发送的字节数；否则会返回无效 <see cref="T:System.Net.Sockets.Socket" /> 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1645">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1646"><xref:System.Net.Sockets.Socket.EndSend%2A> 完成异步发送操作中启动<xref:System.Net.Sockets.Socket.BeginSend%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1646"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-1647">然后再调用<xref:System.Net.Sockets.Socket.BeginSend%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1647">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1648">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginSend%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1648">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="0c8e6-1649">回调方法必须接受<xref:System.IAsyncResult>返回的<xref:System.Net.Sockets.Socket.BeginSend%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1649">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1650">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>参数来获取发送<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1650">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1651">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndSend%2A>方法成功完成发送操作并返回发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1651">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="0c8e6-1652">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.EndSend%2A>会阻塞，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1652">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-1653">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.EndSend%2A>会阻塞，直到某些缓冲区已发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1653">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="0c8e6-1654">如果的返回值<xref:System.Net.Sockets.Socket.EndSend%2A>指示的缓冲区不是完全发送，调用<xref:System.Net.Sockets.Socket.BeginSend%2A>方法同样，修改要保存的未发送的数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1654">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="0c8e6-1655">则您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1655">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-1656">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1656">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-1657">成功完成<xref:System.Net.Sockets.Socket.BeginSend%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1657">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1658">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1658">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1659">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1659">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1660">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1660">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-1661">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1661">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1662">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1662">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-1663">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1663">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1664">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1664">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1665">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1665">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1666">下面的代码示例结束挂起的异步发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1666">The following code example ends a pending asynchronous send.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Async_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Async_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1667">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1667">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1668">对 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1668">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1669">先前为异步发送已调用过 <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1669">
              <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1670">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1670">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1671">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1671">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult *  -&gt; int" Usage="socket.EndSend (asyncResult, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="0c8e6-1672">
            <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1672">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-1673">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1673">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1674">结束挂起的异步发送。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1674">Ends a pending asynchronous send.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1675">如果成功，则将返回向 <see cref="T:System.Net.Sockets.Socket" /> 发送的字节数；否则会返回无效 <see cref="T:System.Net.Sockets.Socket" /> 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1675">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1676"><xref:System.Net.Sockets.Socket.EndSend%2A> 完成异步发送操作中启动<xref:System.Net.Sockets.Socket.BeginSend%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1676"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-1677">然后再调用<xref:System.Net.Sockets.Socket.BeginSend%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1677">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1678">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginSend%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1678">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="0c8e6-1679">回调方法必须接受<xref:System.IAsyncResult>返回的<xref:System.Net.Sockets.Socket.BeginSend%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1679">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1680">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>参数来获取发送<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1680">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1681">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndSend%2A>方法成功完成发送操作并返回发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1681">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="0c8e6-1682">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.EndSend%2A>会阻塞，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1682">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-1683">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.EndSend%2A>会阻塞，直到某些缓冲区已发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1683">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="0c8e6-1684">如果的返回值<xref:System.Net.Sockets.Socket.EndSend%2A>指示的缓冲区不是完全发送，调用<xref:System.Net.Sockets.Socket.BeginSend%2A>方法同样，修改要保存的未发送的数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1684">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="0c8e6-1685">则您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1685">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-1686">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1686">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-1687">成功完成<xref:System.Net.Sockets.Socket.BeginSend%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1687">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1688">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1688">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1689">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1689">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1690">由给定线程启动的所有 i/o 操作被取消时该线程退出。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1690">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="0c8e6-1691">如果在线程退出该操作完成之前，挂起的异步操作可能会失败。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1691">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1692">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1692">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-1693">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1693">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1694">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1694">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1695">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1695">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1696">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1696">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1697">对 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1697">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1698">先前为异步发送已调用过 <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1698">
              <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1699">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1699">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1700">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1700">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSendFile">
      <MemberSignature Language="C#" Value="public void EndSendFile (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendFile(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendFile (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendFile(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSendFile : IAsyncResult -&gt; unit" Usage="socket.EndSendFile asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="0c8e6-1701">
            <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1701">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1702">结束文件的挂起异步发送。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1702">Ends a pending asynchronous send of a file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1703"><xref:System.Net.Sockets.Socket.EndSendFile%2A> 完成异步发送操作中启动<xref:System.Net.Sockets.Socket.BeginSendFile%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1703"><xref:System.Net.Sockets.Socket.EndSendFile%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendFile%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-1704">然后再调用<xref:System.Net.Sockets.Socket.BeginSendFile%2A>，必须创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1704">Before calling <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, you must create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1705">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginSendFile%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1705">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSendFile%2A> returns.</span></span> <span data-ttu-id="0c8e6-1706">回调方法必须接受<xref:System.IAsyncResult>返回对象<xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1706">The callback method must accept the <xref:System.IAsyncResult> object returned by the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1707">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>参数来获取发送<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1707">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1708">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndSendFile%2A>方法才能成功完成发送操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1708">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method to successfully complete the send operation.</span></span>  
  
 <span data-ttu-id="0c8e6-1709">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.EndSendFile%2A>阻止，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1709">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-1710">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.EndSendFile%2A>阻止，直到发送整个文件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1710">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="0c8e6-1711">则您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1711">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-1712">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1712">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-1713">成功完成<xref:System.Net.Sockets.Socket.BeginSendFile%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1713">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1714">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1714">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1715">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1715">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1716">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1716">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1717">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1717">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1718">下面的代码示例创建和连接进行异步通信套接字并开始将文件"text.txt"以异步方式发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1718">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="0c8e6-1719">回调委托调用<xref:System.Net.Sockets.Socket.EndSendFile%2A>完成传输。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1719">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1720">此方法需要 Windows NT。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1720">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1721">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1721">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1722">
            <paramref name="asyncResult" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1722">
              <paramref name="asyncResult" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1723">对 <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1723">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1724">先前曾为异步 <see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> 调用过 <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1724">
              <see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> was previously called for the asynchronous <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1725">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1725">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-1726">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1726">See remarks section below.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendTo">
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndSendTo : IAsyncResult -&gt; int" Usage="socket.EndSendTo result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="0c8e6-1727">结束挂起的、向指定位置进行的异步发送。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1727">Ends a pending asynchronous send to a specific location.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1728">如果成功，则返回已发送的字节数；否则会返回无效 <see cref="T:System.Net.Sockets.Socket" /> 错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1728">If successful, the number of bytes sent; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1729"><xref:System.Net.Sockets.Socket.EndSendTo%2A> 完成异步发送操作中启动<xref:System.Net.Sockets.Socket.BeginSendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1729"><xref:System.Net.Sockets.Socket.EndSendTo%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-1730">然后再调用<xref:System.Net.Sockets.Socket.BeginSendTo%2A>，你需要创建实现一个回调方法<xref:System.AsyncCallback>委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1730">Before calling <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="0c8e6-1731">该回调方法在一个单独的线程中执行，并由系统后调用<xref:System.Net.Sockets.Socket.BeginReceive%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1731">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="0c8e6-1732">回调方法必须接受<xref:System.IAsyncResult>返回的<xref:System.Net.Sockets.Socket.BeginSendTo%2A>方法作为参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1732">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-1733">在回调方法中，调用<xref:System.IAsyncResult.AsyncState%2A>方法<xref:System.IAsyncResult>参数来获取发送<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1733">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1734">获取后<xref:System.Net.Sockets.Socket>，可以调用<xref:System.Net.Sockets.Socket.EndSendTo%2A>方法成功完成发送操作并返回发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1734">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="0c8e6-1735">如果您使用的是无连接协议，<xref:System.Net.Sockets.Socket.EndSendTo%2A>会阻塞，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1735">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-1736">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.EndSendTo%2A>会阻塞，直到发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1736">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="0c8e6-1737">则您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1737">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-1738">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1738">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-1739">成功完成<xref:System.Net.Sockets.Socket.BeginSendTo%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1739">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1740">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1740">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1741">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1741">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1742">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1742">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1743">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1743">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1744">下面的代码示例结束异步发送到特定位置。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1744">The following code example ends an asynchronous send to a specific location.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Async_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Async_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-1745">
            <paramref name="asyncResult" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1745">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-1746">对 <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1746">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1747">先前为异步发送已调用过 <see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1747">
              <see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> was previously called for the asynchronous send.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1748">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1748">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1749">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1749">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.Socket.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1750">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 是否仅允许一个进程绑定到端口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1750">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows only one process to bind to a port.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1751">如果 <see cref="T:System.Net.Sockets.Socket" /> 仅允许一个套接字绑定到特定端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1751">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows only one socket to bind to a specific port; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1752">默认值是<see langword="true" />Windows Server 2003 和 Windows XP Service Pack 2 和<see langword="false" />对于所有其他版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1752">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2, and <see langword="false" /> for all other versions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1753">如果<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>是`false`，可以使用多个套接字<xref:System.Net.Sockets.Socket.Bind%2A>方法绑定到特定端口; 但是只有一个套接字可以执行对发送到端口的网络流量的操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1753">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `false`, multiple sockets can use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a specific port; however only one of the sockets can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="0c8e6-1754">如果尝试使用多个套接字<xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29>方法绑定到特殊端口时，则使用更具体的 IP 地址之一将处理发送到该端口的网络流量。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1754">If more than one socket attempts to use the <xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29> method to bind to a particular port, then the one with the more specific IP address will handle the network traffic sent to that port.</span></span>  
  
 <span data-ttu-id="0c8e6-1755">如果<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>是`true`，首次使用<xref:System.Net.Sockets.Socket.Bind%2A>方法来尝试绑定到特定端口，而不考虑 Internet 协议 (IP) 地址，将会成功; 的所有后续使用<xref:System.Net.Sockets.Socket.Bind%2A>方法来尝试绑定到该端口将失败，直到销毁原始绑定套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1755">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `true`, the first use of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to a particular port, regardless of Internet Protocol (IP) address, will succeed; all subsequent uses of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to that port will fail until the original bound socket is destroyed.</span></span>  
  
 <span data-ttu-id="0c8e6-1756">此属性必须设置前<xref:System.Net.Sockets.Socket.Bind%2A>被调用; 否则为<xref:System.InvalidOperationException>将引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1756">This property must be set before <xref:System.Net.Sockets.Socket.Bind%2A> is called; otherwise an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1757">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1757">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1758">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1758">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1759">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1759">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1760">已为此 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 调用了 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1760">
              <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> has been called for this <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Socket ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="socket.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1761">释放 <see cref="T:System.Net.Sockets.Socket" /> 类使用的资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1761">Frees resources used by the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1762"><xref:System.Net.Sockets.Socket>类终结器调用<xref:System.Net.Sockets.Socket.Close%2A>方法以关闭<xref:System.Net.Sockets.Socket>并释放与关联的资源<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1762">The <xref:System.Net.Sockets.Socket> class finalizer calls the <xref:System.Net.Sockets.Socket.Close%2A> method to close the <xref:System.Net.Sockets.Socket> and free resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="socket.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1763">返回 <see cref="T:System.Net.Sockets.Socket" /> 选项的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1763">Returns the value of a <see cref="T:System.Net.Sockets.Socket" /> option.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public object GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName -&gt; obj" Usage="socket.GetSocketOption (optionLevel, optionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="0c8e6-1764">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1764">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="0c8e6-1765">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1765">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1766">返回指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项的值，表示为一个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1766">Returns the value of a specified <see cref="T:System.Net.Sockets.Socket" /> option, represented as an object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1767">一个对象，表示选项的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1767">An object that represents the value of the option.</span>
          </span>
          <span data-ttu-id="0c8e6-1768">当将 <paramref name="optionName" /> 参数设置为 <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> 时，返回值为 <see cref="T:System.Net.Sockets.LingerOption" /> 类的一个实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1768">When the <paramref name="optionName" /> parameter is set to <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> the return value is an instance of the <see cref="T:System.Net.Sockets.LingerOption" /> class.</span>
          </span>
          <span data-ttu-id="0c8e6-1769">当将 <paramref name="optionName" /> 设置为 <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> 或 <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" /> 时，返回值为 <see cref="T:System.Net.Sockets.MulticastOption" /> 类的一个实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1769">When <paramref name="optionName" /> is set to <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> or <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />, the return value is an instance of the <see cref="T:System.Net.Sockets.MulticastOption" /> class.</span>
          </span>
          <span data-ttu-id="0c8e6-1770">当 <paramref name="optionName" /> 为其他任何值时，返回值为整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1770">When <paramref name="optionName" /> is any other value, the return value is an integer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1771"><xref:System.Net.Sockets.Socket> 选项将确定当前的行为<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1771"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1772">使用此重载来获取<xref:System.Net.Sockets.SocketOptionName.Linger>， <xref:System.Net.Sockets.SocketOptionName.AddMembership>，并<xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket>选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1772">Use this overload to get the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="0c8e6-1773">有关<xref:System.Net.Sockets.SocketOptionName.Linger>选项，请使用<xref:System.Net.Sockets.Socket>为`optionLevel`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1773">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="0c8e6-1774">有关<xref:System.Net.Sockets.SocketOptionName.AddMembership>并<xref:System.Net.Sockets.SocketOptionName.DropMembership>，使用<xref:System.Net.Sockets.SocketOptionLevel.IP>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1774">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="0c8e6-1775">如果你想要设置任何上面列出的选项的值，请使用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1775">If you want to set the value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1776">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1776">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1777">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1777">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1778">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1778">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1779">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1779">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1780">下面的代码示例检索<xref:System.Net.Sockets.LingerOption>和<xref:System.Net.Sockets.Socket.Send%2A>超时值，并显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1780">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1781">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1781">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-1782">- 或 -  <paramref name="optionName" /> 设置为不支持的值 <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1782">-or-  <paramref name="optionName" /> was set to the unsupported value <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1783">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1783">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public void GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * byte[] -&gt; unit" Usage="socket.GetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="0c8e6-1784">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1784">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="0c8e6-1785">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1785">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="0c8e6-1786">
            <see cref="T:System.Byte" /> 类型的数组，用于接收选项设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1786">An array of type <see cref="T:System.Byte" /> that is to receive the option setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1787">返回指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置，表示为字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1787">Returns the specified <see cref="T:System.Net.Sockets.Socket" /> option setting, represented as a byte array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1788"><xref:System.Net.Sockets.Socket> 选项将确定当前的行为<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1788"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1789">此方法成功完成后，通过将指定的数组`optionValue`参数包含指定的值<xref:System.Net.Sockets.Socket>选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1789">Upon successful completion of this method, the array specified by the `optionValue` parameter contains the value of the specified <xref:System.Net.Sockets.Socket> option.</span></span>  
  
 <span data-ttu-id="0c8e6-1790">时的长度`optionValue`数组是比存储指定的值所需的字节数小<xref:System.Net.Sockets.Socket>选项，<xref:System.Net.Sockets.Socket.GetSocketOption%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1790">When the length of the `optionValue` array is smaller than the number of bytes required to store the value of the specified <xref:System.Net.Sockets.Socket> option, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1791">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1791">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1792">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1792">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="0c8e6-1793">对于任何由布尔值或整数表示的套接字使用此重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1793">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1794">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1794">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1795">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1795">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1796">下面的代码示例检索<xref:System.Net.Sockets.LingerOption>和<xref:System.Net.Sockets.Socket.Send%2A>超时值，并显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1796">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1797">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1797">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-1798">\- 或 -  在 .NET Compact Framework 应用程序中，Windows CE 默认缓冲区的空间被设置为 32768 字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1798">\- or -  In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span>
          </span>
          <span data-ttu-id="0c8e6-1799">通过调用 <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />，可以更改每个套接字缓冲区的空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1799">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1800">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1800">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public byte[] GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionLength As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionLength);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * int -&gt; byte[]" Usage="socket.GetSocketOption (optionLevel, optionName, optionLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="0c8e6-1801">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1801">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="0c8e6-1802">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1802">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionLength">
          <span data-ttu-id="0c8e6-1803">所需返回值的长度（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1803">The length, in bytes, of the expected return value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1804">返回数组中指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1804">Returns the value of the specified <see cref="T:System.Net.Sockets.Socket" /> option in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1805">
            <see cref="T:System.Byte" /> 类型的数组，它包含套接字选项的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1805">An array of type <see cref="T:System.Byte" /> that contains the value of the socket option.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1806">`optionLength`参数设置返回的字节数组的最大大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1806">The `optionLength` parameter sets the maximum size of the returned byte array.</span></span> <span data-ttu-id="0c8e6-1807">如果该选项的值需要较少的字节，该数组将包含仅的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1807">If the option value requires fewer bytes, the array will contain only that many bytes.</span></span> <span data-ttu-id="0c8e6-1808">如果该选项的值需要更多字节<xref:System.Net.Sockets.Socket.GetSocketOption%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1808">If the option value requires more bytes, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1809">对于任何由布尔值或整数表示的套接字使用此重载。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1809">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1810">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1810">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1811">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1811">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1812">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1812">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1813">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1813">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1814">下面的代码示例检索<xref:System.Net.Sockets.LingerOption>和<xref:System.Net.Sockets.Socket.Send%2A>超时值，并显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1814">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1815">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1815">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-1816">\- 或 -  在 .NET Compact Framework 应用程序中，Windows CE 默认缓冲区的空间被设置为 32768 字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1816">\- or -  In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span>
          </span>
          <span data-ttu-id="0c8e6-1817">通过调用 <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />，可以更改每个套接字缓冲区的空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1817">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1818">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1818">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Net.Sockets.Socket.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1819">获取 <see cref="T:System.Net.Sockets.Socket" /> 的操作系统句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1819">Gets the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1820">一个 <see cref="T:System.IntPtr" />，它表示 <see cref="T:System.Net.Sockets.Socket" /> 的操作系统句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1820">An <see cref="T:System.IntPtr" /> that represents the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IOControl">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1821">为 <see cref="T:System.Net.Sockets.Socket" /> 设置低级别操作模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1821">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (int ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(int32 ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IOControl (ioControlCode As Integer, optionInValue As Byte(), optionOutValue As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(int ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberSignature Language="F#" Value="member this.IOControl : int * byte[] * byte[] -&gt; int" Usage="socket.IOControl (ioControlCode, optionInValue, optionOutValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Int32" />
        <Parameter Name="optionInValue" Type="System.Byte[]" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ioControlCode">
          <span data-ttu-id="0c8e6-1822">一个 <see cref="T:System.Int32" /> 值，该值指定要执行的操作的控制代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1822">An <see cref="T:System.Int32" /> value that specifies the control code of the operation to perform.</span>
          </span>
        </param>
        <param name="optionInValue">
          <span data-ttu-id="0c8e6-1823">一个 <see cref="T:System.Byte" /> 数组，它包含操作需要的输入数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1823">A <see cref="T:System.Byte" /> array that contains the input data required by the operation.</span>
          </span>
        </param>
        <param name="optionOutValue">
          <span data-ttu-id="0c8e6-1824">一个 <see cref="T:System.Byte" /> 数组，它包含操作返回的输出数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1824">A <see cref="T:System.Byte" /> array that contains the output data returned by the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1825">使用数字控制代码，为 <see cref="T:System.Net.Sockets.Socket" /> 设置低级操作模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1825">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using numerical control codes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1826">
            <paramref name="optionOutValue" /> 参数中的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1826">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1827"><xref:System.Net.Sockets.Socket.IOControl%2A>方法提供对操作系统的低级别访问权限<xref:System.Net.Sockets.Socket>基础的当前实例<xref:System.Net.Sockets.Socket>类。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1827">The <xref:System.Net.Sockets.Socket.IOControl%2A> method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="0c8e6-1828">有关详细信息，请参阅 MSDN 库中的 WSAIoctl 文档。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1828">For more information, see the WSAIoctl documentation in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1829">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1829">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1830">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1830">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1831">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1831">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1832">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1832">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1833">下面的代码示例将 FIONREAD 和可用属性的结果进行比较。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1833">The following code example compares the results of FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1834">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1834">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1835">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1835">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1836">尝试不使用 <see cref="P:System.Net.Sockets.Socket.Blocking" /> 属性更改阻止模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1836">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-1837">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1837">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0c8e6-1838">若要执行非托管的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1838">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="0c8e6-1839">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1839">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(valuetype System.Net.Sockets.IOControlCode ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(System::Net::Sockets::IOControlCode ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberSignature Language="F#" Value="member this.IOControl : System.Net.Sockets.IOControlCode * byte[] * byte[] -&gt; int" Usage="socket.IOControl (ioControlCode, optionInValue, optionOutValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Net.Sockets.IOControlCode" />
        <Parameter Name="optionInValue" Type="System.Byte[]" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ioControlCode">
          <span data-ttu-id="0c8e6-1840">一个 <see cref="T:System.Net.Sockets.IOControlCode" /> 值，它指定要执行的操作的控制代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1840">A <see cref="T:System.Net.Sockets.IOControlCode" /> value that specifies the control code of the operation to perform.</span>
          </span>
        </param>
        <param name="optionInValue">
          <span data-ttu-id="0c8e6-1841">
            <see cref="T:System.Byte" /> 类型的数组，包含操作要求的输入数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1841">An array of type <see cref="T:System.Byte" /> that contains the input data required by the operation.</span>
          </span>
        </param>
        <param name="optionOutValue">
          <span data-ttu-id="0c8e6-1842">
            <see cref="T:System.Byte" /> 类型的数组，包含由操作返回的输出数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1842">An array of type <see cref="T:System.Byte" /> that contains the output data returned by the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1843">使用 <see cref="T:System.Net.Sockets.Socket" /> 枚举指定控制代码，为 <see cref="T:System.Net.Sockets.IOControlCode" /> 设置低级操作模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1843">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using the <see cref="T:System.Net.Sockets.IOControlCode" /> enumeration to specify control codes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1844">
            <paramref name="optionOutValue" /> 参数中的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1844">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1845">此方法提供对操作系统的低级别访问权限<xref:System.Net.Sockets.Socket>基础的当前实例<xref:System.Net.Sockets.Socket>类。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1845">This method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="0c8e6-1846">有关详细信息，请参阅 MSDN 库中的 WSAIoctl 文档。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1846">For more, see the WSAIoctl documentation in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1847">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1847">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1848">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1848">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1849">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1849">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1850">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1850">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1851">下面的代码示例将调用的结果进行比较<xref:System.Net.Sockets.Socket.IOControl%2A>与<xref:System.Net.Sockets.IOControlCode.DataToRead>和<xref:System.Net.Sockets.Socket.Available%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1851">The following code example compares the results of calling <xref:System.Net.Sockets.Socket.IOControl%2A> with <xref:System.Net.Sockets.IOControlCode.DataToRead> and the <xref:System.Net.Sockets.Socket.Available%2A> property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl1/CPP/iocontrolcode.cpp#1)]
 [!code-csharp[NCLSocketIoControl1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl1/CS/iocontrolcode.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1852">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1852">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1853">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1853">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-1854">尝试不使用 <see cref="P:System.Net.Sockets.Socket.Blocking" /> 属性更改阻止模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1854">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0c8e6-1855">若要执行非托管的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1855">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="0c8e6-1856">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1856">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsBound">
      <MemberSignature Language="C#" Value="public bool IsBound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBound" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.IsBound" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBound { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBound : bool" Usage="System.Net.Sockets.Socket.IsBound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1857">获取一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 是否绑定到特定本地端口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1857">Gets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is bound to a specific local port.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1858">如果 <see cref="T:System.Net.Sockets.Socket" /> 绑定到本地端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1858">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is bound to a local port; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1859">一个套接字被视为绑定到本地端口，如果它显式绑定通过调用<xref:System.Net.Sockets.Socket.Bind%2A>方法，或通过调用成员，例如隐式绑定<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.SendTo%2A>，或<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>，它使用临时的本地端口 （了可用端口大于1024，由操作系统选择。)服务器使用<xref:System.Net.Sockets.Socket.Bind%2A>方法，以便客户端可能会连接到其绑定到的已知端口。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1859">A socket is considered bound to a local port if it is explicitly bound by calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, or implicitly bound by calling members like <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, which use an ephemeral local port (a free port greater than 1024, selected by the operating system.) Servers use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a well-known port so that clients may connect to them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1860">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.IsBound%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1860">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.IsBound%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LingerState : System.Net.Sockets.LingerOption with get, set" Usage="System.Net.Sockets.Socket.LingerState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1861">获取或设置一个值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 在尝试发送所有挂起数据时是否延迟关闭套接字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1861">Gets or sets a value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> will delay closing a socket in an attempt to send all pending data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1862">一个 <see cref="T:System.Net.Sockets.LingerOption" />，它指定关闭套接字时如何逗留。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1862">A <see cref="T:System.Net.Sockets.LingerOption" /> that specifies how to linger while closing a socket.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1863"><xref:System.Net.Sockets.Socket.LingerState%2A>属性更改的方式<xref:System.Net.Sockets.Socket.Close%2A>方法的行为。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1863">The <xref:System.Net.Sockets.Socket.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="0c8e6-1864">当集修改的条件下的连接可以重置通过 Winsock 时此属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1864">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="0c8e6-1865">连接重置仍会发生基于 IP 协议行为。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1865">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="0c8e6-1866">此属性控制的面向连接的连接是在调用后仍保持打开的时间长度<xref:System.Net.Sockets.Socket.Close%2A>仍然要发送数据时。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1866">This property controls the length of time that a connection-oriented connection will remain open after a call to <xref:System.Net.Sockets.Socket.Close%2A> when data remains to be sent.</span></span>  
  
 <span data-ttu-id="0c8e6-1867">当调用方法以将数据发送到对等方时，此数据位于传出的网络缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1867">When you call methods to send data to a peer, this data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="0c8e6-1868">此属性可以用于确保此数据发送到远程主机之前<xref:System.Net.Sockets.TcpClient.Close%2A>方法用于删除连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1868">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="0c8e6-1869">若要启用延迟，创建<xref:System.Net.Sockets.LingerOption>实例包含所需的值，并设置<xref:System.Net.Sockets.Socket.LingerState%2A>指向此实例的属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1869">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.Socket.LingerState%2A> property to this instance.</span></span>  
  
 <span data-ttu-id="0c8e6-1870">下表描述的行为<xref:System.Net.Sockets.Socket.Close%2A>的可能值的方法<xref:System.Net.Sockets.LingerOption.Enabled%2A>属性和<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在<xref:System.Net.Sockets.Socket.LingerState%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1870">The following table describes the behavior of the <xref:System.Net.Sockets.Socket.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
|<span data-ttu-id="0c8e6-1871">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1871">LingerState.Enabled</span></span>|<span data-ttu-id="0c8e6-1872">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1872">LingerState.LingerTime</span></span>|<span data-ttu-id="0c8e6-1873">行为</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1873">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="0c8e6-1874">`false` （禁用），默认值</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1874">`false` (disabled), the default value</span></span>|<span data-ttu-id="0c8e6-1875">不适用，超时值 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1875">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="0c8e6-1876">尝试发送挂起的数据，直到默认 IP 协议超时时间已到。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1876">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="0c8e6-1877">`true` （已启用）</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1877">`true` (enabled)</span></span>|<span data-ttu-id="0c8e6-1878">非零值超时</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1878">A nonzero time-out</span></span>|<span data-ttu-id="0c8e6-1879">尝试发送挂起的数据，直到指定的超时时间已到，如果该尝试失败，然后 Winsock 重置连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1879">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="0c8e6-1880">`true` （已启用）</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1880">`true` (enabled)</span></span>|<span data-ttu-id="0c8e6-1881">零个超时时间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1881">A zero timeout.</span></span>|<span data-ttu-id="0c8e6-1882">将放弃所有挂起的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1882">Discards any pending data.</span></span> <span data-ttu-id="0c8e6-1883">对于面向连接的套接字 (例如 TCP)，Winsock 重置连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1883">For connection-oriented socket (TCP, for example), Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="0c8e6-1884">IP 堆栈计算默认 IP 协议的超时期限为使用基于连接的往返行程时间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1884">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="0c8e6-1885">在大多数情况下，计算堆栈的超时值是个应用程序定义的更多相关。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1885">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="0c8e6-1886">这是一个套接字的默认行为时<xref:System.Net.Sockets.Socket.LingerState%2A>未设置属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1886">This is the default behavior for a socket when the <xref:System.Net.Sockets.Socket.LingerState%2A> property is not set.</span></span>  
  
 <span data-ttu-id="0c8e6-1887">当<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在<xref:System.Net.Sockets.Socket.LingerState%2A>属性设置为大于默认 IP 协议超时时间，则默认 IP 协议超时时间仍将应用，并替代。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1887">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1888">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.LingerState%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1888">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1889">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1889">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1890">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1890">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Listen">
      <MemberSignature Language="C#" Value="public void Listen (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Listen(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Listen (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Listen(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Listen : int -&gt; unit" Usage="socket.Listen backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">
          <span data-ttu-id="0c8e6-1891">挂起连接队列的最大长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1891">The maximum length of the pending connections queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1892">将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1892">Places a <see cref="T:System.Net.Sockets.Socket" /> in a listening state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1893"><xref:System.Net.Sockets.Socket.Listen%2A> 会导致一个面向连接的<xref:System.Net.Sockets.Socket>来侦听传入的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1893"><xref:System.Net.Sockets.Socket.Listen%2A> causes a connection-oriented <xref:System.Net.Sockets.Socket> to listen for incoming connection attempts.</span></span> <span data-ttu-id="0c8e6-1894">`backlog`参数指定可排队等待接受的传入连接的数量。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1894">The `backlog` parameter specifies the number of incoming connections that can be queued for acceptance.</span></span> <span data-ttu-id="0c8e6-1895">若要确定最大可以指定的连接数，请检索<xref:System.Net.Sockets.SocketOptionName.MaxConnections>值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1895">To determine the maximum number of connections you can specify, retrieve the <xref:System.Net.Sockets.SocketOptionName.MaxConnections> value.</span></span> <span data-ttu-id="0c8e6-1896"><xref:System.Net.Sockets.Socket.Listen%2A> 不会阻止。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1896"><xref:System.Net.Sockets.Socket.Listen%2A> does not block.</span></span>  
  
 <span data-ttu-id="0c8e6-1897">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1897">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1898">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1898">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="0c8e6-1899">使用<xref:System.Net.Sockets.Socket.Accept%2A>或<xref:System.Net.Sockets.Socket.BeginAccept%2A>以接受来自队列的连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1899">Use <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> to accept a connection from the queue.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1900">必须调用<xref:System.Net.Sockets.Socket.Bind%2A>方法之前调用<xref:System.Net.Sockets.Socket.Listen%2A>，或<xref:System.Net.Sockets.Socket.Listen%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1900">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method before calling <xref:System.Net.Sockets.Socket.Listen%2A>, or <xref:System.Net.Sockets.Socket.Listen%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1901">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1901">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1902">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1902">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1903">积压工作参数被限制为不同的值，具体取决于操作系统。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1903">The backlog parameter is limited to different values depending on the Operating System.</span></span> <span data-ttu-id="0c8e6-1904">可以指定较高的值，但在积压工作将受到限制的基于在操作系统上。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1904">You may specify a higher value, but the backlog will be limited based on the Operating System.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1905">下面的代码示例使用<xref:System.Net.Sockets.Socket>来侦听传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1905">The following code example uses <xref:System.Net.Sockets.Socket> to listen for incoming connections.</span></span>  
  
 [!code-cpp[Classic Socket.Listen Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Listen Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Listen Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Listen Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Listen Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Listen Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1906">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1906">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1907">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1907">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="LocalEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LocalEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndPoint : System.Net.EndPoint" Usage="System.Net.Sockets.Socket.LocalEndPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1908">获取本地终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1908">Gets the local endpoint.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1909">
            <see cref="T:System.Net.EndPoint" /> 当前用以进行通信的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1909">The <see cref="T:System.Net.EndPoint" /> that the <see cref="T:System.Net.Sockets.Socket" /> is using for communications.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1910"><xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性获取<xref:System.Net.EndPoint>，其中包含到其中的本地 IP 地址和端口号在<xref:System.Net.Sockets.Socket>绑定。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1910">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property gets an <xref:System.Net.EndPoint> that contains the local IP address and port number to which your <xref:System.Net.Sockets.Socket> is bound.</span></span> <span data-ttu-id="0c8e6-1911">您必须将此对象转换<xref:System.Net.EndPoint>到<xref:System.Net.IPEndPoint>之前检索的任何信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1911">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="0c8e6-1912">然后，可以调用<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>方法来检索本地<xref:System.Net.IPAddress>，和<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>方法来检索本地端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1912">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the local <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the local port number.</span></span>  
  
 <span data-ttu-id="0c8e6-1913"><xref:System.Net.Sockets.Socket.LocalEndPoint%2A>进行调用后，属性通常设置<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1913">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property is usually set after you make a call to the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="0c8e6-1914">如果你允许系统将套接字的本地 IP 地址和端口号分配<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性将设置后第一次 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1914">If you allow the system to assign your socket's local IP address and port number, the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property will be set after the first I/O operation.</span></span> <span data-ttu-id="0c8e6-1915">对于面向连接的协议，第一次 I/O 操作将是调用<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1915">For connection-oriented protocols, the first I/O operation would be a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-1916">对于无连接协议，第一次 I/O 操作将是任何发送或接收调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1916">For connectionless protocols, the first I/O operation would be any of the send or receive calls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1917">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1917">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1918">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1918">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1919">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1919">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1920">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1920">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1921">下面的代码示例检索并显示本地和远程终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1921">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1922">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1922">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1923">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1923">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.Socket.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1924">获取或设置一个值，该值指定传出的多路广播数据包是否传递到发送应用程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1924">Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1925">如果 <see cref="T:System.Net.Sockets.Socket" /> 接收传出的多路广播数据包，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1925">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> receives outgoing multicast packets; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1926">多播是在 Internet 上的多对多通信的可缩放方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1926">Multicast is a scalable method for many-to-many communication on the Internet.</span></span> <span data-ttu-id="0c8e6-1927">处理订阅的多播地址;然后，可由其他每个订阅的多播地址的过程接收已订阅进程发送任何数据包。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1927">A process subscribes to a multicast address; then, any packets sent by a subscribed process are received by every other process subscribed to the multicast address.</span></span>  
  
 <span data-ttu-id="0c8e6-1928">传输控制协议 (TCP) 套接字上设置此属性不会影响。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1928">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1929">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.MulticastLoopback%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1929">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.MulticastLoopback%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1930">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1930">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1931">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1931">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NoDelay : bool with get, set" Usage="System.Net.Sockets.Socket.NoDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1932">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定流 <see cref="T:System.Net.Sockets.Socket" /> 是否正在使用 Nagle 算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1932">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the stream <see cref="T:System.Net.Sockets.Socket" /> is using the Nagle algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1933">如果 <see cref="T:System.Net.Sockets.Socket" /> 使用 Nagle 算法，则为 <see langword="false" />；否则为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1933">
              <see langword="false" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses the Nagle algorithm; otherwise, <see langword="true" />.</span>
          </span>
          <span data-ttu-id="0c8e6-1934">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1934">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1935">Nagle 算法设计为套接字缓冲小数据包，然后组合并在某些情况下一个数据包中发送，从而减少网络流量。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1935">The Nagle algorithm is designed to reduce network traffic by causing the socket to buffer small packets and then combine and send them in one packet under certain circumstances.</span></span> <span data-ttu-id="0c8e6-1936">TCP 数据包包含 40 个字节的标头以及发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1936">A TCP packet consists of 40 bytes of header plus the data being sent.</span></span> <span data-ttu-id="0c8e6-1937">与 TCP 发送的数据的小数据包，从而从 TCP 标头的开销会变为网络流量的重要组成部分。在负载较重的网络上导致这种开销的拥塞可能会导致丢失的数据报和重传现象，以及由阻塞导致过多的传播时间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1937">When small packets of data are sent with TCP, the overhead resulting from the TCP header can become a significant part of the network traffic.On heavily loaded networks, the congestion resulting from this overhead can result in lost datagrams and retransmissions, as well as excessive propagation time caused by congestion.</span></span> <span data-ttu-id="0c8e6-1938">Nagle 算法禁止发送的新 TCP segmentswhen 新传出数据到达从用户中，如果在连接上的任何处数据仍未确认。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1938">The Nagle algorithm inhibits the sending of new TCP segmentswhen new outgoing data arrives from the user if any previouslytransmitted data on the connection remains unacknowledged.</span></span>  
  
 <span data-ttu-id="0c8e6-1939">大多数网络应用程序应使用 Nagle 算法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1939">The majority of network applications should use the Nagle algorithm.</span></span>  
  
 <span data-ttu-id="0c8e6-1940">用户数据报协议 (UDP) 套接字上设置此属性不会影响。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1940">Setting this property on a User Datagram Protocol (UDP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1941">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.NoDelay%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1941">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.NoDelay%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1942">尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1942">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1943">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1943">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv4 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.OSSupportsIPv4 : bool" Usage="System.Net.Sockets.Socket.OSSupportsIPv4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1944">指示基础操作系统和网络适配器是否支持 Internet 协议第 4 版 (IPv4)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1944">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1945">如果操作系统和网络适配器支持 IPv4 协议，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1945">
              <see langword="true" /> if the operating system and network adaptors support the IPv4 protocol; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1946">操作系统可能会支持 IPv4 和 IPv6 协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1946">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv6 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.OSSupportsIPv6 : bool" Usage="System.Net.Sockets.Socket.OSSupportsIPv6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1947">指示基础操作系统和网络适配器是否支持 Internet 协议第 6 版 (IPv6)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1947">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1948">如果操作系统和网络适配器支持 IPv6 协议，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1948">
              <see langword="true" /> if the operating system and network adaptors support the IPv6 protocol; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1949">操作系统可能会支持 IPv4 和 IPv6 协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1949">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public bool Poll (int microSeconds, System.Net.Sockets.SelectMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Poll(int32 microSeconds, valuetype System.Net.Sockets.SelectMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poll (microSeconds As Integer, mode As SelectMode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Poll(int microSeconds, System::Net::Sockets::SelectMode mode);" />
      <MemberSignature Language="F#" Value="member this.Poll : int * System.Net.Sockets.SelectMode -&gt; bool" Usage="socket.Poll (microSeconds, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="microSeconds" Type="System.Int32" />
        <Parameter Name="mode" Type="System.Net.Sockets.SelectMode" />
      </Parameters>
      <Docs>
        <param name="microSeconds">
          <span data-ttu-id="0c8e6-1950">等待响应的时间（以微秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1950">The time to wait for a response, in microseconds.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="0c8e6-1951">
            <see cref="T:System.Net.Sockets.SelectMode" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1951">One of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1952">确定 <see cref="T:System.Net.Sockets.Socket" /> 的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1952">Determines the status of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1953">基于 <paramref name="mode" /> 参数中传递的轮询模式值的 <see cref="T:System.Net.Sockets.Socket" /> 的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1953">The status of the <see cref="T:System.Net.Sockets.Socket" /> based on the polling mode value passed in the <paramref name="mode" /> parameter.</span>
          </span>
          <span data-ttu-id="0c8e6-1954">
            <list type="table">
              <listheader>
                <term> 模式  </term>
                <description> 返回值  </description>
              </listheader>
              <item>
                <term>
                  <see cref="F:System.Net.Sockets.SelectMode.SelectRead" />
                </term>
                <description>
                  <see langword="true" /> 如果已调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 并且连接正在挂起；  - 或 -  如果数据可供读取，则为 <see langword="true" />；  - 或 -  如果已关闭、重置或终止连接，则为 <see langword="true" />；  否则，返回 <see langword="false" />。  </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Net.Sockets.SelectMode.SelectWrite" />
                </term>
                <description>，如果正在处理 <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> 且已成功连接，则为 <see langword="true" />；  - 或 -  如果已发送数据，则为 <see langword="true" />；  否则，返回 <see langword="false" />。  </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Net.Sockets.SelectMode.SelectError" />
                </term>
                <description> 如果正在处理未阻止的 <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />并且连接已失败，则为 <see langword="true" />；  - 或 -  如果未设置 <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> 并且带外数据可用，则为 <see langword="true" />；  否则，返回 <see langword="false" />。  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1954">
              <list type="table">
                <listheader>
                  <term> Mode  </term>
                  <description> Return Value  </description>
                </listheader>
                <item>
                  <term>
                    <see cref="F:System.Net.Sockets.SelectMode.SelectRead" />
                  </term>
                  <description>
                    <see langword="true" /> if <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> has been called and a connection is pending;  -or-  <see langword="true" /> if data is available for reading;  -or-  <see langword="true" /> if the connection has been closed, reset, or terminated;  otherwise, returns <see langword="false" />.  </description>
                </item>
                <item>
                  <term>
                    <see cref="F:System.Net.Sockets.SelectMode.SelectWrite" />
                  </term>
                  <description>
                    <see langword="true" />, if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />, and the connection has succeeded;  -or-  <see langword="true" /> if data can be sent;  otherwise, returns <see langword="false" />.  </description>
                </item>
                <item>
                  <term>
                    <see cref="F:System.Net.Sockets.SelectMode.SelectError" />
                  </term>
                  <description>
                    <see langword="true" /> if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> that does not block, and the connection has failed;  -or-  <see langword="true" /> if <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> is not set and out-of-band data is available;  otherwise, returns <see langword="false" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1955"><xref:System.Net.Sockets.Socket.Poll%2A>方法将检查的状态<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1955">The <xref:System.Net.Sockets.Socket.Poll%2A> method will check the state of the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-1956">指定<xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType>有关`selectMode`参数，以确定如果<xref:System.Net.Sockets.Socket>是可读。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1956">Specify <xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType> for the `selectMode` parameter to determine if the <xref:System.Net.Sockets.Socket> is readable.</span></span> <span data-ttu-id="0c8e6-1957">指定<xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType>来确定如果<xref:System.Net.Sockets.Socket>是可写。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1957">Specify <xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType> to determine if the <xref:System.Net.Sockets.Socket> is writable.</span></span> <span data-ttu-id="0c8e6-1958">使用<xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType>检测错误条件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1958">Use <xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType> to detect an error condition.</span></span> <span data-ttu-id="0c8e6-1959"><xref:System.Net.Sockets.Socket.Poll%2A> 将阻止执行，直到指定的时间段，以测量`microseconds`，结束。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1959"><xref:System.Net.Sockets.Socket.Poll%2A> will block execution until the specified time period, measured in `microseconds`, elapses.</span></span> <span data-ttu-id="0c8e6-1960">设置`microSeconds`参数为负的整数，如果你想要无限期地等待响应。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1960">Set the `microSeconds` parameter to a negative integer if you would like to wait indefinitely for a response.</span></span> <span data-ttu-id="0c8e6-1961">如果你想要检查的多个套接字的状态，您可能更倾向于使用<xref:System.Net.Sockets.Socket.Select%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1961">If you want to check the status of multiple sockets, you might prefer to use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1962">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1962">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1963">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1963">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1964">此方法无法检测到某些类型的连接问题，例如断开的网络电缆，或远程主机意外关闭。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1964">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="0c8e6-1965">您必须尝试发送或接收数据，以检测这些类型的错误。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1965">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1966">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1966">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-1967">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1967">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1968">下面的代码示例创建一个套接字，连接到服务器，并使用<xref:System.Net.Sockets.Socket.Poll%2A>检查套接字的状态。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1968">The following code example creates a socket, connects to a server, and uses <xref:System.Net.Sockets.Socket.Poll%2A> to check the status of the socket.</span></span>  
  
 [!code-cpp[SelectModeExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SelectModeExample/CPP/source.cpp#1)]
 [!code-csharp[SelectModeExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SelectModeExample/CS/source.cs#1)]
 [!code-vb[SelectModeExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SelectModeExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-1969">
            <paramref name="mode" /> 参数不是一个 <see cref="T:System.Net.Sockets.SelectMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1969">The <paramref name="mode" /> parameter is not one of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-1970">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1970">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-1971">请参阅下面的备注。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1971">See remarks below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-1972">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1972">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SelectMode" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.ProtocolType ProtocolType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.ProtocolType ProtocolType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ProtocolType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProtocolType As ProtocolType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::ProtocolType ProtocolType { System::Net::Sockets::ProtocolType get(); };" />
      <MemberSignature Language="F#" Value="member this.ProtocolType : System.Net.Sockets.ProtocolType" Usage="System.Net.Sockets.Socket.ProtocolType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.ProtocolType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1973">获取 <see cref="T:System.Net.Sockets.Socket" /> 的协议类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1973">Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-1974">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1974">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1975"><xref:System.Net.Sockets.Socket.ProtocolType%2A>时设置属性<xref:System.Net.Sockets.Socket>创建，并指定使用的协议<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1975">The <xref:System.Net.Sockets.Socket.ProtocolType%2A> property is set when the <xref:System.Net.Sockets.Socket> is created, and specifies the protocol used by that <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-1976">下面的代码示例显示<xref:System.Net.Sockets.AddressFamily>， <xref:System.Net.Sockets.SocketType>，和<xref:System.Net.Sockets.ProtocolType>到控制台。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1976">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-1977">接收来自绑定的 <see cref="T:System.Net.Sockets.Socket" /> 的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1977">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] -&gt; int" Usage="socket.Receive buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-1978">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1978">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-1979">从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 套接字接收数据，将数据存入接收缓冲区。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1979">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-1980">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-1980">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-1981"><xref:System.Net.Sockets.Socket.Receive%2A>方法将数据读入缓冲区参数并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1981">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-1982">您可以调用<xref:System.Net.Sockets.Socket.Receive%2A>从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1982">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-1983">此重载仅要求您提供接收缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1983">This overload only requires you to provide a receive buffer.</span></span> <span data-ttu-id="0c8e6-1984">缓冲区偏移量的默认值为 0，默认大小为缓冲区参数的长度并<xref:System.Net.Sockets.SocketFlags>默认值为<xref:System.Net.Sockets.SocketFlags.None>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1984">The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="0c8e6-1985">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1985">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-1986"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取数据中建立的远程主机发送过来<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1986">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-1987">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1987">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-1988"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1988"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-1989">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到数据不可用，除非使用设置的超时值<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1989">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-1990">如果超过超时值，<xref:System.Net.Sockets.Socket.Receive%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1990">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1991">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1991">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-1992">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1992">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-1993">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1993">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-1994">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取数量是可用，直到达到缓冲区的大小的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1994">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="0c8e6-1995">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1995">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-1996">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1996">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-1997">如果你收到的数据报大于的大小`buffer`参数，`buffer`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1997">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-1998">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1998">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-1999">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-1999">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2000">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2000">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2001">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2001">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2002">下面的代码示例接收上连接的数据<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2002">The following code example receives data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2003">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2003">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2004">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2004">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2005">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2005">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2006">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2006">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2007">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2007">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2008">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2008">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; int" Usage="socket.Receive buffers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-2009">
            <see cref="T:System.ArraySegment`1" /> 类型的一个 <see cref="T:System.Byte" /> 列表，包含接收的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2009">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2010">从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收数据，将数据存入接收缓冲区列表中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2010">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2011">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2011">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2012">此方法将数据读入的缓冲区参数并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2012">This method reads data into the buffers parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-2013">您可以调用从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2013">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-2014">此重载要求您提供一个或多个接收缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2014">This overload requires you to provide one or more receive buffers.</span></span>  
  
 <span data-ttu-id="0c8e6-2015">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2015">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-2016"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取来自中建立的远程主机连接的数据<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2016">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2017">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2017">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2018"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2018"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-2019">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到数据不可用，除非使用设置的超时值<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2019">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2020">如果超过超时值，<xref:System.Net.Sockets.Socket.Receive%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2020">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2021">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2021">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2022">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2022">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2023">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2023">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2024">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取数量是可用，直到达到缓冲区的大小的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2024">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="0c8e6-2025">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2025">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-2026">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2026">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-2027">如果你收到的数据报大于的大小`buffers`参数，`buffers`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2027">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2028">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2028">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2029">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2029">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="0c8e6-2030">**请注意**此成员时应用程序中启用网络跟踪输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2030">**Note** This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2031">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2031">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2032">
            <paramref name="buffer" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2032">The <paramref name="buffer" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2033">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2033">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2034">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2034">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; -&gt; int" Usage="socket.Receive buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2035">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2035">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2036">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2036">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2037">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，从绑定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 接收数据，将数据存入接收缓冲区。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2037">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2038">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2038">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2039"><xref:System.Net.Sockets.Socket.Receive%2A>方法将数据读入缓冲区参数并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2039">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-2040">您可以调用<xref:System.Net.Sockets.Socket.Receive%2A>从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2040">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-2041">此重载仅要求您提供接收缓冲区和所需<xref:System.Net.Sockets.SocketFlags>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2041">This overload only requires you to provide a receive buffer and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="0c8e6-2042">缓冲区偏移量的默认值为 0，并且大小默认为字节参数的长度。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2042">The buffer offset defaults to 0, and the size defaults to the length of the byte parameter.</span></span>  
  
 <span data-ttu-id="0c8e6-2043">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2043">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-2044"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取数据中建立的远程主机发送过来<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2044">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2045">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2045">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2046"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2046"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-2047">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2047">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-2048">如果您处于非阻止模式，并且没有可用协议堆栈缓冲区中的数据<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2048">If you are in non-blocking mode, and there is no data available in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2049">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2049">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2050">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试您的接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2050">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2051">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取的数据，可最大的缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2051">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available up to the size of the buffer.</span></span> <span data-ttu-id="0c8e6-2052">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2052">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-2053">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2053">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-2054">如果你收到的数据报大于的大小`buffer`参数，`buffer`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2054">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2055">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2055">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2056">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2056">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2057">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2057">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2058">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2058">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2059">下面的代码示例指定数据缓冲区并<xref:System.Net.Sockets.SocketFlags>上连接接收数据的<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2059">The following code example specifies a data buffer, and <xref:System.Net.Sockets.SocketFlags> for receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2060">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2060">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2061">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2061">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2062">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2062">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2063">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2063">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2064">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2064">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2065">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2065">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffers, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-2066">
            <see cref="T:System.ArraySegment`1" /> 类型的一个 <see cref="T:System.Byte" /> 列表，包含接收的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2066">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2067">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2067">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2068">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，从绑定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 接收数据，将数据存入接收缓冲区列表中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2068">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2069">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2069">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2070">此方法将数据读入`buffers`参数，并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2070">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-2071">您可以调用从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2071">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-2072">此重载要求您提供一个或多个接收缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2072">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="0c8e6-2073"><xref:System.Net.Sockets.SocketFlags>默认值为<xref:System.Net.Sockets.SocketFlags.None>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2073">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="0c8e6-2074">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2074">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-2075"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取来自中建立的远程主机连接的数据<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2075">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2076">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2076">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2077"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2077"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-2078">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到数据不可用，除非使用设置的超时值<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2078">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2079">如果超过超时值，<xref:System.Net.Sockets.Socket.Receive%2A>调用，则会引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2079">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2080">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2080">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2081">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2081">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2082">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2082">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2083">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取数量是可用，直到达到缓冲区的大小的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2083">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="0c8e6-2084">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2084">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-2085">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2085">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-2086">如果你收到的数据报大于的大小`buffers`参数，`buffers`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2086">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2087">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2087">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2088">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2088">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2089">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2089">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2090">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2090">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2091">下面的代码示例演示如何在连接上接收数据<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2091">The following code example demonstrates how to receive data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CPP/sendgeneric.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CS/sendgeneric.cs#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2092">
            <paramref name="buffers" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2092">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2093">- 或 -  <paramref name="buffers" />.Count 是零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2093">-or-  <paramref name="buffers" />.Count is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2094">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2094">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2095">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2095">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2096">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2096">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2097">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2097">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2098">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2098">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2099">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2099">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2100">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2100">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2101">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，从绑定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 接收指定字节数的数据，并将数据存入接收缓冲区。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2101">Receives the specified number of bytes of data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2102">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2102">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2103"><xref:System.Net.Sockets.Socket.Receive%2A>方法将数据读入`buffer`参数，并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2103">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the `buffer` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-2104">您可以调用<xref:System.Net.Sockets.Socket.Receive%2A>从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2104">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-2105">此重载仅要求您提供接收缓冲区中，你想要接收的字节数和所需的数量<xref:System.Net.Sockets.SocketFlags>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2105">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 <span data-ttu-id="0c8e6-2106">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2106">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-2107"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取数据中建立的远程主机发送过来<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2107">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2108">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2108">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2109"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2109"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-2110">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到数据不可用，除非使用设置的超时值<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2110">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2111">如果超过超时值，<xref:System.Net.Sockets.Socket.Receive%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2111">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2112">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2112">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, The <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2113">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2113">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2114">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试您的接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2114">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2115">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取的数据是可用，直到达到指定的字节数`size`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2115">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="0c8e6-2116">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2116">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-2117">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2117">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-2118">如果你收到的数据报大于的大小`buffer`参数，`buffer`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2118">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2119">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2119">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2120">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2120">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2121">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2121">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2122">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2122">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2123">以下接收到找到的数据`buffer`，并指定<xref:System.Net.Sockets.SocketFlags.None>为<xref:System.Net.Sockets.SocketFlags>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2123">The following receives the data found into `buffer`, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Send_Recieve#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Recieve/CPP/source.cpp#4)]
 [!code-csharp[Socket_Send_Recieve#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Recieve/CS/source.cs#4)]
 [!code-vb[Socket_Send_Recieve#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Recieve/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2124">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2124">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2125">
            <paramref name="size" /> 超出了 <paramref name="buffer" /> 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2125">
              <paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2126">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2126">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2127">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2127">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2128">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2128">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2129">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2129">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2130">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2130">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffers, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-2131">
            <see cref="T:System.ArraySegment`1" /> 类型的一个 <see cref="T:System.Byte" /> 列表，包含接收的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2131">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2132">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2132">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-2133">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2133">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2134">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，从绑定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 接收数据，将数据存入接收缓冲区列表中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2134">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2135">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2135">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2136">此方法将数据读入`buffers`参数，并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2136">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-2137">您可以调用从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2137">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-2138">此重载要求您提供一个或多个接收缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2138">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="0c8e6-2139"><xref:System.Net.Sockets.SocketFlags>默认值为<xref:System.Net.Sockets.SocketFlags.None>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2139">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="0c8e6-2140">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2140">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-2141"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取来自中建立的远程主机连接的数据<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2141">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2142">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2142">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2143"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2143"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-2144">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到数据不可用，除非使用设置的超时值<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2144">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2145">如果超过超时值，<xref:System.Net.Sockets.Socket.Receive%2A>调用，则会引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2145">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2146">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2146">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2147">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2147">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2148">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2148">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2149">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取数量是可用，直到达到缓冲区的大小的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2149">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="0c8e6-2150">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2150">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-2151">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2151">If you are using a connectionless <xref:System.Net.Sockets.Socket>,<xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-2152">如果你收到的数据报大于的大小`buffers`参数，`buffers`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2152">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2153">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2153">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2154">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2154">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2155">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2155">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2156">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2156">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2157">
            <paramref name="buffers" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2157">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2158">- 或 -  <paramref name="buffers" />.Count 是零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2158">-or-  <paramref name="buffers" />.Count is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2159">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2159">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2160">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2160">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2161">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2161">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2162">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2162">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffer, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, offset, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2163">类型 <see cref="T:System.Byte" /> 的数组，它是所接受的数据的存储位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2163">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-2164">
            <c>buffer</c> 中存储所接收数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2164">The location in <c>buffer</c> to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2165">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2165">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2166">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2166">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2167">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，从绑定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 接收指定的字节数，存入接收缓冲区的指定偏移量位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2167">Receives the specified number of bytes from a bound <see cref="T:System.Net.Sockets.Socket" /> into the specified offset position of the receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2168">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2168">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2169"><xref:System.Net.Sockets.Socket.Receive%2A>方法将数据读入缓冲区参数并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2169">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-2170">您可以调用<xref:System.Net.Sockets.Socket.Receive%2A>从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2170">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-2171">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2171">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-2172"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取数据中建立的远程主机发送过来<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2172">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2173">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2173">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2174"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2174"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-2175">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到数据不可用，除非使用设置的超时值<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2175">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2176">如果超过超时值，<xref:System.Net.Sockets.Socket.Receive%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2176">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2177">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2177">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2178">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2178">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="0c8e6-2179">请参阅下面的备注。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2179">See Remarks below.</span></span> <span data-ttu-id="0c8e6-2180">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2180">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2181">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2181">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2182">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取所有可用的最多指定大小参数的字节数的数量的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2182">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="0c8e6-2183">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2183">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-2184">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2184">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-2185">如果你收到的数据报大于的大小`buffer`参数，`buffer`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2185">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2186">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2186">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2187">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2187">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2188">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2188">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2189">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2189">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2190">下面的代码示例上连接接收数据之前指定数据缓冲区、 偏移、 大小和套接字标志<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2190">The following code example specifies a data buffer, an offset, a size, and a socket flag before receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2191">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2191">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2192">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2192">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2193">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2193">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2194">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2194">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2195">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2195">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2196">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2196">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2197">- 或 -  未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2197">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="0c8e6-2198">- 或 -  访问 <see cref="T:System.Net.Sockets.Socket" /> 时出现操作系统错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2198">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2199">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2199">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2200">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2200">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2201">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2201">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2202">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2202">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffer, offset, size, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2203">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2203">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-2204">
            <c>buffer</c> 参数中用于存储所接收数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2204">The position in the <c>buffer</c> parameter to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2205">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2205">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2206">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2206">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-2207">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2207">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2208">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，从绑定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 接收数据，将数据存入接收缓冲区。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2208">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2209">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2209">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2210"><xref:System.Net.Sockets.Socket.Receive%2A>方法将数据读入缓冲区参数并返回已成功读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2210">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="0c8e6-2211">您可以调用<xref:System.Net.Sockets.Socket.Receive%2A>从面向连接的和无连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2211">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="0c8e6-2212">如果使用的是面向连接的协议，必须调用<xref:System.Net.Sockets.Socket.Connect%2A>建立的远程主机连接，或<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接之前调用<xref:System.Net.Sockets.Socket.Receive%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2212">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="0c8e6-2213"><xref:System.Net.Sockets.Socket.Receive%2A>方法将只读取数据中建立的远程主机发送过来<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2213">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2214">如果您使用的是无连接协议，还可以使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2214">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2215"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 将可以接收来自任何主机的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2215"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="0c8e6-2216">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.Receive%2A>方法将阻塞，直到数据不可用，除非使用设置的超时值<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2216">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2217">如果超过超时值，<xref:System.Net.Sockets.Socket.Receive%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2217">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2218">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2218">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2219">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2219">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="0c8e6-2220">请参阅下面的备注。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2220">See Remarks below.</span></span> <span data-ttu-id="0c8e6-2221">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2221">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2222">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2222">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2223">如果使用的一个面向连接的<xref:System.Net.Sockets.Socket>，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将读取所有可用的最多指定大小参数的字节数的数量的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2223">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="0c8e6-2224">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.Receive%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2224">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="0c8e6-2225">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，<xref:System.Net.Sockets.Socket.Receive%2A>会从在指定的目标地址中读取第一个排队数据报<xref:System.Net.Sockets.Socket.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2225">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="0c8e6-2226">如果你收到的数据报大于的大小`buffer`参数，`buffer`进行填充与该消息的第一部分，过多的数据都将丢失和<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2226">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2227">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2227">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2228">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2228">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2229">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2229">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2230">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2230">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2231">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2231">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2232">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2232">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2233">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2233">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2234">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2234">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2235">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2235">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2236">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2236">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2237">- 或 -  未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2237">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property is not set.</span>
          </span>
          <span data-ttu-id="0c8e6-2238">- 或 -  访问 <see cref="T:System.Net.Sockets.Socket" /> 时出现操作系统错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2238">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2239">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2239">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2240">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2240">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2241">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2241">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2242">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2242">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-2243">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2243">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2244">开始一个异步请求以便从连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象中接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2244">Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2245">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2245">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-2246">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2246">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-2247">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2247">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-2248">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2248">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2249"><xref:System.Net.Sockets.Socket.ReceiveAsync%2A>方法使用在套接字或绑定无连接的套接字连接，用于读取传入的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2249">The <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method is used on connected sockets or bound connectionless sockets and is used to read incoming data.</span></span> <span data-ttu-id="0c8e6-2250">必须知道套接字的本地地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2250">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="0c8e6-2251">对于绑定无连接的套接字，此函数将限制从其接受已收到的消息的地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2251">For bound connectionless sockets, this function restricts the addresses from which received messages are accepted.</span></span> <span data-ttu-id="0c8e6-2252">该函数仅返回从连接中指定的远程地址的消息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2252">The function only returns messages from the remote address specified in the connection.</span></span> <span data-ttu-id="0c8e6-2253">从其他地址的消息将以无提示方式被丢弃。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2253">Messages from other addresses are silently discarded.</span></span>  
  
 <span data-ttu-id="0c8e6-2254"><xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>属性上的`e`参数提供了关于读取请求的其他信息的窗口套接字服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2254">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="0c8e6-2255">有关如何使用此参数的详细信息，请参阅<xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2255">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0c8e6-2256">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>成功调用此方法所需的对象：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2256">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="0c8e6-2257"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 或 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="0c8e6-2257"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="0c8e6-2258"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 如果<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>设置</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2258"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="0c8e6-2259"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 如果<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>设置</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2259"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-2260">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2260">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-2261">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2261">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-2262">对于字节流样式套接字，传入的数据被放入缓冲区中直到填充缓冲区，连接将关闭，或用完内部缓冲的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2262">For byte stream-style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span>  
  
 <span data-ttu-id="0c8e6-2263">对于面向消息的套接字传入的消息会放入缓冲区中直到与关联的缓冲区的总大小`e`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2263">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer associated with the `e` parameter.</span></span> <span data-ttu-id="0c8e6-2264">如果大于缓冲区消息，消息的第一个部分填充缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2264">If the message is larger than the buffer, the buffer is filled with the first part of the message.</span></span>  
  
 <span data-ttu-id="0c8e6-2265">对于面向连接的套接字，<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>方法可以指示依赖于套接字是字节流或面向消息的两种方式之一中的虚拟线路正常终止。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2265">For connection-oriented sockets, the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method can indicate the graceful termination of the virtual circuit in one of two ways that depend on whether the socket is byte stream or message oriented.</span></span> <span data-ttu-id="0c8e6-2266">对于字节流，已读零字节指示正常结束，并且将不会读取任何字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2266">For byte streams, zero bytes having been read indicates graceful closure and that no more bytes will ever be read.</span></span> <span data-ttu-id="0c8e6-2267">对于面向消息的套接字，其中零字节的消息通常是允许的<xref:System.Net.Sockets.SocketException>与<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>设置为本机 Winsock WSAEDISCON 错误代码 (10101) 用于指示正常结束。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2267">For message-oriented sockets, where a zero byte message is often allowable, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEDISCON error code (10101) is used to indicate graceful closure.</span></span> <span data-ttu-id="0c8e6-2268">在任何情况下，<xref:System.Net.Sockets.SocketException>与<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>错误代码 (10054) 设置为本机 Winsock WSAECONNRESET 指示硬性关闭已发生。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2268">In any case, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAECONNRESET error code (10054) indicates an abortive close has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-2269">参数无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2269">An argument was invalid.</span>
          </span>
          <span data-ttu-id="0c8e6-2270">
            <paramref name="e" /> 参数的 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 或 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性必须引用有效的缓冲区。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2270">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span>
          </span>
          <span data-ttu-id="0c8e6-2271">可以设置这两个属性中的某一个，但不能同时设置这两个属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2271">One or the other of these properties may be set, but not both at the same time.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-2272">已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2272">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-2273">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2273">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2274">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2274">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2275">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2275">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.Socket.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-2276">获取或设置一个值，它指定 <see cref="T:System.Net.Sockets.Socket" /> 接收缓冲区的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2276">Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-2277">
            <see cref="T:System.Int32" />，它包含接收缓冲区的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2277">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the receive buffer.</span>
          </span>
          <span data-ttu-id="0c8e6-2278">默认值为 8192。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2278">The default is 8192.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2279">更大的缓冲区大小可能会减少了空确认 （不包含数据部分的 TCP 数据包），但也可能会延迟连接问题的识别。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2279">A larger buffer size potentially reduces the number of empty acknowledgements (TCP packets with no data portion), but might also delay the recognition of connection difficulties.</span></span> <span data-ttu-id="0c8e6-2280">请考虑增加缓冲区大小，如果传输大型文件，或者使用的高带宽、 高延迟连接 （如机顶盒宽带提供商。）</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2280">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2281">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2281">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2282">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2282">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2283">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2283">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2284">为设置操作指定的值小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2284">The value specified for a set operation is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveFrom">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-2285">接收数据报并存储源终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2285">Receives a datagram and stores the source endpoint.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFrom (buffer As Byte(), ByRef remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] *  -&gt; int" Usage="socket.ReceiveFrom (buffer, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2286">类型 <see cref="T:System.Byte" /> 的数组，它是所接受的数据的存储位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2286">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-2287">通过引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2287">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2288">将数据报接收到数据缓冲区并存储终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2288">Receives a datagram into the data buffer and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2289">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2289">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2290"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将数据读入`buffer`参数，返回已成功读取的字节数和捕获从其发送数据的远程主机终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2290">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="0c8e6-2291">此方法很有用，如果你想要从未知的主机或多个主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2291">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="0c8e6-2292">此重载仅要求您提供一个接收`buffer`，和一个<xref:System.Net.EndPoint>表示远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2292">This overload only requires you to provide a receive `buffer`, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="0c8e6-2293">缓冲区偏移量的默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2293">The buffer offset defaults to 0.</span></span> <span data-ttu-id="0c8e6-2294">大小默认值的长度`buffer`参数和`socketFlags`默认值为<xref:System.Net.Sockets.SocketFlags.None>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2294">The size defaults to the length of the `buffer` parameter and the `socketFlags` value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2295">然后再调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>，则必须显式将绑定<xref:System.Net.Sockets.Socket>到本地终结点使用<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2295">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="0c8e6-2296">如果不，这样做<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2296">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-2297">使用无连接协议时，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取第一个排队数据报接收到的本地网络缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2297">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="0c8e6-2298">如果你收到的数据报大于的大小`buffer`，则<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将填充`buffer`太多的是，且引发的消息与<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2298">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2299">如果使用的不可靠的协议，则多余的数据将丢失。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2299">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="0c8e6-2300">如果您使用的是可靠的协议，多余的数据将保留由服务提供商可以通过调用检索它<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法使用一个足够大的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2300">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="0c8e6-2301">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2301">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-2302">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2302">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2303">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2303">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2304">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2304">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2305">尽管<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>适用于无连接协议，你可以使用面向连接的协议也。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2305">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="0c8e6-2306">如果你选择这样做，则必须首先可以建立远程主机连接通过调用<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的远程主机连接，通过调用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2306">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2307">如果没有建立或接受连接，然后调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法时，将获取<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2307">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2308">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2308">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2309">在这些情况下，任一<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将忽略`remoteEP`参数和仅接收来自连接的数据或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2309">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-2310">使用面向连接的套接字<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取的数据，可最大的大小`buffer`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2310">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="0c8e6-2311">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2311">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2312">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2312">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2313">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2313">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2314"><xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>必须与匹配<xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2314">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2315">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2315">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2316">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2316">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2317">下面的代码示例从远程主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2317">The following code example receives a connectionless datagram from a remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Sync_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Sync_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2318">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2318">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2319">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2319">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2320">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2320">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2321">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2321">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2322">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2322">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2323">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2323">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2324">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2324">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2325">
            <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2325">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2326">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2326">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-2327">通过引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2327">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2328">使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将数据报接收到数据缓冲区并存储终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2328">Receives a datagram into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2329">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2329">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2330"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将数据读入`buffer`参数，返回已成功读取的字节数和捕获从其发送数据的远程主机终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2330">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="0c8e6-2331">此方法很有用，如果你想要从未知的主机或多个主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2331">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="0c8e6-2332">此重载仅要求您提供接收缓冲区，所需<xref:System.Net.Sockets.SocketFlags>，和一个<xref:System.Net.EndPoint>表示远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2332">This overload only requires you to provide a receive buffer, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="0c8e6-2333">偏移量默认值为 0 并默认大小为缓冲区参数的长度。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2333">The offset defaults to 0 and the size defaults to the length of the buffer parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2334">然后再调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>，则必须显式将绑定<xref:System.Net.Sockets.Socket>到本地终结点使用<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2334">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="0c8e6-2335">如果不，这样做<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2335">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-2336">使用无连接协议时，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取第一个排队数据报接收到的本地网络缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2336">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="0c8e6-2337">如果你收到的数据报大于的大小`buffer`，则<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将填充`buffer`太多的是，且引发的消息与<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2337">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2338">如果使用的不可靠的协议，则多余的数据将丢失。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2338">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="0c8e6-2339">如果您使用的是可靠的协议，多余的数据将保留由服务提供商可以通过调用检索它<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法使用一个足够大的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2339">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="0c8e6-2340">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2340">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-2341">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2341">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2342">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2342">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2343">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2343">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2344">尽管<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>适用于无连接协议，你可以使用面向连接的协议也。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2344">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="0c8e6-2345">如果你选择这样做，则必须首先可以建立远程主机连接通过调用<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的远程主机连接，通过调用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2345">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2346">如果没有建立或接受连接，然后调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法时，将获取<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2346">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2347">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2347">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2348">在这些情况下，任一<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将忽略`remoteEP`参数和仅接收来自连接的数据或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2348">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-2349">使用面向连接的套接字<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取的数据，可最大的大小`buffer`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2349">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="0c8e6-2350">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2350">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2351">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2351">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2352">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2352">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2353"><xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>必须与匹配<xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2353">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2354">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2354">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2355">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2355">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2356">下面的代码示例从远程主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2356">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="0c8e6-2357"><xref:System.Net.Sockets.SocketFlags> 传递给<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2357"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Sync_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Sync_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2358">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2358">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2359">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2359">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2360">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2360">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2361">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2361">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2362">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2362">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2363">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2363">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2364">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2364">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2365">类型 <see cref="T:System.Byte" /> 的数组，它是所接受的数据的存储位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2365">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2366">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2366">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2367">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2367">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-2368">通过引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2368">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2369">使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定的字节数接收到数据缓冲区并存储终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2369">Receives the specified number of bytes into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2370">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2370">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2371"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将数据读入`buffer`参数，返回已成功读取的字节数和捕获从其发送数据的远程主机终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2371">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="0c8e6-2372">此方法很有用，如果你想要从未知的主机或多个主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2372">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="0c8e6-2373">此重载仅要求您提供接收缓冲区中，你想要接收所需的字节数<xref:System.Net.Sockets.SocketFlags>，和一个<xref:System.Net.EndPoint>表示远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2373">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="0c8e6-2374">缓冲区偏移量的默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2374">The buffer offset defaults to 0.</span></span>  
  
 <span data-ttu-id="0c8e6-2375">使用无连接协议时，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取第一个排队数据报接收到的本地网络缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2375">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="0c8e6-2376">如果你收到的数据报大于的大小`buffer`，则<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将填充`buffer`太多的是，且引发的消息与<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2376">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2377">如果使用的不可靠的协议，则多余的数据将丢失。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2377">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="0c8e6-2378">如果您使用的是可靠的协议，多余的数据将保留由服务提供商可以通过调用检索它<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法使用一个足够大的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2378">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="0c8e6-2379">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2379">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-2380">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2380">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2381">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2381">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2382">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2382">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2383">尽管<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>适用于无连接协议，你可以使用面向连接的协议也。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2383">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="0c8e6-2384">如果你选择这样做，则必须首先可以建立远程主机连接通过调用<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的远程主机连接，通过调用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2384">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2385">如果没有建立或接受连接，然后调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法时，将获取<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2385">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2386">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2386">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2387">在这些情况下，任一<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将忽略`remoteEP`参数和仅接收来自连接的数据或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2387">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-2388">使用面向连接的套接字<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取的数据，可最多指定的字节数`size`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2388">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="0c8e6-2389">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2389">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2390">然后再调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>，则必须显式将绑定<xref:System.Net.Sockets.Socket>到本地终结点使用<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2390">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="0c8e6-2391">如果不，这样做<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2391">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2392">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2392">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2393">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2393">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2394"><xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>必须与匹配<xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2394">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2395">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2395">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2396">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2396">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2397">下面的代码示例从远程主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2397">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="0c8e6-2398">缓冲区大小，并<xref:System.Net.Sockets.SocketFlags>传递给<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2398">The buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Sync_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Sync_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2399">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2399">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2400">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2400">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2401">
            <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2401">
              <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2402">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2402">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2403">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2403">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2404">- 或 -  未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2404">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="0c8e6-2405">- 或 -  访问 <see cref="T:System.Net.Sockets.Socket" /> 时出现操作系统错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2405">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2406">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2406">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-2407">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2407">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2408">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2408">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2409">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2409">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, offset, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2410">类型 <see cref="T:System.Byte" /> 的数组，它是所接受的数据的存储位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2410">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-2411">
            <c>buffer</c> 参数中用于存储所接收数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2411">The position in the <c>buffer</c> parameter to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2412">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2412">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2413">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2413">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-2414">通过引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2414">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2415">使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定的数据字节数接收到数据缓冲区的指定位置，并存储终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2415">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2416">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2416">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2417"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将数据读入`buffer`参数，返回已成功读取的字节数和捕获从其发送数据的远程主机终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2417">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="0c8e6-2418">此方法很有用，如果你想要从未知的主机或多个主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2418">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="0c8e6-2419">使用无连接协议时，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取第一个排队数据报接收到的本地网络缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2419">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="0c8e6-2420">如果你收到的数据报大于的大小`buffer`，则<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将填充`buffer`太多的是，且引发的消息与<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2420">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2421">如果使用的不可靠的协议，则多余的数据将丢失。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2421">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="0c8e6-2422">如果您使用的是可靠的协议，多余的数据将保留由服务提供商可以通过调用检索它<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法使用一个足够大的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2422">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="0c8e6-2423">如果没有任何数据可供读取，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将阻塞，直到有可用数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2423">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="0c8e6-2424">如果您是在非阻止模式下，并且没有在可用的数据中的协议堆栈缓冲区<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2424">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2425">可以使用<xref:System.Net.Sockets.Socket.Available%2A>属性来确定数据是否可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2425">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="0c8e6-2426">当<xref:System.Net.Sockets.Socket.Available%2A>为非零，重试该接收操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2426">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2427">尽管<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>适用于无连接协议，你可以使用面向连接的协议也。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2427">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="0c8e6-2428">如果你选择这样做，则必须首先可以建立远程主机连接通过调用<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的远程主机连接，通过调用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2428">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2429">如果没有建立或接受连接，然后调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法时，将获取<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2429">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2430">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2430">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="0c8e6-2431">在这些情况下，任一<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将忽略`remoteEP`参数和仅接收来自连接的数据或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2431">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-2432">使用面向连接的套接字<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将读取的数据，可最多指定的字节量`size`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2432">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the amount of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="0c8e6-2433">如果远程主机关闭<xref:System.Net.Sockets.Socket>与连接<xref:System.Net.Sockets.Socket.Shutdown%2A>收到了方法，并且所有可用数据，<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法将立即完成并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2433">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2434">然后再调用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>，则必须显式将绑定<xref:System.Net.Sockets.Socket>到本地终结点使用<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2434">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="0c8e6-2435">如果不，这样做<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2435">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2436">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2436">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2437">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2437">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2438"><xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>必须与匹配<xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2438">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2439">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2439">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2440">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2440">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2441">下面的代码示例从远程主机接收无连接的数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2441">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="0c8e6-2442">偏移量、 缓冲区大小，并<xref:System.Net.Sockets.SocketFlags>传递给<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2442">The offset, buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#12)]
 [!code-csharp[Socket_Sync_Send_Receive#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#12)]
 [!code-vb[Socket_Sync_Send_Receive#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2443">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2443">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2444">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2444">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2445">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2445">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2446">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2446">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2447">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2447">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2448">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去偏移量参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2448">-or-  <paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2449">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2449">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2450">- 或 -  未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2450">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="0c8e6-2451">- 或 -  尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2451">-or-  An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2452">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2452">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2453">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2453">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2454">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2454">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFromAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveFromAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-2455">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2455">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2456">开始从指定网络设备中异步接收数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2456">Begins to asynchronously receive data from a specified network device.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2457">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2457">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-2458">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2458">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-2459">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2459">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-2460">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2460">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2461"><xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>方法主要用于在无连接的套接字上接收数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2461">The <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method is used primarily to receive data on a connectionless socket.</span></span> <span data-ttu-id="0c8e6-2462">必须知道套接字的本地地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2462">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="0c8e6-2463">调用方必须设置<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>属性设置为<xref:System.Net.IPEndPoint>，数据将从其接收的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2463">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="0c8e6-2464"><xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>属性上的`e`参数提供了关于读取请求的其他信息的窗口套接字服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2464">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="0c8e6-2465">有关如何使用此参数的详细信息，请参阅<xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2465">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0c8e6-2466">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>成功调用此方法所需的对象：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2466">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-2467">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2467">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-2468">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2468">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-2469">对于面向消息的套接字，传入的消息会放入缓冲区中直到缓冲区的总大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2469">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="0c8e6-2470"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>和<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>属性确定在缓冲区中数据的放置位置和数据量。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2470">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="0c8e6-2471">对于字节流样式套接字，传入的数据被放入缓冲区中直到填充缓冲区，连接将关闭，或用完内部缓冲的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2471">For byte stream–style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span> <span data-ttu-id="0c8e6-2472"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>和<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>属性确定在缓冲区中数据的放置位置和数据量。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2472">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2473">
            <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2473">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-2474">已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2474">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-2475">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2475">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2476">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2476">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2477">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2477">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int ReceiveMessageFrom (byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; remoteEP, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFrom (buffer As Byte(), offset As Integer, size As Integer, ByRef socketFlags As SocketFlags, ByRef remoteEP As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % remoteEP, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberSignature Language="F#" Value="member this.ReceiveMessageFrom : byte[] * int * int *  *  *  -&gt; int" Usage="socket.ReceiveMessageFrom (buffer, offset, size, socketFlags, remoteEP, ipPacketInformation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags&amp;" RefType="ref" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2478">类型 <see cref="T:System.Byte" /> 的数组，它是所接受的数据的存储位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2478">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-2479">
            <c>buffer</c> 参数中用于存储所接收数据的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2479">The position in the <c>buffer</c> parameter to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2480">要接收的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2480">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2481">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2481">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-2482">通过引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2482">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <param name="ipPacketInformation">
          <span data-ttu-id="0c8e6-2483">保存地址和接口信息的 <see cref="T:System.Net.Sockets.IPPacketInformation" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2483">An <see cref="T:System.Net.Sockets.IPPacketInformation" /> holding address and interface information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2484">使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定字节数的数据接收到指定的数据缓冲区位置，并存储终结点和数据包信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2484">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2485">收到的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2485">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2486"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法将数据读入`buffer`参数，返回已成功读取的字节数和捕获从其发送数据，以及有关接收到的数据包的信息的远程主机终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2486">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent, as well as information about the received packet.</span></span>  
  
 <span data-ttu-id="0c8e6-2487"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法主要用于接收无连接的套接字上的消息数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2487">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="0c8e6-2488">必须知道套接字的本地地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2488">The socket's local address must be known.</span></span> <span data-ttu-id="0c8e6-2489">此方法仅可用于数据报和原始套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2489">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="0c8e6-2490">必须使用套接字类型设置为初始化套接字<xref:System.Net.Sockets.SocketType.Dgram>或<xref:System.Net.Sockets.SocketType.Raw>之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2490">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="0c8e6-2491">这可以使用构造套接字时<xref:System.Net.Sockets.Socket.%23ctor%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2491">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2492">对于面向消息的套接字，传入的消息放入`buffer`最大总大小中指定的参数`size`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2492">For message-oriented sockets, an incoming message is placed into the `buffer` parameter up to the total size specified in the `size` parameter.</span></span> <span data-ttu-id="0c8e6-2493">`offset`参数确定在何处`buffer`放置数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2493">The `offset` parameter determines where in the `buffer` the data is placed.</span></span> <span data-ttu-id="0c8e6-2494">实际的数据量放入`buffer`返回的<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2494">The actual amount of data placed into the `buffer` is returned by the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-2495"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法会自动方法设置<xref:System.Net.Sockets.SocketOptionName.PacketInformation>套接字选项`true`第一次调用时为给定<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2495">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method automatically method sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-2496">但是，返回<xref:System.Net.Sockets.IPPacketInformation>对象只能是有效的数据包到达本地计算机后已设置的套接字选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2496">However, the returned <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="0c8e6-2497">如果套接字在绑定到的本地终结点发送之间的数据包 (显式<xref:System.Net.Sockets.Socket.Bind%2A>方法或由其中一个隐式<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.ConnectAsync%2A>， <xref:System.Net.Sockets.Socket.SendTo%2A>，或<xref:System.Net.Sockets.Socket.SendToAsync%2A>方法) 和其第一次调用<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法中，调用<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>方法将返回无效<xref:System.Net.Sockets.IPPacketInformation>这些数据包的对象。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2497">If a socket is sent packets between when it is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and its first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method will return invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="0c8e6-2498">若要确保所有<xref:System.Net.Sockets.IPPacketInformation>对象都有效，应用程序应设置<xref:System.Net.Sockets.SocketOptionName.PacketInformation>套接字选项`true`绑定到本地终结点使用之前<xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2498">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="0c8e6-2499">应用程序可以检查`ipPacketInformation`参数，如果它需要知道是否使用单播、 多播或广播地址发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2499">An application can examine the `ipPacketInformation` parameter if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2500"><xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>必须与匹配<xref:System.Net.Sockets.AddressFamily>的<xref:System.Net.EndPoint>中使用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2500">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2501">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2501">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2502">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2502">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2503">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2503">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2504">\- 或-  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2504">\- or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2505">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2505">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2506">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2506">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2507">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2507">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2508">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去偏移量参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2508">-or-  <paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2509">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2509">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2510">- 或 -  未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2510">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="0c8e6-2511">- 或 -  .NET Framework 运行在 AMD 64 位处理器上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2511">-or-  The .NET Framework is running on an AMD 64-bit processor.</span>
          </span>
          <span data-ttu-id="0c8e6-2512">- 或 -  尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2512">-or-  An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2513">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2513">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-2514">操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2514">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="0c8e6-2515">用于接受来自网络的连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2515">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="0c8e6-2516">关联枚举：<see cref="F:System.Net.NetworkAccess.Accept" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2516">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveMessageFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveMessageFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveMessageFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveMessageFromAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveMessageFromAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-2517">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2517">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2518">开始使用指定的 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" /> 将指定字节数的数据异步接收到数据缓冲区的指定位置，并存储终结点和数据包信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2518">Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" />, and stores the endpoint and packet information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2519">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2519">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-2520">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2520">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-2521">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2521">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-2522">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2522">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2523"><xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>方法主要用于接收无连接的套接字上的消息数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2523">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="0c8e6-2524">必须知道套接字的本地地址。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2524">The socket's local address must be known.</span></span> <span data-ttu-id="0c8e6-2525">此方法仅可用于数据报和原始套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2525">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="0c8e6-2526">必须使用套接字类型设置为初始化套接字<xref:System.Net.Sockets.SocketType.Dgram>或<xref:System.Net.Sockets.SocketType.Raw>之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2526">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="0c8e6-2527">这可以使用构造套接字时<xref:System.Net.Sockets.Socket.%23ctor%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2527">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2528">调用方必须设置<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>属性设置为<xref:System.Net.IPEndPoint>，数据将从其接收的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2528">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="0c8e6-2529">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>成功调用此方法所需的对象：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2529">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-2530">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2530">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-2531">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2531">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-2532">对于面向消息的套接字，传入的消息会放入缓冲区中直到缓冲区的总大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2532">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="0c8e6-2533"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>和<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>属性确定在缓冲区中数据的放置位置和数据量。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2533">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="0c8e6-2534"><xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>方法将自动设置<xref:System.Net.Sockets.SocketOptionName.PacketInformation>套接字选项`true`第一次调用时为给定<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2534">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method automatically sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-2535">但是，<xref:System.Net.Sockets.IPPacketInformation>对象只能是有效的数据包到达本地计算机后已设置的套接字选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2535">However, the <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="0c8e6-2536">如果套接字时套接字绑定到的本地终结点发送之间的数据包 (显式<xref:System.Net.Sockets.Socket.Bind%2A>方法或由其中一个隐式<xref:System.Net.Sockets.Socket.Connect%2A>， <xref:System.Net.Sockets.Socket.ConnectAsync%2A>， <xref:System.Net.Sockets.Socket.SendTo%2A>，或<xref:System.Net.Sockets.Socket.SendToAsync%2A>方法) 和首次调用<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>方法，调用<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>方法将导致无效<xref:System.Net.Sockets.IPPacketInformation>这些数据包的对象。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2536">If a socket is sent packets between when the socket is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and the first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method will result in invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="0c8e6-2537">若要确保所有<xref:System.Net.Sockets.IPPacketInformation>对象都有效，应用程序应设置<xref:System.Net.Sockets.SocketOptionName.PacketInformation>套接字选项`true`绑定到本地终结点使用之前<xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2537">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to`true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="0c8e6-2538">应用程序可以检查生成<xref:System.Net.Sockets.IPPacketInformation>对象它是否需要知道是否使用单播、 多播或广播地址发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2538">An application can examine the resulting <xref:System.Net.Sockets.IPPacketInformation> objects if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2539">
            <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2539">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-2540">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2540">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2541">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2541">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2542">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2542">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveTimeout : int with get, set" Usage="System.Net.Sockets.Socket.ReceiveTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-2543">获取或设置一个值，该值指定之后同步 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 调用将超时的时间长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2543">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Receive" /> call will time out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-2544">超时值（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2544">The time-out value, in milliseconds.</span>
          </span>
          <span data-ttu-id="0c8e6-2545">默认值为 0，指示超时期限无限大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2545">The default value is 0, which indicates an infinite time-out period.</span>
          </span>
          <span data-ttu-id="0c8e6-2546">指定 -1 还会指示超时期限无限大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2546">Specifying -1 also indicates an infinite time-out period.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2547">此选项适用于同步<xref:System.Net.Sockets.Socket.Receive%2A>仅调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2547">This option applies to synchronous <xref:System.Net.Sockets.Socket.Receive%2A> calls only.</span></span> <span data-ttu-id="0c8e6-2548">如果超出超时期限，则<xref:System.Net.Sockets.Socket.Receive%2A>方法将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2548">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2549">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2549">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2550">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2550">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2551">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2551">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2552">为设置操作指定的值小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2552">The value specified for a set operation is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoteEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint RemoteEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint RemoteEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ RemoteEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteEndPoint : System.Net.EndPoint" Usage="System.Net.Sockets.Socket.RemoteEndPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-2553">获取远程终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2553">Gets the remote endpoint.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-2554">当前和 <see cref="T:System.Net.EndPoint" /> 通信的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2554">The <see cref="T:System.Net.EndPoint" /> with which the <see cref="T:System.Net.Sockets.Socket" /> is communicating.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2555">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>属性获取<xref:System.Net.EndPoint>，其中包含到的远程 IP 地址和端口号<xref:System.Net.Sockets.Socket>连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2555">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property gets the <xref:System.Net.EndPoint> that contains the remote IP address and port number to which the <xref:System.Net.Sockets.Socket> is connected.</span></span> <span data-ttu-id="0c8e6-2556">如果使用的是无连接协议<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>包含的默认远程 IP 地址和端口号与<xref:System.Net.Sockets.Socket>将通信。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2556">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> contains the default remote IP address and port number with which the <xref:System.Net.Sockets.Socket> will communicate.</span></span> <span data-ttu-id="0c8e6-2557">您必须将此对象转换<xref:System.Net.EndPoint>到<xref:System.Net.IPEndPoint>之前检索的任何信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2557">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="0c8e6-2558">然后，可以调用<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>方法来检索远程<xref:System.Net.IPAddress>，和<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>方法来检索远程端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2558">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the remote <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the remote port number.</span></span>  
  
 <span data-ttu-id="0c8e6-2559"><xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>会在调用后设置<xref:System.Net.Sockets.Socket.Accept%2A>或<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2559">The <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> is set after a call to either <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2560">如果你尝试访问更早版本，此属性<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2560">If you try to access this property earlier, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2561">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2561">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2562">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2562">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2563">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2563">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2564">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2564">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2565">下面的代码示例检索并显示本地和远程终结点。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2565">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2566">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2566">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2567">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2567">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public static void Select (System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Select(class System.Collections.IList checkRead, class System.Collections.IList checkWrite, class System.Collections.IList checkError, int32 microSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Select (checkRead As IList, checkWrite As IList, checkError As IList, microSeconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Select(System::Collections::IList ^ checkRead, System::Collections::IList ^ checkWrite, System::Collections::IList ^ checkError, int microSeconds);" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.IList * System.Collections.IList * System.Collections.IList * int -&gt; unit" Usage="System.Net.Sockets.Socket.Select (checkRead, checkWrite, checkError, microSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkRead" Type="System.Collections.IList" />
        <Parameter Name="checkWrite" Type="System.Collections.IList" />
        <Parameter Name="checkError" Type="System.Collections.IList" />
        <Parameter Name="microSeconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="checkRead">
          <span data-ttu-id="0c8e6-2568">用于检查可读性的 <see cref="T:System.Net.Sockets.Socket" /> 实例的 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2568">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for readability.</span>
          </span>
        </param>
        <param name="checkWrite">
          <span data-ttu-id="0c8e6-2569">用于检查可写性的 <see cref="T:System.Net.Sockets.Socket" /> 实例的 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2569">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for writability.</span>
          </span>
        </param>
        <param name="checkError">
          <span data-ttu-id="0c8e6-2570">用于检查错误的 <see cref="T:System.Net.Sockets.Socket" /> 实例的 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2570">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for errors.</span>
          </span>
        </param>
        <param name="microSeconds">
          <span data-ttu-id="0c8e6-2571">超时值（以微秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2571">The time-out value, in microseconds.</span>
          </span>
          <span data-ttu-id="0c8e6-2572">值 -1 指示无限超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2572">A -1 value indicates an infinite time-out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2573">确定一个或多个套接字的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2573">Determines the status of one or more sockets.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2574"><xref:System.Net.Sockets.Socket.Select%2A> 是确定的一个或多个状态的静态方法<xref:System.Net.Sockets.Socket>实例。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2574"><xref:System.Net.Sockets.Socket.Select%2A> is a static method that determines the status of one or more <xref:System.Net.Sockets.Socket> instances.</span></span> <span data-ttu-id="0c8e6-2575">必须将放置到一个或多个套接字<xref:System.Collections.IList>可以使用之前<xref:System.Net.Sockets.Socket.Select%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2575">You must place one or more sockets into an <xref:System.Collections.IList> before you can use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span> <span data-ttu-id="0c8e6-2576">通过调用检查可读性<xref:System.Net.Sockets.Socket.Select%2A>与<xref:System.Collections.IList>作为`checkRead`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2576">Check for readability by calling <xref:System.Net.Sockets.Socket.Select%2A> with the <xref:System.Collections.IList> as the `checkRead` parameter.</span></span> <span data-ttu-id="0c8e6-2577">若要检查的可写性套接字，使用`checkWrite`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2577">To check your sockets for writability, use the `checkWrite` parameter.</span></span> <span data-ttu-id="0c8e6-2578">检测错误条件，请使用`checkError`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2578">For detecting error conditions, use `checkError`.</span></span> <span data-ttu-id="0c8e6-2579">在调用<xref:System.Net.Sockets.Socket.Select%2A>，则<xref:System.Collections.IList>会填充使用满足条件这些套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2579">After calling <xref:System.Net.Sockets.Socket.Select%2A>, the <xref:System.Collections.IList> will be filled with only those sockets that satisfy the conditions.</span></span>  
  
 <span data-ttu-id="0c8e6-2580">如果您在侦听状态，可读性意味着调用<xref:System.Net.Sockets.Socket.Accept%2A>而不会阻止将会成功。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2580">If you are in a listening state, readability means that a call to <xref:System.Net.Sockets.Socket.Accept%2A> will succeed without blocking.</span></span> <span data-ttu-id="0c8e6-2581">如果已接受连接，可读性意味着数据可供读取。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2581">If you have already accepted the connection, readability means that data is available for reading.</span></span> <span data-ttu-id="0c8e6-2582">在这些情况下，所有接收操作而不会阻止将会成功。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2582">In these cases, all receive operations will succeed without blocking.</span></span> <span data-ttu-id="0c8e6-2583">可读性也可指示是否在远程<xref:System.Net.Sockets.Socket>已关闭连接; 在这种情况下调用<xref:System.Net.Sockets.Socket.Receive%2A>会立即返回，返回零字节。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2583">Readability can also indicate whether the remote <xref:System.Net.Sockets.Socket> has shut down the connection; in that case a call to <xref:System.Net.Sockets.Socket.Receive%2A> will return immediately, with zero bytes returned.</span></span>  
  
 <span data-ttu-id="0c8e6-2584"><xref:System.Net.Sockets.Socket.Select%2A> 返回时至少一个感兴趣的套接字 (在套接字`checkRead`， `checkWrite`，并`checkError`列出了) 满足指定的条件时，或`microSeconds`超过参数，具体取决于第一个。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2584"><xref:System.Net.Sockets.Socket.Select%2A> returns when at least one of the sockets of interest (the sockets in the `checkRead`, `checkWrite`, and `checkError` lists) meets its specified criteria, or the `microSeconds` parameter is exceeded, whichever comes first.</span></span> <span data-ttu-id="0c8e6-2585">设置`microSeconds`为-1 指定无限期超时。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2585">Setting `microSeconds` to -1 specifies an infinite time-out.</span></span>  
  
 <span data-ttu-id="0c8e6-2586">如果进行到非阻止调用<xref:System.Net.Sockets.Socket.Connect%2A>，可写性表示您已成功连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2586">If you make a nonblocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, writability means that you have connected successfully.</span></span> <span data-ttu-id="0c8e6-2587">如果已建立的连接，可写性意味着所有发送操作都将成功而不会阻塞。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2587">If you already have a connection established, writability means that all send operations will succeed without blocking.</span></span>  
  
 <span data-ttu-id="0c8e6-2588">如果您已到非阻止调用<xref:System.Net.Sockets.Socket.Connect%2A>，则`checkerror`参数标识未成功连接的套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2588">If you have made a non-blocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, the `checkerror` parameter identifies sockets that have not connected successfully.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2589">使用<xref:System.Net.Sockets.Socket.Poll%2A>方法，如果只想要确定的单个状态<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2589">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method if you only want to determine the status of a single <xref:System.Net.Sockets.Socket>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2590">此方法无法检测到某些类型的连接问题，例如断开的网络电缆，或远程主机意外关闭。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2590">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="0c8e6-2591">您必须尝试发送或接收数据，以检测这些类型的错误。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2591">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2592">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2592">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2593">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2593">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2594">下面的代码示例使用<xref:System.Net.Sockets.Socket.Select%2A>来确定哪些侦听套接字已连接请求。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2594">The following code example uses <xref:System.Net.Sockets.Socket.Select%2A> to determine which listening sockets have a connection request.</span></span>  
  
 [!code-cpp[Socket_Select#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Select/CPP/source.cpp#1)]
 [!code-csharp[Socket_Select#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Select/CS/source.cs#1)]
 [!code-vb[Socket_Select#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Select/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2595">
            <paramref name="checkRead" /> 参数为 <see langword="null" /> 或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2595">The <paramref name="checkRead" /> parameter is <see langword="null" /> or empty.</span>
          </span>
          <span data-ttu-id="0c8e6-2596">- 并且 -  <paramref name="checkWrite" /> 参数为 <see langword="null" /> 或为空  - 并且 -  <paramref name="checkError" /> 参数为 <see langword="null" /> 或为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2596">-and-  The <paramref name="checkWrite" /> parameter is <see langword="null" /> or empty  -and-  The <paramref name="checkError" /> parameter is <see langword="null" /> or empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2597">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2597">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-2598">将数据发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2598">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] -&gt; int" Usage="socket.Send buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2599">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2599">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2600">将数据发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2600">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2601">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2601">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2602"><xref:System.Net.Sockets.Socket.Send%2A> 以同步方式将数据发送到远程主机中指定<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法，并返回已成功发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2602"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="0c8e6-2603"><xref:System.Net.Sockets.Socket.Send%2A> 可用于面向连接的和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2603"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2604">此重载需要包含想要发送的数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2604">This overload requires a buffer that contains the data you want to send.</span></span> <span data-ttu-id="0c8e6-2605"><xref:System.Net.Sockets.SocketFlags>值将默认为 0，缓冲区偏移量的默认值为 0，并要将默认值发送到缓冲区的大小的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2605">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span>  
  
 <span data-ttu-id="0c8e6-2606">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2606">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2607">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2607">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2608">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2608">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-2609">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>每次调用前<xref:System.Net.Sockets.Socket.Send%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2609">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="0c8e6-2610">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2610">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2611">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2611">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2612">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到所有缓冲区中的字节都将发送，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2612">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2613">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2613">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2614">在阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的字节数小于缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2614">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2615">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序将字节发送缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2615">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2616">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2616">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2617">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2617">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2618">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2618">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2619">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2619">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2620">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2620">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2621">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2621">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2622">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2622">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2623">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2623">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2624">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2624">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2625">下面的代码示例演示如何在连接上的发送数据<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2625">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2626">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2626">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2627">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2627">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2628">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2628">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; int" Usage="socket.Send buffers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-2629">
            <see cref="T:System.ArraySegment`1" /> 类型的 <see cref="T:System.Byte" /> 的列表，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2629">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2630">将列表中的一组缓冲区发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2630">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2631">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2631">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2632"><xref:System.Net.Sockets.Socket.Send%2A> 可用于面向连接的和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2632"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2633">此重载需要至少一个缓冲区，其中包含你想要发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2633">This overload requires at least one buffer that contains the data you want to send.</span></span>  
  
 <span data-ttu-id="0c8e6-2634">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2634">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2635">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2635">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2636">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2636">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-2637">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>每次调用前<xref:System.Net.Sockets.Socket.Send%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2637">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="0c8e6-2638">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2638">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2639">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2639">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2640">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到所有缓冲区中的字节都将发送，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2640">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2641">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2641">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2642">在阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的字节数小于缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2642">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2643">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序将字节发送缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2643">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2644">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2644">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2645">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2645">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2646">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2646">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2647">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2647">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2648">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2648">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2649">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2649">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2650">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2650">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2651">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2651">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2652">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2652">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2653">
            <paramref name="buffers" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2653">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-2654">
            <paramref name="buffers" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2654">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2655">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2655">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-2656">请参见下面的备注部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2656">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2657">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2657">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="socket.Send buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2658">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2658">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2659">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2659">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2660">使用指定的 <see cref="T:System.Net.Sockets.Socket" /> 将数据发送到连接的 <see cref="T:System.Net.Sockets.SocketFlags" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2660">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" /> using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2661">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2661">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2662"><xref:System.Net.Sockets.Socket.Send%2A> 以同步方式将数据发送到远程主机中建立<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法，并返回已成功发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2662"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="0c8e6-2663"><xref:System.Net.Sockets.Socket.Send%2A>方法可用于面向连接的和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2663">The <xref:System.Net.Sockets.Socket.Send%2A> method can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2664">此重载需要包含想要发送的数据的缓冲区和的按位组合<xref:System.Net.Sockets.SocketFlags>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2664">This overload requires a buffer that contains the data you want to send and a bitwise combination of <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="0c8e6-2665">缓冲区偏移量的默认值为 0，并要将默认值发送到缓冲区的大小的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2665">The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span> <span data-ttu-id="0c8e6-2666">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数值，则不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2666">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter value, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-2667">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2667">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2668">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2668">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2669">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2669">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-2670">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>方法，然后再每次调用<xref:System.Net.Sockets.Socket.Send%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2670">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="0c8e6-2671">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2671">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2672">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2672">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2673">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到所有缓冲区中的字节都将发送，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2673">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2674">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2674">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2675">在阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的字节数小于缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2675">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2676">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2676">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="0c8e6-2677">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2677">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2678">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2678">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2679">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2679">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2680">您必须确保在缓冲区的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2680">You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-2681">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2681">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2682">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2682">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2683">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2683">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2684">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2684">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2685">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2685">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2686">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2686">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2687">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2687">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2688">下面的代码示例演示如何在连接上的发送数据<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2688">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2689">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2689">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2690">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2690">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2691">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2691">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffers, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-2692">
            <see cref="T:System.ArraySegment`1" /> 类型的 <see cref="T:System.Byte" /> 的列表，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2692">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2693">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2693">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2694">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，将列表中的一组缓冲区发送到连接的 <see cref="T:System.Net.Sockets.SocketFlags" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2694">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2695">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2695">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2696">此重载需要至少一个缓冲区，其中包含你想要发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2696">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="0c8e6-2697"><xref:System.Net.Sockets.SocketFlags>默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2697">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="0c8e6-2698">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketFlags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2698">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-2699">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2699">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2700">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2700">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2701">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2701">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-2702">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>每次调用前<xref:System.Net.Sockets.Socket.Send%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2702">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="0c8e6-2703">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2703">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2704">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2704">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2705">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到所有缓冲区中的字节都将发送，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2705">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2706">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2706">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2707">在非阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的字节数小于缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2707">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2708">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序将字节发送缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2708">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2709">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2709">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2710">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2710">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2711">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2711">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2712">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2712">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2713">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2713">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2714">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2714">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2715">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2715">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2716">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2716">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2717">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2717">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2718">
            <paramref name="buffers" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2718">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-2719">
            <paramref name="buffers" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2719">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2720">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2720">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2721">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2721">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2722">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2722">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2723">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2723">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2724">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2724">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2725">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，将指定字节数的数据发送到已连接的 <see cref="T:System.Net.Sockets.SocketFlags" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2725">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2726">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2726">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2727"><xref:System.Net.Sockets.Socket.Send%2A> 以同步方式将数据发送到远程主机中建立<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法，并返回已成功发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2727"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="0c8e6-2728"><xref:System.Net.Sockets.Socket.Send%2A> 可用于面向连接的和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2728"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2729">此重载需要包含想要你想要发送的字节数和按位组合的任何发送的数据的缓冲区<xref:System.Net.Sockets.SocketFlags>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2729">This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, and a bitwise combination of any <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="0c8e6-2730">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2730">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-2731">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2731">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2732">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2732">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2733">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2733">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-2734">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>方法，然后再每次调用<xref:System.Net.Sockets.Socket.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2734">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="0c8e6-2735">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2735">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2736">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2736">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2737">使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到发送请求的字节数，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2737">With a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2738">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2738">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2739">在阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的请求的字节数小于。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2739">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="0c8e6-2740">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2740">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="0c8e6-2741">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2741">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2742">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2742">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2743">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2743">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2744">您必须确保大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2744">You must ensure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-2745">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2745">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2746">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2746">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2747">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2747">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2748">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2748">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2749">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2749">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2750">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2750">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2751">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2751">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2752">下面的代码示例将发送缓冲区中找到的数据，并指定<xref:System.Net.Sockets.SocketFlags.None>为<xref:System.Net.Sockets.SocketFlags>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2752">The following code example sends the data found in buffer, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Sync_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Sync_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2753">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2753">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2754">
            <paramref name="size" /> 小于 0 或超过缓冲区的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2754">
              <paramref name="size" /> is less than 0 or exceeds the size of the buffer.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2755">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2755">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2756">- 或 -  访问套接字时发生操作系统错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2756">-or-  An operating system error occurs while accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2757">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2757">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffers, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="0c8e6-2758">
            <see cref="T:System.ArraySegment`1" /> 类型的 <see cref="T:System.Byte" /> 的列表，它包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2758">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2759">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2759">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-2760">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2760">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2761">使用指定的 <see cref="T:System.Net.Sockets.Socket" />，将列表中的一组缓冲区发送到连接的 <see cref="T:System.Net.Sockets.SocketFlags" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2761">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2762">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2762">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2763">此重载需要至少一个缓冲区，其中包含你想要发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2763">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="0c8e6-2764"><xref:System.Net.Sockets.SocketFlags>默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2764">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="0c8e6-2765">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketFlags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2765">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-2766">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2766">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2767">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2767">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2768">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2768">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-2769">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>方法，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>每次调用前<xref:System.Net.Sockets.Socket.Send%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2769">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="0c8e6-2770">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2770">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2771">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2771">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2772">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到所有缓冲区中的字节都将发送，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2772">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2773">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2773">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2774">在非阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的字节数小于缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2774">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2775">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序将字节发送缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2775">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="0c8e6-2776">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2776">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2777">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2777">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2778">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2778">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2779">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2779">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2780">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2780">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2781">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2781">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2782">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2782">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2783">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2783">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2784">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2784">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2785">
            <paramref name="buffers" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2785">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-2786">
            <paramref name="buffers" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2786">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2787">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2787">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2788">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2788">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffer, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, offset, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2789">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2789">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-2790">开始发送数据的缓冲区中的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2790">The position in the data buffer at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2791">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2791">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2792">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2792">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2793">从指定偏移量开始，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />，将指定的数据字节数发送到已连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2793">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2794">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2794">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2795"><xref:System.Net.Sockets.Socket.Send%2A> 以同步方式将数据发送到远程主机中指定<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法，并返回已成功发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2795"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="0c8e6-2796"><xref:System.Net.Sockets.Socket.Send%2A> 可用于面向连接的和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2796"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2797">在此重载中，如果您指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2797">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-2798">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2798">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2799">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2799">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2800">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2800">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="0c8e6-2801">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>每次调用前<xref:System.Net.Sockets.Socket.Send%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2801">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="0c8e6-2802">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2802">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2803">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2803">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2804">您还必须确保大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2804">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-2805">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2805">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-2806">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到发送请求的字节数，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2806">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2807">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2807">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2808">在阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的请求的字节数小于。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2808">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="0c8e6-2809">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2809">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="0c8e6-2810">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2810">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2811">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2811">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2812">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2812">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2813">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2813">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2814">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2814">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2815">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2815">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2816">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2816">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2817">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2817">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2818">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2818">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2819">下面的代码示例指定数据缓冲区、 偏移、 大小和<xref:System.Net.Sockets.SocketFlags>将数据发送到连接<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2819">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2820">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2820">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2821">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2821">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2822">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2822">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2823">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2823">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2824">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2824">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2825">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2825">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2826">- 或 -  访问 <see cref="T:System.Net.Sockets.Socket" /> 时出现操作系统错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2826">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2827">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2827">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffer, offset, size, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-2828">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2828">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-2829">开始发送数据的缓冲区中的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2829">The position in the data buffer at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-2830">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2830">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-2831">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2831">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="0c8e6-2832">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2832">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2833">从指定的偏移量开始使用指定的 <see cref="T:System.Net.Sockets.Socket" /> 将指定字节数的数据发送到连接的 <see cref="T:System.Net.Sockets.SocketFlags" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2833">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2834">发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2834">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2835"><xref:System.Net.Sockets.Socket.Send%2A> 以同步方式将数据发送到远程主机中指定<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法，并返回已成功发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2835"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="0c8e6-2836"><xref:System.Net.Sockets.Socket.Send%2A> 可用于面向连接的和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2836"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2837">在此重载中，如果您指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2837">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-2838">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法或<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2838">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2839">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2839">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2840">如果使用无连接协议，并且打算将数据发送到多个不同的主机，则应使用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2840">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="0c8e6-2841">如果不使用<xref:System.Net.Sockets.Socket.SendTo%2A>，您将需要致电<xref:System.Net.Sockets.Socket.Connect%2A>每次调用前<xref:System.Net.Sockets.Socket.Send%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2841">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="0c8e6-2842">可以使用<xref:System.Net.Sockets.Socket.SendTo%2A>甚至已建立默认远程主机使用后<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2842">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="0c8e6-2843">您还可以更改默认远程主机之前调用<xref:System.Net.Sockets.Socket.Send%2A>到另一个调用，从而<xref:System.Net.Sockets.Socket.Connect%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2843">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2844">您还必须确保大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2844">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-2845">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2845">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-2846">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.Send%2A>会阻塞，直到发送请求的字节数，除非使用设置超时<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2846">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-2847">如果超过超时值，<xref:System.Net.Sockets.Socket.Send%2A>调用将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2847">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2848">在阻止模式下，<xref:System.Net.Sockets.Socket.Send%2A>可能成功完成，即使它发送的请求的字节数小于。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2848">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="0c8e6-2849">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2849">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="0c8e6-2850">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2850">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2851">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2851">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2852">成功完成<xref:System.Net.Sockets.Socket.Send%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2852">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2853">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2853">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2854">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2854">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2855">发送的成功完成并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2855">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="0c8e6-2856">如果任何缓冲区空间以容纳要传输的数据在传输系统中不不可用，除非套接字置于阻止模式下，将阻止发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2856">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2857">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2857">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2858">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2858">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2859">下面的代码示例指定数据缓冲区、 偏移、 大小和<xref:System.Net.Sockets.SocketFlags>将数据发送到连接<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2859">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-2860">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2860">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2861">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2861">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2862">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2862">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-2863">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2863">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-2864">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2864">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2865">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2865">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-2866">- 或 -  访问 <see cref="T:System.Net.Sockets.Socket" /> 时出现操作系统错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2866">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2867">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2867">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public bool SendAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-2868">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2868">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2869">将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2869">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2870">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2870">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-2871">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2871">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-2872">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2872">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-2873">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2873">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2874"><xref:System.Net.Sockets.Socket.SendAsync%2A>方法用于从面向连接的套接字上的一个或多个缓冲区写入传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2874">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method is used to write outgoing data from one or more buffers on a connection-oriented socket.</span></span> <span data-ttu-id="0c8e6-2875">此方法也可用，但是，已对连接操作指定远程主机的无连接套接字上。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2875">This method can also be used, however, on connectionless sockets that have specified a remote host on a connect operation.</span></span>  
  
 <span data-ttu-id="0c8e6-2876"><xref:System.Net.Sockets.Socket.SendAsync%2A>方法启动异步发送操作中建立的远程主机<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.AcceptAsync%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2876">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-2877">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>成功调用此方法所需的对象：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2877">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="0c8e6-2878"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 或 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="0c8e6-2878"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="0c8e6-2879"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 如果<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>设置</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2879"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="0c8e6-2880"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 如果<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>设置</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2880"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-2881">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.SendAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2881">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-2882">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2882">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-2883"><xref:System.Net.Sockets.Socket.SendAsync%2A>方法将引发异常，如果不首先调用<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.AcceptAsync%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.ConnectAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2883">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A><xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A>.</span></span>  
  
 <span data-ttu-id="0c8e6-2884">调用<xref:System.Net.Sockets.Socket.SendAsync%2A>方法使你能够发送单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2884">Calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="0c8e6-2885">对于面向消息的套接字，不超过基础 Windows 套接字服务提供程序的最大消息大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2885">For message-oriented sockets, do not exceed the maximum message size of the underlying Windows sockets service provider.</span></span> <span data-ttu-id="0c8e6-2886">如果数据太长，以原子方式通过基础服务提供商，传输任何数据并<xref:System.Net.Sockets.Socket.SendAsync%2A>方法会抛出<xref:System.Net.Sockets.SocketException>与<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>设置为本机 Winsock WSAEMSGSIZE 错误代码 (10040)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2886">If the data is too long to pass atomically through the underlying service provider, no data is transmitted and the <xref:System.Net.Sockets.Socket.SendAsync%2A> method throws a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEMSGSIZE error code (10040).</span></span>  
  
 <span data-ttu-id="0c8e6-2887">请注意，成功完成<xref:System.Net.Sockets.Socket.SendAsync%2A>方法并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2887">Note that the successful completion of the <xref:System.Net.Sockets.Socket.SendAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-2888">
            <paramref name="e" /> 参数的 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 或 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性必须引用有效的缓冲区。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2888">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span>
          </span>
          <span data-ttu-id="0c8e6-2889">可以设置这两个属性中的某一个，但不能同时设置这两个属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2889">One or the other of these properties may be set, but not both at the same time.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-2890">已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2890">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-2891">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2891">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2892">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2892">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2893">
            <see cref="T:System.Net.Sockets.Socket" /> 尚未连接或者尚未通过 <see cref="M:System.Net.Sockets.Socket.Accept" />、<see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 或 <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" /> 方法获得。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2893">The <see cref="T:System.Net.Sockets.Socket" /> is not yet connected or was not obtained via an <see cref="M:System.Net.Sockets.Socket.Accept" />, <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />,or <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" />, method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.Socket.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-2894">获取或设置一个值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 发送缓冲区的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2894">Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-2895">
            <see cref="T:System.Int32" />，它包含发送缓冲区的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2895">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the send buffer.</span>
          </span>
          <span data-ttu-id="0c8e6-2896">默认值为 8192。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2896">The default is 8192.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2897">更大的缓冲区大小可能会延迟连接问题的识别。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2897">A larger buffer size might delay the recognition of connection difficulties.</span></span> <span data-ttu-id="0c8e6-2898">请考虑增加缓冲区大小，如果传输大型文件，或者使用的高带宽、 高延迟连接 （如机顶盒宽带提供商。）</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2898">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2899">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.SendBufferSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2899">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2900">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2900">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2901">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2901">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-2902">为设置操作指定的值小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2902">The value specified for a set operation is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-2903">将文件和可选数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2903">Sends a file and optional data synchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.SendFile : string -&gt; unit" Usage="socket.SendFile fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="0c8e6-2904">一个 <see cref="T:System.String" />，它包含要发送的文件的路径和名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2904">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span>
          </span>
          <span data-ttu-id="0c8e6-2905">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2905">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2906">使用 <see cref="T:System.Net.Sockets.Socket" /> 传输标志，将文件 <paramref name="fileName" /> 发送到连接的 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2906">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object with the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> transmit flag.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2907">此重载将该文件发送`fileName`到连接的套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2907">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="0c8e6-2908">`flags`参数默认为<xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread>(0)，并`preBuffer`并`postBuffer`参数默认为`null`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2908">The `flags` parameter defaults to <xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread> (0), and the `preBuffer` and `postBuffer` parameters default to `null`.</span></span> <span data-ttu-id="0c8e6-2909">如果`fileName`是在本地目录中，它可能会标识只是该文件的名称; 否则，必须指定完整路径和文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2909">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="0c8e6-2910">通配符 ("...\\\myfile.txt") 和 UNC 共享名 ("\\\\\\\shared directory\\\myfile.txt") 支持。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2910">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="0c8e6-2911">如果未找到文件，该异常<xref:System.IO.FileNotFoundException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2911">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="0c8e6-2912">此方法使用`TransmitFile`Windows Sockets 2 API 中找到函数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2912">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="0c8e6-2913">有关详细信息`TransmitFile`函数和它的标志，请参阅 MSDN 库中的 Windows 套接字文档。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2913">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="0c8e6-2914"><xref:System.Net.Sockets.Socket.SendFile%2A> 以同步方式将文件发送到远程主机中指定<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2914"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2915"><xref:System.Net.Sockets.Socket.SendFile%2A> 可以使用面向连接的两个和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2915"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2916">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法，否则<xref:System.Net.Sockets.Socket.SendFile%2A>引发<xref:System.Net.Sockets.SocketException>异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2916">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span> <span data-ttu-id="0c8e6-2917">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2917">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2918">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.SendFile%2A>阻止，直到该文件发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2918">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the file is sent.</span></span> <span data-ttu-id="0c8e6-2919">在阻止模式下，<xref:System.Net.Sockets.Socket.SendFile%2A>发送整个文件之前，可能会成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2919">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="0c8e6-2920">则您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2920">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2921">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2921">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2922">成功完成<xref:System.Net.Sockets.Socket.SendFile%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2922">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2923">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2923">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2924">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2924">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2925">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2925">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2926">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2926">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2927">下面的代码示例创建并连接套接字，然后将文件发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2927">The following code example creates and connects a socket and then sends a file to the remote host.</span></span> <span data-ttu-id="0c8e6-2928">文件"test.txt"位于本地计算机的根目录中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2928">The file "test.txt" is located in the root directory of the local machine.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#3)]
 [!code-csharp[NCLSocketEnhancements#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-2929">套接字未连接到远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2929">The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2930">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2930">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-2931">
            <see cref="T:System.Net.Sockets.Socket" /> 对象未处于阻止模式，无法接受此同步调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2931">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="0c8e6-2932">未找到文件 <paramref name="fileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2932">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2933">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2933">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags);" />
      <MemberSignature Language="F#" Value="member this.SendFile : string * byte[] * byte[] * System.Net.Sockets.TransmitFileOptions -&gt; unit" Usage="socket.SendFile (fileName, preBuffer, postBuffer, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="preBuffer" Type="System.Byte[]" />
        <Parameter Name="postBuffer" Type="System.Byte[]" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="0c8e6-2934">一个 <see cref="T:System.String" />，它包含要发送的文件的路径和名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2934">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span>
          </span>
          <span data-ttu-id="0c8e6-2935">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2935">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="preBuffer">
          <span data-ttu-id="0c8e6-2936">一个 <see cref="T:System.Byte" /> 数组，它包含发送文件前要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2936">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span>
          </span>
          <span data-ttu-id="0c8e6-2937">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2937">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="postBuffer">
          <span data-ttu-id="0c8e6-2938">一个 <see cref="T:System.Byte" /> 数组，它包含发送文件后要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2938">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span>
          </span>
          <span data-ttu-id="0c8e6-2939">此参数可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2939">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="0c8e6-2940">一个或多个 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2940">One or more of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2941">通过指定的 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值，将文件 <paramref name="fileName" /> 和数据缓冲区发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2941">Sends the file <paramref name="fileName" /> and buffers of data to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the specified <see cref="T:System.Net.Sockets.TransmitFileOptions" /> value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2942">此重载需要的名称以及你想要发送的文件的按位组合<xref:System.Net.Sockets.TransmitFileOptions>值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2942">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="0c8e6-2943">`preBuffer`参数包含你想要前加上该文件的任何数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2943">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="0c8e6-2944">`postBuffer` 包含你想要遵照该文件的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2944">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="0c8e6-2945">如果`fileName`是在当前工作目录，它可能会标识只是该文件的名称; 否则，必须指定完整路径和文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2945">If `fileName` is in the current working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="0c8e6-2946">通配符 ("...\\\myfile.txt") 和 UNC 共享名 ("\\\\\\\shared directory\\\myfile.txt") 支持。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2946">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span>  
  
 <span data-ttu-id="0c8e6-2947">`flags`参数提供了关于文件传输的其他信息的窗口套接字服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2947">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="0c8e6-2948">有关如何使用此参数的详细信息，请参阅<xref:System.Net.Sockets.TransmitFileOptions>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2948">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="0c8e6-2949">此方法使用`TransmitFile`Windows Sockets 2 API 中找到函数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2949">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="0c8e6-2950">有关详细信息`TransmitFile`函数和它的标志，请参阅 MSDN 库中的 Windows 套接字文档。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2950">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="0c8e6-2951"><xref:System.Net.Sockets.Socket.SendFile%2A> 以同步方式将文件发送到远程主机中指定<xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2951"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-2952"><xref:System.Net.Sockets.Socket.SendFile%2A> 可以使用面向连接的两个和无连接协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2952"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-2953">如果您使用的是无连接协议，则必须调用<xref:System.Net.Sockets.Socket.Connect%2A>之前调用此方法; 否则为<xref:System.Net.Sockets.Socket.SendFile%2A>引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2953">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method; otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-2954">如果使用的是面向连接的协议，则必须使用<xref:System.Net.Sockets.Socket.Connect%2A>建立远程主机连接，或使用<xref:System.Net.Sockets.Socket.Accept%2A>以接受传入连接。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2954">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="0c8e6-2955">如果使用面向连接的协议<xref:System.Net.Sockets.Socket.SendFile%2A>阻止，直到发送整个文件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2955">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="0c8e6-2956">在阻止模式下，<xref:System.Net.Sockets.Socket.SendFile%2A>发送整个文件之前，可能会成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2956">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="0c8e6-2957">则您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2957">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-2958">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2958">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-2959">成功完成<xref:System.Net.Sockets.Socket.SendFile%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2959">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2960">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2960">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-2961">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2961">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-2962">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2962">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-2963">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2963">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-2964">下面的代码示例创建并连接套接字。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2964">The following code example creates and connects a socket.</span></span> <span data-ttu-id="0c8e6-2965">文件"test.txt"位于本地计算机的根目录中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2965">The file "test.txt" is located in the root directory of the local machine.</span></span> <span data-ttu-id="0c8e6-2966">在此示例中，我们创建缓冲区和数据后，并将其与文件一起发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2966">In this example, we create a prebuffer and postbuffer of data and send them to the remote host with the file.</span></span> <span data-ttu-id="0c8e6-2967">默认值<xref:System.Net.Sockets.TransmitFileOptions>使用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2967">The default <xref:System.Net.Sockets.TransmitFileOptions> are used.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#4)]
 [!code-csharp[NCLSocketEnhancements#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-2968">操作系统不是 Windows NT 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2968">The operating system is not Windows NT or later.</span>
          </span>
          <span data-ttu-id="0c8e6-2969">\- 或 -  套接字未连接到远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2969">\- or -  The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-2970">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2970">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-2971">
            <see cref="T:System.Net.Sockets.Socket" /> 对象未处于阻止模式，无法接受此同步调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2971">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="0c8e6-2972">未找到文件 <paramref name="fileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2972">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-2973">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2973">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendPacketsAsync">
      <MemberSignature Language="C#" Value="public bool SendPacketsAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendPacketsAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPacketsAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendPacketsAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendPacketsAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendPacketsAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-2974">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2974">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-2975">将文件集合或者内存中的数据缓冲区以异步方法发送给连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2975">Sends a collection of files or in memory data buffers asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-2976">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2976">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-2977">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2977">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-2978">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2978">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-2979">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-2979">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-2980"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>方法用于将集合中的文件或在内存中数据缓冲区发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2980">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is used to send a collection of files or in memory data buffers to remote host.</span></span> <span data-ttu-id="0c8e6-2981"><xref:System.Net.Sockets.Socket>必须已连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2981">The <xref:System.Net.Sockets.Socket> must already be connected to the remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-2982">如果<xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType>的工作目录中的文件的引用，则可能会将其标识只是该文件的名称; 否则，必须指定完整路径和文件的名称。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2982">If a <xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType> references a file in the working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="0c8e6-2983">支持通配符和 UNC 共享名称。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2983">Wildcards and UNC share names are supported.</span></span> <span data-ttu-id="0c8e6-2984">如果找不到该文件，<xref:System.IO.FileNotFoundException>引发。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2984">If the file is not found, <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="0c8e6-2985">若要在完成时得到通知，必须创建实现事件处理程序的回调方法\<SocketAsyncEventArgs > 委托并将附加到回调<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2985">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="0c8e6-2986"><xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType>属性上的`e`参数提供了关于文件传输的其他信息的窗口套接字服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2986">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="0c8e6-2987">有关如何使用此参数的详细信息，请参阅<xref:System.Net.Sockets.TransmitFileOptions>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2987">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="0c8e6-2988">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>成功调用此方法所需的对象：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2988">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-2989">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2989">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-2990">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2990">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-2991">此方法使用 Windows Sockets 2 API 中找到的 TransmitPackets 函数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2991">This method uses the TransmitPackets function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="0c8e6-2992">有关 TransmitPackets 函数和它的标志的详细信息，请参阅 MSDN 库中的 Windows 套接字文档。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2992">For more information about the TransmitPackets function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="0c8e6-2993">适用于面向连接的协议，尽管<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>方法也适用于无连接协议，前提是先调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法以建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2993">Although intended for connection-oriented protocols, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method to establish a default remote host.</span></span> <span data-ttu-id="0c8e6-2994">使用无连接协议时，您还必须确保文件的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2994">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-2995">如果是这样，不发送数据报并<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>引发<xref:System.Net.Sockets.SocketException>异常。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2995">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
 <span data-ttu-id="0c8e6-2996"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>方法优化根据操作系统使用它。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2996">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized according to the operating system on which it is used.</span></span> <span data-ttu-id="0c8e6-2997">在 Windows server 版本，<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>针对高性能优化方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2997">On Windows server editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for high performance.</span></span>  
  
 <span data-ttu-id="0c8e6-2998">Windows 客户端版本上<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>方法适用于最小内存和资源利用率。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2998">On Windows client editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for minimum memory and resource utilization.</span></span>  
  
 <span data-ttu-id="0c8e6-2999">利用<xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType>中的标志<xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType>属性上的`e`参数可以提供显著的性能优势。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-2999">Use of the <xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType> flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter can deliver significant performance benefits.</span></span> <span data-ttu-id="0c8e6-3000">如果线程启动<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>方法调用的使用进行大量计算，则可以，尽管可能性不大，，Apc 可能无法启动。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3000">If the thread initiating the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method call is being used for heavy computations, it is possible, though unlikely, that APCs could be prevented from launching.</span></span> <span data-ttu-id="0c8e6-3001">请注意，内核和用户模式下的 Apc 之间的差异。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3001">Note that there is a difference between kernel and user-mode APCs.</span></span> <span data-ttu-id="0c8e6-3002">内核 Apc 在一个线程处于等待状态时启动。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3002">Kernel APCs launch when a thread is in a wait state.</span></span> <span data-ttu-id="0c8e6-3003">用户模式下 Apc 在一个线程处于可报警等待状态时启动</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3003">User-mode APCs launch when a thread is in an alertable wait state</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="0c8e6-3004">未找到在 <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> 属性中指定的文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3004">The file specified in the <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> property was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-3005">已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3005">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-3006">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3006">Windows XP or later is required for this method.</span>
          </span>
          <span data-ttu-id="0c8e6-3007">如果 <see cref="T:System.Net.Sockets.Socket" /> 未连接到远程主机，也会发生此异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3007">This exception also occurs if the <see cref="T:System.Net.Sockets.Socket" /> is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3008">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3008">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3009">使用的是无连接 <see cref="T:System.Net.Sockets.Socket" />，并且所发送的文件超过了基础传输的最大数据包大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3009">A connectionless <see cref="T:System.Net.Sockets.Socket" /> is being used and the file being sent exceeds the maximum packet size of the underlying transport.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendTimeout : int with get, set" Usage="System.Net.Sockets.Socket.SendTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3010">获取或设置一个值，该值指定之后同步 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 调用将超时的时间长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3010">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Send" /> call will time out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-3011">超时值（以毫秒为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3011">The time-out value, in milliseconds.</span>
          </span>
          <span data-ttu-id="0c8e6-3012">如果将该属性设置为 1 到 499 之间的值，该值将被更改为 500。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3012">If you set the property with a value between 1 and 499, the value will be changed to 500.</span>
          </span>
          <span data-ttu-id="0c8e6-3013">默认值为 0，指示超时期限无限大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3013">The default value is 0, which indicates an infinite time-out period.</span>
          </span>
          <span data-ttu-id="0c8e6-3014">指定 -1 还会指示超时期限无限大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3014">Specifying -1 also indicates an infinite time-out period.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3015">此选项适用于同步<xref:System.Net.Sockets.Socket.Send%2A>仅调用。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3015">This option applies to synchronous <xref:System.Net.Sockets.Socket.Send%2A> calls only.</span></span> <span data-ttu-id="0c8e6-3016">如果超出超时期限，则<xref:System.Net.Sockets.Socket.Send%2A>方法将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3016">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3017">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.SendTimeout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3017">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3018">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3018">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3019">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3019">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-3020">为设置操作指定的值小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3020">The value specified for a set operation is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendTo">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3021">将数据发送到特定终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3021">Sends data to a specific endpoint.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendTo (buffer As Byte(), remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-3022">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3022">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-3023">
            <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3023">The <see cref="T:System.Net.EndPoint" /> that represents the destination for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3024">将数据发送到指定的终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3024">Sends data to the specified endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-3025">已发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3025">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3026">此重载中的缓冲区偏移量的默认值为 0，要将默认值发送到的大小的字节数`buffer`参数，和<xref:System.Net.Sockets.SocketFlags>默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3026">In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the `buffer` parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span>  
  
 <span data-ttu-id="0c8e6-3027">如果使用的是无连接协议，不需要建立默认远程主机使用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3027">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="0c8e6-3028">只需执行此操作，如果你想要调用<xref:System.Net.Sockets.Socket.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3028">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="0c8e6-3029">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>，则`remoteEP`参数将替代指定的默认远程主机，只为发送操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3029">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="0c8e6-3030">也不需要调用<xref:System.Net.Sockets.Socket.Bind%2A>方法，因为基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3030">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="0c8e6-3031">如果你需要标识分配的本地网络地址和端口号，则可以使用<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性后的<xref:System.Net.Sockets.Socket.SendTo%2A>方法成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3031">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="0c8e6-3032">适用于无连接协议，尽管<xref:System.Net.Sockets.Socket.SendTo%2A>也适用于面向连接的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3032">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="0c8e6-3033">如果使用的是面向连接的协议，首先必须通过调用建立远程主机连接<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的连接请求使用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3033">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-3034">如果没有建立或接受远程主机连接，<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3034">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-3035">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3035">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-3036">在这些情况下，任一<xref:System.Net.Sockets.Socket.SendTo%2A>将忽略`remoteEP`参数仅将数据发送到已连接或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3036">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-3037">阻止套接字将阻止，直到发送的字节缓冲区中的所有。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3037">Blocking sockets will block until the all of the bytes in the buffer are sent.</span></span> <span data-ttu-id="0c8e6-3038">由于非阻止性<xref:System.Net.Sockets.Socket>完成立即，它可能不会发送的字节中的所有`buffer`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3038">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="0c8e6-3039">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序发送的字节中的所有`buffer`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3039">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="0c8e6-3040">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3040">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-3041">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3041">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="0c8e6-3042">成功完成<xref:System.Net.Sockets.Socket.SendTo%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3042">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="0c8e6-3043">如果在阻止模式下，使用无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>会阻塞，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3043">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-3044">如果你想要将数据发送到的广播地址，则必须首先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3044">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-3045">您还必须确保发送的字节数不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3045">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-3046">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3046">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3047">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3047">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3048">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3048">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3049">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3049">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-3050">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3050">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3051">下面的代码示例将无连接的数据报发送到指定的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3051">The following code example sends a connectionless datagram to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Sync_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Sync_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-3052">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3052">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-3053">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3053">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3054">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3054">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3055">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3055">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-3056">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3056">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-3057">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3057">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-3058">
            <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3058">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3059">使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将数据发送到特定的终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3059">Sends data to a specific endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-3060">已发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3060">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3061">此重载中的缓冲区偏移量的默认值为 0，并要将默认值发送到的大小的字节数`buffer`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3061">In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the `buffer`.</span></span> <span data-ttu-id="0c8e6-3062">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3062">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-3063">如果使用的是无连接协议，不需要建立默认远程主机使用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3063">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="0c8e6-3064">只需执行此操作，如果你想要调用<xref:System.Net.Sockets.Socket.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3064">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="0c8e6-3065">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>，则`remoteEP`参数将替代指定的默认远程主机，只为发送操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3065">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="0c8e6-3066">也不需要调用<xref:System.Net.Sockets.Socket.Bind%2A>方法，因为基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3066">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="0c8e6-3067">如果你需要标识分配的本地网络地址和端口号，则可以使用<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性后的<xref:System.Net.Sockets.Socket.SendTo%2A>方法成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3067">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="0c8e6-3068">适用于无连接协议，尽管<xref:System.Net.Sockets.Socket.SendTo%2A>也适用于面向连接的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3068">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="0c8e6-3069">如果使用的是面向连接的协议，首先必须通过调用建立远程主机连接<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的连接请求使用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3069">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-3070">如果没有建立或接受远程主机连接，<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3070">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-3071">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3071">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-3072">在这些情况下，任一<xref:System.Net.Sockets.Socket.SendTo%2A>将忽略`remoteEP`参数仅将数据发送到已连接或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3072">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-3073">阻止套接字将一直阻止请求中的字节的所有`buffer`发送。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3073">Blocking sockets will block until the requested all of the bytes in the `buffer` are sent.</span></span> <span data-ttu-id="0c8e6-3074">由于非阻止性<xref:System.Net.Sockets.Socket>完成立即，它可能不会发送的字节中的所有`buffer`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3074">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="0c8e6-3075">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序发送的字节中的所有`buffer`。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3075">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="0c8e6-3076">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3076">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-3077">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3077">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="0c8e6-3078">成功完成<xref:System.Net.Sockets.Socket.SendTo%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3078">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="0c8e6-3079">如果在阻止模式下，使用无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>会阻塞，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3079">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-3080">如果你想要将数据发送到的广播地址，则必须首先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3080">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-3081">您还必须确保发送的字节数不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3081">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-3082">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3082">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3083">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3083">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3084">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3084">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3085">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3085">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-3086">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3086">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3087">下面的代码示例将无连接的数据报发送到指定的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3087">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="0c8e6-3088"><xref:System.Net.Sockets.SocketFlags> 传递给<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3088"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Sync_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Sync_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-3089">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3089">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-3090">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3090">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3091">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3091">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3092">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3092">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-3093">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3093">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-3094">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3094">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-3095">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3095">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-3096">
            <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3096">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3097">使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将指定字节数的数据发送到指定的终结点。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3097">Sends the specified number of bytes of data to the specified endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-3098">已发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3098">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3099">此重载中的缓冲区偏移量的默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3099">In this overload, the buffer offset defaults to 0.</span></span> <span data-ttu-id="0c8e6-3100">如果指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3100">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-3101">如果使用的是无连接协议，不需要建立默认远程主机使用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3101">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="0c8e6-3102">只需执行此操作，如果你想要调用<xref:System.Net.Sockets.Socket.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3102">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="0c8e6-3103">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>，则`remoteEP`参数将替代指定的默认远程主机，只为发送操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3103">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="0c8e6-3104">也不需要调用<xref:System.Net.Sockets.Socket.Bind%2A>方法，因为基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3104">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="0c8e6-3105">如果你需要标识分配的本地网络地址和端口号，则可以使用<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性后的<xref:System.Net.Sockets.Socket.SendTo%2A>方法成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3105">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="0c8e6-3106">适用于无连接协议，尽管<xref:System.Net.Sockets.Socket.SendTo%2A>也适用于面向连接的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3106">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="0c8e6-3107">如果使用的是面向连接的协议，首先必须通过调用建立远程主机连接<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的连接请求使用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3107">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-3108">如果没有建立或接受远程主机连接，<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3108">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-3109">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3109">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-3110">在这些情况下，任一<xref:System.Net.Sockets.Socket.SendTo%2A>将忽略`remoteEP`参数仅将数据发送到已连接或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3110">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-3111">阻止套接字将阻止，直到发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3111">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="0c8e6-3112">由于非阻止性<xref:System.Net.Sockets.Socket>完成立即，它可能不会发送所有单个操作中请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3112">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="0c8e6-3113">它是应用程序负责跟踪发送的字节数并重试操作，直到应用程序发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3113">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="0c8e6-3114">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3114">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-3115">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3115">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="0c8e6-3116">成功完成<xref:System.Net.Sockets.Socket.SendTo%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3116">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="0c8e6-3117">如果在阻止模式下，使用无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>会阻塞，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3117">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-3118">如果你想要将数据发送到的广播地址，则必须首先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3118">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-3119">您还必须确保发送的字节数不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3119">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-3120">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3120">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3121">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3121">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3122">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3122">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3123">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3123">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-3124">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3124">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3125">下面的代码示例将无连接的数据报发送到指定的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3125">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="0c8e6-3126">大小和<xref:System.Net.Sockets.SocketFlags>传递给<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3126">The size and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Sync_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Sync_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-3127">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3127">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-3128">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3128">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-3129">指定的 <paramref name="size" /> 超出 <paramref name="buffer" /> 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3129">The specified <paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3130">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3130">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3131">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3131">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * int * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, offset, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="0c8e6-3132">类型 <see cref="T:System.Byte" /> 的数组，其中包含要发送的数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3132">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="0c8e6-3133">开始发送数据的缓冲区中的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3133">The position in the data buffer at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="0c8e6-3134">要发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3134">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="0c8e6-3135">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3135">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="0c8e6-3136">
            <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3136">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3137">使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将指定字节数的数据发送到指定终结点（从缓冲区中的指定位置开始）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3137">Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-3138">已发送的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3138">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3139">在此重载中，如果您指定<xref:System.Net.Sockets.SocketFlags.DontRoute>标记为`socketflags`参数，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3139">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-3140">如果使用的是无连接协议，不需要建立默认远程主机使用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3140">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="0c8e6-3141">只需执行此操作，如果你想要调用<xref:System.Net.Sockets.Socket.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3141">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="0c8e6-3142">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>方法之前调用<xref:System.Net.Sockets.Socket.SendTo%2A>，则`remoteEP`参数将替代指定的默认远程主机，只为发送操作。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3142">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="0c8e6-3143">也不需要调用<xref:System.Net.Sockets.Socket.Bind%2A>方法，因为基础服务提供程序将分配的最合适的本地网络地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3143">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="0c8e6-3144">如果你需要标识分配的本地网络地址和端口号，则可以使用<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性后的<xref:System.Net.Sockets.Socket.SendTo%2A>方法成功完成。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3144">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="0c8e6-3145">适用于无连接协议，尽管<xref:System.Net.Sockets.Socket.SendTo%2A>也适用于面向连接的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3145">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="0c8e6-3146">如果使用的是面向连接的协议，首先必须通过调用建立远程主机连接<xref:System.Net.Sockets.Socket.Connect%2A>方法，或接受传入的连接请求使用<xref:System.Net.Sockets.Socket.Accept%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3146">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="0c8e6-3147">如果没有建立或接受远程主机连接，<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3147">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-3148">您还可以建立默认远程主机之前调用的无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3148">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="0c8e6-3149">在这些情况下，任一<xref:System.Net.Sockets.Socket.SendTo%2A>将忽略`remoteEP`参数仅将数据发送到已连接或默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3149">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="0c8e6-3150">阻止套接字将阻止，直到发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3150">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="0c8e6-3151">由于非阻塞<xref:System.Net.Sockets.Socket>完成立即，它可能不会发送所有单个操作中请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3151">Since a non-blocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="0c8e6-3152">它由你的应用程序负责跟踪发送的字节数，重试该操作，直到应用程序发送请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3152">It is your applications responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="0c8e6-3153">此外，还有您发送的数据将立即显示在网络不能保证。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3153">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="0c8e6-3154">若要增加网络效率，基础系统可能会延迟传输，直到收集了大量传出数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3154">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="0c8e6-3155">成功完成<xref:System.Net.Sockets.Socket.SendTo%2A>方法意味着的基础系统已为你的数据的网络发送的缓冲区的空间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3155">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="0c8e6-3156">如果在阻止模式下，使用无连接协议<xref:System.Net.Sockets.Socket.SendTo%2A>会阻塞，直到发送数据报。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3156">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="0c8e6-3157">如果你想要将数据发送到的广播地址，则必须首先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项设为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3157">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c8e6-3158">您还必须确保大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3158">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-3159">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.SendTo%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3159">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3160">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3160">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3161">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3161">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3162">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3162">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-3163">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3163">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3164">下面的代码示例将无连接的数据报发送到指定的远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3164">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="0c8e6-3165">偏移量、 大小、 和<xref:System.Net.Sockets.SocketFlags>传递给<xref:System.Net.Sockets.Socket.SendTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3165">The offset, size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Sync_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Sync_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-3166">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3166">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0c8e6-3167">- 或 -  <paramref name="remoteEP" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3167">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-3168">
            <paramref name="offset" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3168">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-3169">- 或 -  <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3169">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="0c8e6-3170">- 或 -  <paramref name="size" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3170">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0c8e6-3171">- 或 -  <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3171">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3172">
            <paramref name="socketFlags" /> 不是有效的值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3172">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="0c8e6-3173">- 或 -  访问 <see cref="T:System.Net.Sockets.Socket" /> 时出现操作系统错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3173">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3174">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3174">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="0c8e6-3175">调用堆栈中的调用方没有所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3175">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendToAsync">
      <MemberSignature Language="C#" Value="public bool SendToAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendToAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendToAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendToAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendToAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendToAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="0c8e6-3176">要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3176">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3177">以异步方式将数据发送到特定远程主机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3177">Sends data asynchronously to a specific remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c8e6-3178">如果 I/O 操作挂起，将返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3178">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="0c8e6-3179">操作完成时，将引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3179">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="0c8e6-3180">如果 I/O 操作同步完成，将返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3180">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="0c8e6-3181">在这种情况下，将不会引发 <paramref name="e" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="e" /> 对象以检索操作的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3181">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3182"><xref:System.Net.Sockets.Socket.SendToAsync%2A>方法启动异步发送操作中指定远程主机<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>属性的`e`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3182">The <xref:System.Net.Sockets.Socket.SendToAsync%2A> method starts an asynchronous send operation to the remote host specified in the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property of the `e` parameter.</span></span> <span data-ttu-id="0c8e6-3183">调用<xref:System.Net.Sockets.Socket.SendToAsync%2A>方法使你能够发送单独的执行线程中的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3183">Calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="0c8e6-3184">尽管此方法适用于无连接协议，<xref:System.Net.Sockets.Socket.SendToAsync%2A>适用于无连接和面向连接的协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3184">Although this method is intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendToAsync%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="0c8e6-3185">若要在完成时得到通知，必须创建实现事件处理程序的回调方法\<SocketAsyncEventArgs > 委托并将附加到回调<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3185">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="0c8e6-3186">下列属性和事件上的<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>成功调用此方法所需的对象：</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3186">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="0c8e6-3187">调用方可能会设置<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>属性设置为在调用之前所需的任何用户状态对象<xref:System.Net.Sockets.Socket.SendToAsync%2A>方法，以便可在回调方法中检索信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3187">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="0c8e6-3188">如果回调需要比单个对象的详细信息，可以创建一个小类来保存作为成员的其他所需的状态信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3188">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="0c8e6-3189">如果使用的是面向连接的协议，必须首先调用<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.AcceptAsync%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3189">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span> <span data-ttu-id="0c8e6-3190">否则为<xref:System.Net.Sockets.Socket.SendToAsync%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3190">Otherwise <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-3191">当使用面向连接的协议<xref:System.Net.Sockets.Socket.SendToAsync%2A>方法将忽略<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>属性并将数据发送到<xref:System.Net.EndPoint?displayProperty=nameWithType>中建立<xref:System.Net.Sockets.Socket.Accept%2A>， <xref:System.Net.Sockets.Socket.AcceptAsync%2A>， <xref:System.Net.Sockets.Socket.BeginAccept%2A>， <xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>或<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3191">When using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method will ignore the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property and send data to the <xref:System.Net.EndPoint?displayProperty=nameWithType> established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-3192">如果使用的是无连接协议，不需要建立默认远程主机使用<xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法，然后调用<xref:System.Net.Sockets.Socket.SendToAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3192">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>.</span></span> <span data-ttu-id="0c8e6-3193">只需执行此操作，如果你想要调用<xref:System.Net.Sockets.Socket.BeginSend%2A>或<xref:System.Net.Sockets.Socket.SendAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3193">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.SendAsync%2A> methods.</span></span> <span data-ttu-id="0c8e6-3194">如果调用<xref:System.Net.Sockets.Socket.BeginConnect%2A>， <xref:System.Net.Sockets.Socket.Connect%2A>，或<xref:System.Net.Sockets.Socket.ConnectAsync%2A>方法，然后调用<xref:System.Net.Sockets.Socket.SendToAsync%2A>，则<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>属性将为该发送操作仅重写指定的默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3194">If you do call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>, the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="0c8e6-3195">也不需要调用<xref:System.Net.Sockets.Socket.Bind%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3195">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="0c8e6-3196">在这种情况下，基础服务提供程序将分配的最合适的本地网络 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3196">In this case, the underlying service provider will assign the most appropriate local network IP address and port number.</span></span> <span data-ttu-id="0c8e6-3197">如果你想要选择可用端口的基础服务提供程序，请使用端口号 0。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3197">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="0c8e6-3198">如果你需要标识分配的本地网络 IP 地址和端口号，则可以使用<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>属性后的<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>事件收到信号状态，调用关联的委托。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3198">If you need to identify the assigned local network IP address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event is signaled and the associated delegates are called.</span></span>  
  
 <span data-ttu-id="0c8e6-3199">如果你想要将数据发送到的广播地址，则必须首先调用<xref:System.Net.Sockets.Socket.SetSocketOption%2A>方法，设置套接字选项<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>为 true。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3199">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option for <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> to true.</span></span> <span data-ttu-id="0c8e6-3200">您还必须确保在缓冲区的大小不超过基础服务提供程序的最大数据包大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3200">You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="0c8e6-3201">如果是这样，将不发送数据报并<xref:System.Net.Sockets.Socket.SendToAsync%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3201">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="0c8e6-3202">如果指定中的 DontRoute 标志<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>属性中，不会将路由发送的数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3202">If you specify the DontRoute flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="0c8e6-3203">对于面向消息的套接字，必须格外小心不能超过基础传输的最大消息大小。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3203">For message-oriented sockets, care must be taken not to exceed the maximum message size of the underlying transport.</span></span> <span data-ttu-id="0c8e6-3204">如果缓冲区的大小超过基础服务提供程序的最大数据包大小，不发送数据报并<xref:System.Net.Sockets.Socket.SendToAsync%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3204">If the size of the buffer exceeds the maximum packet size of the underlying service provider, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="0c8e6-3205">成功完成<xref:System.Net.Sockets.Socket.SendToAsync%2A>方法并不表示数据已成功传递。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3205">The successful completion of a <xref:System.Net.Sockets.Socket.SendToAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-3206">
            <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3206">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-3207">已经在使用 <paramref name="e" /> 参数中指定的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象执行套接字操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3207">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-3208">此方法需要 Windows XP 或更高版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3208">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3209">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3209">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3210">指定的协议是面向连接的，但 <see cref="T:System.Net.Sockets.Socket" /> 尚未连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3210">The protocol specified is connection-oriented, but the <see cref="T:System.Net.Sockets.Socket" /> is not yet connected.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SetIPProtectionLevel">
      <MemberSignature Language="C#" Value="public void SetIPProtectionLevel (System.Net.Sockets.IPProtectionLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIPProtectionLevel(valuetype System.Net.Sockets.IPProtectionLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIPProtectionLevel (level As IPProtectionLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetIPProtectionLevel(System::Net::Sockets::IPProtectionLevel level);" />
      <MemberSignature Language="F#" Value="member this.SetIPProtectionLevel : System.Net.Sockets.IPProtectionLevel -&gt; unit" Usage="socket.SetIPProtectionLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Net.Sockets.IPProtectionLevel" />
      </Parameters>
      <Docs>
        <param name="level">
          <span data-ttu-id="0c8e6-3211">要为此套接字设置的 IP 保护级别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3211">The IP protection level to set on this socket.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3212">设置套接字的 IP 保护级别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3212">Set the IP protection level on a socket.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3213"><xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A>方法使限制 IPv6 或 IP 套接字以侦听指定的作用域，如具有相同的地址的链接本地或站点本地前缀。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3213">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method enables restricting an a IPv6 or IP socket to listen on a specified scope, such as addresses with the same link local or site local prefix.</span></span> <span data-ttu-id="0c8e6-3214">此套接字选项使应用程序可以限制对 IPv6 或 IP 套接字的访问权限。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3214">This socket option enables applications to place access restrictions on IPv6 or IP sockets.</span></span> <span data-ttu-id="0c8e6-3215">通过应用此类限制，可让在专用局域网上运行的应用程序能够通过简单的方式很好地增强自身的安全性，以便防范外部攻击。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3215">Such restrictions enable an application running on a private LAN to simply and robustly harden itself against external attacks.</span></span> <span data-ttu-id="0c8e6-3216">此套接字选项还可用于删除访问权限限制，如果`level`参数设置为<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3216">This socket option can also be used to remove access restrictions if the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="0c8e6-3217">此套接字选项可以扩大或缩小侦听套接字的范围，从而使得公共用户和私人用户可以在适当情况下对站点进行无限制的访问，或者可以根据需要对同一站点进行有限制的访问。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3217">This socket option widens or narrows the scope of a listening socket, enabling unrestricted access from public and private users when appropriate, or restricting access only to the same site, as required.</span></span>  
  
 <span data-ttu-id="0c8e6-3218">此套接字选项具有 <xref:System.Net.Sockets.IPProtectionLevel> 枚举中指定的已定义保护级别。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3218">This socket option has defined protection levels specified in the <xref:System.Net.Sockets.IPProtectionLevel> enumeration.</span></span>  
  
 <span data-ttu-id="0c8e6-3219"><xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A>方法用于启用或禁用网络地址遍历 (NAT) 为<xref:System.Net.Sockets.Socket>实例。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3219">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method is used to enable or disable Network Address Traversal (NAT) for a <xref:System.Net.Sockets.Socket> instance.</span></span> <span data-ttu-id="0c8e6-3220">可以使用 Teredo、 6to4、 或的 ISATAP 隧道提供 NAT 遍历。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3220">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="0c8e6-3221">当`level`参数设置为<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>，或<xref:System.Net.Sockets.IPProtectionLevel.Restricted>，这将显式禁用 NAT 遍历<xref:System.Net.Sockets.Socket>实例。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3221">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, or <xref:System.Net.Sockets.IPProtectionLevel.Restricted>, this explicitly disables NAT traversal for a <xref:System.Net.Sockets.Socket> instance.</span></span>  
  
 <span data-ttu-id="0c8e6-3222">当`level`参数设置为<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>，这可能使 NAT 遍历<xref:System.Net.Sockets.Socket>具体取决于在系统上发生的防火墙规则。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3222">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, this may allow NAT traversal for a <xref:System.Net.Sockets.Socket> depending on firewall rules in place on the system.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0c8e6-3223">
            <paramref name="level" /> 参数不能为 <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3223">The <paramref name="level" /> parameter cannot be <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />.</span>
          </span>
          <span data-ttu-id="0c8e6-3224">IP 保护级别不能设置为未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3224">The IP protection level cannot be set to unspecified.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-3225">套接字的 <see cref="T:System.Net.Sockets.AddressFamily" /> 必须为 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3225">The <see cref="T:System.Net.Sockets.AddressFamily" /> of the socket must be either <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3226">设置 <see cref="T:System.Net.Sockets.Socket" /> 选项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3226">Sets a <see cref="T:System.Net.Sockets.Socket" /> option.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, bool optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, bool optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * bool -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="0c8e6-3227">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3227">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="0c8e6-3228">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3228">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="0c8e6-3229">选项的值，表示为 <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3229">The value of the option, represented as a <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3230">将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定的 <see cref="T:System.Boolean" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3230">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified <see cref="T:System.Boolean" /> value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3231"><xref:System.Net.Sockets.Socket> 选项将确定当前的行为<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3231"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-3232">设置`optionValue`到`true`以启用该选项，或设置为`false`以禁用该选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3232">Set `optionValue` to `true` to enable the option, or to `false` to disable the option.</span></span>  
  
 <span data-ttu-id="0c8e6-3233"><xref:System.Net.Sockets.Socket> 按协议支持的级别进行分组选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3233"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="0c8e6-3234">下面列出了各种<xref:System.Net.Sockets.Socket>可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3234">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="0c8e6-3235">这些选项进行分组的相应<xref:System.Net.Sockets.SocketOptionLevel>值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3235">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value.</span></span> <span data-ttu-id="0c8e6-3236">如果你要设置上述任何选项，请确保使用适当<xref:System.Net.Sockets.SocketOptionLevel>值`optionLevel`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3236">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value for the `optionLevel` parameter.</span></span> <span data-ttu-id="0c8e6-3237">选择要设置的选项必须指定在`optionName`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3237">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="0c8e6-3238">如果你想要获取任何所列的选项的当前值，请使用<xref:System.Net.Sockets.Socket.GetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3238">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-3239"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3239"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.AcceptConnection>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
 <span data-ttu-id="0c8e6-3240"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3240"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="0c8e6-3241"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3241"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="0c8e6-3242"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3242"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="0c8e6-3243">有关这些选项的详细信息，请参阅<xref:System.Net.Sockets.SocketOptionName>枚举。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3243">For more information on these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3244">如果你收到<xref:System.Net.Sockets.SocketException>异常，请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3244">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3245">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3245">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3246">下面的代码示例打开一个套接字并启用`DontLinger`和`OutOfBandInline`套接字选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3246">The following code example opens a socket and enables the `DontLinger` and the `OutOfBandInline` socket options.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#5)]
 [!code-csharp[NCLSocketEnhancements#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3247">
            <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3247">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3248">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3248">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * byte[] -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="0c8e6-3249">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3249">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="0c8e6-3250">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3250">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="0c8e6-3251">
            <see cref="T:System.Byte" /> 类型的数组，表示选项值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3251">An array of type <see cref="T:System.Byte" /> that represents the value of the option.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3252">将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定的值，表示为字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3252">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as a byte array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3253"><xref:System.Net.Sockets.Socket> 选项将确定当前的行为<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3253"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-3254">使用此重载来设置那些<xref:System.Net.Sockets.Socket>需要为选项值的字节数组的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3254">Use this overload to set those <xref:System.Net.Sockets.Socket> options that require a byte array as an option value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3255">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3255">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3256">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3256">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3257">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3257">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-3258">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3258">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3259">下面的代码示例设置<xref:System.Net.Sockets.LingerOption>和<xref:System.Net.Sockets.Socket.Send%2A>超时值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3259">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3260">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3260">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3261">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3261">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * int -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="0c8e6-3262">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3262">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="0c8e6-3263">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3263">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="0c8e6-3264">该选项的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3264">A value of the option.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3265">将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定的整数值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3265">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3266"><xref:System.Net.Sockets.Socket> 选项将确定当前的行为<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3266"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-3267">有关使用选项<xref:System.Boolean>数据类型，指定一个非零值以启用该选项和零值以禁用该选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3267">For an option with a <xref:System.Boolean> data type, specify a nonzero value to enable the option, and a zero value to disable the option.</span></span> <span data-ttu-id="0c8e6-3268">有关使用整数数据类型的选项，指定适当的值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3268">For an option with an integer data type, specify the appropriate value.</span></span> <span data-ttu-id="0c8e6-3269"><xref:System.Net.Sockets.Socket> 按协议支持的级别进行分组选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3269"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="0c8e6-3270">下面列出了各种<xref:System.Net.Sockets.Socket>可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3270">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="0c8e6-3271">这些选项进行分组的相应<xref:System.Net.Sockets.SocketOptionLevel>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3271">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel>.</span></span> <span data-ttu-id="0c8e6-3272">如果你要设置上述任何选项，请确保使用适当<xref:System.Net.Sockets.SocketOptionLevel>为`optionLevel`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3272">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> for the `optionLevel` parameter.</span></span> <span data-ttu-id="0c8e6-3273">选择要设置的选项必须指定在`optionName`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3273">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="0c8e6-3274">如果你想要获取任何所列的选项的当前值，请使用<xref:System.Net.Sockets.Socket.GetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3274">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="0c8e6-3275"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3275"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Error>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Type>  
  
 <span data-ttu-id="0c8e6-3276"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3276"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IPOptions>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IpTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastInterface>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.TypeOfService>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="0c8e6-3277"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3277"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="0c8e6-3278"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3278"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ChecksumCoverage>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="0c8e6-3279"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType> 可以使用此重载来设置的选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3279"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HopLimit>  
  
 <span data-ttu-id="0c8e6-3280">有关这些选项的详细信息，请参阅<xref:System.Net.Sockets.SocketOptionName>枚举。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3280">For more information about these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3281">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3281">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3282">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3282">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3283">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3283">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-3284">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3284">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3285">下面的代码示例设置<xref:System.Net.Sockets.LingerOption>和<xref:System.Net.Sockets.Socket.Send%2A>超时值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3285">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3286">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3286">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3287">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3287">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, object optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, object optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, System::Object ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * obj -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="0c8e6-3288">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3288">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="0c8e6-3289">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3289">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="0c8e6-3290">一个 <see cref="T:System.Net.Sockets.LingerOption" /> 或 <see cref="T:System.Net.Sockets.MulticastOption" />，它包含该选项的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3290">A <see cref="T:System.Net.Sockets.LingerOption" /> or <see cref="T:System.Net.Sockets.MulticastOption" /> that contains the value of the option.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3291">将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定值，表示为对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3291">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3292"><xref:System.Net.Sockets.Socket> 选项将确定当前的行为<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3292"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-3293">使用此重载来设置<xref:System.Net.Sockets.SocketOptionName.Linger>， <xref:System.Net.Sockets.SocketOptionName.AddMembership>，并<xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket>选项。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3293">Use this overload to set the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="0c8e6-3294">有关<xref:System.Net.Sockets.SocketOptionName.Linger>选项，请使用<xref:System.Net.Sockets.Socket>为`optionLevel`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3294">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="0c8e6-3295">有关<xref:System.Net.Sockets.SocketOptionName.AddMembership>并<xref:System.Net.Sockets.SocketOptionName.DropMembership>，使用<xref:System.Net.Sockets.SocketOptionLevel.IP>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3295">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="0c8e6-3296">如果你想要获取任何上面列出的选项的当前值，请使用<xref:System.Net.Sockets.Socket.GetSocketOption%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3296">If you want to get the current value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3297">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3297">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3298">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3298">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3299">下面的代码示例设置<xref:System.Net.Sockets.LingerOption>和<xref:System.Net.Sockets.Socket.Send%2A>超时值。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3299">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c8e6-3300">
            <paramref name="optionValue" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3300">
              <paramref name="optionValue" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3301">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3301">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3302">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3302">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown (System.Net.Sockets.SocketShutdown how);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown(valuetype System.Net.Sockets.SocketShutdown how) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown (how As SocketShutdown)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown(System::Net::Sockets::SocketShutdown how);" />
      <MemberSignature Language="F#" Value="member this.Shutdown : System.Net.Sockets.SocketShutdown -&gt; unit" Usage="socket.Shutdown how" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="how" Type="System.Net.Sockets.SocketShutdown" />
      </Parameters>
      <Docs>
        <param name="how">
          <span data-ttu-id="0c8e6-3303">
            <see cref="T:System.Net.Sockets.SocketShutdown" /> 值之一，它指定不再允许执行的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3303">One of the <see cref="T:System.Net.Sockets.SocketShutdown" /> values that specifies the operation that will no longer be allowed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c8e6-3304">禁用某 <see cref="T:System.Net.Sockets.Socket" /> 上的发送和接收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3304">Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3305">当使用面向连接的<xref:System.Net.Sockets.Socket>，始终调用<xref:System.Net.Sockets.Socket.Shutdown%2A>方法关闭之前<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3305">When using a connection-oriented <xref:System.Net.Sockets.Socket>, always call the <xref:System.Net.Sockets.Socket.Shutdown%2A> method before closing the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-3306">这可确保发送和关闭之前连接的套接字上接收到的所有数据。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3306">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="0c8e6-3307">调用<xref:System.Net.Sockets.Socket.Close%2A>方法来释放所有托管和非托管资源与关联<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3307">Call the <xref:System.Net.Sockets.Socket.Close%2A> method to free all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="0c8e6-3308">不要尝试重复使用<xref:System.Net.Sockets.Socket>关闭之后。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3308">Do not attempt to reuse the <xref:System.Net.Sockets.Socket> after closing.</span></span>  
  
 <span data-ttu-id="0c8e6-3309">下表显示<xref:System.Net.Sockets.SocketShutdown>对有效的枚举值`how`参数。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3309">The following table shows the <xref:System.Net.Sockets.SocketShutdown> enumeration values that are valid for the `how` parameter.</span></span>  
  
|<span data-ttu-id="0c8e6-3310">“值”</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3310">Value</span></span>|<span data-ttu-id="0c8e6-3311">描述</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3311">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="0c8e6-3312">发送</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3312">Send</span></span>|<span data-ttu-id="0c8e6-3313">禁止对此发送<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3313">Disable sending on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="0c8e6-3314">接收</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3314">Receive</span></span>|<span data-ttu-id="0c8e6-3315">禁用对此接收<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3315">Disable receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="0c8e6-3316">消息和传送</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3316">Both</span></span>|<span data-ttu-id="0c8e6-3317">禁用发送和接收对此<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3317">Disable both sending and receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
  
 <span data-ttu-id="0c8e6-3318">设置`how`到<xref:System.Net.Sockets.SocketShutdown.Send>指定后续调用<xref:System.Net.Sockets.Socket.Send%2A>不允许。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3318">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Send> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Send%2A> are not allowed.</span></span> <span data-ttu-id="0c8e6-3319">如果您使用的是无连接<xref:System.Net.Sockets.Socket>，并指定<xref:System.Net.Sockets.SocketShutdown.Send>不会产生影响。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3319">If you are using a connectionless <xref:System.Net.Sockets.Socket>, specifying <xref:System.Net.Sockets.SocketShutdown.Send> will have no effect.</span></span>  
  
 <span data-ttu-id="0c8e6-3320">设置`how`到<xref:System.Net.Sockets.SocketShutdown.Receive>指定后续调用<xref:System.Net.Sockets.Socket.Receive%2A>不允许。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3320">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Receive> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Receive%2A> are not allowed.</span></span> <span data-ttu-id="0c8e6-3321">这没有任何影响较低的协议层上。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3321">This has no effect on lower protocol layers.</span></span> <span data-ttu-id="0c8e6-3322">如果使用的是面向连接的协议，如果存在以下条件之一调用后，连接将终止<xref:System.Net.Sockets.Socket.Shutdown%2A>:</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3322">If you are using a connection-oriented protocol, the connection is terminated if either of the following conditions exist after a call to <xref:System.Net.Sockets.Socket.Shutdown%2A> :</span></span>  
  
-   <span data-ttu-id="0c8e6-3323">数据是等待接收的传入网络缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3323">Data is in the incoming network buffer waiting to be received.</span></span>  
  
-   <span data-ttu-id="0c8e6-3324">更多的数据现正供应。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3324">More data has arrived.</span></span>  
  
 <span data-ttu-id="0c8e6-3325">如果使用的是无连接协议，数据报是接受并已排队。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3325">If you are using a connectionless protocol, datagrams are accepted and queued.</span></span> <span data-ttu-id="0c8e6-3326">但是，如果没有缓冲区空间可用于其他传入的数据报，他们会被放弃，并且会向发件人返回任何错误。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3326">However, if no buffer space is available for additional incoming datagrams, they will be discarded and no error will be returned to the sender.</span></span> <span data-ttu-id="0c8e6-3327">使用<xref:System.Net.Sockets.Socket.Shutdown%2A>上是无连接<xref:System.Net.Sockets.Socket>不建议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3327">Using <xref:System.Net.Sockets.Socket.Shutdown%2A> on a connectionless <xref:System.Net.Sockets.Socket> is not recommended.</span></span>  
  
 <span data-ttu-id="0c8e6-3328">设置`how`到<xref:System.Net.Sockets.SocketShutdown.Both>同时禁用发送和接收上文所述。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3328">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Both> disables both sends and receives as described above.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3329">如果你收到<xref:System.Net.Sockets.SocketException>调用时<xref:System.Net.Sockets.Socket.Shutdown%2A>方法，请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3329">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3330">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3330">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c8e6-3331">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3331">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="0c8e6-3332">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3332">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3333">下面的代码示例使用<xref:System.Net.Sockets.Socket.Shutdown%2A>若要禁用<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3333">The following code example uses <xref:System.Net.Sockets.Socket.Shutdown%2A> to disable the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3334">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3334">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3335">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3335">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketShutdown" />
      </Docs>
    </Member>
    <Member MemberName="SocketType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketType SocketType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketType SocketType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SocketType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SocketType As SocketType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::SocketType SocketType { System::Net::Sockets::SocketType get(); };" />
      <MemberSignature Language="F#" Value="member this.SocketType : System.Net.Sockets.SocketType" Usage="System.Net.Sockets.Socket.SocketType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3336">获取 <see cref="T:System.Net.Sockets.Socket" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3336">Gets the type of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-3337">
            <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3337">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3338"><xref:System.Net.Sockets.Socket.SocketType%2A> 是只读的则会设置<xref:System.Net.Sockets.Socket>创建。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3338"><xref:System.Net.Sockets.Socket.SocketType%2A> is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3339">下面的代码示例显示<xref:System.Net.Sockets.AddressFamily>， <xref:System.Net.Sockets.SocketType>，和<xref:System.Net.Sockets.ProtocolType>到控制台。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3339">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv4 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsIPv4 : bool" Usage="System.Net.Sockets.Socket.SupportsIPv4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use OSSupportsIPv4 instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3340">获取一个值，该值指示在当前主机上 IPv4 支持是否可用并且已启用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3340">Gets a value indicating whether IPv4 support is available and enabled on the current host.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-3341">如果当前主机支持 IPv4 协议，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3341">
              <see langword="true" /> if the current host supports the IPv4 protocol; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3342">操作系统可能会支持 IPv4 和 IPv6 协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3342">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv6 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsIPv6 : bool" Usage="System.Net.Sockets.Socket.SupportsIPv6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use OSSupportsIPv6 instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3343">获取一个值，该值指示 Framework 对某些已过时的 <see cref="T:System.Net.Dns" /> 成员是否支持 IPv6。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3343">Gets a value that indicates whether the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> members.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-3344">如果 Framework 对某些已过时的 <see cref="T:System.Net.Dns" /> 方法支持 IPv6，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3344">
              <see langword="true" /> if the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> methods; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3345">操作系统可能会支持 IPv4 和 IPv6 协议。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3345">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.Socket.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3346">获取或设置一个值，指定 <see cref="T:System.Net.Sockets.Socket" /> 发送的 Internet 协议 (IP) 数据包的生存时间 (TTL) 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3346">Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-3347">TTL 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3347">The TTL value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3348">TTL 值指示的路由器数据包可以遍历路由器会丢弃该数据包和 Internet 控制消息协议 (ICMP)"超出 TTL"之前的最大数目的错误信息返回到发件人。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3348">The TTL value indicates the maximum number of routers the packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</span></span>  
  
 <span data-ttu-id="0c8e6-3349">TTL 值可能设置为值，从 0 到 255 之间。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3349">The TTL value may be set to a value from 0 to 255.</span></span> <span data-ttu-id="0c8e6-3350">如果未设置此属性，套接字的默认 TTL 值为 32。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3350">When this property is not set, the default TTL value for a socket is 32.</span></span>  
  
 <span data-ttu-id="0c8e6-3351">如果尚未建立成功的连接使用套接字，传输控制协议 (TCP) 套接字上设置此属性是通过 TCP/IP 堆栈忽略。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3351">Setting this property on a Transmission Control Protocol (TCP) socket is ignored by the TCP/IP stack if a successful connection has been established using the socket.</span></span>  
  
 <span data-ttu-id="0c8e6-3352">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>属性来获取特定错误代码。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3352">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="0c8e6-3353">获取此代码后，请参阅 Windows 套接字版本 2 API 错误代码文档在 MSDN 库中的有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3353">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c8e6-3354">下面的代码示例演示如何将<xref:System.Net.Sockets.Socket.Ttl%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3354">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.Ttl%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c8e6-3355">TTL 值不能设置为负数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3355">The TTL value can't be set to a negative number.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0c8e6-3356">只有对于在 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 族中的套接字，才可以设置此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3356">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="0c8e6-3357">尝试访问套接字时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3357">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="0c8e6-3358">在尝试将 TTL 设置为大于 255 的值时，也将返回此错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3358">This error is also returned when an attempt was made to set TTL to a value higher than 255.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0c8e6-3359">
            <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3359">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UseOnlyOverlappedIO">
      <MemberSignature Language="C#" Value="public bool UseOnlyOverlappedIO { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseOnlyOverlappedIO" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO" />
      <MemberSignature Language="VB.NET" Value="Public Property UseOnlyOverlappedIO As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseOnlyOverlappedIO { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseOnlyOverlappedIO : bool with get, set" Usage="System.Net.Sockets.Socket.UseOnlyOverlappedIO" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("This doesn't do anything on Mono yet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c8e6-3360">指定套接字是否应仅使用重叠 I/O 模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3360">Specifies whether the socket should only use Overlapped I/O mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c8e6-3361">如果 <see cref="T:System.Net.Sockets.Socket" /> 仅使用重叠 I/O，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3361">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses only overlapped I/O; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0c8e6-3362">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3362">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c8e6-3363">将此属性设置为`true`有关<xref:System.Net.Sockets.Socket>想要调用<xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3363">Set this property to `true` for a <xref:System.Net.Sockets.Socket> you intend to call <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span> <span data-ttu-id="0c8e6-3364">否则，该框架可以将完成端口分配给套接字，将禁止使用<xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c8e6-3364">Otherwise, the Framework may assign a completion port to the socket, which would prohibit the use of <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c8e6-3365">套接字已绑定到完成端口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c8e6-3365">The socket has been bound to a completion port.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>