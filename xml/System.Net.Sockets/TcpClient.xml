<Type Name="TcpClient" FullName="System.Net.Sockets.TcpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7a5e2f54532ab6d29e3d7d8aafa745aa2f0a1a55" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58736220" /></Metadata><TypeSignature Language="C#" Value="public class TcpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type TcpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8265d-101">为 TCP 网络服务提供客户端连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-101">Provides client connections for TCP network services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-102">`TcpClient`类提供了简单方法来连接、 发送，并接收中同步阻止模式下通过网络流式传输数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-102">The `TcpClient` class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.</span></span>  
  
 <span data-ttu-id="8265d-103">为了使`TcpClient`连接和交换数据，<xref:System.Net.Sockets.TcpListener>或<xref:System.Net.Sockets.Socket>使用 TCP 创建<xref:System.Net.Sockets.ProtocolType>必须侦听传入连接请求。</span><span class="sxs-lookup"><span data-stu-id="8265d-103">In order for `TcpClient` to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests.</span></span> <span data-ttu-id="8265d-104">可以在以下两种方式之一连接到此侦听器：</span><span class="sxs-lookup"><span data-stu-id="8265d-104">You can connect to this listener in one of the following two ways:</span></span>  
  
-   <span data-ttu-id="8265d-105">创建`TcpClient`并调用其中一个可用的三个<xref:System.Net.Sockets.TcpClient.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-105">Create a `TcpClient` and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.</span></span>  
  
-   <span data-ttu-id="8265d-106">创建`TcpClient`使用主机名和端口号的远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-106">Create a `TcpClient` using the host name and port number of the remote host.</span></span> <span data-ttu-id="8265d-107">此构造函数将自动尝试进行连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-107">This constructor will automatically attempt a connection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-108">如果你想要将无连接的数据报发送在同步阻塞模式下，使用<xref:System.Net.Sockets.UdpClient>类。</span><span class="sxs-lookup"><span data-stu-id="8265d-108">If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-109">下面的代码示例建立`TcpClient`连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-109">The following code example establishes a `TcpClient` connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CPP/tcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CS/tcpclient.cs#1)]
 [!code-vb[System.Net.Sockets.TcpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/VB/tcpclient.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8265d-110">若要建立传出连接，或接受传入请求的权限。</span><span class="sxs-lookup"><span data-stu-id="8265d-110">Permission to establish an outgoing connection or accept an incoming request.</span></span></permission>
    <block subset="none" type="overrides"><para><span data-ttu-id="8265d-111">若要发送和接收数据，请使用<see cref="M:System.Net.Sockets.TcpClient.GetStream" />方法来获取<see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-111">To send and receive data, use the <see cref="M:System.Net.Sockets.TcpClient.GetStream" /> method to obtain a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span> <span data-ttu-id="8265d-112">调用<see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />并<see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />方法的<see cref="T:System.Net.Sockets.NetworkStream" />发送和接收数据与远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-112">Call the <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" /> methods of the <see cref="T:System.Net.Sockets.NetworkStream" /> to send and receive data with the remote host.</span></span> <span data-ttu-id="8265d-113">使用<see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />方法来释放与关联的所有资源<see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-113">Use the <see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" /> method to release all resources associated with the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></para></block>
    <altmember cref="T:System.Net.Sockets.TcpListener" />
    <altmember cref="T:System.Net.Sockets.NetworkStream" />
    <altmember cref="T:System.Net.Sockets.Socket" />
    <altmember cref="T:System.Net.Sockets.ProtocolType" />
    <altmember cref="T:System.Net.IPEndPoint" />
    <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
    <related type="Article" href="~/docs/framework/network-programming/tcp-udp.md"><span data-ttu-id="8265d-114">TCP-UDP</span><span class="sxs-lookup"><span data-stu-id="8265d-114">TCP-UDP</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8265d-115">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8265d-115">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8265d-116">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8265d-116">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-117">此构造函数创建一个新<xref:System.Net.Sockets.TcpClient>和允许基础服务提供程序分配的最合适的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-117">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="8265d-118">必须首先调用<xref:System.Net.Sockets.TcpClient.Connect%2A>方法，然后再发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-118">You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-119">此构造函数仅适用于 IPv4 地址类型。</span><span class="sxs-lookup"><span data-stu-id="8265d-119">This constructor works only with IPv4 address types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-120">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-120">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-121">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-121">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-122">下面的代码示例演示如何使用默认构造函数创建一个新<xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="8265d-122">The following code example demonstrates how to use the default constructor to create a new <xref:System.Net.Sockets.TcpClient>.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="8265d-123">要将 TCP <see cref="T:System.Net.IPEndPoint" /> 绑定到的 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-123">The <see cref="T:System.Net.IPEndPoint" /> to which you bind the TCP <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="8265d-124">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例，并将其绑定到指定的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="8265d-124">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and binds it to the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-125">此构造函数创建一个新<xref:System.Net.Sockets.TcpClient>并将其绑定到<xref:System.Net.IPEndPoint>指定的`localEP`参数。</span><span class="sxs-lookup"><span data-stu-id="8265d-125">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter.</span></span> <span data-ttu-id="8265d-126">调用此构造函数之前，必须创建`IPEndPoint`使用想要发送和接收数据的 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-126">Before you call this constructor, you must create an `IPEndPoint` using the IP address and port number from which you intend to send and receive data.</span></span> <span data-ttu-id="8265d-127">不需要连接和通信之前指定本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-127">You do not need to specify a local IP address and port number before connecting and communicating.</span></span> <span data-ttu-id="8265d-128">如果您创建`TcpClient`使用其他任何构造函数，基础服务提供程序将分配的最合适的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-128">If you create a `TcpClient` using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.</span></span>  
  
 <span data-ttu-id="8265d-129">必须调用<xref:System.Net.Sockets.TcpClient.Connect%2A>方法，然后再发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-129">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-130">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-130">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-131">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-131">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-132">下面的代码示例演示如何创建的实例<xref:System.Net.Sockets.TcpClient>类使用的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="8265d-132">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a local endpoint.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-133"><paramref name="localEP" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-133">The  <paramref name="localEP" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family"><span data-ttu-id="8265d-134">IP 协议的 <see cref="P:System.Net.IPAddress.AddressFamily" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-134">The <see cref="P:System.Net.IPAddress.AddressFamily" /> of the IP protocol.</span></span></param>
        <summary><span data-ttu-id="8265d-135">使用指定的族初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8265d-135">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class with the specified family.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8265d-136">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-136">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-137">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-137">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-138">下面的代码示例演示如何创建的实例<xref:System.Net.Sockets.TcpClient>类。</span><span class="sxs-lookup"><span data-stu-id="8265d-138">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8265d-139"><paramref name="family" /> 参数不等于 AddressFamily.InterNetwork</span><span class="sxs-lookup"><span data-stu-id="8265d-139">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetwork</span></span> 
<span data-ttu-id="8265d-140">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8265d-140">-or-</span></span> 
<span data-ttu-id="8265d-141"><paramref name="family" /> 参数不等于 AddressFamily.InterNetworkV6</span><span class="sxs-lookup"><span data-stu-id="8265d-141">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetworkV6</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : string * int -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="8265d-142">要连接到的远程主机的 DNS 名。</span><span class="sxs-lookup"><span data-stu-id="8265d-142">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-143">要连接到的远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-143">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-144">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例并连接到指定主机上的指定端口。</span><span class="sxs-lookup"><span data-stu-id="8265d-144">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and connects to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-145">此构造函数创建一个新<xref:System.Net.Sockets.TcpClient>和程序同步连接尝试提供的主机名和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-145">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number.</span></span> <span data-ttu-id="8265d-146">基础服务提供程序将分配的最合适的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-146">The underlying service provider will assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="8265d-147">`TcpClient` 将阻止，直到连接成功或失败。</span><span class="sxs-lookup"><span data-stu-id="8265d-147">`TcpClient` will block until it either connects or fails.</span></span> <span data-ttu-id="8265d-148">此构造函数允许您以初始化、 解析的 DNS 主机名，并在一个方便访问的步骤中连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-148">This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.</span></span>  
  
 <span data-ttu-id="8265d-149">如果启用了 IPv6 和<xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>调用方法来连接到的主机，解析为 IPv6 和 IPv4 地址、 IPv6 地址将与连接尝试之前的 IPv4 地址的第一个。</span><span class="sxs-lookup"><span data-stu-id="8265d-149">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="8265d-150">这可能会延迟的时间来建立连接，如果主机未侦听 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="8265d-150">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-151">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-151">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-152">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-152">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-153">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-153">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-154">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-154">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-155">下面的代码示例演示如何创建的实例<xref:System.Net.Sockets.TcpClient>类使用主机名和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-155">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a host name and port number.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-156"><paramref name="hostname" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-156">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-157"><paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="8265d-157">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-158">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-158">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="Overload:System.Net.Sockets.TcpClient.#ctor" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.TcpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-159">获取或设置一个值，它指示是否已建立连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-159">Gets or sets a value that indicates whether a connection has been made.</span></span></summary>
        <value><span data-ttu-id="8265d-160">如果已建立连接，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-160"><see langword="true" /> if the connection has been made; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-161">类派生自<xref:System.Net.Sockets.TcpClient>可以使用此属性以确定是否已成功的连接尝试。</span><span class="sxs-lookup"><span data-stu-id="8265d-161">Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded.</span></span> <span data-ttu-id="8265d-162">它不会监视连接的当前状态的`TcpClient`。</span><span class="sxs-lookup"><span data-stu-id="8265d-162">It does not monitor the ongoing connection state of `TcpClient`.</span></span> <span data-ttu-id="8265d-163">如果远程主机关闭的连接，`Active`将不会更新。</span><span class="sxs-lookup"><span data-stu-id="8265d-163">If the remote host closes the connection, `Active` will not be updated.</span></span> <span data-ttu-id="8265d-164">如果派生自`TcpClient`，并且需要连接状态，请使用更密切地关注<xref:System.Net.Sockets.Socket.Connected%2A>的属性<xref:System.Net.Sockets.Socket>返回的<xref:System.Net.Sockets.TcpClient.Client%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-164">If you are deriving from `TcpClient` and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.Connected" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.TcpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-165">获取已经从网络接收且可供读取的数据量。</span><span class="sxs-lookup"><span data-stu-id="8265d-165">Gets the amount of data that has been received from the network and is available to be read.</span></span></summary>
        <value><span data-ttu-id="8265d-166">从网络接收的、可供读取的数据的字节数。</span><span class="sxs-lookup"><span data-stu-id="8265d-166">The number of bytes of data received from the network and available to be read.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="8265d-167">`Available`属性是一种方法来确定是否将数据排队以进行读取。</span><span class="sxs-lookup"><span data-stu-id="8265d-167">The `Available` property is a way to determine whether data is queued for reading.</span></span> <span data-ttu-id="8265d-168">如果数据不可用，则调用<xref:System.Net.Sockets.NetworkStream.Read%2A>来获取的数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-168">If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data.</span></span> <span data-ttu-id="8265d-169">可用的数据是在读取的网络缓冲区中对排队的总数据量。</span><span class="sxs-lookup"><span data-stu-id="8265d-169">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="8265d-170">如果无数据排队网络缓冲区中`Available`返回 0。</span><span class="sxs-lookup"><span data-stu-id="8265d-170">If no data is queued in the network buffer, `Available` returns 0.</span></span>  
  
 <span data-ttu-id="8265d-171">如果远程主机关闭，或关闭的连接`Available`可能会引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="8265d-171">If the remote host shuts down or closes the connection, `Available` may throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8265d-172">如果你收到`SocketException`，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-172">If you receive a `SocketException`, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-173">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-173">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-174">下面的代码示例演示如何使用`Available`属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-174">The following code example shows the use of the `Available` property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-175">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-175">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-176"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-176">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8265d-177">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="8265d-177">Begins an asynchronous request for a remote host connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (address, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="8265d-178">远程主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-178">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-179">远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-179">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="8265d-180">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-180">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8265d-181">一个用户定义对象，其中包含连接操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-181">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="8265d-182">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="8265d-182">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8265d-183">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="8265d-183">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="8265d-184">远程主机由 <see cref="T:System.Net.IPAddress" /> 和端口号 (<see cref="T:System.Int32" />) 指定。</span><span class="sxs-lookup"><span data-stu-id="8265d-184">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="8265d-185">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-185">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-186">异步`BeginConnect`完成操作，必须通过调用<xref:System.Net.Sockets.TcpClient.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-186">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="8265d-187">通常情况下，通过调用该方法`asyncCallback`委托。</span><span class="sxs-lookup"><span data-stu-id="8265d-187">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="8265d-188">此方法不会阻止，直到操作完成。</span><span class="sxs-lookup"><span data-stu-id="8265d-188">This method does not block until the operation completes.</span></span> <span data-ttu-id="8265d-189">若要阻止在操作完成之前，请使用其中一个<xref:System.Net.Sockets.TcpClient.Connect%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="8265d-189">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8265d-190">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-190">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-191">下面的代码示例创建<xref:System.Net.Sockets.TcpClient>并连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-191">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-192"><paramref name="address" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-192">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-193">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-193">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-194"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-194">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8265d-195">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-195">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-196">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="8265d-196">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (addresses, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="8265d-197">至少一个指定远程主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-197">At least one <see cref="T:System.Net.IPAddress" /> that designates the remote hosts.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-198">远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-198">The port number of the remote hosts.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="8265d-199">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-199">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8265d-200">一个用户定义对象，其中包含连接操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-200">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="8265d-201">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="8265d-201">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8265d-202">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="8265d-202">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="8265d-203">远程主机由 <see cref="T:System.Net.IPAddress" /> 数组和端口号 (<see cref="T:System.Int32" />) 指定。</span><span class="sxs-lookup"><span data-stu-id="8265d-203">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="8265d-204">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-204">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-205">异步`BeginConnect`完成操作，必须通过调用<xref:System.Net.Sockets.TcpClient.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-205">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="8265d-206">通常情况下，通过调用该方法`asyncCallback`委托。</span><span class="sxs-lookup"><span data-stu-id="8265d-206">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="8265d-207">此方法不会阻止，直到操作完成。</span><span class="sxs-lookup"><span data-stu-id="8265d-207">This method does not block until the operation completes.</span></span> <span data-ttu-id="8265d-208">若要阻止在操作完成之前，请使用其中一个<xref:System.Net.Sockets.TcpClient.Connect%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="8265d-208">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8265d-209">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-209">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="8265d-210">此方法通常用于调用后立即<xref:System.Net.Dns.BeginGetHostAddresses%2A>方法，它可以为单个主机返回多个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="8265d-210">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-211">下面的代码示例创建<xref:System.Net.Sockets.TcpClient>并连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-211">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-212"><paramref name="addresses" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-212">The <paramref name="addresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-213">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-213">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-214"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-214">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8265d-215">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-215">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-216">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="8265d-216">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (host, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="8265d-217">远程主机的名称。</span><span class="sxs-lookup"><span data-stu-id="8265d-217">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-218">远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-218">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="8265d-219">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-219">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8265d-220">一个用户定义对象，其中包含连接操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-220">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="8265d-221">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="8265d-221">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8265d-222">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="8265d-222">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="8265d-223">远程主机由主机名 (<see cref="T:System.String" />) 和端口号 (<see cref="T:System.Int32" />) 指定。</span><span class="sxs-lookup"><span data-stu-id="8265d-223">The remote host is specified by a host name (<see cref="T:System.String" />) and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="8265d-224">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-224">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-225">异步`BeginConnect`完成操作，必须通过调用<xref:System.Net.Sockets.TcpClient.EndConnect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-225">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="8265d-226">通常情况下，通过调用该方法`asyncCallback`委托。</span><span class="sxs-lookup"><span data-stu-id="8265d-226">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="8265d-227">此方法不会阻止，直到操作完成。</span><span class="sxs-lookup"><span data-stu-id="8265d-227">This method does not block until the operation completes.</span></span> <span data-ttu-id="8265d-228">若要阻止在操作完成之前，请使用其中一个<xref:System.Net.Sockets.TcpClient.Connect%2A>方法重载。</span><span class="sxs-lookup"><span data-stu-id="8265d-228">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8265d-229">有关使用异步编程模型的详细信息，请参阅[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-229">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-230">下面的代码示例创建<xref:System.Net.Sockets.TcpClient>并连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-230">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-231"><paramref name="host" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-231">The <paramref name="host" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-232">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-232">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-233"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-233">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8265d-234">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-234">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-235">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="8265d-235">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.TcpClient.Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-236">获取或设置基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-236">Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8265d-237">基础网络 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-237">The underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-238"><xref:System.Net.Sockets.TcpClient> 创建<xref:System.Net.Sockets.Socket>发送和接收通过网络数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-238"><xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network.</span></span> <span data-ttu-id="8265d-239">类派生自`TcpClient`可以使用此属性获取或设置此`Socket`。</span><span class="sxs-lookup"><span data-stu-id="8265d-239">Classes deriving from `TcpClient` can use this property to get or set this `Socket`.</span></span> <span data-ttu-id="8265d-240">使用基础`Socket`从返回`Client`如果你需要访问除此之外的`TcpClient`提供。</span><span class="sxs-lookup"><span data-stu-id="8265d-240">Use the underlying `Socket` returned from `Client` if you require access beyond that which `TcpClient` provides.</span></span> <span data-ttu-id="8265d-241">此外可以使用`Client`若要设置的基础`Socket`到现有`Socket`。</span><span class="sxs-lookup"><span data-stu-id="8265d-241">You can also use `Client` to set the underlying `Socket` to an existing `Socket`.</span></span> <span data-ttu-id="8265d-242">这可能很有用，如果你想要充分利用的简单性`TcpClient`使用预先存在的`Socket`。</span><span class="sxs-lookup"><span data-stu-id="8265d-242">This might be useful if you want to take advantage of the simplicity of `TcpClient` using a pre-existing `Socket`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-243">下面的代码示例演示如何将`Client`属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-243">The following code example demonstrates the use of the `Client` property.</span></span> <span data-ttu-id="8265d-244">在此示例中，接收缓冲区的大小的基础<xref:System.Net.Sockets.Socket>发生更改。</span><span class="sxs-lookup"><span data-stu-id="8265d-244">In this example, the receive buffer size of the underlying <xref:System.Net.Sockets.Socket> is changed.</span></span>  
  
 [!code-csharp[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="tcpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8265d-245">释放此 <see cref="T:System.Net.Sockets.TcpClient" /> 实例，并请求关闭基础 TCP 连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-245">Disposes this <see cref="T:System.Net.Sockets.TcpClient" /> instance and requests that the underlying TCP connection be closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-246">`Close`方法会标记为已释放的实例，并将请求关联<xref:System.Net.Sockets.Socket>关闭 TCP 连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-246">The `Close` method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection.</span></span> <span data-ttu-id="8265d-247">基于<xref:System.Net.Sockets.TcpClient.LingerState%2A>属性，TCP 连接可能会保持打开状态一段时间后`Close`仍然要发送数据时，调用方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-247">Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the `Close` method is called when data remains to be sent.</span></span> <span data-ttu-id="8265d-248">提供基础连接完成后关闭通知中不存在。</span><span class="sxs-lookup"><span data-stu-id="8265d-248">There is no notification provided when the underlying connection has completed closing.</span></span>  
  
 <span data-ttu-id="8265d-249">调用此方法最终将导致关闭关联`Socket`并且还将关闭关联<xref:System.Net.Sockets.NetworkStream>用于发送和接收数据，如果已经创建了一个。</span><span class="sxs-lookup"><span data-stu-id="8265d-249">Calling this method will eventually result in the close of the associated `Socket` and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-250">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-250">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-251">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-251">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-252">下面的代码示例演示了右<xref:System.Net.Sockets.TcpClient>通过调用`Close`方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-252">The following code example demonstrates closing a <xref:System.Net.Sockets.TcpClient> by calling the `Close` method.</span></span>  
  
 [!code-cpp[NCLTCPClientSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLTcpClientSync/CPP/tcpclient.cpp#1)]
 [!code-csharp[NCLTCPClientSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8265d-253">使用指定的主机名和端口号将客户端连接到 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-253">Connects the client to a remote TCP host using the specified host name and port number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="tcpClient.Connect remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="8265d-254">您打算连接到的 <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-254">The <see cref="T:System.Net.IPEndPoint" /> to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-255">使用指定的远程网络终结点将客户端连接到远程 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-255">Connects the client to a remote TCP host using the specified remote network endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-256">调用此方法以建立与指定的同步远程主机连接<xref:System.Net.IPEndPoint>。</span><span class="sxs-lookup"><span data-stu-id="8265d-256">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="8265d-257">在调用之前`Connect`，必须创建的实例`IPEndPoint`类使用一个 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-257">Before you call `Connect`, you must create an instance of the `IPEndPoint` class using an IP address and a port number.</span></span> <span data-ttu-id="8265d-258">使用此`IPEndPoint`作为`remoteEP`参数。</span><span class="sxs-lookup"><span data-stu-id="8265d-258">Use this `IPEndPoint` as the `remoteEP` parameter.</span></span> <span data-ttu-id="8265d-259">`Connect`方法会阻塞，直到连接成功或失败。</span><span class="sxs-lookup"><span data-stu-id="8265d-259">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="8265d-260">以远程主机连接后，使用<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法来获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-260">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-261">使用此`NetworkStream`发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-261">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-262">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-262">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-263">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-263">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-264">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-264">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-265">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)</span><span class="sxs-lookup"><span data-stu-id="8265d-265">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-266">下面的代码示例使用<xref:System.Net.IPEndPoint>与远程主机连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-266">The following code example uses an <xref:System.Net.IPEndPoint> to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-267"><paramref name="remoteEp" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-267">The <paramref name="remoteEp" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-268">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-268">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-269"><see cref="T:System.Net.Sockets.TcpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="8265d-269">The <see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="tcpClient.Connect (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="8265d-270">您打算连接到的主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-270">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-271">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-271">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-272">使用指定的 IP 地址和端口号将客户端连接到 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-272">Connects the client to a remote TCP host using the specified IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-273">调用此方法以建立与指定的同步远程主机连接<xref:System.Net.IPAddress>和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-273">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number.</span></span> <span data-ttu-id="8265d-274"><xref:System.Net.Sockets.TcpClient.Connect%2A>方法会阻塞，直到连接成功或失败。</span><span class="sxs-lookup"><span data-stu-id="8265d-274">The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails.</span></span> <span data-ttu-id="8265d-275">以远程主机连接后，使用<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法来获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-275">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-276">使用此`NetworkStream`发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-276">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-277">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-277">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-278">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-278">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-279">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-279">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-280">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-280">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-281">下面的代码示例使用一个 IP 地址和端口号连接与远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-281">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-282"><paramref name="address" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-282">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-283"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="8265d-283">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-284">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-284">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-285"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-285"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] ipAddresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] ipAddresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (ipAddresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ ipAddresses, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress[] * int -&gt; unit" Usage="tcpClient.Connect (ipAddresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipAddresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ipAddresses"><span data-ttu-id="8265d-286">要连接到的主机的 <see cref="T:System.Net.IPAddress" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="8265d-286">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-287">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-287">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-288">使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-288">Connects the client to a remote TCP host using the specified IP addresses and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-289">此方法通常用于调用后立即<xref:System.Net.Dns.BeginGetHostAddresses%2A>方法，它可以为单个主机返回多个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="8265d-289">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="8265d-290">调用`Connect`方法来同步远程主机连接到的数组指定的主机<xref:System.Net.IPAddress>元素和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-290">Call the `Connect` method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number.</span></span> <span data-ttu-id="8265d-291">`Connect`方法会阻塞，直到连接成功或失败。</span><span class="sxs-lookup"><span data-stu-id="8265d-291">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="8265d-292">以远程主机连接后，使用<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法来获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-292">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-293">使用此`NetworkStream`发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-293">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-294">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-294">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-295">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-295">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-296">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-296">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-297">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-297">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-298">下面的代码示例使用一个 IP 地址和端口号连接与远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-298">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#8)]
 [!code-csharp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-299"><paramref name="ipAddresses" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-299">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-300">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="8265d-300">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-301">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-301">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-302"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-302">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8265d-303">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-303">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8265d-304">此方法对于使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志的套接字有效。</span><span class="sxs-lookup"><span data-stu-id="8265d-304">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="tcpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="8265d-305">要连接到的远程主机的 DNS 名。</span><span class="sxs-lookup"><span data-stu-id="8265d-305">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-306">要连接到的远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-306">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-307">将客户端连接到指定主机上的指定端口。</span><span class="sxs-lookup"><span data-stu-id="8265d-307">Connects the client to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-308">调用此方法以建立同步远程主机连接到指定的主机名和端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-308">Call this method to establish a synchronous remote host connection to the specified host name and port number.</span></span> <span data-ttu-id="8265d-309">`Connect`方法会阻塞，直到连接成功或失败。</span><span class="sxs-lookup"><span data-stu-id="8265d-309">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="8265d-310">以远程主机连接后，使用<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法来获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-310">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-311">使用此`NetworkStream`发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-311">Use this  `NetworkStream` to send and receive data.</span></span>  
  
 <span data-ttu-id="8265d-312">如果启用了 IPv6 和`Connect(String, Int32)`调用方法来连接到的主机，解析为 IPv6 和 IPv4 地址、 IPv6 地址将与连接尝试之前的 IPv4 地址的第一个。</span><span class="sxs-lookup"><span data-stu-id="8265d-312">If IPv6 is enabled and the `Connect(String, Int32)` method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="8265d-313">这可能会延迟的时间来建立连接，如果主机未侦听 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="8265d-313">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-314">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-314">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-315">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-315">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-316">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-316">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-317">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-317">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-318">下面的代码示例使用主机名和端口号连接与远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-318">The following code example uses the host name and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-319"><paramref name="hostname" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-319">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-320"><paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="8265d-320">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-321">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-321">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-322"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-322"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8265d-323">使用指定的主机名和端口号将客户端连接到远程 TCP 主机以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-323">Connects the client to a remote TCP host using the specified host name and port number as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (address As IPAddress, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="8265d-324">您打算连接到的主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-324">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-325">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-325">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-326">使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-326">Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="8265d-327">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-327">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-328">不会阻止此操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-328">This operation will not block.</span></span> <span data-ttu-id="8265d-329">返回的返回<xref:System.Threading.Tasks.Task>建立 TCP 连接后，将完成对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-329">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="8265d-330">连接请求时，此方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="8265d-330">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="8265d-331">调用此方法以建立与指定的同步远程主机连接<xref:System.Net.IPAddress>和作为异步操作的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-331">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation.</span></span> <span data-ttu-id="8265d-332">以远程主机连接后，使用<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法来获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-332">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-333">使用此`NetworkStream`发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-333">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-334">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-334">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-335">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-335">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-336">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-336">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-337">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-337">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-338"><paramref name="address" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-338">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-339"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="8265d-339">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-340">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-340">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-341"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-341"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (addresses As IPAddress(), port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.IPAddress[] * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (addresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="8265d-342">要连接到的主机的 <see cref="T:System.Net.IPAddress" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="8265d-342">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-343">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-343">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-344">使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-344">Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="8265d-345">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-345">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-346">不会阻止此操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-346">This operation will not block.</span></span> <span data-ttu-id="8265d-347">返回的返回<xref:System.Threading.Tasks.Task>建立 TCP 连接后，将完成对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-347">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="8265d-348">连接请求时，此方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="8265d-348">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="8265d-349">此方法通常用于调用后立即<xref:System.Net.Dns.BeginGetHostAddresses%2A>方法，它可以为单个主机返回多个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="8265d-349">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="8265d-350">调用此方法以建立与指定的数组的主机的同步远程主机连接<xref:System.Net.IPAddress>元素和作为异步操作的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-350">Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation.</span></span> <span data-ttu-id="8265d-351">以远程主机连接后，使用<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法来获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-351">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-352">使用此`NetworkStream`发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-352">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-353">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-353">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-354">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-354">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-355">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-355">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-356">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-356">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-357"><paramref name="ipAddresses" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-357">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-358">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="8265d-358">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-359">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-359">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-360"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-360">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8265d-361">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-361">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8265d-362">此方法对于使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志的套接字有效。</span><span class="sxs-lookup"><span data-stu-id="8265d-362">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (host As String, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : string * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (host, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="8265d-363">要连接到的远程主机的 DNS 名。</span><span class="sxs-lookup"><span data-stu-id="8265d-363">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="8265d-364">要连接到的远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="8265d-364">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="8265d-365">将客户端连接到指定主机上的指定 TCP 端口以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-365">Connects the client to the specified TCP port on the specified host as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="8265d-366">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-366">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-367">不会阻止此操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-367">This operation will not block.</span></span> <span data-ttu-id="8265d-368">返回的返回<xref:System.Threading.Tasks.Task>建立 TCP 连接后，将完成对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-368">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="8265d-369">连接请求时，此方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="8265d-369">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="8265d-370">调用此方法以建立同步远程主机连接到指定的主机名和端口号作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-370">Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation.</span></span> <span data-ttu-id="8265d-371">以远程主机连接后，使用<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法来获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-371">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-372">使用此`NetworkStream`发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-372">Use this `NetworkStream` to send and receive data.</span></span>  
  
 <span data-ttu-id="8265d-373">如果启用了 IPv6 和<xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29>调用方法来连接到的主机，解析为 IPv6 和 IPv4 地址、 IPv6 地址将与连接尝试之前的 IPv4 地址的第一个。</span><span class="sxs-lookup"><span data-stu-id="8265d-373">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="8265d-374">这可能会延迟的时间来建立连接，如果主机未侦听 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="8265d-374">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-375">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-375">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-376">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-376">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-377">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-377">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-378">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-378">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-379"><paramref name="hostname" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-379">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8265d-380"><paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="8265d-380">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-381">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-381">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-382"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-382"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Connected : bool" Usage="System.Net.Sockets.TcpClient.Connected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-383">获取一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 的基础 <see cref="T:System.Net.Sockets.TcpClient" /> 是否已连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-383">Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket" /> for a <see cref="T:System.Net.Sockets.TcpClient" /> is connected to a remote host.</span></span></summary>
        <value><span data-ttu-id="8265d-384">如果 <see cref="P:System.Net.Sockets.TcpClient.Client" /> 套接字与截止到最近的操作时的远程资源连接，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-384"><see langword="true" /> if the <see cref="P:System.Net.Sockets.TcpClient.Client" /> socket was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-385">`Connected`属性获取的连接状态<xref:System.Net.Sockets.TcpClient.Client%2A>截止到最后一个 I/O 操作的套接字。</span><span class="sxs-lookup"><span data-stu-id="8265d-385">The `Connected` property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation.</span></span> <span data-ttu-id="8265d-386">如果该属性返回`false`，则`Client`套接字要么从未连接，或已断开连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-386">When it returns `false`, the `Client` socket was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="8265d-387">因为`Connected`属性仅反映最新操作时的连接的状态，则应尝试发送或接收消息，以确定当前状态。</span><span class="sxs-lookup"><span data-stu-id="8265d-387">Because the `Connected` property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state.</span></span> <span data-ttu-id="8265d-388">消息发送失败后，此属性不会再返回`true`。</span><span class="sxs-lookup"><span data-stu-id="8265d-388">After the message send fails, this property no longer returns `true`.</span></span> <span data-ttu-id="8265d-389">请注意，此行为是有意设计。</span><span class="sxs-lookup"><span data-stu-id="8265d-389">Note that this behavior is by design.</span></span> <span data-ttu-id="8265d-390">因为，在测试和发送/接收之间的时间，连接可能已丢失，无法可靠地测试连接的状态。</span><span class="sxs-lookup"><span data-stu-id="8265d-390">You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost.</span></span> <span data-ttu-id="8265d-391">套接字连接，并妥善处理失败传输，应假定您的代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-391">Your code should assume the socket is connected, and gracefully handle failed transmissions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-392">下面的代码示例连接到远程终结点，并接着验证连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-392">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="tcpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8265d-393">释放由 <see cref="T:System.Net.Sockets.TcpClient" /> 占用的托管和非托管资源。</span><span class="sxs-lookup"><span data-stu-id="8265d-393">Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="tcpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="8265d-394">设置为 <see langword="true" /> 可释放托管资源和非托管资源；设置为 <see langword="false" /> 只能释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="8265d-394">Set to <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="8265d-395">释放由 <see cref="T:System.Net.Sockets.TcpClient" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="8265d-395">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-396">调用此方法由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-396">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="8265d-397">`Dispose()` 调用此方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="8265d-397">`Dispose()` invokes this method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="8265d-398">`Finalize` 调用此方法替换`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="8265d-398">`Finalize` invokes this method with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="8265d-399">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Net.Sockets.TcpClient> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="8265d-399">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references.</span></span> <span data-ttu-id="8265d-400">这是通过调用`Dispose()`每个引用对象的方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-400">It does this by invoking the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-401">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-401">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-402">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-402">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8265d-403">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="8265d-403">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="8265d-404">重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-404">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="8265d-405">有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-405">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="8265d-406">有关详细信息<see langword="Dispose" />并<see cref="M:System.Object.Finalize" />，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="8265d-406">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndConnect : IAsyncResult -&gt; unit" Usage="tcpClient.EndConnect asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8265d-407">调用 <see cref="T:System.IAsyncResult" /> 后返回的 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="8265d-407">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</span></span></param>
        <summary><span data-ttu-id="8265d-408">结束挂起的异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="8265d-408">Ends a pending asynchronous connection attempt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-409">此方法将阻塞，直到操作完成。</span><span class="sxs-lookup"><span data-stu-id="8265d-409">This method blocks until the operation is complete.</span></span> <span data-ttu-id="8265d-410">若要以同步方式执行此操作，请使用<xref:System.Net.Sockets.TcpClient.Connect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-410">To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-411">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-411">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-412">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-412">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-413">下面的代码示例结束异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="8265d-413">The following code example ends the asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8265d-414"><paramref name="asyncResult" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-414">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8265d-415">调用 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 方法后，未返回 <paramref name="asyncResult" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="8265d-415">The <paramref name="asyncResult" /> parameter was not returned by a call to a <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8265d-416">先前曾为异步连接调用过 <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-416">The <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> method was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-417">尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-417">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-418">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-418">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-419">获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.TcpClient" /> 是否只允许一个客户端使用端口。</span><span class="sxs-lookup"><span data-stu-id="8265d-419">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a port.</span></span></summary>
        <value><span data-ttu-id="8265d-420">如果 <see cref="T:System.Net.Sockets.TcpClient" /> 只允许一个客户端使用特定端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-420"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8265d-421">在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 <see langword="true" />；在所有其他版本中，默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-421">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-422">默认情况下，多个客户端可以使用特定端口，但是，只有一个客户端可以执行对发送到端口的网络流量的操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-422">By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="8265d-423">可以使用`ExclusiveAddressUse`属性可防止多个客户端使用特定端口。</span><span class="sxs-lookup"><span data-stu-id="8265d-423">You can use the `ExclusiveAddressUse` property to prevent multiple clients from using a specific port.</span></span>  
  
 <span data-ttu-id="8265d-424">基础套接字绑定到客户端端口之前，必须设置此属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-424">This property must be set before the underlying socket is bound to a client port.</span></span> <span data-ttu-id="8265d-425">如果您调用<xref:System.Net.Sockets.TcpClient.Connect%2A>， <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>， <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>，或<xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>，该客户端端口绑定的方法，产生了负面影响，并随后不能设置`ExclusiveAddressUse`属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-425">If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the `ExclusiveAddressUse` property.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="8265d-426">下面的代码示例将创建<xref:System.Net.Sockets.TcpClient>和获取和设置的值`ExclusiveAddressUse`属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-426">The following code example creates a <xref:System.Net.Sockets.TcpClient> and gets and sets the value of the `ExclusiveAddressUse` property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-427">尝试访问基础套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-427">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-428">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-428">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8265d-429">释放 <see cref="T:System.Net.Sockets.TcpClient" /> 类使用的资源。</span><span class="sxs-lookup"><span data-stu-id="8265d-429">Frees resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-430">此方法重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8265d-430">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8265d-431">应用程序代码不应调用此方法。对象的`Finalize`方法将自动调用垃圾回收期间除非终止由垃圾回收器已禁用通过调用<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-431">Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8265d-432"><xref:System.Net.Sockets.TcpClient>类的终结器关闭 TCP 连接并释放关联的所有托管的资源`TcpClient`。</span><span class="sxs-lookup"><span data-stu-id="8265d-432">The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the `TcpClient`.</span></span> <span data-ttu-id="8265d-433">这些资源包括基础<xref:System.Net.Sockets.Socket>用来与远程主机连接和<xref:System.Net.Sockets.NetworkStream>用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-433">These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data.</span></span> <span data-ttu-id="8265d-434">终结器不会释放任何非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="8265d-434">The finalizer does not release any unmanaged resources.</span></span>  
  
 <span data-ttu-id="8265d-435">有关详细信息，请参阅[Finalize 方法和析构函数](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))，[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)，并[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="8265d-435">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <related type="Article" href="~/docs/standard/garbage-collection/index.md"><span data-ttu-id="8265d-436">垃圾回收</span><span class="sxs-lookup"><span data-stu-id="8265d-436">Garbage Collection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.NetworkStream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.NetworkStream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As NetworkStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::NetworkStream ^ GetStream();" />
      <MemberSignature Language="F#" Value="member this.GetStream : unit -&gt; System.Net.Sockets.NetworkStream" Usage="tcpClient.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.NetworkStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8265d-437">返回用于发送和接收数据的 <see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-437">Returns the <see cref="T:System.Net.Sockets.NetworkStream" /> used to send and receive data.</span></span></summary>
        <returns><span data-ttu-id="8265d-438">基础 <see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-438">The underlying <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="8265d-439">`GetStream`方法将返回<xref:System.Net.Sockets.NetworkStream>可用于发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-439">The `GetStream` method returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data.</span></span> <span data-ttu-id="8265d-440">`NetworkStream`类继承自<xref:System.IO.Stream>类，该类提供一系列丰富的方法和属性用于促进网络通信。</span><span class="sxs-lookup"><span data-stu-id="8265d-440">The `NetworkStream` class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.</span></span>  
  
 <span data-ttu-id="8265d-441">必须调用<xref:System.Net.Sockets.TcpClient.Connect%2A>方法第一个，或<xref:System.Net.Sockets.TcpClient.GetStream%2A>方法将引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="8265d-441">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="8265d-442">获取后`NetworkStream`，调用<xref:System.Net.Sockets.NetworkStream.Write%2A>方法将数据发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-442">After you have obtained the `NetworkStream`, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host.</span></span> <span data-ttu-id="8265d-443">调用<xref:System.Net.Sockets.NetworkStream.Read%2A>方法来接收来自远程主机的数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-443">Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host.</span></span> <span data-ttu-id="8265d-444">这两种方法阻止，直到执行指定的操作。</span><span class="sxs-lookup"><span data-stu-id="8265d-444">Both of these methods block until the specified operation is performed.</span></span> <span data-ttu-id="8265d-445">您可以避免在读取操作上阻止通过检查<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-445">You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property.</span></span> <span data-ttu-id="8265d-446">一个`true`值表示数据已从远程主机到达，并可供读取。</span><span class="sxs-lookup"><span data-stu-id="8265d-446">A `true` value means that data has arrived from the remote host and is available for reading.</span></span> <span data-ttu-id="8265d-447">在这种情况下，<xref:System.Net.Sockets.NetworkStream.Read%2A>保证立即完成。</span><span class="sxs-lookup"><span data-stu-id="8265d-447">In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately.</span></span> <span data-ttu-id="8265d-448">如果远程主机已关闭连接，<xref:System.Net.Sockets.NetworkStream.Read%2A>将立即返回包含零字节。</span><span class="sxs-lookup"><span data-stu-id="8265d-448">If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-449">您必须关闭`NetworkStream`如果要通过发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-449">You must close the `NetworkStream` when you are through sending and receiving data.</span></span> <span data-ttu-id="8265d-450">关闭<xref:System.Net.Sockets.TcpClient>不会释放`NetworkStream`。</span><span class="sxs-lookup"><span data-stu-id="8265d-450">Closing <xref:System.Net.Sockets.TcpClient> does not release the `NetworkStream`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-451">如果你收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>若要获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="8265d-451">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8265d-452">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)有关错误的详细说明的文档。</span><span class="sxs-lookup"><span data-stu-id="8265d-452">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8265d-453">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-453">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8265d-454">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-454">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-455">下面的代码示例使用`GetStream`以获取基础<xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="8265d-455">The following code example uses `GetStream` to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="8265d-456">获取后<xref:System.Net.Sockets.NetworkStream>，它将发送和接收使用其<xref:System.Net.Sockets.NetworkStream.Write%2A>和<xref:System.Net.Sockets.NetworkStream.Read%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-456">After obtaining the <xref:System.Net.Sockets.NetworkStream>, it sends and receives using its <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#14)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#14)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8265d-457"><see cref="T:System.Net.Sockets.TcpClient" /> 未连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="8265d-457">The <see cref="T:System.Net.Sockets.TcpClient" /> is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8265d-458"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8265d-458">The <see cref="T:System.Net.Sockets.TcpClient" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LingerState : System.Net.Sockets.LingerOption with get, set" Usage="System.Net.Sockets.TcpClient.LingerState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-459">获取或设置有关关联的套接字的延迟状态的信息。</span><span class="sxs-lookup"><span data-stu-id="8265d-459">Gets or sets information about the linger state of the associated socket.</span></span></summary>
        <value><span data-ttu-id="8265d-460"><see cref="T:System.Net.Sockets.LingerOption" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-460">A <see cref="T:System.Net.Sockets.LingerOption" />.</span></span> <span data-ttu-id="8265d-461">默认情况下，禁用逗留。</span><span class="sxs-lookup"><span data-stu-id="8265d-461">By default, lingering is disabled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-462">`LingerState`属性更改的方式<xref:System.Net.Sockets.Socket.Close%2A>方法的行为。</span><span class="sxs-lookup"><span data-stu-id="8265d-462">The `LingerState` property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="8265d-463">当集修改的条件下的连接可以重置通过 Winsock 时此属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-463">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="8265d-464">连接重置仍会发生基于 IP 协议行为。</span><span class="sxs-lookup"><span data-stu-id="8265d-464">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="8265d-465">此属性控制的 TCP 连接是在调用后仍保持打开的时间长度<xref:System.Net.Sockets.TcpClient.Close%2A>仍然要发送数据时。</span><span class="sxs-lookup"><span data-stu-id="8265d-465">This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent.</span></span> <span data-ttu-id="8265d-466">当您调用<xref:System.Net.Sockets.NetworkStream.Write%2A>方法中，数据放置在传出的网络缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8265d-466">When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="8265d-467">此属性可以用于确保此数据发送到远程主机之前<xref:System.Net.Sockets.TcpClient.Close%2A>方法用于删除连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-467">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="8265d-468">若要启用延迟，创建<xref:System.Net.Sockets.LingerOption>实例包含所需的值，并设置`LingerState`指向此实例的属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-468">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the `LingerState` property to this instance.</span></span>  
  
 <span data-ttu-id="8265d-469">下表描述的行为<xref:System.Net.Sockets.TcpClient.Close%2A>的可能值的方法<xref:System.Net.Sockets.LingerOption.Enabled%2A>属性和<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在`LingerState`属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-469">The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the `LingerState` property.</span></span>  
  
|<span data-ttu-id="8265d-470">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="8265d-470">LingerState.Enabled</span></span>|<span data-ttu-id="8265d-471">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="8265d-471">LingerState.LingerTime</span></span>|<span data-ttu-id="8265d-472">行为</span><span class="sxs-lookup"><span data-stu-id="8265d-472">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="8265d-473">`false` （禁用），默认值</span><span class="sxs-lookup"><span data-stu-id="8265d-473">`false` (disabled), the default value</span></span>|<span data-ttu-id="8265d-474">不适用，超时值 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="8265d-474">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="8265d-475">尝试发送挂起的数据，直到默认 IP 协议超时时间已到。</span><span class="sxs-lookup"><span data-stu-id="8265d-475">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="8265d-476">`true` （已启用）</span><span class="sxs-lookup"><span data-stu-id="8265d-476">`true` (enabled)</span></span>|<span data-ttu-id="8265d-477">非零值超时</span><span class="sxs-lookup"><span data-stu-id="8265d-477">A nonzero time-out</span></span>|<span data-ttu-id="8265d-478">尝试发送挂起的数据，直到指定的超时时间已到，如果该尝试失败，然后 Winsock 重置连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-478">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="8265d-479">`true` （已启用）</span><span class="sxs-lookup"><span data-stu-id="8265d-479">`true` (enabled)</span></span>|<span data-ttu-id="8265d-480">零个超时时间。</span><span class="sxs-lookup"><span data-stu-id="8265d-480">A zero timeout.</span></span>|<span data-ttu-id="8265d-481">将放弃所有挂起的数据和 Winsock 重置连接。</span><span class="sxs-lookup"><span data-stu-id="8265d-481">Discards any pending data and Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="8265d-482">IP 堆栈计算默认 IP 协议的超时期限为使用基于连接的往返行程时间。</span><span class="sxs-lookup"><span data-stu-id="8265d-482">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="8265d-483">在大多数情况下，计算堆栈的超时值是个应用程序定义的更多相关。</span><span class="sxs-lookup"><span data-stu-id="8265d-483">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="8265d-484">这是一个套接字的默认行为时`LingerState`未设置属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-484">This is the default behavior for a socket when the `LingerState` property is not set.</span></span>  
  
 <span data-ttu-id="8265d-485">当<xref:System.Net.Sockets.LingerOption.LingerTime%2A>属性存储在`LingerState`属性设置为大于默认 IP 协议超时时间，则默认 IP 协议超时时间仍将应用，并替代。</span><span class="sxs-lookup"><span data-stu-id="8265d-485">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the `LingerState` property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-486">下面的代码示例设置并获取套接字逗留时间。</span><span class="sxs-lookup"><span data-stu-id="8265d-486">The following code example sets and gets the sockets linger time.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#12)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#12)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.LingerOption" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NoDelay : bool with get, set" Usage="System.Net.Sockets.TcpClient.NoDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-487">获取或设置一个值，该值在发送或接收缓冲区未满时禁用延迟。</span><span class="sxs-lookup"><span data-stu-id="8265d-487">Gets or sets a value that disables a delay when send or receive buffers are not full.</span></span></summary>
        <value><span data-ttu-id="8265d-488"><see langword="true" /> 如果禁用了延迟;否则为<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-488"><see langword="true" /> if the delay is disabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8265d-489">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8265d-489">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-490">当`NoDelay`是`false`、<xref:System.Net.Sockets.TcpClient>不通过网络发送数据包，直到它收集大量的传出数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-490">When `NoDelay` is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data.</span></span> <span data-ttu-id="8265d-491">TCP 段中消耗的资源量，由于发送较少的数据会降低效率。</span><span class="sxs-lookup"><span data-stu-id="8265d-491">Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient.</span></span> <span data-ttu-id="8265d-492">但是，情况确实存在需要发送的数据量很少或期望从每个数据包发送即时响应。</span><span class="sxs-lookup"><span data-stu-id="8265d-492">However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send.</span></span> <span data-ttu-id="8265d-493">你的决策应权衡网络效率与应用程序要求的相对重要性。</span><span class="sxs-lookup"><span data-stu-id="8265d-493">Your decision should weigh the relative importance of network efficiency versus application requirements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-494">下面的代码示例禁用延迟。</span><span class="sxs-lookup"><span data-stu-id="8265d-494">The following code example disables the delay.</span></span> <span data-ttu-id="8265d-495">然后，它检查的值`NoDelay`以验证是否已成功设置该属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-495">It then checks the value of `NoDelay` to verify that the property was successfully set.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-496">获取或设置接收缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="8265d-496">Gets or sets the size of the receive buffer.</span></span></summary>
        <value><span data-ttu-id="8265d-497">接收缓冲区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="8265d-497">The size of the receive buffer, in bytes.</span></span> <span data-ttu-id="8265d-498">默认值为 8192 字节。</span><span class="sxs-lookup"><span data-stu-id="8265d-498">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-499">`ReceiveBufferSize`属性获取或设置应为每个读取操作的接收缓冲区中存储的字节数。</span><span class="sxs-lookup"><span data-stu-id="8265d-499">The `ReceiveBufferSize` property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation.</span></span> <span data-ttu-id="8265d-500">此属性的实际操作对象为接收传入的数据分配的网络缓冲区空间。</span><span class="sxs-lookup"><span data-stu-id="8265d-500">This property actually manipulates the network buffer space allocated for receiving incoming data.</span></span>  
  
 <span data-ttu-id="8265d-501">你的网络缓冲区应至少与应用程序缓冲区以确保在调用时，将导致所需的数据可用一样大<xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-501">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8265d-502">使用<xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A>属性来设置此大小。</span><span class="sxs-lookup"><span data-stu-id="8265d-502">Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="8265d-503">如果你的应用程序将接收大容量数据，则应传递`Read`方法非常大的应用程序缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8265d-503">If your application will be receiving bulk data, you should pass the `Read` method a very large application buffer.</span></span>  
  
 <span data-ttu-id="8265d-504">你是否比的数据量较小的网络缓冲区中请求`Read`方法，您将无法再检索所需的一个读取操作中的数据量。</span><span class="sxs-lookup"><span data-stu-id="8265d-504">If the network buffer is smaller than the amount of data you request in the `Read` method, you will not be able to retrieve the desired amount of data in one read operation.</span></span> <span data-ttu-id="8265d-505">这可能会产生的额外调用的开销`Read`方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-505">This incurs the overhead of additional calls to the `Read` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-506">下面的代码示例设置并获取接收缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="8265d-506">The following code example sets and gets the receive buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8265d-507">设置缓冲区大小时出错。</span><span class="sxs-lookup"><span data-stu-id="8265d-507">An error occurred when setting the buffer size.</span></span>  
  
<span data-ttu-id="8265d-508">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8265d-508">-or-</span></span> 
<span data-ttu-id="8265d-509">在 .NET Compact Framework 应用程序中，无法设置此属性。</span><span class="sxs-lookup"><span data-stu-id="8265d-509">In .NET Compact Framework applications, you cannot set this property.</span></span> <span data-ttu-id="8265d-510">有关解决方法，请参阅“备注”中的“平台说明”。</span><span class="sxs-lookup"><span data-stu-id="8265d-510">For a workaround, see the Platform Note in Remarks.</span></span></exception>
        <altmember cref="P:System.Net.Sockets.TcpClient.SendBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveTimeout : int with get, set" Usage="System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-511">获取或设置在初始化一个读取操作以后 <see cref="T:System.Net.Sockets.TcpClient" /> 等待接收数据的时间量。</span><span class="sxs-lookup"><span data-stu-id="8265d-511">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait to receive data once a read operation is initiated.</span></span></summary>
        <value><span data-ttu-id="8265d-512">连接的超时值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="8265d-512">The time-out value of the connection in milliseconds.</span></span> <span data-ttu-id="8265d-513">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="8265d-513">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-514">`ReceiveTimeout`属性确定时间量的<xref:System.Net.Sockets.NetworkStream.Read%2A>方法将阻止，直至可以接收数据。</span><span class="sxs-lookup"><span data-stu-id="8265d-514">The `ReceiveTimeout` property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data.</span></span> <span data-ttu-id="8265d-515">此时间以毫秒为单位。</span><span class="sxs-lookup"><span data-stu-id="8265d-515">This time is measured in milliseconds.</span></span> <span data-ttu-id="8265d-516">如果超时到期之前`Read`成功完成，请<xref:System.Net.Sockets.TcpClient>引发<xref:System.IO.IOException>。</span><span class="sxs-lookup"><span data-stu-id="8265d-516">If the time-out expires before `Read` successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>.</span></span> <span data-ttu-id="8265d-517">默认情况下没有任何超时。</span><span class="sxs-lookup"><span data-stu-id="8265d-517">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-518">下面的代码示例设置并获取接收超时时间。</span><span class="sxs-lookup"><span data-stu-id="8265d-518">The following code example sets and gets the receive time out.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.SendTimeout" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-519">获取或设置发送缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="8265d-519">Gets or sets the size of the send buffer.</span></span></summary>
        <value><span data-ttu-id="8265d-520">发送缓冲区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="8265d-520">The size of the send buffer, in bytes.</span></span> <span data-ttu-id="8265d-521">默认值为 8192 字节。</span><span class="sxs-lookup"><span data-stu-id="8265d-521">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-522">`SendBufferSize`属性获取或设置应为在每次调用中发送的字节数<xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-522">The `SendBufferSize` property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8265d-523">此属性的实际操作对象为发送操作分配的网络缓冲区空间。</span><span class="sxs-lookup"><span data-stu-id="8265d-523">This property actually manipulates the network buffer space allocated for send operation.</span></span>  
  
 <span data-ttu-id="8265d-524">网络缓冲区应至少与应用程序缓冲区以确保所需的数据将存储并在一个操作中发送一样大。</span><span class="sxs-lookup"><span data-stu-id="8265d-524">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation.</span></span> <span data-ttu-id="8265d-525">使用<xref:System.Net.Sockets.TcpClient.SendBufferSize%2A>属性来设置此大小。</span><span class="sxs-lookup"><span data-stu-id="8265d-525">Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="8265d-526">如果你的应用程序将发送大容量数据，则应传递`Write`方法非常大的应用程序缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8265d-526">If your application will be sending bulk data, you should pass the `Write` method a very large application buffer.</span></span>  
  
 <span data-ttu-id="8265d-527">如果网络缓冲区小于数据量则提供`Write`方法中，多个网络的发送操作将为您对每个调用执行`Write`方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-527">If the network buffer is smaller than the amount of data you provide the `Write` method, several network send operations will be performed for every call you make to the `Write` method.</span></span> <span data-ttu-id="8265d-528">通过确保你的网络缓冲区至少与应用程序缓冲区一样大，可以获得更大的数据吞吐量。</span><span class="sxs-lookup"><span data-stu-id="8265d-528">You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-529">下面的代码示例设置并获取发送缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="8265d-529">The following code example sets and gets the send buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendTimeout : int with get, set" Usage="System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8265d-530">获取或设置 <see cref="T:System.Net.Sockets.TcpClient" /> 等待发送操作成功完成的时间量。</span><span class="sxs-lookup"><span data-stu-id="8265d-530">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait for a send operation to complete successfully.</span></span></summary>
        <value><span data-ttu-id="8265d-531">发送超时值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="8265d-531">The send time-out value, in milliseconds.</span></span> <span data-ttu-id="8265d-532">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="8265d-532">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8265d-533">`SendTimeout`属性确定时间量的<xref:System.Net.Sockets.Socket.Send%2A>方法将阻塞，直到能够成功返回。</span><span class="sxs-lookup"><span data-stu-id="8265d-533">The `SendTimeout` property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully.</span></span> <span data-ttu-id="8265d-534">此时间以毫秒为单位。</span><span class="sxs-lookup"><span data-stu-id="8265d-534">This time is measured in milliseconds.</span></span>  
  
 <span data-ttu-id="8265d-535">调用后<xref:System.Net.Sockets.NetworkStream.Write%2A>方法，基础<xref:System.Net.Sockets.Socket>返回实际发送到主机的字节数。</span><span class="sxs-lookup"><span data-stu-id="8265d-535">After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host.</span></span> <span data-ttu-id="8265d-536">`SendTimeout`属性确定时间量<xref:System.Net.Sockets.TcpClient>接收的字节数返回之前将等待。</span><span class="sxs-lookup"><span data-stu-id="8265d-536">The `SendTimeout` property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned.</span></span> <span data-ttu-id="8265d-537">如果超时到期之前`Send`方法已成功完成，`TcpClient`将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="8265d-537">If the time-out expires before the `Send` method successfully completes, `TcpClient` will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8265d-538">默认情况下没有任何超时。</span><span class="sxs-lookup"><span data-stu-id="8265d-538">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8265d-539">下面的代码示例设置和获取`SendTimeout`值。</span><span class="sxs-lookup"><span data-stu-id="8265d-539">The following code example sets and gets the `SendTimeout` value.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8265d-540">释放由 <see cref="T:System.Net.Sockets.TcpClient" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="8265d-540">Releases all resources used by the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="8265d-541">在完成时调用 IDisposable.Dispose 使用<xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="8265d-541">Call IDisposable.Dispose when you are finished using the <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="8265d-542">IDisposable.Dispose 方法会使<xref:System.Net.Sockets.TcpClient>中不可用状态。</span><span class="sxs-lookup"><span data-stu-id="8265d-542">The IDisposable.Dispose method leaves the <xref:System.Net.Sockets.TcpClient> in an unusable state.</span></span> <span data-ttu-id="8265d-543">在调用 IDisposable.Dispose 后，必须释放对所有引用<xref:System.Net.Sockets.TcpClient>这样垃圾回收器才能收回内存的<xref:System.Net.Sockets.TcpClient>占用。</span><span class="sxs-lookup"><span data-stu-id="8265d-543">After calling IDisposable.Dispose, you must release all references to the <xref:System.Net.Sockets.TcpClient> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.TcpClient> was occupying.</span></span> <span data-ttu-id="8265d-544">有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="8265d-544">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE] 
> <span data-ttu-id="8265d-545">在发布到最后一个引用前，始终调用 IDisposable.Dispose <xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="8265d-545">Always call IDisposable.Dispose before you release your last reference to the <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="8265d-546">否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Net.Sockets.TcpClient>对象的**Finalize**方法。</span><span class="sxs-lookup"><span data-stu-id="8265d-546">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.TcpClient> object's **Finalize** method.</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>