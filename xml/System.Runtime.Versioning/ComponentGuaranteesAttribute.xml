<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c9cc63738e7d595aac3ed161af7c1252c0bb6baf" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36628716" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ComponentGuaranteesAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义可以跨多个版本的组件、类型或类型成员的兼容性保证。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>组件和类库的开发人员用于指示其库的使用者可以预期跨多个版本的兼容性的级别。 它指示库或组件的未来版本将不会中断现有客户端的保证的级别。 然后，客户端可以使用<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>设计自己的接口，以便确保稳定性版本之间的帮助。  
  
> [!NOTE]
>  公共语言运行时 (CLR) 不以任何方式使用此属性。 正式记录组件作者的目的在于其值。 编译时工具还可使用这些声明用于检测的编译时错误，否则会违反已声明的保证。  
  
## <a name="levels-of-compatibility"></a>兼容性级别  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>支持以下级别的兼容性，它们由的成员的形式表示<xref:System.Runtime.Versioning.ComponentGuaranteesOptions>枚举：  
  
-   无版本版本兼容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>)。 客户端可以预期将来的版本会中断现有客户端。 有关详细信息，请参阅[无兼容性](#None)本主题中后面的部分。  
  
-   通过并行版本的兼容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>)。 组件已经过测试，若要在多个版本的程序集加载到相同的应用程序域中时。 一般情况下，未来版本可能会破坏兼容性。 但是，当进行重大更改时，旧版本则不会修改，但是共存的新版本。 通过并行执行是预期的方式，使工作进行重大更改时的现有客户端。 有关详细信息，请参阅[并排显示兼容性](#SideBySide)本主题中后面的部分。  
  
-   稳定版本的兼容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>)。 将来的版本不应中断客户端，并通过并行执行应不必需的。 但是，如果客户端已无意中损坏的它可能可以使用通过并行执行来解决此问题。 有关详细信息，请参阅[稳定的兼容性](#Standard)部分。  
  
-   Exchange 版本的兼容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>)。 特别小心以确保将来的版本不会中断客户端。 客户端应在用于与独立于另一个部署其他程序集进行通信的接口的签名中使用仅限这些类型。 只有一个版本的这些类型预计会在给定应用程序域中，这意味着如果客户端中断，通过并行执行不能解决兼容性问题。 有关详细信息，请参阅[交换类型兼容性](#Exchange)部分。  
  
 以下各节讨论每个级别的更详细地保证。  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>不兼容性  
 标记将组件作为<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>指示提供程序，则没有有关兼容性的保证。 客户端应避免采取公开的接口的任何依赖项。 此级别的兼容性可用于实验或公共公开但仅用于在同一时间始终更新的组件的类型。 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> 显式指示此组件不应使用由外部组件。  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>通过并行兼容性  
 标记将组件作为<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>指示组件已经过测试若要在多个版本的程序集加载到同一应用程序域时。 允许进行重大更改，只要它们由到具有更高版本的版本号的程序集。 绑定到对旧版本的程序集的组件应继续绑定到的旧版本，且其他组件可以将绑定到新版本。 还有可能更新被声明为一个组件<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>通过会造成任何破坏修改旧版本。  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>稳定的兼容性  
 标记作为类型<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>指示类型，应在版本之间保持稳定。 但是，这可能也是类型的可能的稳定相同的应用程序域中存在的并行版本。  
  
 稳定类型维护高二进制兼容性栏。 因此，提供程序应避免对稳定类型进行重大更改。 以下类型的更改是可接受的：  
  
-   私有实例字段中添加或删除字段，一种类型，只要这不会中断的序列化格式。  
  
-   将非可序列化的类型更改为可序列化的类型。 （但是，可序列化的类型不被更改为非可序列化的类型。）  
  
-   引发新的、 更派生的异常从方法。  
  
-   改进性能的方法。  
  
-   只要更改不会产生不利影响大多数客户端，请更改返回值的范围。  
  
-   如果业务理由是高且受负面影响的客户端的数量较低，则修复严重的 bug。  
  
 由于新版本的稳定组件不会中断现有客户端，因此通常只有一个版本的稳定组件需要应用程序域中。 但是，这是不要求，因为稳定的类型不会使用所有组件都达成的 exchange 的已知类型。 因此，如果一个稳定的组件的新版本会无意间破坏某些组件，并且其他组件需要新版本，它可能可以修复此问题通过加载同时的旧和新组件。  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 提供更强的版本兼容性保证比<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>。 很多版本组件的公共的默认值。  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 可以与组合<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>，该组件不会破坏兼容性，而测试若要在多个版本加载到给定应用程序域中时所处的状态。  
  
 类型或方法被标记为后<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>，它可以升级到<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>。 但是，它无法降级到<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>。  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>交换类型兼容性  
 标记作为类型<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>提供更强的版本兼容性保证比<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>，并应应用于所有类型的稳定。 这些类型旨在用于跨同时时间 （任何版本的 CLR） 或任何版本的组件或应用程序中的所有组件边界独立构建的组件和空间 （跨进程，一个进程中的跨 CLR 之间的交换跨应用程序域一个 CLR 中）。 如果对交换类型进行重大更改，则无法通过加载多个版本的类型解决此问题。  
  
 仅在一个问题是非常严重 （例如造成严重的安全问题） 或破坏的可能性较非常低 （即，如果代码可能不会采取依赖关系上的随机方式破坏行为） 时，才应更改 Exchange 类型。 对交换类型，可以进行以下类型的更改：  
  
-   添加新接口定义的继承。  
  
-   添加新的私有方法实现新继承的接口定义的方法。  
  
-   添加新的静态字段。  
  
-   添加新的静态方法。  
  
-   添加新的非虚拟实例方法。  
  
 以下被视为重大更改和基元类型不允许：  
  
-   更改序列化格式。 版本容错序列化是必需的。  
  
-   添加或删除私有实例字段。 此风险更改类型的序列化格式并将分解为客户端代码使用反射。  
  
-   更改类型的可序列化性。 不可序列化的类型不能设置为可序列化，反之亦然。  
  
-   引发其他异常从方法。  
  
-   除非成员定义引发这种可能性，并清楚地表明客户端应如何处理未知的值，请更改该方法的返回值的范围。  
  
-   修复大多数 bug。 类型的使用者将依赖于现有的行为。  
  
 后一个组件，标记类型或成员与<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>保证，它不能更改为<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>或<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>。  
  
 通常，交换类型都是基本类型 (如<xref:System.Int32>和<xref:System.String>.NET Framework 中) 和接口 (如<xref:System.Collections.Generic.IList%601>， <xref:System.Collections.Generic.IEnumerable%601>，和<xref:System.IComparable%601>)，通常用在公共接口。  
  
 Exchange 类型上公开仅也标记为其他类型<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>兼容性。 此外，exchange 类型不能依赖于倾向于更改的 Windows Api 的行为。  
  
## <a name="component-guarantees-a-summary"></a>摘要组件保证：  
 下表指示组件的特征和使用情况如何影响其兼容性保证。  
  
|组件特征|交换|稳定版|通过并行|无|  
|-------------------------------|--------------|------------|--------------------|----------|  
|可以在组件之间的接口中该版本单独使用。|Y|N|N|N|  
|可以是 （专用） 程序集由该版本单独使用。|Y|Y|Y|N|  
|可以在单个应用程序域中具有多个版本。|N|Y|Y|Y|  
|可以进行重大更改|N|N|Y|Y|  
|经测试以确保可以一起加载的程序集的多个版本。|N|N|Y|N|  
|可以就地进行重大更改。|N|N|N|Y|  
|可以进行非重大更改维护就地更改非常安全。|Y|Y|Y|Y|  
  
## <a name="applying-the-attribute"></a>应用特性  
 你可以将应用<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>到程序集、 类型或类型成员。 其应用程序具有层次结构。 也就是说，默认情况下，保证由定义<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>的程序集级别属性的属性在程序集和在这些类型中的所有成员定义的所有类型的保证。 同样，如果保证应用于该类型，默认情况下它也适用于类型的每个成员。  
  
 可以通过应用重写此继承的保证<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>到各个类型和类型成员。 但是，重写默认值的保证仅会削弱保证;它们不能增强它。 例如，如果程序集标记为<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>保证，其类型和成员都具有不兼容性保证，并应用于类型或程序集中的成员的任何其他保证将被忽略。  
  
## <a name="testing-the-guarantee"></a>测试保证  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>属性返回的成员<xref:System.Runtime.Versioning.ComponentGuaranteesOptions>枚举，它将标有<xref:System.FlagsAttribute>属性。 这意味着，你应进行测试以你感兴趣的屏蔽掉可能未知的标志的标志。 例如，下面的示例测试是否类型标记为<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>。  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 下面的示例测试是否类型标记为<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>或<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>。  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 以下示例测试可以是一种类型标记为<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>(也就是说，既不<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>也不<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>)。  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Versioning.ComponentGuaranteesAttribute : System.Runtime.Versioning.ComponentGuaranteesOptions -&gt; System.Runtime.Versioning.ComponentGuaranteesAttribute" Usage="new System.Runtime.Versioning.ComponentGuaranteesAttribute guarantees" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">用于指定保证的跨多个版本的兼容性级别的枚举值之一。</param>
        <summary>使用一个指示某个库、类型或成员保证的跨多个版本的兼容性级别的值初始化 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>实例化类时，值`guarantees`参数分配给<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Guarantees : System.Runtime.Versioning.ComponentGuaranteesOptions" Usage="System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示保证的跨多个版本的库、类型或类型成员的兼容性级别。</summary>
        <value>用于指定保证的跨多个版本的兼容性级别的枚举值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>属性对应于`guarantees`参数<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>