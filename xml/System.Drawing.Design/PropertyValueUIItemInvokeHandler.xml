<Type Name="PropertyValueUIItemInvokeHandler" FullName="System.Drawing.Design.PropertyValueUIItemInvokeHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="896954d144cb81b939ae9a959a7bff7791d3924e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37658774" /></Metadata><TypeSignature Language="C#" Value="public delegate void PropertyValueUIItemInvokeHandler(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PropertyValueUIItemInvokeHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub PropertyValueUIItemInvokeHandler(context As ITypeDescriptorContext, descriptor As PropertyDescriptor, invokedItem As PropertyValueUIItem)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void PropertyValueUIItemInvokeHandler(ITypeDescriptorContext ^ context, PropertyDescriptor ^ descriptor, PropertyValueUIItem ^ invokedItem);" />
  <TypeSignature Language="F#" Value="type PropertyValueUIItemInvokeHandler = delegate of ITypeDescriptorContext * PropertyDescriptor * PropertyValueUIItem -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
    <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
    <Parameter Name="invokedItem" Type="System.Drawing.Design.PropertyValueUIItem" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="context">与双击的图标关联的属性的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
    <param name="descriptor">与双击的图标关联的属性。</param>
    <param name="invokedItem">与双击的图标关联的 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />。</param>
    <summary>表示将用来处理 <see cref="P:System.Drawing.Design.PropertyValueUIItem.InvokeHandler" /> 的 <see cref="T:System.Drawing.Design.PropertyValueUIItem" /> 事件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 双击属性窗口中的图标，将引发<xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A>事件的<xref:System.Drawing.Design.PropertyValueUIItem>与之关联的图标。 <xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A>事件通常将启动用户界面 (UI) 来编辑该属性的值。 添加<xref:System.Drawing.Design.PropertyValueUIItemInvokeHandler>到<xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A>属性的<xref:System.Drawing.Design.PropertyValueUIItem>分配事件处理程序可以双击显示属性名称旁边的图标时执行相应的行为。  
  
 创建 <xref:System.Drawing.Design.PropertyValueUIItemInvokeHandler> 委托时，需要标识将处理该事件的方法。 若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。 除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。 有关事件处理程序委托的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例提供了<xref:System.Drawing.Design.PropertyValueUIItem>名为任何的组件属性的对象`HorizontalMargin`或`VerticalMargin`。 <xref:System.Drawing.Design.PropertyValueUIItem>图像、 工具提示，并单击此图像可查看属性时，显示一个消息框的事件处理程序，提供了这些属性。 此代码示例是为提供一个更大示例的一部分<xref:System.Drawing.Design.IPropertyValueUIService>接口。  
  
 [!code-cpp[IPropertyValueUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IPropertyValueUIServiceExample/CPP/propertyuicomponent.cpp#2)]
 [!code-csharp[IPropertyValueUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IPropertyValueUIServiceExample/CS/propertyuicomponent.cs#2)]
 [!code-vb[IPropertyValueUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IPropertyValueUIServiceExample/VB/propertyuicomponent.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.ITypeDescriptorContext" />
    <altmember cref="T:System.Drawing.Design.PropertyValueUIItem" />
    <altmember cref="T:System.Drawing.Design.IPropertyValueUIService" />
  </Docs>
</Type>