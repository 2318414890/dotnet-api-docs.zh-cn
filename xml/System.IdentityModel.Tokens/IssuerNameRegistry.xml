<Type Name="IssuerNameRegistry" FullName="System.IdentityModel.Tokens.IssuerNameRegistry">
  <TypeSignature Language="C#" Value="public abstract class IssuerNameRegistry : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IssuerNameRegistry extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.IssuerNameRegistry" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IssuerNameRegistry&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class IssuerNameRegistry abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c8677-101">发布者名称注册表的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="c8677-101">The abstract base class for an issuer name registry.</span></span> <span data-ttu-id="c8677-102">发行人名称注册表用于加密材料的关联助记名称，需要验证由相应发行人生成的标志签名。</span><span class="sxs-lookup"><span data-stu-id="c8677-102">An issuer name registry is used to associate a mnemonic name to the cryptographic material that is needed to verify the signatures of tokens produced by the corresponding issuer.</span></span> <span data-ttu-id="c8677-103">颁布者名称注册表维护了一个受依赖一方 （RP） 应用程序信赖的颁布者列表。</span><span class="sxs-lookup"><span data-stu-id="c8677-103">The issuer name registry maintains a list of issuers that are trusted by a relying party (RP) application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8677-104">颁发者名称注册表用于将验证由相应的颁发者的令牌签名所需的加密材料的助记键名称相关联。</span><span class="sxs-lookup"><span data-stu-id="c8677-104">The issuer name registry is used to associate a mnemonic name to the cryptographic material needed to verify signatures of tokens produced by the corresponding issuer.</span></span> <span data-ttu-id="c8677-105">此名称然后用于设置<xref:System.Security.Claims.Claim.Issuer%2A>或<xref:System.Security.Claims.Claim.OriginalIssuer%2A>声明的属性。</span><span class="sxs-lookup"><span data-stu-id="c8677-105">This name is then used to set the <xref:System.Security.Claims.Claim.Issuer%2A> or the <xref:System.Security.Claims.Claim.OriginalIssuer%2A> property of a claim.</span></span> <span data-ttu-id="c8677-106">通过公开的方法<xref:System.IdentityModel.Tokens.IssuerNameRegistry>类从管道调用安全令牌处理程序正在处理的令牌。</span><span class="sxs-lookup"><span data-stu-id="c8677-106">The methods exposed by the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> class are called from the pipeline by the security token handler that is processing the token.</span></span> <span data-ttu-id="c8677-107">由未映射的颁发者名称注册表的材料签名的令牌将被丢弃为不受信任。</span><span class="sxs-lookup"><span data-stu-id="c8677-107">Tokens signed by material that is not mapped by an issuer name registry are discarded as untrusted.</span></span> <span data-ttu-id="c8677-108">颁发者名称注册表返回的名称应是唯一的 RP 应用程序的上下文中。</span><span class="sxs-lookup"><span data-stu-id="c8677-108">The name returned by the issuer name registry should be unique within the context of an RP application.</span></span>  
  
 <span data-ttu-id="c8677-109">可以在代码中，指定颁发者名称注册表来使用通过设置<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="c8677-109">In code, you can specify the issuer name registry to use by setting the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c8677-110">在配置文件中，颁发者名称注册表可以指定通过指定[ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)元素下的[ &lt;securityTokenHandlerConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)元素。</span><span class="sxs-lookup"><span data-stu-id="c8677-110">In a configuration file, the issuer name registry can be specified by specifying the [&lt;issuerNameRegistry&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element under the [&lt;securityTokenHandlerConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) element.</span></span>  
  
 <span data-ttu-id="c8677-111">Windows Identity Foundation (WIF) 提供的实现<xref:System.IdentityModel.Tokens.IssuerNameRegistry>现成的类：<xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>类。</span><span class="sxs-lookup"><span data-stu-id="c8677-111">Windows Identity Foundation (WIF) provides an implementation of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> class out of the box: the <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> class.</span></span> <span data-ttu-id="c8677-112">当你使用此实现可以所的 RP 应用程序配置文件中指定的受信任颁发者列表[ &lt;trustedIssuers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/trustedissuers.md)元素，它是的子元素`<issuerNameRegistry>`元素时<xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>中该元素的引用.class`type`属性。</span><span class="sxs-lookup"><span data-stu-id="c8677-112">When you use this implementation you can specify the list of trusted issuers in the configuration file of the RP application under the [&lt;trustedIssuers&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/trustedissuers.md) element, which is a child element of the `<issuerNameRegistry>` element when the <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>.class is referenced in that element’s `type` attribute.</span></span> <span data-ttu-id="c8677-113">下`<trustedIssuers>`元素，每个颁发者名称映射到应该用于验证其签名的 X.509 证书。</span><span class="sxs-lookup"><span data-stu-id="c8677-113">Under the `<trustedIssuers>` element, each issuer name is mapped to the X.509 certificate that should be used to verify its signature.</span></span>  
  
 <span data-ttu-id="c8677-114">若要创建自定义颁发者名称注册表，必须重写<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c8677-114">To create a custom issuer name registry, you must override the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c8677-115">此方法返回指定的安全令牌的颁发者名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-115">This method returns the issuer name for the specified security token.</span></span> <span data-ttu-id="c8677-116">你可以选择重写<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%2CSystem.String%29?displayProperty=nameWithType>方法以检索颁发者名称时提供的提示的机制和<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName%2A>方法如果你想要提供适用于 Windows 的颁发者名称令牌是不同于<xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>。</span><span class="sxs-lookup"><span data-stu-id="c8677-116">You can optionally override the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%2CSystem.String%29?displayProperty=nameWithType> method to provide a hinting mechanism when retrieving issuer names and the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName%2A> method if you want to provide an issuer name for Windows tokens that is different from <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>.</span></span> <span data-ttu-id="c8677-117">重写<xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A>方法，以使你颁发者名称注册表，以从配置文件初始化。</span><span class="sxs-lookup"><span data-stu-id="c8677-117">Override the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> method to enable your issuer name registry to be initialized from a configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8677-118">下面的代码演示如何实现<xref:System.IdentityModel.Tokens.IssuerNameRegistry>仅接受使用使用者证书的颁发者的类"CN = localhost"。</span><span class="sxs-lookup"><span data-stu-id="c8677-118">The following code shows an implementation of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> class that only accepts issuers that use certificates with subject "CN=localhost".</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="c8677-119">下面的代码是仅供说明用途。</span><span class="sxs-lookup"><span data-stu-id="c8677-119">The following code is for illustrative purposes only.</span></span> <span data-ttu-id="c8677-120">验证基于使用者名称的证书不是很好的做法。</span><span class="sxs-lookup"><span data-stu-id="c8677-120">Validating certificates based on subject name is not a good practice.</span></span> <span data-ttu-id="c8677-121">因为是在生产环境中，则不应使用此代码。</span><span class="sxs-lookup"><span data-stu-id="c8677-121">This code should not be used as is in production.</span></span>  
  
 [!code-csharp[WifIssuerNameRegistry#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#1)]  
  
 <span data-ttu-id="c8677-122">下面显示了 XML 向受信任颁发者名称注册表配置应用程序所必需。</span><span class="sxs-lookup"><span data-stu-id="c8677-122">The following shows the XML necessary to configure an application with the trusted issuer name registry.</span></span>  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <issuerNameRegistry type="System.IdentityModel.Samples.TrustedIssuerNameRegistry, MyApp" />  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IssuerNameRegistry ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IssuerNameRegistry();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c8677-123">初始化 <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c8677-123">Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetIssuerName">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c8677-124">当在派生类中重写时，返回指定安全令牌的颁发者名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-124">When overridden in a derived class, returns the issuer name for the specified security token.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8677-125">由正在处理令牌的安全令牌处理程序调用从处理管道。</span><span class="sxs-lookup"><span data-stu-id="c8677-125">Called from the processing pipeline by the security token handler that is processing the token.</span></span> <span data-ttu-id="c8677-126">该方法应返回 RP 应用程序的上下文中的颁发者的唯一名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-126">The method should return a unique name for the issuer within the context of the RP application.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public abstract string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetIssuerName(System::IdentityModel::Tokens::SecurityToken ^ securityToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="securityToken"><span data-ttu-id="c8677-127">返回颁布者名称的安全令牌。</span><span class="sxs-lookup"><span data-stu-id="c8677-127">The security token for which to return the issuer name.</span></span></param>
        <summary><span data-ttu-id="c8677-128">当在派生类中重写时，返回指定安全令牌的颁发者名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-128">When overridden in a derived class, returns the name of the issuer of the specified security token.</span></span></summary>
        <returns><span data-ttu-id="c8677-129">发行人名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-129">The issuer name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8677-130">实现应返回非 null 和非空字符串来标识已识别的颁发者或一个空字符串，以标识无法识别的颁发者。</span><span class="sxs-lookup"><span data-stu-id="c8677-130">Implementations should return a non-null and non-empty string to identify a recognized issuer, or a null string to identify an unrecognized issuer.</span></span>  
  
 <span data-ttu-id="c8677-131">由正在处理令牌的安全令牌处理程序调用从处理管道。</span><span class="sxs-lookup"><span data-stu-id="c8677-131">Called from the processing pipeline by the security token handler that is processing the token.</span></span> <span data-ttu-id="c8677-132">该方法应返回 RP 应用程序的上下文中的颁发者的唯一名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-132">The method should return a unique name for the issuer within the context of the RP application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8677-133">下面的代码演示<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>颁发者名称注册表的方法。</span><span class="sxs-lookup"><span data-stu-id="c8677-133">The following code shows the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> method for an issuer name registry.</span></span> <span data-ttu-id="c8677-134">完整示例位于<xref:System.IdentityModel.Tokens.IssuerNameRegistry>类概述主题。</span><span class="sxs-lookup"><span data-stu-id="c8677-134">The full sample is in the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> class overview topic.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="c8677-135">下面的代码是仅供说明用途。</span><span class="sxs-lookup"><span data-stu-id="c8677-135">The following code is for illustrative purposes only.</span></span> <span data-ttu-id="c8677-136">验证基于使用者名称的证书不是很好的做法。</span><span class="sxs-lookup"><span data-stu-id="c8677-136">Validating certificates based on subject name is not a good practice.</span></span> <span data-ttu-id="c8677-137">因为是在生产环境中，则不应使用此代码。</span><span class="sxs-lookup"><span data-stu-id="c8677-137">This code should not be used as is in production.</span></span>  
  
 [!code-csharp[WifIssuerNameRegistry#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetIssuerName(System::IdentityModel::Tokens::SecurityToken ^ securityToken, System::String ^ requestedIssuerName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="requestedIssuerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="securityToken"><span data-ttu-id="c8677-138">返回颁布者名称的安全令牌。</span><span class="sxs-lookup"><span data-stu-id="c8677-138">The security token for which to return the issuer name.</span></span></param>
        <param name="requestedIssuerName"><span data-ttu-id="c8677-139">要考虑请求的发行人名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-139">An issuer name to consider in the request.</span></span></param>
        <summary><span data-ttu-id="c8677-140">当在派生类中重写时，返回指定安全令牌的颁发者名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-140">When overridden in a derived class, returns the name of the issuer of the specified security token.</span></span> <span data-ttu-id="c8677-141">在确定要返回的颁布者名称中要考虑的指定的颁布者名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-141">The specified issuer name may be considered in determining the issuer name to return.</span></span></summary>
        <returns><span data-ttu-id="c8677-142">发行人名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-142">The issuer name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8677-143">默认实现会忽略`requestedIssuerName`参数，并只需调用<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="c8677-143">The default implementation ignores the `requestedIssuerName` parameter and simply calls the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c8677-144">由正在处理令牌的安全令牌处理程序调用从处理管道。</span><span class="sxs-lookup"><span data-stu-id="c8677-144">Called from the processing pipeline by the security token handler that is processing the token.</span></span> <span data-ttu-id="c8677-145">该方法应返回 RP 应用程序的上下文中的颁发者的唯一名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-145">The method should return a unique name for the issuer within the context of the RP application.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetWindowsIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetWindowsIssuerName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetWindowsIssuerName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWindowsIssuerName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetWindowsIssuerName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c8677-146">返回用于 Windows 声明的默认颁发者名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-146">Returns the default issuer name to be used for Windows claims.</span></span></summary>
        <returns><span data-ttu-id="c8677-147">Windows 声明的默认颁发者名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-147">The default issuer name for Windows claims.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8677-148">默认实现返回 <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>。</span><span class="sxs-lookup"><span data-stu-id="c8677-148">The default implementation returns <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>.</span></span>  
  
 <span data-ttu-id="c8677-149">由正在处理令牌的安全令牌处理程序调用从处理管道。</span><span class="sxs-lookup"><span data-stu-id="c8677-149">Called from the processing pipeline by the security token handler that is processing the token.</span></span> <span data-ttu-id="c8677-150">该方法应返回 RP 应用程序的上下文中的颁发者的唯一名称。</span><span class="sxs-lookup"><span data-stu-id="c8677-150">The method should return a unique name for the issuer within the context of the RP application.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist"><span data-ttu-id="c8677-151">配置 XML 元素。</span><span class="sxs-lookup"><span data-stu-id="c8677-151">The configuration XML elements.</span></span> <span data-ttu-id="c8677-152">列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="c8677-152">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span></span></param>
        <summary><span data-ttu-id="c8677-153">在派生类中重写时，将从 XML 中加载自定义配置。</span><span class="sxs-lookup"><span data-stu-id="c8677-153">When overridden in a derived class, loads custom configuration from XML.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8677-154"><xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A>配置基础结构调用方法。</span><span class="sxs-lookup"><span data-stu-id="c8677-154">The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="c8677-155">当调用此方法时，`nodelist`将包含的顶级子元素[ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="c8677-155">When this method is called, the `nodelist` will contain the top-level child elements of the [&lt;issuerNameRegistry&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element from the configuration file.</span></span> <span data-ttu-id="c8677-156">其中每个可能反过来，还包含属性或子元素，具体取决于您为您派生的类定义的配置架构。</span><span class="sxs-lookup"><span data-stu-id="c8677-156">Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span>  
  
 <span data-ttu-id="c8677-157">默认实现将引发<xref:System.NotImplementedException>。</span><span class="sxs-lookup"><span data-stu-id="c8677-157">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="c8677-158">重写此方法在派生类以启用初始化的颁发者名称注册表从配置文件中。</span><span class="sxs-lookup"><span data-stu-id="c8677-158">Override this method in your derived class to enable initialization of your issuer name registry from a configuration file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>