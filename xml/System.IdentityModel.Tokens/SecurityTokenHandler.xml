<Type Name="SecurityTokenHandler" FullName="System.IdentityModel.Tokens.SecurityTokenHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="150d892884e4958b20bdde55fc1889994ef6ee77" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52604865" /></Metadata><TypeSignature Language="C#" Value="public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenHandler extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenHandler&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenHandler abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type SecurityTokenHandler = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="62c64-101">安全标记处理程序的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="62c64-101">The abstract base class for security token handlers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-102"><xref:System.IdentityModel.Tokens.SecurityTokenHandler>类是所有安全令牌处理程序均都派生自的基类。</span><span class="sxs-lookup"><span data-stu-id="62c64-102">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive.</span></span> <span data-ttu-id="62c64-103">安全令牌处理程序负责：</span><span class="sxs-lookup"><span data-stu-id="62c64-103">A security token handler is responsible for:</span></span>  
  
-   <span data-ttu-id="62c64-104">验证安全令牌 (<xref:System.IdentityModel.Tokens.SecurityToken>) 的设计过程和打包到令牌中包含声明的类型<xref:System.Security.Claims.ClaimsIdentity>对象。</span><span class="sxs-lookup"><span data-stu-id="62c64-104">Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object.</span></span>  
  
-   <span data-ttu-id="62c64-105">序列化和反序列化安全令牌的目的是要处理的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-105">Serializing and deserializing security tokens of the type it is designed to process.</span></span>  
  
-   <span data-ttu-id="62c64-106">序列化和反序列化密钥标识符子句 (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>)，请参阅它旨在处理目标和源类型的令牌`<wsse:SecurityTokenReference>`元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-106">Serializing and deserializing key identifier clauses (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that refer to tokens of the type it is designed to process to and from `<wsse:SecurityTokenReference>` elements.</span></span>  
  
-   <span data-ttu-id="62c64-107">创建从安全令牌<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>的实现所传递对象<xref:System.IdentityModel.SecurityTokenService>类。</span><span class="sxs-lookup"><span data-stu-id="62c64-107">Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
-   <span data-ttu-id="62c64-108">从实现的安全令牌创建密钥标识符子句<xref:System.IdentityModel.SecurityTokenService>类。</span><span class="sxs-lookup"><span data-stu-id="62c64-108">Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="62c64-109">Windows Identity Foundation (WIF) 提供现成的以下安全令牌处理程序：</span><span class="sxs-lookup"><span data-stu-id="62c64-109">Windows Identity Foundation (WIF) ships the following security token handlers out of the box:</span></span>  
  
-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  
  
 <span data-ttu-id="62c64-110">大多数这些类公开实现特定于类设计的令牌的处理功能的其他成员。</span><span class="sxs-lookup"><span data-stu-id="62c64-110">Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.</span></span> <span data-ttu-id="62c64-111">在许多情况下，它可能是一种更好的做法派生自这些类而不是直接从一个<xref:System.IdentityModel.Tokens.SecurityTokenHandler>类。</span><span class="sxs-lookup"><span data-stu-id="62c64-111">In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class.</span></span>  
  
 <span data-ttu-id="62c64-112">可以添加或从令牌处理程序集合中移除由指定的安全令牌处理程序[&lt;添加&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)， [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)，或[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)下的元素[ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-112">A security token handler can be added or removed from  a token handler collection by specifying the [&lt;add&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), or [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elements under the [&lt;securityTokenHandlers&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element in a configuration file.</span></span> <span data-ttu-id="62c64-113"><xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration>对象，其中包含的处理程序集合的配置设置可以通过访问<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>属性，该令牌处理程序的成员的处理程序集合可以从访问<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-113">The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property.</span></span> <span data-ttu-id="62c64-114">您可以重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>方法来处理您的处理程序采用任何自定义配置元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-114">You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes.</span></span>  
  
 <span data-ttu-id="62c64-115"><xref:System.IdentityModel.Tokens.SecurityTokenHandler>类公开一些其他属性和方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-115">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods.</span></span> <span data-ttu-id="62c64-116">根据您选择实现的功能，你可以重写部分或全部这些成员。</span><span class="sxs-lookup"><span data-stu-id="62c64-116">Depending on the functionality that you choose to implement, you may override some or all of these members.</span></span>  
  
 <span data-ttu-id="62c64-117">必须重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>属性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>方法可以向 WIF 基础结构提供有关您的类的安全令牌的类型的信息旨在处理。</span><span class="sxs-lookup"><span data-stu-id="62c64-117">You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.</span></span>  
  
 <span data-ttu-id="62c64-118">验证、 序列化和反序列化的指示处理程序是否可以执行特定函数的方法或实现的功能的方法与组合属性或方法通过公开功能。</span><span class="sxs-lookup"><span data-stu-id="62c64-118">Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.</span></span> <span data-ttu-id="62c64-119">以下列表对属性或实现该功能的方法与指示功能的方法：</span><span class="sxs-lookup"><span data-stu-id="62c64-119">The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:</span></span>  
  
-   <span data-ttu-id="62c64-120"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>属性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法： 确认一个象征和打包到令牌中包含的声明<xref:System.Security.Claims.ClaimsIdentity>。</span><span class="sxs-lookup"><span data-stu-id="62c64-120">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>.</span></span>  
  
-   <span data-ttu-id="62c64-121"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>属性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法： 令牌序列化。</span><span class="sxs-lookup"><span data-stu-id="62c64-121">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization.</span></span>  
  
-   <span data-ttu-id="62c64-122"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>方法： 令牌反序列化。</span><span class="sxs-lookup"><span data-stu-id="62c64-122">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization.</span></span>  
  
-   <span data-ttu-id="62c64-123"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>方法： 反序列化密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-123">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses.</span></span>  
  
-   <span data-ttu-id="62c64-124"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>方法： 序列化密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-124">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses.</span></span>  
  
 <span data-ttu-id="62c64-125"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>并<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>方法调用的实现中的管道从<xref:System.IdentityModel.SecurityTokenService>类。</span><span class="sxs-lookup"><span data-stu-id="62c64-125">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="62c64-126"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A>方法由 WIF 基础结构，以确定是否已接收到指定的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-126">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received.</span></span> <span data-ttu-id="62c64-127">默认情况下此方法返回`false`，指示令牌不已收到的。</span><span class="sxs-lookup"><span data-stu-id="62c64-127">By default this method returns `false`, which indicates that the token has not already been received.</span></span> <span data-ttu-id="62c64-128">可以重写方法，并提供逻辑来检查重播的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-128">You can override the method and provide logic to detect replayed tokens.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-129">中的所有的代码示例<xref:System.IdentityModel.Tokens.SecurityTokenHandler>主题取自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-129">The code examples in all of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> topics are taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-130">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-130">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-131">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-131">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span> <span data-ttu-id="62c64-132">下面的 XML 演示如何将 SWT 令牌处理程序添加到令牌处理程序集合。</span><span class="sxs-lookup"><span data-stu-id="62c64-132">The following XML shows how to add the SWT token handler to the token handlers collection.</span></span>  
  
```xml  
<system.identityModel>  
  <identityConfiguration saveBootstrapContext="true">  
    <issuerTokenResolver type="SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken">  
      <AddAudienceKeyPair  symmetricKey="wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=" audience="http://localhost:19851/" />  
    </issuerTokenResolver>  
    <issuerNameRegistry type="RelyingParty.TrustedIssuerNameRegistry, RelyingParty"/>  
    <audienceUris>  
      <add value="http://localhost:19851/"/>  
    </audienceUris>  
    <securityTokenHandlers>  
      <add type="SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken" />  
    </securityTokenHandlers>  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />
    <altmember cref="T:System.IdentityModel.SecurityTokenService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62c64-133">从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 类。</span><span class="sxs-lookup"><span data-stu-id="62c64-133">Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadKeyIdentifierClause (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="62c64-134">在开始元素上指定的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="62c64-134">An XML reader positioned at the start element.</span></span> <span data-ttu-id="62c64-135">不能通过这种方法读取器前移。</span><span class="sxs-lookup"><span data-stu-id="62c64-135">The reader should not be advanced by this method.</span></span></param>
        <summary><span data-ttu-id="62c64-136">返回指示由指定 XML 读取器引用的 XML 元素是否为由此实例反序列化的关键标识符子句的值。</span><span class="sxs-lookup"><span data-stu-id="62c64-136">Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</span></span></summary>
        <returns><span data-ttu-id="62c64-137">如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法可读取元素，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-137"><see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> method can read the element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="62c64-138">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-138">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-139">默认实现返回`false`以指示无法读取密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-139">The default implementation returns `false` to indicate that the key identifier clause cannot be read.</span></span>  
  
 <span data-ttu-id="62c64-140">在派生的类检查读取器指为了确定实例是否可以反序列化密钥标识符子句的元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-140">A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.</span></span> <span data-ttu-id="62c64-141">这通常通过调用<xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType>与相应元素和命名空间的字符串指定的方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-141">This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType> method with the appropriate element and namespace strings specified.</span></span> <span data-ttu-id="62c64-142">如果重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>，还必须重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>方法以提供逻辑来反序列化密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-142">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62c64-143">返回指示指定标记是否可以作为由此实例处理类型标记的反序列化的值。</span><span class="sxs-lookup"><span data-stu-id="62c64-143">Returns a value that indicates whether the specified token can be deserialized as a token of the type processed by this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (tokenString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : string -&gt; bool&#xA;override this.CanReadToken : string -&gt; bool" Usage="securityTokenHandler.CanReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString"><span data-ttu-id="62c64-144">读取的标记字符串。</span><span class="sxs-lookup"><span data-stu-id="62c64-144">The token string to read.</span></span></param>
        <summary><span data-ttu-id="62c64-145">返回指示指定字符串是否可以作为由此实例处理类型标记的反序列化的值。</span><span class="sxs-lookup"><span data-stu-id="62c64-145">Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</span></span></summary>
        <returns><span data-ttu-id="62c64-146">如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> 方法可读取元素，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-146"><see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> method can read the element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="62c64-147">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-147">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-148">默认实现始终返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="62c64-148">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="62c64-149">如果重写此方法，还必须重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法以提供要反序列化令牌的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-149">If you override this method, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method to provide the logic to deserialize the token.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadToken : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="62c64-150">在开始元素上指定的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="62c64-150">An XML reader positioned at a start element.</span></span> <span data-ttu-id="62c64-151">不能通过这种方法读取器前移。</span><span class="sxs-lookup"><span data-stu-id="62c64-151">The reader should not be advanced by this method.</span></span></param>
        <summary><span data-ttu-id="62c64-152">返回指示由指定 XML 读取器引用的 XML 元素是否可以作为由此实例处理类型标记的读取的值。</span><span class="sxs-lookup"><span data-stu-id="62c64-152">Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</span></span></summary>
        <returns><span data-ttu-id="62c64-153">如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可读取元素，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-153"><see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> method can read the element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="62c64-154">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-154">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-155">默认实现始终返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="62c64-155">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="62c64-156">在派生的类检查读取器为了确定实例是否可以反序列化安全令牌引用的元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-156">A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.</span></span> <span data-ttu-id="62c64-157">这通常通过调用<xref:System.Xml.XmlReader.IsStartElement%2A>与相应元素和命名空间的字符串指定的方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-157">This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified.</span></span> <span data-ttu-id="62c64-158">如果重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>，还必须重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法或<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法以提供逻辑来反序列化密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-158">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method to provide the logic to deserialize the key identifier clause.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-159">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>方法，以确定令牌是否可以读取由处理程序。</span><span class="sxs-lookup"><span data-stu-id="62c64-159">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> method to determine whether a token can be read by a handler.</span></span> <span data-ttu-id="62c64-160">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-160">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-161">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-161">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-162">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-162">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public virtual bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanValidateToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62c64-163">获取一个指示该处理程序是否支持对安全标记进行验证的值。</span><span class="sxs-lookup"><span data-stu-id="62c64-163">Gets a value that indicates whether the handler supports validation of security tokens.</span></span></summary>
        <value><span data-ttu-id="62c64-164">如果类能够验证安全标记，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-164"><see langword="true" /> if the class is capable of validating security tokens; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="62c64-165">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-165">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-166">若要在派生类中实现验证，重写此属性以返回`true`并重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法来实现验证逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-166">To implement validation in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method to implement the validation logic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-167">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>属性以指示自定义处理程序可以验证令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-167">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property to indicate that a custom handler can validate tokens.</span></span> <span data-ttu-id="62c64-168">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-168">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-169">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-169">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-170">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-170">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanWriteKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityTokenHandler.CanWriteKeyIdentifierClause securityKeyIdentifierClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="securityKeyIdentifierClause"><span data-ttu-id="62c64-171">要检查的密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-171">The key identifier clause to be checked.</span></span></param>
        <summary><span data-ttu-id="62c64-172">返回指示指定的密钥标识符子句是否可以由此实例序列化的值。</span><span class="sxs-lookup"><span data-stu-id="62c64-172">Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</span></span></summary>
        <returns><span data-ttu-id="62c64-173">如果可以序列化密钥标识符子句，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-173"><see langword="true" /> if the key identifier clause can be serialized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="62c64-174">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-174">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-175">默认实现始终返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="62c64-175">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="62c64-176">如果重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>，还必须重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>方法以提供用于序列化密钥标识符子句的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-176">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method to provide the logic to serialize the key identifier clause.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62c64-177">获取一个指示该处理程序能否序列化安全标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-177">Gets a value that indicates whether the handler can serialize security tokens.</span></span></summary>
        <value><span data-ttu-id="62c64-178">如果类能够序列化标记，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-178"><see langword="true" /> if the class is capable of serializing tokens; otherwise <see langword="false" />.</span></span> <span data-ttu-id="62c64-179">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-179">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-180">若要在派生类中实现序列化，重写此属性以返回`true`并重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法来实现序列化逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-180">To implement serialization in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods to implement the serialization logic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-181">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>属性以指示自定义处理程序可以序列化令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-181">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property to indicate that a custom handler can serialize tokens.</span></span> <span data-ttu-id="62c64-182">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-182">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-183">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-183">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-184">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-184">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public Property Configuration As SecurityTokenHandlerConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ Configuration { System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Configuration : System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration with get, set" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62c64-185">获取或设置提供配置当前实例的  <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="62c64-185">Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> object that provides configuration for the current instance.</span></span></summary>
        <value><span data-ttu-id="62c64-186">对当前实例的配置对象。</span><span class="sxs-lookup"><span data-stu-id="62c64-186">The configuration object for the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-187"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>属性通常由配置基础结构中设置[ &lt;securityTokenHandlerConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)启动应用程序期间配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-187">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property is typically set by the configuration infrastructure from the [&lt;securityTokenHandlerConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) element in the configuration file during application start up.</span></span>  
  
 <span data-ttu-id="62c64-188">在派生类中，您将使用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>以访问配置设置的属性; 例如，若要在中使用颁发者名称注册表<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法可以从访问<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType>配置对象的属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-188">In derived classes, you use the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> property of the configuration object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainingCollection">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainingCollection As SecurityTokenHandlerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ ContainingCollection { System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainingCollection : System.IdentityModel.Tokens.SecurityTokenHandlerCollection" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62c64-189">获取包含当前实例的标记处理程序集合。</span><span class="sxs-lookup"><span data-stu-id="62c64-189">Gets the token handler collection that contains the current instance.</span></span></summary>
        <value><span data-ttu-id="62c64-190">包含当前实例的标记处理程序集合。</span><span class="sxs-lookup"><span data-stu-id="62c64-190">The token handler collection that contains the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-191">当标记处理程序添加到<xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection>实例，此属性自动设置。</span><span class="sxs-lookup"><span data-stu-id="62c64-191">When the token handler is added to a <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> instance, this property is automatically set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenReference">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference(class System.IdentityModel.Tokens.SecurityToken token, bool attached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSecurityTokenReference (token As SecurityToken, attached As Boolean) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ CreateSecurityTokenReference(System::IdentityModel::Tokens::SecurityToken ^ token, bool attached);" />
      <MemberSignature Language="F#" Value="abstract member CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.CreateSecurityTokenReference (token, attached)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="attached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="62c64-192">创建引用的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-192">The token for which the reference is to be created.</span></span></param>
        <param name="attached"><span data-ttu-id="62c64-193">如果应创建附加引用，则为 <see langword="true" />；如果应创建独立的引用，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62c64-193"><see langword="true" /> if an attached reference should be created; <see langword="false" /> if an unattached reference should be created.</span></span></param>
        <summary><span data-ttu-id="62c64-194">当在派生类中重写，为该类处理的标记创建安全标记引用。</span><span class="sxs-lookup"><span data-stu-id="62c64-194">When overridden in a derived class, creates the security token reference for tokens processed by that class.</span></span> <span data-ttu-id="62c64-195">通常通过安全标记服务 (STS) 调用此方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-195">This method is typically called by a security token service (STS).</span></span></summary>
        <returns><span data-ttu-id="62c64-196">一个密钥标识符字句，该字句引用指定的令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-196">A key identifier clause that references the specified token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-197">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-197">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-198">派生的类重写此方法返回的密钥标识符子句 (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) 可用于创建`<wsse:SecurityTokenReference>`指定标记的元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-198">Derived classes override this method to return a key identifier clause (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that can be used to create a `<wsse:SecurityTokenReference>` element for the specified token.</span></span>  
  
 <span data-ttu-id="62c64-199">从的实现调用<xref:System.IdentityModel.SecurityTokenService>类。</span><span class="sxs-lookup"><span data-stu-id="62c64-199">Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="62c64-200">通常情况下，<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>不需要时要使用，而不会创建一个自定义安全令牌服务。</span><span class="sxs-lookup"><span data-stu-id="62c64-200">Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created.</span></span> <span data-ttu-id="62c64-201">当安全令牌服务返回安全令牌时，已颁发的安全令牌包含对附加的和未附加的安全令牌的引用。</span><span class="sxs-lookup"><span data-stu-id="62c64-201">When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.</span></span> <span data-ttu-id="62c64-202">附加引用所引用的是包含在 SOAP 消息的安全标头中的安全令牌，而未附加引用则引用未包含在 SOAP 消息的安全标头中的安全令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-202">Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.</span></span> <span data-ttu-id="62c64-203">这些引用通常确认已颁发的安全令牌的真实性。</span><span class="sxs-lookup"><span data-stu-id="62c64-203">These references typically affirm the authenticity of the issued security token.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-204">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>方法以从指定的令牌创建密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-204">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> method to create a key identifier clause from the specified token.</span></span> <span data-ttu-id="62c64-205">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-205">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-206">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-206">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-207">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-207">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="abstract member CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.CreateToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor"><span data-ttu-id="62c64-208">令牌从其生成的安全令牌说明符。</span><span class="sxs-lookup"><span data-stu-id="62c64-208">The security token descriptor from which the token is to be created.</span></span> <span data-ttu-id="62c64-209">在调用该方法之前设置标记说明符的属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-209">Properties of the token descriptor are set before this method is called.</span></span></param>
        <summary><span data-ttu-id="62c64-210">在派生类中重写时，使用指定的标记描述符创建新的安全标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-210">When overridden in a derived class, creates a security token using the specified token descriptor.</span></span> <span data-ttu-id="62c64-211">通过安全标记服务 (STS) 调用此方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-211">This method is called by a security token service (STS).</span></span></summary>
        <returns><span data-ttu-id="62c64-212">与标记说明符属性匹配的安全标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-212">A security token that matches the properties of the token descriptor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-213">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-213">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-214">从的实现调用<xref:System.IdentityModel.SecurityTokenService>类。</span><span class="sxs-lookup"><span data-stu-id="62c64-214">Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-215">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>方法创建并返回一个令牌，从标记说明符。</span><span class="sxs-lookup"><span data-stu-id="62c64-215">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> method to create and return a token from a token descriptor.</span></span> <span data-ttu-id="62c64-216">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-216">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-217">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-217">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-218">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-218">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectReplayedToken">
      <MemberSignature Language="C#" Value="protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetectReplayedToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DetectReplayedToken (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DetectReplayedToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.DetectReplayedToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="62c64-219">检查的重播标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-219">The token to check for replay.</span></span></param>
        <summary><span data-ttu-id="62c64-220">当在派生类中重写时，如果重播时标记删除，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-220">When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-221">默认实现不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="62c64-221">The default implementation does nothing.</span></span>  
  
 <span data-ttu-id="62c64-222">派生的类应引发<xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException>如果已使用该令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-222">Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used.</span></span>  
  
 <span data-ttu-id="62c64-223">Windows Identity Foundation (WIF) 提供了<xref:System.IdentityModel.Tokens.TokenReplayCache>类的缓存可能派生自的重播并[ &lt;tokenReplayCache&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)配置元素，它可以用于配置重播缓存使用的应用程序; 中的令牌处理程序但是，确切实现的<xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A>方法由派生类的设计器。</span><span class="sxs-lookup"><span data-stu-id="62c64-223">Windows Identity Foundation (WIF) provides the <xref:System.IdentityModel.Tokens.TokenReplayCache> class from which replay caches may be derived and the [&lt;tokenReplayCache&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is up to the designer of the derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public abstract string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetTokenTypeIdentifiers : unit -&gt; string[]" Usage="securityTokenHandler.GetTokenTypeIdentifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62c64-224">当在派生类中重写时，将返回在请求中使用的 URI 集，以标识由该派生类处理的类型标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-224">When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</span></span></summary>
        <returns><span data-ttu-id="62c64-225">识别该处理程序支持的标识种类 URIs 集合。</span><span class="sxs-lookup"><span data-stu-id="62c64-225">The set of URIs that identify the token type that this handler supports.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-226"><xref:System.Type>的当前实例处理的令牌通过访问<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-226">The <xref:System.Type> of the token processed by the current instance is accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property.</span></span> <span data-ttu-id="62c64-227"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>方法返回的一套可接受的标识符，可以使用消息来指代的令牌类型中。</span><span class="sxs-lookup"><span data-stu-id="62c64-227">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.</span></span> <span data-ttu-id="62c64-228">例如，URI 值中使用`<wst:TokenType>`元素下的`<wst:RequestSecurityToken>`元素来请求特定类型的令牌 (由<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType>对象模型中的属性)。</span><span class="sxs-lookup"><span data-stu-id="62c64-228">For example, the URI value used in the `<wst:TokenType>` element under the `<wst:RequestSecurityToken>` element to request a specific kind of token (represented by the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType> property in the object model).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-229">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>方法以返回自定义令牌的标记类型标识符。</span><span class="sxs-lookup"><span data-stu-id="62c64-229">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to return the token type identifiers for a custom token.</span></span> <span data-ttu-id="62c64-230">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-230">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-231">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-231">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-232">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-232">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  
[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="securityTokenHandler.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist"><span data-ttu-id="62c64-233">配置 XML 元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-233">The configuration XML elements.</span></span> <span data-ttu-id="62c64-234">列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-234">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span></span></param>
        <summary><span data-ttu-id="62c64-235">在派生类中重写时，将从 XML 中加载自定义配置。</span><span class="sxs-lookup"><span data-stu-id="62c64-235">When overridden in a derived class, loads custom configuration from XML.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-236"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>配置基础结构调用方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-236">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="62c64-237">调用此方法时，`nodelist`将包含的令牌处理程序的顶级子元素[&lt;添加&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-237">When this method is called, the `nodelist` will contain the top-level child elements of the token handler's [&lt;add&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element from the configuration file.</span></span> <span data-ttu-id="62c64-238">其中每项功能可能反过来，还包含属性或子元素，具体取决于为您派生的类定义的配置架构。</span><span class="sxs-lookup"><span data-stu-id="62c64-238">Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span>  
  
 <span data-ttu-id="62c64-239">默认实现会引发<xref:System.NotImplementedException>。</span><span class="sxs-lookup"><span data-stu-id="62c64-239">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="62c64-240">重写此方法以启用安全令牌处理程序配置文件中的初始化派生类中。</span><span class="sxs-lookup"><span data-stu-id="62c64-240">Override this method in your derived class to enable initialization of your security token handler from a configuration file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadKeyIdentifierClause (reader As XmlReader) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ ReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.ReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="62c64-241">放置在 XML 开始元素的位置，要反序列化为密匙标识符子句的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="62c64-241">An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</span></span></param>
        <summary><span data-ttu-id="62c64-242">当在派生类中重写时，使用指定 XML 读取器将 XML 引用的反序列化为由该类处理的主要标志符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-242">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</span></span></summary>
        <returns><span data-ttu-id="62c64-243">从 XML 反序列化的密钥标识符子句。</span><span class="sxs-lookup"><span data-stu-id="62c64-243">The key identifier clause that was deserialized from the XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-244">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-244">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-245">重写此方法以提供要反序列化 XML 中的密钥标识符子句的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-245">Override this method to provide the logic to deserialize a key identifier clause from XML.</span></span> <span data-ttu-id="62c64-246">如果重写此方法，则还应重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-246">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62c64-247">当在派生类中重写时，由派生类反序列化类型处理的指定 XML。</span><span class="sxs-lookup"><span data-stu-id="62c64-247">When overridden in a derived class, deserializes the specified XML to a token of the type processed by the derived class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (tokenString As String) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString"><span data-ttu-id="62c64-248">要进行反序列化的字符串。</span><span class="sxs-lookup"><span data-stu-id="62c64-248">The string to be deserialized.</span></span></param>
        <summary><span data-ttu-id="62c64-249">当在派生类中重写时，由派生类反序列化类型处理的指定字符串。</span><span class="sxs-lookup"><span data-stu-id="62c64-249">When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</span></span></summary>
        <returns><span data-ttu-id="62c64-250">从指定字符串反序列化的安全标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-250">The security token that was deserialized from the specified string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 <span data-ttu-id="62c64-251">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-251">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-252">重写此方法以提供可以反序列化字符串的安全令牌的功能。</span><span class="sxs-lookup"><span data-stu-id="62c64-252">Override this method to provide functionality that can deserialize a security token from a string.</span></span> <span data-ttu-id="62c64-253">如果您重写，此方法，还应重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-253">If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="62c64-254">在标记的开始元素上指定的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="62c64-254">An XML reader positioned at the start element of the token.</span></span></param>
        <summary><span data-ttu-id="62c64-255">当在派生类中重写时，使用指定 XML 读取器将 XML 引用的反序列化为由该类处理的类型的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-255">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</span></span></summary>
        <returns><span data-ttu-id="62c64-256">从 XML 反序列化的安全令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-256">The security token that was deserialized from the XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 <span data-ttu-id="62c64-257">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-257">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-258">重写此方法以提供要反序列化 XML 中的安全令牌的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-258">Override this method to provide the logic to deserialize a security token from XML.</span></span> <span data-ttu-id="62c64-259">如果重写此方法，则还应重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-259">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62c64-260">通常情况下，在派生类中，如果方法不能反序列化令牌从引用的 XML，则会引发<xref:System.Xml.XmlException>。</span><span class="sxs-lookup"><span data-stu-id="62c64-260">Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-261">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>方法从指定的 XML 读取器读取自定义令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-261">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> method to read a custom token from the specified XML reader.</span></span> <span data-ttu-id="62c64-262">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-262">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-263">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-263">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-264">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-264">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  
[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  
[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken (reader, tokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="62c64-265">在标记的开始元素上指定的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="62c64-265">An XML reader positioned at the start element of the token.</span></span></param>
        <param name="tokenResolver"><span data-ttu-id="62c64-266">包含带外和已缓存的标志的标志的解析器。</span><span class="sxs-lookup"><span data-stu-id="62c64-266">A token resolver that contains out-of-band and cached tokens.</span></span></param>
        <summary><span data-ttu-id="62c64-267">当在派生类中重写时，由指定的 XML 读取器使用指定的标记解析器处理派生类类型的标记引用的 XML 进行反序列化。</span><span class="sxs-lookup"><span data-stu-id="62c64-267">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</span></span></summary>
        <returns><span data-ttu-id="62c64-268">从 XML 反序列化的安全令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-268">The security token that was deserialized from the XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 <span data-ttu-id="62c64-269">默认实现会忽略`tokenResolver`参数并将调用委托给<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-269">The default implementation ignores the `tokenResolver` parameter and delegates the call to the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="62c64-270">重写此方法以提供要反序列化 XML 中的安全令牌的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-270">Override this method to provide the logic to deserialize a security token from XML.</span></span> <span data-ttu-id="62c64-271">如果重写此方法，则还应重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-271">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62c64-272">通常情况下，在派生类中，如果方法不能反序列化令牌从引用的 XML，则会引发<xref:System.Xml.XmlException>。</span><span class="sxs-lookup"><span data-stu-id="62c64-272">Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public abstract Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ TokenType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62c64-273">当在派生类中重写时，可获取由此实例处理的该安全标记的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-273">When overridden in a derived class, gets the type of the security token that is processed by this instance.</span></span></summary>
        <value><span data-ttu-id="62c64-274">这个实例处理的安全标记的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-274">The type of the security token that is processed by this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-275">您必须重写此属性在派生类中的，并返回<xref:System.Type>安全令牌的 (<xref:System.IdentityModel.Tokens.SecurityToken>) 派生的类进行处理的。</span><span class="sxs-lookup"><span data-stu-id="62c64-275">You must override this property in derived classes and return the <xref:System.Type> of the security token (<xref:System.IdentityModel.Tokens.SecurityToken>) that is processed by the derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-276">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>属性以返回<xref:System.Type>由自定义处理程序处理的安全令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-276">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property to return the <xref:System.Type> of the security tokens that are processed by a custom handler.</span></span> <span data-ttu-id="62c64-277">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-277">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-278">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-278">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-279">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-279">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationFailure">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationFailure(class System.IdentityModel.Tokens.SecurityToken token, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationFailure (token As SecurityToken, errorMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationFailure(System::IdentityModel::Tokens::SecurityToken ^ token, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationFailure : System.IdentityModel.Tokens.SecurityToken * string -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationFailure (token, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="62c64-280">要验证的安全令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-280">The security token that is being validated.</span></span></param>
        <param name="errorMessage"><span data-ttu-id="62c64-281">要写入跟踪的消息。</span><span class="sxs-lookup"><span data-stu-id="62c64-281">The message to write to the trace.</span></span></param>
        <summary><span data-ttu-id="62c64-282">当启用跟踪时，在安全标记的验证过程跟踪失败事件。</span><span class="sxs-lookup"><span data-stu-id="62c64-282">Traces the failure event during the validation of security tokens when tracing is enabled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-283">此方法应从调用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>令牌验证失败时的方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-283">This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method when validation of the token fails.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationSuccess">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationSuccess(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationSuccess (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationSuccess(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationSuccess : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationSuccess token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="62c64-284">要验证的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-284">The token that was validated.</span></span></param>
        <summary><span data-ttu-id="62c64-285">当启用跟踪时，跟踪安全标记事件的成功验证。</span><span class="sxs-lookup"><span data-stu-id="62c64-285">Traces the successful validation of security tokens event when tracing is enabled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-286">此方法应从调用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法后已成功验证令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-286">This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method after the token has been successfully validated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;&#xA;override this.ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="securityTokenHandler.ValidateToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="62c64-287">要验证的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-287">The token to validate.</span></span></param>
        <summary><span data-ttu-id="62c64-288">在派生类中重写时，验证指定安全标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-288">When overridden in a derived class, validates the specified security token.</span></span> <span data-ttu-id="62c64-289">该标记必须是派生类处理的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-289">The token must be of the type processed by the derived class.</span></span></summary>
        <returns><span data-ttu-id="62c64-290">标记中包含的值标识。</span><span class="sxs-lookup"><span data-stu-id="62c64-290">The identities contained in the token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-291">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-291">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-292"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>验证和从反序列化的安全令牌中提取声明的基础结构调用方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-292">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token.</span></span> <span data-ttu-id="62c64-293">这些声明的集合中返回<xref:System.Security.Claims.ClaimsIdentity>方法返回的对象。</span><span class="sxs-lookup"><span data-stu-id="62c64-293">These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method.</span></span> <span data-ttu-id="62c64-294">在通常情况下，此集合将包含单个标识。</span><span class="sxs-lookup"><span data-stu-id="62c64-294">In the typical case, this collection will contain a single identity.</span></span>  
  
 <span data-ttu-id="62c64-295">在派生类中，验证通常包括验证针对 Uri 中指定的受众的令牌中指定的目标的受众<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType>属性中指定的标记处理程序配置对象<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-295">In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property.</span></span> <span data-ttu-id="62c64-296">这些 Uri 通常会在配置文件中设置[ &lt;audienceUris&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-296">These URIs are typically set in the configuration file under the [&lt;audienceUris&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) element.</span></span> <span data-ttu-id="62c64-297">如果无法验证受众，<xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException>应引发异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-297">If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown.</span></span>  
  
 <span data-ttu-id="62c64-298">时处理令牌，通常通过将颁发者令牌传递给之一验证颁发者<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>上的方法<xref:System.IdentityModel.Tokens.IssuerNameRegistry>配置为通过处理程序对象<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-298">When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property.</span></span> <span data-ttu-id="62c64-299">通常通过配置的颁布者名称注册表[ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="62c64-299">The issuer name registry is typically configured through the [&lt;issuerNameRegistry&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element in the configuration file.</span></span> <span data-ttu-id="62c64-300"><xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>返回的颁发者名称。</span><span class="sxs-lookup"><span data-stu-id="62c64-300">The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer.</span></span> <span data-ttu-id="62c64-301">此名称应该用于设置<xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType>令牌中包含的声明中的属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-301">This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType> property in claims contained in the token.</span></span> <span data-ttu-id="62c64-302">如果颁发者名称注册表不包含颁发者令牌的条目<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>返回`null`。</span><span class="sxs-lookup"><span data-stu-id="62c64-302">If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`.</span></span> <span data-ttu-id="62c64-303">在这种情况下<xref:System.IdentityModel.Tokens.SecurityTokenException>通常引发在派生类中，但此行为取决于类的设计器。</span><span class="sxs-lookup"><span data-stu-id="62c64-303">In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-304">下面的代码演示的重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>处理简单 web 令牌 (SWT) 的安全令牌处理程序的方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-304">The following code shows an override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method for a security token handler that processes simple web tokens (SWT).</span></span> <span data-ttu-id="62c64-305">代码摘自`CustomToken`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-305">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="62c64-306">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-306">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  
  
 <span data-ttu-id="62c64-307">下面的代码演示`CreateClaims`方法调用的重写从<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>上一示例中的方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-307">The following code shows `CreateClaims` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the previous example.</span></span> <span data-ttu-id="62c64-308">此方法返回<xref:System.Security.Claims.ClaimsIdentity>创建从令牌中声明的对象。</span><span class="sxs-lookup"><span data-stu-id="62c64-308">This method returns a <xref:System.Security.Claims.ClaimsIdentity> object that is created from the claims in the token.</span></span> <span data-ttu-id="62c64-309">代码摘自`CustomToken`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-309">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="62c64-310">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-310">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  
  
 <span data-ttu-id="62c64-311">下面的代码演示`ValidateSignature`方法调用的重写从<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>简单 web 令牌处理程序中的方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-311">The following code shows `ValidateSignature` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler.</span></span> <span data-ttu-id="62c64-312">此方法使用配置的验证令牌上的签名<xref:System.IdentityModel.Tokens.IssuerTokenResolver>。</span><span class="sxs-lookup"><span data-stu-id="62c64-312">This method validates the signature on the token by using the configured <xref:System.IdentityModel.Tokens.IssuerTokenResolver>.</span></span> <span data-ttu-id="62c64-313">代码摘自`CustomToken`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-313">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="62c64-314">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-314">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 <span data-ttu-id="62c64-315">下面的代码演示`ValidateAudience`方法调用的重写从<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>简单 web 令牌处理程序中的方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-315">The following code shows `ValidateAudience` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler.</span></span> <span data-ttu-id="62c64-316">此方法验证对用户 Uri 的配置中指定的令牌中包含的受众。</span><span class="sxs-lookup"><span data-stu-id="62c64-316">This method validates the audience contained in the token against the audience URIs that were specified in configuration.</span></span> <span data-ttu-id="62c64-317">代码摘自`CustomToken`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-317">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="62c64-318">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-318">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteKeyIdentifierClause(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteKeyIdentifierClause(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit&#xA;override this.WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit" Usage="securityTokenHandler.WriteKeyIdentifierClause (writer, securityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="62c64-319">XML 编写器。</span><span class="sxs-lookup"><span data-stu-id="62c64-319">The XML writer.</span></span></param>
        <param name="securityKeyIdentifierClause"><span data-ttu-id="62c64-320">要序列化的密钥标识符子句 。</span><span class="sxs-lookup"><span data-stu-id="62c64-320">The key identifier clause to serialize.</span></span></param>
        <summary><span data-ttu-id="62c64-321">在派生类中重写时，将密钥标识符子句序列化到 XML。</span><span class="sxs-lookup"><span data-stu-id="62c64-321">When overridden in a derived class, serializes the specified key identifier clause to XML.</span></span> <span data-ttu-id="62c64-322">密钥标识符子句必须是派生类支持的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-322">The key identifier clause must be of the type supported by the derived class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-323">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-323">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-324">重写此方法以提供用于序列化密钥标识符子句到 XML 的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-324">Override this method to provide the logic to serialize a key identifier clause to XML.</span></span> <span data-ttu-id="62c64-325">如果重写此方法，则还应重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="62c64-325">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62c64-326">在派生类中重写时，将指定安全标记列化。</span><span class="sxs-lookup"><span data-stu-id="62c64-326">When overridden in a derived class, serializes the specified security token.</span></span> <span data-ttu-id="62c64-327">该标记必须是派生类处理的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-327">The token must be of the type processed by the derived class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (token As SecurityToken) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ WriteToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string&#xA;override this.WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string" Usage="securityTokenHandler.WriteToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="62c64-328">要序列化的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-328">The token to serialize.</span></span></param>
        <summary><span data-ttu-id="62c64-329">在派生类中重写时，将指定安全标记列化到字符串。</span><span class="sxs-lookup"><span data-stu-id="62c64-329">When overridden in a derived class, serializes the specified security token to a string.</span></span> <span data-ttu-id="62c64-330">该标记必须是派生类处理的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-330">The token must be of the type processed by the derived class.</span></span></summary>
        <returns><span data-ttu-id="62c64-331">要序列化的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-331">The serialized token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-332">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-332">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-333">重写此方法以提供用于序列化到 XML 的安全令牌的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-333">Override this method to provide the logic to serialize a security token to XML.</span></span> <span data-ttu-id="62c64-334">如果重写此方法，则还应重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-334">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="62c64-335">XML 编写器。</span><span class="sxs-lookup"><span data-stu-id="62c64-335">The XML writer.</span></span></param>
        <param name="token"><span data-ttu-id="62c64-336">要序列化的标记。</span><span class="sxs-lookup"><span data-stu-id="62c64-336">The token to serialize.</span></span></param>
        <summary><span data-ttu-id="62c64-337">在派生类中重写时，将指定安全标记列化到 XML。</span><span class="sxs-lookup"><span data-stu-id="62c64-337">When overridden in a derived class, serializes the specified security token to XML.</span></span> <span data-ttu-id="62c64-338">该标记必须是派生类处理的类型。</span><span class="sxs-lookup"><span data-stu-id="62c64-338">The token must be of the type processed by the derived class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62c64-339">默认情况下此方法将引发<xref:System.NotImplementedException>异常。</span><span class="sxs-lookup"><span data-stu-id="62c64-339">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="62c64-340">重写此方法以提供用于序列化到 XML 的安全令牌的逻辑。</span><span class="sxs-lookup"><span data-stu-id="62c64-340">Override this method to provide the logic to serialize a security token to XML.</span></span> <span data-ttu-id="62c64-341">如果重写此方法，则还应重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="62c64-341">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62c64-342">下面的代码演示如何重写<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法以序列化自定义令牌。</span><span class="sxs-lookup"><span data-stu-id="62c64-342">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> method to serialize a custom token.</span></span> <span data-ttu-id="62c64-343">代码摘自`Custom Token`示例。</span><span class="sxs-lookup"><span data-stu-id="62c64-343">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="62c64-344">此示例提供了启用处理的简单 Web 令牌 (SWT) 的自定义类。</span><span class="sxs-lookup"><span data-stu-id="62c64-344">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="62c64-345">有关此示例和其他适用于 WIF 和从中下载这些示例的信息，请参阅[WIF 代码示例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="62c64-345">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>