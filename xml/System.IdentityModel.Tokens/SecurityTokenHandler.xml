<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SecurityTokenHandler.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cbb9943aefb6ba2f295be7ff7f864be1ec607810.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbb9943aefb6ba2f295be7ff7f864be1ec607810</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The abstract base class for security token handlers.</source>
          <target state="translated">安全标记处理程序的抽象基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class is the base class from which all security token handlers derive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph>类是令牌处理程序中的所有安全派生的基类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>A security token handler is responsible for:</source>
          <target state="translated">安全令牌处理程序负责下列操作：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Validating security tokens (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) of the type it is designed to process and packaging the claims contained in the token into a <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object.</source>
          <target state="translated">验证安全令牌 (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) 它旨在为进程和打包到令牌中包含的声明类型的<ph id="ph2">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Serializing and deserializing security tokens of the type it is designed to process.</source>
          <target state="translated">序列化和反序列化的它可以处理的类型的安全令牌。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Serializing and deserializing key identifier clauses (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that refer to tokens of the type it is designed to process to and from <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> elements.</source>
          <target state="translated">序列化和反序列化密钥标识符子句 (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>)，请参阅它旨在处理目标和源的类型的标记<ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph>元素。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Creating security tokens from a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph> object passed by implementations of the <ph id="ph2">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">创建从安全令牌<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph>的实现所传递对象<ph id="ph2">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Creating key identifier clauses from a security token for implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">从的实现的安全令牌创建密钥标识符子句<ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Windows Identity Foundation (WIF) ships the following security token handlers out of the box:</source>
          <target state="translated">Windows Identity Foundation (WIF) 现成附带以下安全令牌处理程序：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.</source>
          <target state="translated">大多数这些类公开实现特定于该类专为其令牌的处理的功能的其他成员。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>In many cases it may be better to derive from one of these classes rather than directly from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class.</source>
          <target state="translated">在许多情况下，它可能是一种更好的做法派生自这些类而不是直接从一个<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>A security token handler can be added or removed from  a token handler collection by specifying the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>add<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>, <bpt id="p2">[</bpt><ph id="ph3">&amp;lt;</ph>remove<ph id="ph4">&amp;gt;</ph><ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>, or <bpt id="p3">[</bpt><ph id="ph5">&amp;lt;</ph>clear<ph id="ph6">&amp;gt;</ph><ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept> elements under the <bpt id="p4">[</bpt><ph id="ph7">&amp;lt;</ph>securityTokenHandlers<ph id="ph8">&amp;gt;</ph><ept id="p4">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept> element in a configuration file.</source>
          <target state="translated">可以添加或移除令牌处理程序集合中的通过指定的安全令牌处理程序<bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>添加<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>， <bpt id="p2">[</bpt><ph id="ph3">&amp;lt;</ph>删除<ph id="ph4">&amp;gt;</ph><ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>，或<bpt id="p3">[</bpt><ph id="ph5">&amp;lt;</ph>清除<ph id="ph6">&amp;gt;</ph><ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept>下的元素<bpt id="p4">[</bpt> <ph id="ph7">&amp;lt;</ph>securityTokenHandlers<ph id="ph8">&amp;gt;</ph> <ept id="p4">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept>配置文件中的元素。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph> object that contains the configuration settings for the handler collection can be accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property and the handler collection that the token handler is a member of can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph>包含的处理程序集合的配置设置的对象可以通过访问<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph>属性和处理程序集合，该令牌处理程序的成员可以访问从<ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You can override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method to process any custom configuration elements that your handler takes.</source>
          <target state="translated">您可以重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph>方法处理您的处理程序采用任何自定义配置元素。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class exposes several other properties and methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph>类公开多个其他属性和方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Depending on the functionality that you choose to implement, you may override some or all of these members.</source>
          <target state="translated">根据你选择实现的功能，你可以重写某些或所有这些成员。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You must override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.</source>
          <target state="translated">必须重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph>属性和<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph>方法可以向 WIF 基础结构提供有关您的类的安全令牌类型的信息设计用于处理。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.</source>
          <target state="translated">验证、 序列化和反序列化通过指示处理程序是否可以执行结合使用的方法或实现的功能的方法的特定函数的属性或方法公开功能。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:</source>
          <target state="translated">以下列表对的属性或指示实现该功能的方法的功能的方法：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property and  the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method: Validates a token and packages the claims contained in the token into a <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph>属性和<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>方法： 验证令牌，打包到令牌中包含的声明<ph id="ph3">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods: Token serialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph>属性和<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph>方法： 令牌序列化。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> methods and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> methods: Token deserialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph>方法： 令牌反序列化。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method: Deserializing key identifier clauses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph>方法： 反序列化密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method: Serializing key identifier clauses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph>方法： 序列化密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> methods are called from the pipeline in implementations of the <ph id="ph3">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph>从管道的实现中调用方法<ph id="ph3">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is called by the WIF infrastructure to determine whether the specified token has already been received.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph>方法由 WIF 基础结构，以确定是否已接收到指定的标记。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>By default this method returns <ph id="ph1">`false`</ph>, which indicates that the token has not already been received.</source>
          <target state="translated">默认情况下此方法返回<ph id="ph1">`false`</ph>，表示，该令牌已尚未收到。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You can override the method and provide logic to detect replayed tokens.</source>
          <target state="translated">你可以重写该方法并提供逻辑，以检测重播的令牌。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The code examples in all of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> topics are taken from the <ph id="ph2">`Custom Token`</ph> sample.</source>
          <target state="translated">中的所有的代码示例<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph>主题，将从<ph id="ph2">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The following XML shows how to add the SWT token handler to the token handlers collection.</source>
          <target state="translated">下面的 XML 演示如何将 SWT 令牌处理程序添加到令牌处理程序集合。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor">
          <source>Called from constructors in derived classes to initialize the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /&gt;</ph> class.</source>
          <target state="translated">从派生类中的构造函数中调用，用于初始化 <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element.</source>
          <target state="translated">在开始元素上指定的 XML 读取器。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The reader should not be advanced by this method.</source>
          <target state="translated">不能通过这种方法读取器前移。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</source>
          <target state="translated">返回指示由指定 XML 读取器引用的 XML 元素是否为由此实例反序列化的关键标识符子句的值。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /&gt;</ph> 方法可读取元素，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The default implementation returns <ph id="ph1">`false`</ph> to indicate that the key identifier clause cannot be read.</source>
          <target state="translated">默认实现返回<ph id="ph1">`false`</ph>以指示无法读取密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.</source>
          <target state="translated">派生的类将检查以确定实例是否可以反序列化密钥标识符子句引用读取器的元素。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType&gt;</ph> method with the appropriate element and namespace strings specified.</source>
          <target state="translated">这通常通过调用<ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType&gt;</ph>与指定的相应元素和命名空间字符串的方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
          <target state="translated">如果你重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>，还必须重写<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph>方法以提供进行反序列化密钥标识符子句的逻辑。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Returns a value that indicates whether the specified token can be deserialized as a token of the type processed by this instance.</source>
          <target state="translated">返回指示指定标记是否可以作为由此实例处理类型标记的反序列化的值。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The token string to read.</source>
          <target state="translated">读取的标记字符串。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</source>
          <target state="translated">返回指示指定字符串是否可以作为由此实例处理类型标记的反序列化的值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /&gt;</ph> 方法可读取元素，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">默认实现始终返回 <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>If you override this method, you must also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method to provide the logic to deserialize the token.</source>
          <target state="translated">如果你重写此方法，还必须重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph>方法以提供进行反序列化令牌的逻辑。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>An XML reader positioned at a start element.</source>
          <target state="translated">在开始元素上指定的 XML 读取器。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The reader should not be advanced by this method.</source>
          <target state="translated">不能通过这种方法读取器前移。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</source>
          <target state="translated">返回指示由指定 XML 读取器引用的 XML 元素是否可以作为由此实例处理类型标记的读取的值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /&gt;</ph> 方法可读取元素，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">默认实现始终返回 <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.</source>
          <target state="translated">派生的类将检查以确定实例是否可以反序列化安全令牌引用读取器的元素。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method with the appropriate element and namespace strings specified.</source>
          <target state="translated">这通常通过调用<ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph>与指定的相应元素和命名空间字符串的方法。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method or the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
          <target state="translated">如果你重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>，还必须重写<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph>方法或<ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph>方法以提供进行反序列化密钥标识符子句的逻辑。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> method to determine whether a token can be read by a handler.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph>方法以确定是否可以读取由处理程序的令牌。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>Gets a value that indicates whether the handler supports validation of security tokens.</source>
          <target state="translated">获取一个指示该处理程序是否支持对安全标记进行验证的值。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class is capable of validating security tokens; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果类能够验证安全标记，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>To implement validation in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method to implement the validation logic.</source>
          <target state="translated">若要在派生类中实现验证，重写此属性以返回<ph id="ph1">`true`</ph>，并重写<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>方法以实现验证逻辑。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property to indicate that a custom handler can validate tokens.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph>属性以指示自定义处理程序可以验证令牌。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause to be checked.</source>
          <target state="translated">要检查的密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</source>
          <target state="translated">返回指示指定的密钥标识符子句是否可以由此实例序列化的值。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the key identifier clause can be serialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果可以序列化密钥标识符子句，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">默认实现始终返回 <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method to provide the logic to serialize the key identifier clause.</source>
          <target state="translated">如果你重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>，还必须重写<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph>方法以提供要序列化密钥标识符子句的逻辑。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>Gets a value that indicates whether the handler can serialize security tokens.</source>
          <target state="translated">获取一个指示该处理程序能否序列化安全标记。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class is capable of serializing tokens; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果类能够序列化标记，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>To implement serialization in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods to implement the serialization logic.</source>
          <target state="translated">若要在派生类中实现序列化，重写此属性以返回<ph id="ph1">`true`</ph>，并重写<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph>方法来实现的序列化逻辑。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property to indicate that a custom handler can serialize tokens.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph>属性以指示自定义处理程序可以序列化令牌。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /&gt;</ph> object that provides configuration for the current instance.</source>
          <target state="translated">获取或设置提供配置当前实例的  <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>The configuration object for the current instance.</source>
          <target state="translated">对当前实例的配置对象。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property is typically set by the configuration infrastructure from the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>securityTokenHandlerConfiguration<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept> element in the configuration file during application start up.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph>属性通常由从配置基础结构设置<bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>securityTokenHandlerConfiguration<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept>启动应用程序期间配置文件中的元素。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>In derived classes, you use the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property to access configuration settings; for example, the issuer name registry to use in the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType&gt;</ph> property of the configuration object.</source>
          <target state="translated">在派生类中，你使用<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph>以访问配置设置的属性; 例如，要在中使用的颁发者名称注册表<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>方法可以从访问<ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType&gt;</ph>配置对象的属性。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>Gets the token handler collection that contains the current instance.</source>
          <target state="translated">获取包含当前实例的标记处理程序集合。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>The token handler collection that contains the current instance.</source>
          <target state="translated">包含当前实例的标记处理程序集合。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>When the token handler is added to a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph> instance, this property is automatically set.</source>
          <target state="translated">当令牌处理程序添加到<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph>实例，自动设置此属性。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The token for which the reference is to be created.</source>
          <target state="translated">创建引用的标记。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an attached reference should be created; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if an unattached reference should be created.</source>
          <target state="translated">如果应创建附加引用，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果应创建独立的引用，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>When overridden in a derived class, creates the security token reference for tokens processed by that class.</source>
          <target state="translated">当在派生类中重写，为该类处理的标记创建安全标记引用。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>This method is typically called by a security token service (STS).</source>
          <target state="translated">通常通过安全标记服务 (STS) 调用此方法。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>A key identifier clause that references the specified token.</source>
          <target state="translated">一个密钥标识符字句，该字句引用指定的令牌。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Derived classes override this method to return a key identifier clause (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that can be used to create a <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> element for the specified token.</source>
          <target state="translated">派生的类重写此方法以返回密钥标识符子句 (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) 可以用于创建<ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph>元素指定的标记。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">从的实现调用<ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Typically, a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> does not need to be used, other than when a custom security token service is created.</source>
          <target state="translated">通常情况下，<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>不需要时要使用，而不创建自定义安全令牌服务。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.</source>
          <target state="translated">当安全令牌服务返回安全令牌时，已颁发的安全令牌包含对附加的和未附加的安全令牌的引用。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.</source>
          <target state="translated">附加引用所引用的是包含在 SOAP 消息的安全标头中的安全令牌，而未附加引用则引用未包含在 SOAP 消息的安全标头中的安全令牌。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>These references typically affirm the authenticity of the issued security token.</source>
          <target state="translated">这些引用通常确认已颁发的安全令牌的真实性。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> method to create a key identifier clause from the specified token.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph>方法以从指定的令牌创建密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The security token descriptor from which the token is to be created.</source>
          <target state="translated">令牌从其生成的安全令牌说明符。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>Properties of the token descriptor are set before this method is called.</source>
          <target state="translated">在调用该方法之前设置标记说明符的属性。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>When overridden in a derived class, creates a security token using the specified token descriptor.</source>
          <target state="translated">在派生类中重写时，使用指定的标记描述符创建新的安全标记。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>This method is called by a security token service (STS).</source>
          <target state="translated">通过安全标记服务 (STS) 调用此方法。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>A security token that matches the properties of the token descriptor.</source>
          <target state="translated">与标记说明符属性匹配的安全标记。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">从的实现调用<ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> method to create and return a token from a token descriptor.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph>方法创建并返回一个令牌，从令牌的描述符。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to check for replay.</source>
          <target state="translated">检查的重播标记。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</source>
          <target state="translated">当在派生类中重写时，如果重播时标记删除，将引发异常。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The default implementation does nothing.</source>
          <target state="translated">默认实现不执行任何操作。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Derived classes should throw a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph> if the token has already been used.</source>
          <target state="translated">派生的类应引发<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph>如果令牌已被使用。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Windows Identity Foundation (WIF) provides the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph> class from which replay caches may be derived and the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>tokenReplayCache<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept> configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <ph id="ph4">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is up to the designer of the derived class.</source>
          <target state="translated">Windows Identity Foundation (WIF) 提供<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph>类缓存可能派生自的重播和<bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>tokenReplayCache<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept>配置元素，它可以用于配置在应用程序; 中的令牌处理程序使用的重播缓存但是的正确实现<ph id="ph4">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph>方法由派生类的设计器。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</source>
          <target state="translated">当在派生类中重写时，将返回在请求中使用的 URI 集，以标识由该派生类处理的类型标记。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The set of URIs that identify the token type that this handler supports.</source>
          <target state="translated">识别该处理程序支持的标识种类 URIs 集合。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the token processed by the current instance is accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type&gt;</ph>访问处理的当前实例的令牌的通过<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph>方法来指代的令牌类型的消息中返回的一套可接受可以使用的标识符。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>For example, the URI value used in the <ph id="ph1">`&lt;wst:TokenType&gt;`</ph> element under the <ph id="ph2">`&lt;wst:RequestSecurityToken&gt;`</ph> element to request a specific kind of token (represented by the <ph id="ph3">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType&gt;</ph> property in the object model).</source>
          <target state="translated">例如，URI 值用在<ph id="ph1">`&lt;wst:TokenType&gt;`</ph>元素下的<ph id="ph2">`&lt;wst:RequestSecurityToken&gt;`</ph>元素来请求特定类型的令牌 (由表示<ph id="ph3">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType&gt;</ph>对象模型中的属性)。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to return the token type identifiers for a custom token.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph>方法以返回自定义令牌的令牌类型标识符。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The configuration XML elements.</source>
          <target state="translated">配置 XML 元素。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Each node in the list is of type <ph id="ph1">&lt;see cref="T:System.Xml.XmlElement" /&gt;</ph>.</source>
          <target state="translated">列表中的每个节点都属于 <ph id="ph1">&lt;see cref="T:System.Xml.XmlElement" /&gt;</ph> 类型。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>When overridden in a derived class, loads custom configuration from XML.</source>
          <target state="translated">在派生类中重写时，将从 XML 中加载自定义配置。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method is called by the configuration infrastructure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph>配置基础结构调用方法。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>When this method is called, the <ph id="ph1">`nodelist`</ph> will contain the top-level child elements of the token handler’s <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>add<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept> element from the configuration file.</source>
          <target state="translated">当调用此方法时，<ph id="ph1">`nodelist`</ph>将包含顶级子元素的标记处理程序的<bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>添加<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>配置文件中的元素。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</source>
          <target state="translated">其中每个可能反过来，还包含属性或子元素，具体取决于您为您派生的类定义的配置架构。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The default implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
          <target state="translated">默认实现将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Override this method in your derived class to enable initialization of your security token handler from a configuration file.</source>
          <target state="translated">重写此方法在派生类以启用初始化安全令牌处理程序从配置文件中。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</source>
          <target state="translated">放置在 XML 开始元素的位置，要反序列化为密匙标识符子句的 XML 读取器。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</source>
          <target state="translated">当在派生类中重写时，使用指定 XML 读取器将 XML 引用的反序列化为由该类处理的主要标志符子句。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The key identifier clause that was deserialized from the XML.</source>
          <target state="translated">从 XML 反序列化的密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>Override this method to provide the logic to deserialize a key identifier clause from XML.</source>
          <target state="translated">重写此方法以提供逻辑，以反序列化 XML 中的密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果你重写此方法，则还应重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>When overridden in a derived class, deserializes the specified XML to a token of the type processed by the derived class.</source>
          <target state="translated">当在派生类中重写时，由派生类反序列化类型处理的指定 XML。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>The string to be deserialized.</source>
          <target state="translated">要进行反序列化的字符串。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</source>
          <target state="translated">当在派生类中重写时，由派生类反序列化类型处理的指定字符串。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>The security token that was deserialized from the specified string.</source>
          <target state="translated">从指定字符串反序列化的安全标记。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">调用此方法不受信任的数据会带来安全风险。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">调用此方法仅受信任的数据。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>数据验证<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Override this method to provide functionality that can deserialize a security token from a string.</source>
          <target state="translated">重写此方法以提供可以反序列化从字符串的安全令牌的功能。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>If you override, this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果你重写，此方法，则还应重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element of the token.</source>
          <target state="translated">在标记的开始元素上指定的 XML 读取器。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</source>
          <target state="translated">当在派生类中重写时，使用指定 XML 读取器将 XML 引用的反序列化为由该类处理的类型的标记。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The security token that was deserialized from the XML.</source>
          <target state="translated">从 XML 反序列化的安全令牌。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">调用此方法不受信任的数据会带来安全风险。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">调用此方法仅受信任的数据。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>数据验证<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
          <target state="translated">重写此方法以提供逻辑，以反序列化 XML 中的安全令牌。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果你重写此方法，则还应重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
          <target state="translated">通常情况下，在派生类中，如果该方法无法反序列化的令牌引用的 XML，它将引发<ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> method to read a custom token from the specified XML reader.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph>方法从指定的 XML 读取器读取自定义令牌。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>An XML reader positioned at the start element of the token.</source>
          <target state="translated">在标记的开始元素上指定的 XML 读取器。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>A token resolver that contains out-of-band and cached tokens.</source>
          <target state="translated">包含带外和已缓存的标志的标志的解析器。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</source>
          <target state="translated">当在派生类中重写时，由指定的 XML 读取器使用指定的标记解析器处理派生类类型的标记引用的 XML 进行反序列化。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>The security token that was deserialized from the XML.</source>
          <target state="translated">从 XML 反序列化的安全令牌。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">调用此方法不受信任的数据会带来安全风险。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">调用此方法仅受信任的数据。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>数据验证<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>The default implementation ignores the <ph id="ph1">`tokenResolver`</ph> parameter and delegates the call to the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">默认实现会忽略<ph id="ph1">`tokenResolver`</ph>参数并将调用委托给<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
          <target state="translated">重写此方法以提供逻辑，以反序列化 XML 中的安全令牌。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果你重写此方法，则还应重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
          <target state="translated">通常情况下，在派生类中，如果该方法无法反序列化的令牌引用的 XML，它将引发<ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>When overridden in a derived class, gets the type of the security token that is processed by this instance.</source>
          <target state="translated">当在派生类中重写时，可获取由此实例处理的该安全标记的类型。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The type of the security token that is processed by this instance.</source>
          <target state="translated">这个实例处理的安全标记的类型。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>You must override this property in derived classes and return the <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the security token (<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) that is processed by the derived class.</source>
          <target state="translated">你必须重写此属性在派生类中的，并返回<ph id="ph1">&lt;xref:System.Type&gt;</ph>的安全令牌 (<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) 派生的类进行处理的。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property to return the <ph id="ph2">&lt;xref:System.Type&gt;</ph> of the security tokens that are processed by a custom handler.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph>属性以返回<ph id="ph2">&lt;xref:System.Type&gt;</ph>处理的自定义处理程序的安全令牌。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>The security token that is being validated.</source>
          <target state="translated">要验证的安全令牌。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>The message to write to the trace.</source>
          <target state="translated">要写入跟踪的消息。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>Traces the failure event during the validation of security tokens when tracing is enabled.</source>
          <target state="translated">当启用跟踪时，在安全标记的验证过程跟踪失败事件。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method when validation of the token fails.</source>
          <target state="translated">此方法应从调用<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>令牌验证失败时的方法。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token that was validated.</source>
          <target state="translated">要验证的标记。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>Traces the successful validation of security tokens event when tracing is enabled.</source>
          <target state="translated">当启用跟踪时，跟踪安全标记事件的成功验证。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method after the token has been successfully validated.</source>
          <target state="translated">此方法应从调用<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>方法后成功验证令牌。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to validate.</source>
          <target state="translated">要验证的标记。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, validates the specified security token.</source>
          <target state="translated">在派生类中重写时，验证指定安全标记。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">该标记必须是派生类处理的类型。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The identities contained in the token.</source>
          <target state="translated">标记中包含的值标识。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method is called by the infrastructure to validate and extract the claims from the deserialized security token.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>方法由基础结构以验证并从反序列化的安全令牌中提取声明。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>These claims are returned in the collection of <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objects returned by the method.</source>
          <target state="translated">集合中返回这些声明<ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>由方法返回的对象。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In the typical case, this collection will contain a single identity.</source>
          <target state="translated">在典型的情况下，此集合将包含单个标识。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType&gt;</ph> property of the token handler configuration object specified on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
          <target state="translated">在派生类中，验证通常包括验证针对 Uri 中指定的用户令牌中指定的目标的受众<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType&gt;</ph>上指定的令牌处理程序配置对象的属性<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>These URIs are typically set in the configuration file under the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>audienceUris<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept> element.</source>
          <target state="translated">这些 Uri 通常在配置文件设置下<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>audienceUris<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept>元素。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If the audience cannot be validated, an <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph> exception should be thrown.</source>
          <target state="translated">如果无法验证受众，<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph>应引发异常。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When processing the token, the issuer is typically validated by passing the issuer token to one of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> methods on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph> object that is configured for the handler through the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
          <target state="translated">当处理令牌时，通常通过将颁发者令牌传递给之一验证颁发者<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph>方法<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph>配置为通过处理程序的对象<ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The issuer name registry is typically configured through the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>issuerNameRegistry<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept> element in the configuration file.</source>
          <target state="translated">颁发者名称注册表通常通过配置<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>issuerNameRegistry<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept>配置文件中的元素。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns the name of the issuer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph>返回颁发者的名称。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This name should be used to set the <ph id="ph1">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType&gt;</ph> property in claims contained in the token.</source>
          <target state="translated">此名称应该用于设置<ph id="ph1">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType&gt;</ph>令牌中包含的声明中的属性。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If the issuer name registry does not contain an entry for the issuer token, <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果颁发者名称注册表不包含颁发者令牌中，一个条目<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph>返回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In this case a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph> is typically thrown in derived classes, but this behavior is up to the designer of the class.</source>
          <target state="translated">在这种情况下<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph>通常引发在派生类中，但此行为是最多的类设计器。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows an override of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method for a security token handler that processes simple web tokens (SWT).</source>
          <target state="translated">下面的代码演示如何重写的<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>处理简单 web 令牌 (SWT) 的安全令牌处理程序的方法。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`CustomToken`</ph>示例。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`CreateClaims`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the previous example.</source>
          <target state="translated">下面的代码演示<ph id="ph1">`CreateClaims`</ph>重写从调用的方法<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>上一示例中的方法。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method returns a <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object that is created from the claims in the token.</source>
          <target state="translated">此方法返回<ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>从令牌中的声明创建的对象。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`CustomToken`</ph>示例。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`ValidateSignature`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the simple web token handler.</source>
          <target state="translated">下面的代码演示<ph id="ph1">`ValidateSignature`</ph>重写从调用的方法<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>简单 web 令牌处理程序中的方法。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method validates the signature on the token by using the configured <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerTokenResolver&gt;</ph>.</source>
          <target state="translated">此方法通过使用配置来验证令牌上的签名<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerTokenResolver&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`CustomToken`</ph>示例。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`ValidateAudience`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the simple web token handler.</source>
          <target state="translated">下面的代码演示<ph id="ph1">`ValidateAudience`</ph>重写从调用的方法<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph>简单 web 令牌处理程序中的方法。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method validates the audience contained in the token against the audience URIs that were specified in configuration.</source>
          <target state="translated">此方法验证对已在配置中指定的 Uri 的受众的令牌中包含的受众。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`CustomToken`</ph>示例。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The XML writer.</source>
          <target state="translated">XML 编写器。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause to serialize.</source>
          <target state="translated">要序列化的密钥标识符子句 。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>When overridden in a derived class, serializes the specified key identifier clause to XML.</source>
          <target state="translated">在派生类中重写时，将密钥标识符子句序列化到 XML。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause must be of the type supported by the derived class.</source>
          <target state="translated">密钥标识符子句必须是派生类支持的类型。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>Override this method to provide the logic to serialize a key identifier clause to XML.</source>
          <target state="translated">重写此方法以提供逻辑，以序列化到 XML 的密钥标识符子句。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method.</source>
          <target state="translated">如果你重写此方法，则还应重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>When overridden in a derived class, serializes the specified security token.</source>
          <target state="translated">在派生类中重写时，将指定安全标记列化。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">该标记必须是派生类处理的类型。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to serialize.</source>
          <target state="translated">要序列化的标记。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, serializes the specified security token to a string.</source>
          <target state="translated">在派生类中重写时，将指定安全标记列化到字符串。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">该标记必须是派生类处理的类型。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The serialized token.</source>
          <target state="translated">要序列化的标记。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
          <target state="translated">重写此方法以提供逻辑，以序列化到 XML 的安全令牌。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
          <target state="translated">如果你重写此方法，则还应重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The XML writer.</source>
          <target state="translated">XML 编写器。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to serialize.</source>
          <target state="translated">要序列化的标记。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, serializes the specified security token to XML.</source>
          <target state="translated">在派生类中重写时，将指定安全标记列化到 XML。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">该标记必须是派生类处理的类型。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">默认情况下此方法将引发<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
          <target state="translated">重写此方法以提供逻辑，以序列化到 XML 的安全令牌。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
          <target state="translated">如果你重写此方法，则还应重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> method to serialize a custom token.</source>
          <target state="translated">下面的代码演示如何重写<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph>方法要序列化的自定义令牌。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">代码摘自<ph id="ph1">`Custom Token`</ph>示例。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">此示例提供使处理的简单 Web 令牌 (SWT) 的自定义类。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">有关此示例和其他可用于 WIF 以及在何处下载这些示例的信息，请参阅<bpt id="p1">[</bpt>WIF 代码示例索引<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>