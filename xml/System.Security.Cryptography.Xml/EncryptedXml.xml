<Type Name="EncryptedXml" FullName="System.Security.Cryptography.Xml.EncryptedXml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32e00d51c4658034a1c210b4b0cd1633ecc1557e" />
    <Meta Name="ms.sourcegitcommit" Value="3507e865a3613c00760f25ad1045aaa11bae4dd8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/23/2018" />
    <Meta Name="ms.locfileid" Value="31780739" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EncryptedXml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EncryptedXml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Xml.EncryptedXml" />
  <TypeSignature Language="VB.NET" Value="Public Class EncryptedXml" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncryptedXml" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示用于实现 XML 加密的进程模型。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml>类是.NET Framework 中的 XML 加密所用的主类。 XML 加密是一种基于标准的、 可互操作的方式来加密所有或部分 XML 文档或任何任意数据。 .NET Framework XML 加密类实现万维网联合会 (W3C) 规范，对 XML 加密位于http://www.w3.org/TR/xmlenc-core/。  
  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml>类无论何时需要以一种标准方式共享应用程序或组织之间的加密的 XML 数据。 可以由任何实现 XML 加密的 W3C 规范解密使用此类加密的任何数据。  
  
 XML 加密将任何纯文本 XML 元素或文档替换`<EncryptedData>`元素，它包含已加密 （或对密码文本） 的纯文本 XML 的表示形式或任意数据。 `<EncryptedData>`元素可以根据需要包含有关在何处可以找到将解密密码文本的密钥信息和哪种加密算法用于加密纯文本。  
  
 `<EncryptedKey>`元素是类似于`<EncryptedData>`样式和使用情况，但还允许你将对的值进行解密的密钥进行加密的元素`<EncryptedData>`元素。 请注意，`<EncryptedKey>`元素和`<EncryptedData>`元素将永远不会包含未加密的密钥。  
  
 使用以下方法之一来交换密钥信息：  
  
-   不包括任何密钥信息。 如果选择此选项，则双方必须在交换加密的数据之前上算法和密钥达成一致。  
  
-   包含密钥的位置的统一资源标识符 (URI) 特性中`<RetrievalMethod>`元素。 双方必须同意在提前项的位置上，此位置必须保密。  
  
-   包括映射到中的键的字符串名称`<KeyName>`元素。 双方必须达成一致的密钥名称映射之前在交换加密的数据，并且必须将此映射保密。  
  
-   包括中的加密的密钥`<EncryptedKey>`元素。 双方上在交换加密的数据之前对加密的密钥进行解密的密钥必须一致。 你可以选择性地包含的名称或位置将解密中的密钥的密钥`<EncryptedKey>`元素。  
  
   
  
## Examples  
 下面的代码示例演示如何创建使用一个简单的实用程序类<xref:System.Security.Cryptography.TripleDES>算法加密 XML 文档。  
  
 [!code-cpp[Cryptography.XML.MainXMLEncDecryptDataOOP#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.MainXMLEncDecryptDataOOP/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.MainXMLEncDecryptDataOOP#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.MainXMLEncDecryptDataOOP/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.MainXMLEncDecryptDataOOP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.MainXMLEncDecryptDataOOP/VB/sample.vb#1)]  
  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例在解密方法用于查找适当的解密密钥加密 XML 文档中嵌入的密钥名称。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CPP/Cryptography.XML.XMLEncMapKey.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用 X.509 证书 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，，然后使用 X.509 证书嵌入到 XML 文档中的会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CPP/Cryptography.XML.XMLEncMapKeyX509.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例在解密方法用于查找适当的解密密钥加密 XML 文档中嵌入的密钥名称。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CPP/Cryptography.XML.XMLEncMapKey.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用 X.509 证书 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，，然后使用 X.509 证书嵌入到 XML 文档中的会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CPP/Cryptography.XML.XMLEncMapKeyX509.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncryptedXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncryptedXml();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是为.NET Framework 中的 XML 加密的主类的默认构造函数。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例在解密方法用于查找适当的解密密钥加密 XML 文档中嵌入的密钥名称。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CPP/Cryptography.XML.XMLEncMapKey.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用 X.509 证书 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，，然后使用 X.509 证书嵌入到 XML 文档中的会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CPP/Cryptography.XML.XMLEncMapKeyX509.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncryptedXml (System.Xml.XmlDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlDocument document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.#ctor(System.Xml.XmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (document As XmlDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncryptedXml(System::Xml::XmlDocument ^ document);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="document">一个 <see cref="T:System.Xml.XmlDocument" /> 对象，用于初始化 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 对象。</param>
        <summary>使用指定的 XML 文档初始化 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建<xref:System.Security.Cryptography.Xml.EncryptedXml>对象时您想要指定要加密的 XML 文档。  `document`参数包含的 XML 元素的更高版本窗体中加密的 XML。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例在解密方法用于查找适当的解密密钥加密 XML 文档中嵌入的密钥名称。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CPP/Cryptography.XML.XMLEncMapKey.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncryptedXml (System.Xml.XmlDocument document, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlDocument document, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.#ctor(System.Xml.XmlDocument,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncryptedXml(System::Xml::XmlDocument ^ document, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="document">一个 <see cref="T:System.Xml.XmlDocument" /> 对象，用于初始化 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 对象。</param>
        <param name="evidence">与 <see cref="T:System.Security.Policy.Evidence" /> 对象关联的 <see cref="T:System.Xml.XmlDocument" /> 对象。</param>
        <summary>使用指定的 XML 文档和证据初始化 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建<xref:System.Security.Cryptography.Xml.EncryptedXml>对象时您想要指定要加密，并提供安全证据的 XML 文档。 `document`参数包含的 XML 元素的更高版本窗体中加密的 XML。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyNameMapping">
      <MemberSignature Language="C#" Value="public void AddKeyNameMapping (string keyName, object keyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddKeyNameMapping(string keyName, object keyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.AddKeyNameMapping(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddKeyNameMapping (keyName As String, keyObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddKeyNameMapping(System::String ^ keyName, System::Object ^ keyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="keyObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keyName">要映射到 <c>keyObject</c> 的名称。</param>
        <param name="keyObject">要映射到 <c>keyName</c> 的对称密钥。</param>
        <summary>定义密钥名称和对称密钥或非对称密钥之间的映射。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.AddKeyNameMapping%2A>方法允许您将对称密钥或非对称密钥映射到的字符串名称。 此方法将添加的值`keyName`和`keyObject`参数到有效的密钥的表名称映射。  
  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml.ClearKeyNameMappings%2A>方法来清除密钥名称映射表。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例在解密方法用于查找适当的解密密钥加密 XML 文档中嵌入的密钥名称。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/CPP/Cryptography.XML.XMLEncMinimalDecrypt.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyName" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="keyObject" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="keyObject" /> 参数的值不是 RSA 算法，也不是对称密钥。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearKeyNameMappings">
      <MemberSignature Language="C#" Value="public void ClearKeyNameMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearKeyNameMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.ClearKeyNameMappings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearKeyNameMappings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearKeyNameMappings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置所有密钥名称映射。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法清除你使用设置的所有密钥名称映射<xref:System.Security.Cryptography.Xml.EncryptedXml.AddKeyNameMapping%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecryptData">
      <MemberSignature Language="C#" Value="public byte[] DecryptData (System.Security.Cryptography.Xml.EncryptedData encryptedData, System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DecryptData(class System.Security.Cryptography.Xml.EncryptedData encryptedData, class System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DecryptData(System::Security::Cryptography::Xml::EncryptedData ^ encryptedData, System::Security::Cryptography::SymmetricAlgorithm ^ symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public byte[] DecryptData (System.Security.Cryptography.Xml.EncryptedData encryptedData, System.Security.Cryptography.SymmetricAlgorithm symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DecryptData(class System.Security.Cryptography.Xml.EncryptedData encryptedData, class System.Security.Cryptography.SymmetricAlgorithm symAlg) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptData(System.Security.Cryptography.Xml.EncryptedData,System.Security.Cryptography.SymmetricAlgorithm)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DecryptData(System::Security::Cryptography::Xml::EncryptedData ^ encryptedData, System::Security::Cryptography::SymmetricAlgorithm ^ symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Security.Cryptography.Xml.EncryptedData" Index="0" />
        <Parameter Name="symmetricAlgorithm" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="symAlg" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="encryptedData">要解密的数据。</param>
        <param name="symmetricAlgorithm">To be added.</param>
        <param name="symAlg">To be added.</param>
        <summary>使用指定的对称算法解密 <see langword="&lt;EncryptedData&gt;" /> 元素。</summary>
        <returns>一个字节数组，包含已解密的原始明文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptData%2A>方法以解密<xref:System.Security.Cryptography.Xml.EncryptedData>使用对称密钥的元素。  
  
 请注意，<xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptData%2A>方法仅解密顶级 <`EncryptedData`> 标记。  在情况下其中一个或多个 <`EncryptedData`> 标记已加密，并且包含在更高级别的 <`EncryptedData`> 标记中，你可以调用<xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument%2A>为每个单独的方法。  请参阅<xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument%2A>有关代码示例的方法。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encryptedData" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="symmetricAlgorithm" /> 参数的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DecryptDocument">
      <MemberSignature Language="C#" Value="public void DecryptDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DecryptDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument" />
      <MemberSignature Language="VB.NET" Value="Public Sub DecryptDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DecryptDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>解密 XML 文档中所有在初始化 <see langword="&lt;EncryptedData&gt;" /> 类期间指定的 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument%2A>方法来解密所有`<EncryptedData>`在初始化期间加载 XML 文档的元素。 调用此方法之后, 所有`<EncryptedData>`文档中的元素替换为纯文本版本。  
  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument%2A>方法仅解密顶级`<EncryptedData>`元素。  如果你需要解密超级加密的文档 （不止一次加密的文档），则必须调用<xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument%2A>方法重复直至将所有`<EncryptedData>`已解密元素。  
  
> [!NOTE]
>  <xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument%2A>方法对仅有效的 XML 数据进行解密。 若要解密的任意数据，使用<xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptData%2A>方法。  
  
 若要使用 XML 加密 X.509 证书，你必须具有 Microsoft 增强加密提供程序安装和 X.509 证书必须使用增强的提供程序。 如果你没有 Microsoft 增强加密提供程序安装或 X.509 证书不使用增强的提供程序， <xref:System.Security.Cryptography.CryptographicException> "未知错误"时，将引发解密 XML 文档。  
  
   
  
## Examples  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用 X.509 证书 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，，然后使用 X.509 证书嵌入到 XML 文档中的会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CPP/Cryptography.XML.XMLEncMapKeyX509.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/VB/sample.vb#1)]  
  
 下面的代码示例演示如何解密高级别 <`EncryptedData`> 包含另一个加密的标记 <`EncryptedData`> 标记。  
  
 [!code-csharp[Cryptography.XML.EncryptedDocument.DecryptDocument-SuperEncryption#1](~/samples/snippets/csharp/VS_Snippets_Misc/Cryptography.XML.EncryptedDocument.DecryptDocument-SuperEncryption/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.EncryptedDocument.DecryptDocument-SuperEncryption#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/Cryptography.XML.EncryptedDocument.DecryptDocument-SuperEncryption/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">未找到用于解密文档的加密密钥。</exception>
      </Docs>
    </Member>
    <Member MemberName="DecryptEncryptedKey">
      <MemberSignature Language="C#" Value="public virtual byte[] DecryptEncryptedKey (System.Security.Cryptography.Xml.EncryptedKey encryptedKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DecryptEncryptedKey(class System.Security.Cryptography.Xml.EncryptedKey encryptedKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(System.Security.Cryptography.Xml.EncryptedKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DecryptEncryptedKey(System::Security::Cryptography::Xml::EncryptedKey ^ encryptedKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedKey" Type="System.Security.Cryptography.Xml.EncryptedKey" />
      </Parameters>
      <Docs>
        <param name="encryptedKey">包含要检索的密钥的 <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> 对象。</param>
        <summary>确定由 <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> 元素表示的密钥。</summary>
        <returns>一个包含密钥的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey%2A>方法对中包含加密的密钥进行解密`<EncryptedKey>`XML 文档的元素。  
  
 此递归方法查找所表示的密钥<xref:System.Security.Cryptography.Xml.EncryptedKey>对象。 请注意，<xref:System.Security.Cryptography.Xml.EncryptedKey>对象可以包含另一个<xref:System.Security.Cryptography.Xml.EncryptedKey>对象，它指定其<xref:System.Security.Cryptography.Xml.KeyInfo>值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encryptedKey" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="encryptedKey" /> 参数的值不是三重 DES Key Wrap 算法或高级加密标准 (AES) Key Wrap 算法（也称 Rijndael）。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DecryptKey">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>解密 <see langword="&lt;EncryptedKey&gt;" /> 元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey%2A>方法以解密`<EncryptedKey>`元素和检索用于解密该元素的键。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DecryptKey">
      <MemberSignature Language="C#" Value="public static byte[] DecryptKey (byte[] keyData, System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] DecryptKey(unsigned int8[] keyData, class System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ DecryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::SymmetricAlgorithm ^ symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public static byte[] DecryptKey (byte[] keyData, System.Security.Cryptography.SymmetricAlgorithm symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] DecryptKey(unsigned int8[] keyData, class System.Security.Cryptography.SymmetricAlgorithm symAlg) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecryptKey (keyData As Byte(), symAlg As SymmetricAlgorithm) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ DecryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::SymmetricAlgorithm ^ symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Byte[]" Index="0" />
        <Parameter Name="symmetricAlgorithm" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="symAlg" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyData">一个表示加密 <see langword="&lt;EncryptedKey&gt;" /> 元素的字节数组。</param>
        <param name="symmetricAlgorithm">To be added.</param>
        <param name="symAlg">To be added.</param>
        <summary>使用对称算法解密 <see langword="&lt;EncryptedKey&gt;" /> 元素。</summary>
        <returns>包含纯文本密钥的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey%2A>方法对中包含加密的密钥进行解密`<EncryptedKey>`XML 文档的元素。 此方法接受的值`symmetricAlgorithm`表示三重 DES 算法或 AES 密钥换行算法 （也称为 Rijndael） 的参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyData" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="symmetricAlgorithm" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="symmetricAlgorithm" /> 元素的值不是三重 DES Key Wrap 算法或高级加密标准 (AES) Key Wrap 算法（也称 Rijndael）。</exception>
      </Docs>
    </Member>
    <Member MemberName="DecryptKey">
      <MemberSignature Language="C#" Value="public static byte[] DecryptKey (byte[] keyData, System.Security.Cryptography.RSA rsa, bool useOAEP);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] DecryptKey(unsigned int8[] keyData, class System.Security.Cryptography.RSA rsa, bool useOAEP) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ DecryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::RSA ^ rsa, bool useOAEP);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public static byte[] DecryptKey (byte[] keyData, System.Security.Cryptography.RSA rsa, bool fOAEP);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] DecryptKey(unsigned int8[] keyData, class System.Security.Cryptography.RSA rsa, bool fOAEP) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ DecryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::RSA ^ rsa, bool fOAEP);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Byte[]" Index="0" />
        <Parameter Name="rsa" Type="System.Security.Cryptography.RSA" Index="1" />
        <Parameter Name="useOAEP" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="fOAEP" Type="System.Boolean" Index="2" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyData">一个表示加密 <see langword="&lt;EncryptedKey&gt;" /> 元素的字节数组。</param>
        <param name="rsa">用于解密 <c>keyData</c> 的非对称密钥。</param>
        <param name="useOAEP">To be added.</param>
        <param name="fOAEP">To be added.</param>
        <summary>使用非对称算法解密 <see langword="&lt;EncryptedKey&gt;" /> 元素。</summary>
        <returns>包含纯文本密钥的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey%2A>方法对中包含加密的密钥进行解密`<EncryptedKey>`XML 文档的元素。 此方法接受的值`rsa`表示 RSA PKCS #1 v1.5 算法或 RSA PKCS #1 类型 2 算法 （也称为 OAEP 填充） 的参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyData" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="rsa" /> 参数的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DocumentEvidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence DocumentEvidence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence DocumentEvidence" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedXml.DocumentEvidence" />
      <MemberSignature Language="VB.NET" Value="Public Property DocumentEvidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::Evidence ^ DocumentEvidence { System::Security::Policy::Evidence ^ get(); void set(System::Security::Policy::Evidence ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Xml.XmlDocument" /> 对象的证据，<see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 对象从该对象构造。</summary>
        <value>一个 <see cref="T:System.Security.Policy.Evidence" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 XML 文档用于创建<xref:System.Security.Cryptography.Xml.EncryptedXml>对象中的任何安全证据，应添加到的证据<xref:System.Security.Cryptography.Xml.EncryptedXml.DocumentEvidence%2A>属性。  如果你未设置此属性，任何关联<xref:System.Security.Cryptography.Xml.CipherReference>对象将不被取消引用因为它们将不授予所需的权限集。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedXml.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 XML 加密所用的编码。</summary>
        <value>一个 <see cref="T:System.Text.Encoding" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utf-8 编码是将的默认编码为 XML 加密。 你可以使用此属性指定其他类型的编码从<xref:System.Text.Encoding>类，例如 utf-16 或 ASCII。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Encrypt">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用指定的证书或密钥映射表中的密钥对元素的外部 XML 进行加密。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/CPP/Cryptography.XML.XMLEncMinimalDecrypt.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用 X.509 证书 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，，然后使用 X.509 证书嵌入到 XML 文档中的会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CPP/Cryptography.XML.XMLEncMapKeyX509.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.EncryptedData Encrypt (System.Xml.XmlElement inputElement, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Xml.EncryptedData Encrypt(class System.Xml.XmlElement inputElement, class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.Encrypt(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encrypt (inputElement As XmlElement, certificate As X509Certificate2) As EncryptedData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Xml::EncryptedData ^ Encrypt(System::Xml::XmlElement ^ inputElement, System::Security::Cryptography::X509Certificates::X509Certificate2 ^ certificate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.EncryptedData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputElement" Type="System.Xml.XmlElement" />
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Parameters>
      <Docs>
        <param name="inputElement">要加密的 XML 元素。</param>
        <param name="certificate">要用于加密的 X.509 证书。</param>
        <summary>使用指定的 X.509 证书对元素的外部 XML 进行加密。</summary>
        <returns>一个表示已加密 XML 数据的 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 元素。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.Encrypt%2A>方法是一种简便的方式使用证书对元素的外部 XML 进行加密。 此方法生成 256 位高级加密标准 (AES) 会话密钥加密的 XML 元素然后进行加密和签名 AES 密钥使用<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>对象。 <xref:System.Security.Cryptography.Xml.EncryptedXml.Encrypt%2A>方法然后返回得到的 XML 作为<xref:System.Security.Cryptography.Xml.EncryptedData>元素。  
  
 如果你需要更好地控制加密，因此你可以加密将信息放入`<CipherReference>`元素或指定是否应将整个 XML 元素或只是其内容加密，使用<xref:System.Security.Cryptography.Xml.EncryptedXml.EncryptData%2A>方法重载。  
  
 若要使用 XML 加密 X.509 证书，你必须具有 Microsoft 增强加密提供程序安装和 X.509 证书必须使用增强的提供程序。 如果你没有 Microsoft 增强加密提供程序安装或 X.509 证书不使用增强的提供程序， <xref:System.Security.Cryptography.CryptographicException> "未知错误"时，将引发解密 XML 文档。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 X.509 证书 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，，然后使用 X.509 证书嵌入到 XML 文档中的会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CPP/Cryptography.XML.XMLEncMapKeyX509.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKeyX509#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKeyX509/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputElement" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="certificate" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="certificate" /> 参数的值不表示 RSA 密钥算法。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.EncryptedData Encrypt (System.Xml.XmlElement inputElement, string keyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Xml.EncryptedData Encrypt(class System.Xml.XmlElement inputElement, string keyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.Encrypt(System.Xml.XmlElement,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encrypt (inputElement As XmlElement, keyName As String) As EncryptedData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Xml::EncryptedData ^ Encrypt(System::Xml::XmlElement ^ inputElement, System::String ^ keyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.EncryptedData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputElement" Type="System.Xml.XmlElement" />
        <Parameter Name="keyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputElement">要加密的 XML 元素。</param>
        <param name="keyName">可在密钥映射表中找到的密钥名称。</param>
        <summary>使用在密钥映射表中指定的密钥对元素的外部 XML 进行加密。</summary>
        <returns>一个表示已加密 XML 数据的 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是元素的一种简便的方式使用密钥名称的外部 XML 进行加密。 如果你需要更好地控制加密，因此你可以加密将信息放入`<CipherReference>`元素或指定是否应将整个 XML 元素或只是其内容加密，使用<xref:System.Security.Cryptography.Xml.EncryptedXml.EncryptData%2A>方法重载。  
  
 有关所有受支持的算法的列表，请参阅与关联的常量字段的列表<xref:System.Security.Cryptography.Xml.EncryptedXml>类。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/CPP/Cryptography.XML.XMLEncMinimalDecrypt.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecrypt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecrypt/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputElement" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="keyName" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="keyName" /> 参数的值与注册的密钥名称对不匹配。  
  
 或  
  
 不支持 <paramref name="keyName" /> 参数描述的加密密钥。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EncryptData">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用对称算法对 XML 数据加密。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例在解密方法用于查找适当的解密密钥加密 XML 文档中嵌入的密钥名称。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CPP/Cryptography.XML.XMLEncMapKey.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncryptData">
      <MemberSignature Language="C#" Value="public byte[] EncryptData (byte[] plaintext, System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EncryptData(unsigned int8[] plaintext, class System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EncryptData(cli::array &lt;System::Byte&gt; ^ plaintext, System::Security::Cryptography::SymmetricAlgorithm ^ symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public byte[] EncryptData (byte[] plainText, System.Security.Cryptography.SymmetricAlgorithm symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EncryptData(unsigned int8[] plainText, class System.Security.Cryptography.SymmetricAlgorithm symAlg) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptData(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function EncryptData (plainText As Byte(), symAlg As SymmetricAlgorithm) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EncryptData(cli::array &lt;System::Byte&gt; ^ plainText, System::Security::Cryptography::SymmetricAlgorithm ^ symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plaintext" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="plainText" Type="System.Byte[]" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="symmetricAlgorithm" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="symAlg" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="plainText">To be added.</param>
        <param name="symmetricAlgorithm">To be added.</param>
        <param name="symAlg">To be added.</param>
        <summary>使用指定的对称算法对指定的字节数组中的数据进行加密。</summary>
        <returns>加密数据的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的字节数组可以放入`<CipherValue>`元素。 此方法假定数据中指定`plaintext`参数是一个包含 XML 数据的字节数组。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例在解密方法用于查找适当的解密密钥加密 XML 文档中嵌入的密钥名称。  
  
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CPP/Cryptography.XML.XMLEncMapKey.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMapKey/VB/sample.vb#1)]  
  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="plaintext" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="symmetricAlgorithm" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">未能使用指定的参数加密此数据。</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptData">
      <MemberSignature Language="C#" Value="public byte[] EncryptData (System.Xml.XmlElement inputElement, System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm, bool content);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EncryptData(class System.Xml.XmlElement inputElement, class System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm, bool content) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EncryptData(System::Xml::XmlElement ^ inputElement, System::Security::Cryptography::SymmetricAlgorithm ^ symmetricAlgorithm, bool content);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public byte[] EncryptData (System.Xml.XmlElement inputElement, System.Security.Cryptography.SymmetricAlgorithm symAlg, bool content);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EncryptData(class System.Xml.XmlElement inputElement, class System.Security.Cryptography.SymmetricAlgorithm symAlg, bool content) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptData(System.Xml.XmlElement,System.Security.Cryptography.SymmetricAlgorithm,System.Boolean)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function EncryptData (inputElement As XmlElement, symAlg As SymmetricAlgorithm, content As Boolean) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EncryptData(System::Xml::XmlElement ^ inputElement, System::Security::Cryptography::SymmetricAlgorithm ^ symAlg, bool content);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputElement" Type="System.Xml.XmlElement" Index="0" />
        <Parameter Name="symmetricAlgorithm" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="symAlg" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="content" Type="System.Boolean" Index="2" />
      </Parameters>
      <Docs>
        <param name="inputElement">要加密的元素或其内容。</param>
        <param name="symmetricAlgorithm">To be added.</param>
        <param name="symAlg">To be added.</param>
        <param name="content">
          如果仅加密元素的内容，则为 <see langword="true" />；如果要加密整个元素，则为 <see langword="false" />。</param>
        <summary>使用指定的对称算法加密指定的元素或其内容。</summary>
        <returns>一个包含加密数据的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的字节数组数据是值`<CipherValue>`元素。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputElement" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="symmetricAlgorithm" /> 参数的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EncryptKey">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对接收方用来解密 <see langword="&lt;EncryptedData&gt;" /> 元素的密钥进行加密。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey%2A>方法接收方用来解密的密钥进行加密`<EncryptedData>`元素。 此方法会将中的加密的密钥`<EncryptedKey>`元素。  
  
   
  
## Examples  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncryptKey">
      <MemberSignature Language="C#" Value="public static byte[] EncryptKey (byte[] keyData, System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] EncryptKey(unsigned int8[] keyData, class System.Security.Cryptography.SymmetricAlgorithm symmetricAlgorithm) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ EncryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::SymmetricAlgorithm ^ symmetricAlgorithm);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public static byte[] EncryptKey (byte[] keyData, System.Security.Cryptography.SymmetricAlgorithm symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] EncryptKey(unsigned int8[] keyData, class System.Security.Cryptography.SymmetricAlgorithm symAlg) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncryptKey (keyData As Byte(), symAlg As SymmetricAlgorithm) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ EncryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::SymmetricAlgorithm ^ symAlg);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Byte[]" Index="0" />
        <Parameter Name="symmetricAlgorithm" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="symAlg" Type="System.Security.Cryptography.SymmetricAlgorithm" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyData">要加密的密钥。</param>
        <param name="symmetricAlgorithm">To be added.</param>
        <param name="symAlg">To be added.</param>
        <summary>使用对称算法加密密钥，收件人使用此算法解密 <see langword="&lt;EncryptedData&gt;" /> 元素。</summary>
        <returns>一个字节数组，表示 <paramref name="keyData" /> 参数的加密值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey%2A>方法接收方用来解密的密钥进行加密`<EncryptedData>`元素。 此方法接受的值`symmetricAlgorithm`表示三重 DES 算法或 AES 密钥换行算法 （也称为 Rijndael） 的参数。  
  
 请注意，此方法将不会自动施加加密的密钥放`<EncryptedKey>`元素。  你必须手动创建`<EncryptedKey>`文档中的元素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyData" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="symmetricAlgorithm" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="symmetricAlgorithm" /> 参数的值不是三重 DES Key Wrap 算法或高级加密标准 (AES) Key Wrap 算法（也称 Rijndael）。</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptKey">
      <MemberSignature Language="C#" Value="public static byte[] EncryptKey (byte[] keyData, System.Security.Cryptography.RSA rsa, bool useOAEP);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] EncryptKey(unsigned int8[] keyData, class System.Security.Cryptography.RSA rsa, bool useOAEP) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ EncryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::RSA ^ rsa, bool useOAEP);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public static byte[] EncryptKey (byte[] keyData, System.Security.Cryptography.RSA rsa, bool fOAEP);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] EncryptKey(unsigned int8[] keyData, class System.Security.Cryptography.RSA rsa, bool fOAEP) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ EncryptKey(cli::array &lt;System::Byte&gt; ^ keyData, System::Security::Cryptography::RSA ^ rsa, bool fOAEP);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Byte[]" Index="0" />
        <Parameter Name="rsa" Type="System.Security.Cryptography.RSA" Index="1" />
        <Parameter Name="useOAEP" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="fOAEP" Type="System.Boolean" Index="2" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyData">要加密的密钥。</param>
        <param name="rsa">用于加密 <c>keyData</c> 的非对称密钥。</param>
        <param name="useOAEP">To be added.</param>
        <param name="fOAEP">To be added.</param>
        <summary>对接收方用来解密 <see langword="&lt;EncryptedData&gt;" /> 元素的密钥进行加密。</summary>
        <returns>一个字节数组，表示 <paramref name="keyData" /> 参数的加密值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey%2A>方法接收方用来解密的密钥进行加密`<EncryptedData>`元素。 此方法接受的值`rsa`表示 RSA PKCS #1 v1.5 算法或 RSA PKCS #1 类型 2 算法 （也称为 OAEP）。  
  
 请注意，此方法将不会自动施加加密的密钥放`<EncryptedKey>`元素。  你必须手动创建`<EncryptedKey>`文档中的元素。  
  
   
  
## Examples  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keyData" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="rsa" /> 参数的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecryptionIV">
      <MemberSignature Language="C#" Value="public virtual byte[] GetDecryptionIV (System.Security.Cryptography.Xml.EncryptedData encryptedData, string symmetricAlgorithmUri);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetDecryptionIV(class System.Security.Cryptography.Xml.EncryptedData encryptedData, string symmetricAlgorithmUri) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetDecryptionIV(System::Security::Cryptography::Xml::EncryptedData ^ encryptedData, System::String ^ symmetricAlgorithmUri);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public virtual byte[] GetDecryptionIV (System.Security.Cryptography.Xml.EncryptedData encryptedData, string symAlgUri);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetDecryptionIV(class System.Security.Cryptography.Xml.EncryptedData encryptedData, string symAlgUri) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionIV(System.Security.Cryptography.Xml.EncryptedData,System.String)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetDecryptionIV(System::Security::Cryptography::Xml::EncryptedData ^ encryptedData, System::String ^ symAlgUri);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Security.Cryptography.Xml.EncryptedData" Index="0" />
        <Parameter Name="symmetricAlgorithmUri" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="symAlgUri" Type="System.String" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="encryptedData">包含要检索的初始化向量 (IV) 的 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 对象。</param>
        <param name="symmetricAlgorithmUri">To be added.</param>
        <param name="symAlgUri">To be added.</param>
        <summary>从 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 对象中检索解密初始化向量 (IV)。</summary>
        <returns>一个包含解密初始化向量 (IV) 的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 给定<xref:System.Security.Cryptography.Xml.EncryptedData>对象，此方法检索解密初始化向量 (IV)。 默认行为以第一个字节的形式检索 IV<xref:System.Security.Cryptography.Xml.CipherData.CipherValue%2A>字节数组。  
  
 有关支持的统一资源标识符 (URI) 值的列表`symmetricAlgorithmUri`参数，与关联的常量字段的列表，请参阅<xref:System.Security.Cryptography.Xml.EncryptedXml>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encryptedData" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="encryptedData" /> 参数的值有一个 NULL <see cref="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod" /> 属性。  
  
 或  
  
 <paramref name="symmetricAlgorithmUrisymAlgUri" /> 参数的值不是受支持的算法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecryptionKey">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.SymmetricAlgorithm GetDecryptionKey (System.Security.Cryptography.Xml.EncryptedData encryptedData, string symmetricAlgorithmUri);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.SymmetricAlgorithm GetDecryptionKey(class System.Security.Cryptography.Xml.EncryptedData encryptedData, string symmetricAlgorithmUri) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::SymmetricAlgorithm ^ GetDecryptionKey(System::Security::Cryptography::Xml::EncryptedData ^ encryptedData, System::String ^ symmetricAlgorithmUri);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.SymmetricAlgorithm GetDecryptionKey (System.Security.Cryptography.Xml.EncryptedData encryptedData, string symAlgUri);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.SymmetricAlgorithm GetDecryptionKey(class System.Security.Cryptography.Xml.EncryptedData encryptedData, string symAlgUri) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(System.Security.Cryptography.Xml.EncryptedData,System.String)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::SymmetricAlgorithm ^ GetDecryptionKey(System::Security::Cryptography::Xml::EncryptedData ^ encryptedData, System::String ^ symAlgUri);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Security.Cryptography.Xml.EncryptedData" Index="0" />
        <Parameter Name="symmetricAlgorithmUri" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="symAlgUri" Type="System.String" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="encryptedData">包含要检索的解密密钥的 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 对象。</param>
        <param name="symmetricAlgorithmUri">To be added.</param>
        <param name="symAlgUri">To be added.</param>
        <summary>从指定的 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 对象中检索解密密钥。</summary>
        <returns>一个与解密密钥关联的 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 给定<xref:System.Security.Cryptography.Xml.EncryptedData>对象，此方法查找可用来检索纯文本数据的解密密钥。 如果指定的密钥名称，则该方法中寻找对称算法或密钥名称与关联的密钥名称映射中定义的非对称算法。 否则为如果检索方法或<xref:System.Security.Cryptography.Xml.EncryptedKey>指定对象，该方法加载<xref:System.Security.Cryptography.Xml.EncryptedKey>对象并调用<xref:System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encryptedData" /> 参数的值为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">encryptedData 参数有一个 NULL <see cref="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod" /> 属性。  
  
 或  
  
 无法使用指定的参数检索加密密钥。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetIdElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement GetIdElement (System.Xml.XmlDocument document, string idValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement GetIdElement(class System.Xml.XmlDocument document, string idValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.GetIdElement(System.Xml.XmlDocument,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIdElement (document As XmlDocument, idValue As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlElement ^ GetIdElement(System::Xml::XmlDocument ^ document, System::String ^ idValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
        <Parameter Name="idValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="document">一个 <see cref="T:System.Xml.XmlDocument" /> 对象，包含具有 ID 值的元素。</param>
        <param name="idValue">一个表示 ID 值的字符串。</param>
        <summary>确定如何解析内部统一资源标识符 (URI) 引用。</summary>
        <returns>一个包含 ID 的 <see cref="T:System.Xml.XmlElement" /> 对象，此 ID 指示如何解析内部统一资源标识符 (URI)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.GetIdElement%2A>方法确定如何解析内部统一资源标识符 (Uri)。 它查找具有指定值的元素，或具有 ID 属性具有指定的值的元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CipherMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.CipherMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedXml.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As CipherMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CipherMode Mode { System::Security::Cryptography::CipherMode get(); void set(System::Security::Cryptography::CipherMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 XML 加密所用的密码模式。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.CipherMode" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 密码块链接 (CBC) 模式是 XML 加密的默认密码模式。 你可以使用此属性指定的其他密码模式<xref:System.Security.Cryptography.CipherMode>枚举，如密码反馈 (CFB) 模式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.PaddingMode Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.PaddingMode Padding" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedXml.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As PaddingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::PaddingMode Padding { System::Security::Cryptography::PaddingMode get(); void set(System::Security::Cryptography::PaddingMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.PaddingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 XML 加密所用的填充模式。</summary>
        <value>指定加密所用的填充类型的 <see cref="T:System.Security.Cryptography.PaddingMode" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ISO 10126 填充状态是 XML 加密的默认填充模式。 你可以使用此属性指定的其他填充模式<xref:System.Security.Cryptography.PaddingMode>枚举，如 ANSI X9.23 或 PKCS #5。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Recipient">
      <MemberSignature Language="C#" Value="public string Recipient { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Recipient" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedXml.Recipient" />
      <MemberSignature Language="VB.NET" Value="Public Property Recipient As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Recipient { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置加密密钥信息的收件人。</summary>
        <value>加密密钥信息的收件人。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以访问<xref:System.Security.Cryptography.Xml.EncryptedXml>通过检查引用的密钥名称对象<xref:System.Security.Cryptography.Xml.EncryptedKey.CarriedKeyName%2A>属性。  
  
 使用<xref:System.Security.Cryptography.Xml.EncryptedXml.Recipient%2A>属性来标识<xref:System.Security.Cryptography.Xml.EncryptedXml>当前收件人可以解密要检索的解密密钥的元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceData">
      <MemberSignature Language="C#" Value="public void ReplaceData (System.Xml.XmlElement inputElement, byte[] decryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceData(class System.Xml.XmlElement inputElement, unsigned int8[] decryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.ReplaceData(System.Xml.XmlElement,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceData (inputElement As XmlElement, decryptedData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceData(System::Xml::XmlElement ^ inputElement, cli::array &lt;System::Byte&gt; ^ decryptedData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputElement" Type="System.Xml.XmlElement" />
        <Parameter Name="decryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="inputElement">要替换的 <see langword="&lt;EncryptedData&gt;" /> 元素。</param>
        <param name="decryptedData">要替换 <c>inputElement</c> 的解密数据。</param>
        <summary>将 <see langword="&lt;EncryptedData&gt;" /> 元素替换为指定的解密字节序列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.ReplaceData%2A>方法替换`<EncryptedData>`具有的值的元素`decryptedData`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputElement" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="decryptedData" /> 参数的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReplaceElement">
      <MemberSignature Language="C#" Value="public static void ReplaceElement (System.Xml.XmlElement inputElement, System.Security.Cryptography.Xml.EncryptedData encryptedData, bool content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReplaceElement(class System.Xml.XmlElement inputElement, class System.Security.Cryptography.Xml.EncryptedData encryptedData, bool content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedXml.ReplaceElement(System.Xml.XmlElement,System.Security.Cryptography.Xml.EncryptedData,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReplaceElement(System::Xml::XmlElement ^ inputElement, System::Security::Cryptography::Xml::EncryptedData ^ encryptedData, bool content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputElement" Type="System.Xml.XmlElement" />
        <Parameter Name="encryptedData" Type="System.Security.Cryptography.Xml.EncryptedData" />
        <Parameter Name="content" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inputElement">要替换为 <see langword="&lt;EncryptedData&gt;" /> 元素的元素。</param>
        <param name="encryptedData">要替换 <c>inputElement</c> 参数的 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 对象。</param>
        <param name="content">
          如果仅替换元素内容，则为 <see langword="true" />；如果要替换整个元素，则为 <see langword="false" />。</param>
        <summary>将指定的元素替换为指定的 <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.EncryptedXml.ReplaceElement%2A>方法替换`inputElement`参数与指定的值`encryptedData`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputElement" /> 参数的值为 <see langword="null" />。  
  
 或  
  
 <paramref name="encryptedData" /> 参数的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver Resolver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver Resolver" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedXml.Resolver" />
      <MemberSignature Language="VB.NET" Value="Public Property Resolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ Resolver { System::Xml::XmlResolver ^ get(); void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文档对象模型 (DOM) 使用的 <see cref="T:System.Xml.XmlResolver" /> 对象以解析外部 XML 引用。</summary>
        <value>一个 <see cref="T:System.Xml.XmlResolver" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性包含<xref:System.Xml.XmlResolver>对象用于解析外部 XML 资源，如实体、 文档类型定义 (Dtd) 或架构。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDSigSearchDepth">
      <MemberSignature Language="C#" Value="public int XmlDSigSearchDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 XmlDSigSearchDepth" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedXml.XmlDSigSearchDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlDSigSearchDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int XmlDSigSearchDepth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 XML 数字签名递归深度以避免无穷递归和堆栈溢出。 如果包括了 URI 的数字签名 XML 随后指回原始 XML，则可能发生这种情况。</summary>
        <value>返回 <see cref="T:System.Int32" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncAES128KeyWrapUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncAES128KeyWrapUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncAES128KeyWrapUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES128KeyWrapUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncAES128KeyWrapUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncAES128KeyWrapUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 128 位高级加密标准 (AES) 密钥包装算法（也称作“Rijndael 密钥包装算法”）的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES128KeyWrapUrl>字段是"http://www.w3.org/2001/04/xmlenc#kw-aes128"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncAES128Url">
      <MemberSignature Language="C#" Value="public const string XmlEncAES128Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncAES128Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES128Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncAES128Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncAES128Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 128 位高级加密标准 (AES) 密钥包装算法（也称作“Rijndael 密钥包装算法”）的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES128Url>字段是"http://www.w3.org/2001/04/xmlenc#aes128-cbc"。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncAES192KeyWrapUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncAES192KeyWrapUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncAES192KeyWrapUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES192KeyWrapUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncAES192KeyWrapUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncAES192KeyWrapUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 192 位高级加密标准 (AES) 密钥包装算法（也称作“Rijndael 密钥包装算法”）的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES192KeyWrapUrl>字段是"http://www.w3.org/2001/04/xmlenc#kw-aes192"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncAES192Url">
      <MemberSignature Language="C#" Value="public const string XmlEncAES192Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncAES192Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES192Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncAES192Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncAES192Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 192 位高级加密标准 (AES) 密钥包装算法（也称作“Rijndael 密钥包装算法”）的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES192Url>字段是"http://www.w3.org/2001/04/xmlenc#aes192-cbc"。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncAES256KeyWrapUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncAES256KeyWrapUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncAES256KeyWrapUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES256KeyWrapUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncAES256KeyWrapUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncAES256KeyWrapUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 256 位高级加密标准 (AES) 密钥包装算法（也称作“Rijndael 密钥包装算法”）的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES256KeyWrapUrl>字段是"http://www.w3.org/2001/04/xmlenc#kw-aes256"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncAES256Url">
      <MemberSignature Language="C#" Value="public const string XmlEncAES256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncAES256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncAES256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncAES256Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 256 位高级加密标准 (AES) 密钥包装算法（也称作“Rijndael 密钥包装算法”）的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES256Url>字段是"http://www.w3.org/2001/04/xmlenc#aes256-cbc"。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncDESUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncDESUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncDESUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncDESUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncDESUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncDESUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示数字加密标准 (DES) 算法对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncDESUrl>字段是"http://www.w3.org/2001/04/xmlenc#des-cbc"。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncElementContentUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncElementContentUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncElementContentUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncElementContentUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncElementContentUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncElementContentUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 加密元素内容对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncElementContentUrl>字段是"http://www.w3.org/2001/04/xmlenc#Content"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncElementUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncElementUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncElementUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncElementUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncElementUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncElementUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 加密元素对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncElementUrl>字段是"http://www.w3.org/2001/04/xmlenc#Element"。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncEncryptedKeyUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncEncryptedKeyUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncEncryptedKeyUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncEncryptedKeyUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncEncryptedKeyUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncEncryptedKeyUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 加密 <see langword="&lt;EncryptedKey&gt;" /> 元素对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncEncryptedKeyUrl>字段是"http://www.w3.org/2001/04/xmlenc#EncryptedKey"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncNamespaceUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncNamespaceUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncNamespaceUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncNamespaceUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncNamespaceUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncNamespaceUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示“XML 加密语法和处理”对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncNamespaceUrl>字段是"http://www.w3.org/2001/04/xmlenc#"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncRSA15Url">
      <MemberSignature Language="C#" Value="public const string XmlEncRSA15Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncRSA15Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncRSA15Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncRSA15Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 RSA 公钥加密标准 (PKCS) 1.5 版算法对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url>字段是"http://www.w3.org/2001/04/xmlenc#rsa-1_5"。  
  
   
  
## Examples  
 下面的代码示例演示如何使用非对称密钥的 XML 文档进行加密。 此示例创建一个对称会话密钥进行加密文档，然后使用非对称密钥在 XML 文档中嵌入会话密钥的加密的版本。  
  
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncImbedKey/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncRSAOAEPUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncRSAOAEPUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncRSAOAEPUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncRSAOAEPUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncRSAOAEPUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 RSA 优化非对称加密填充 (OAEP) 加密算法对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl>字段是"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncSHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlEncSHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncSHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncSHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncSHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncSHA256Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 SHA-256 算法对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncSHA256Url>字段是"http://www.w3.org/2001/04/xmlenc#sha256"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncSHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlEncSHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncSHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncSHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncSHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncSHA512Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 SHA-512 算法对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncSHA512Url>字段是"http://www.w3.org/2001/04/xmlenc#sha512"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncTripleDESKeyWrapUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncTripleDESKeyWrapUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncTripleDESKeyWrapUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncTripleDESKeyWrapUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncTripleDESKeyWrapUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncTripleDESKeyWrapUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示三重 DES Key Wrap 算法对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncTripleDESKeyWrapUrl>字段是"http://www.w3.org/2001/04/xmlenc#kw-tripledes"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncTripleDESUrl">
      <MemberSignature Language="C#" Value="public const string XmlEncTripleDESUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlEncTripleDESUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncTripleDESUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlEncTripleDESUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlEncTripleDESUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示三重 DES 算法对应的命名空间统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncTripleDESUrl>字段是"http://www.w3.org/2001/04/xmlenc#tripledes-cbc"。  
  
   
  
## Examples  
 下面的代码示例演示如何加密使用对称密钥对 XML 文档。 此示例不包括加密的 XML 文档中的任何密钥信息。  
  
 [!code-cpp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CPP/Cryptography.XML.XMLEncMinimalDecryptData.cpp#1)]
 [!code-csharp[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.XMLEncMinimalDecryptData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XMLEncMinimalDecryptData/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>