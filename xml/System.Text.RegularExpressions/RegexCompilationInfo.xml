<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="731a068feb7a24b5a370b0ee36313a7a143e71c7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530201" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供有关使用正则表达式将正则表达式编译为独立程序集的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数组<xref:System.Text.RegularExpressions.RegexCompilationInfo>对象传递给<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法以提供有关要包括在程序集中的每个正则表达式的信息。 包含在程序集中每个编译正则表达式表示为从派生的类<xref:System.Text.RegularExpressions.Regex>。 属性<xref:System.Text.RegularExpressions.RegexCompilationInfo>类型定义正则表达式的类名、 其完全限定的名称 （即，其命名空间和类型名称），其正则表达式模式、 任何其他选项 （如是否正则表达式不区分大小写），并指定正则表达式引擎搜索匹配项的多长时间的超时间隔。  
  
 可以实例化<xref:System.Text.RegularExpressions.RegexCompilationInfo>通过调用其重载的类构造函数的对象。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">要编译的正则表达式。</param>
        <param name="options">编译正则表达式时使用的正则表达式选项。</param>
        <param name="name">表示已编译的正则表达式的类型名称。</param>
        <param name="fullnamespace">新类型所属的命名空间。</param>
        <param name="ispublic">
          若要使所编译的正则表达式对公共可见，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例，该类包含有关要在程序集内包括的正则表达式的信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个参数的<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>构造函数直接对应的属性<xref:System.Text.RegularExpressions.RegexCompilationInfo>类。 因为所有的属性是读/写，也可以直接分配它们的值。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法将生成该程序集包含已编译的正则表达式。 因此，不应指定<xref:System.Text.RegularExpressions.RegexOptions.Compiled>为的值之一`options`。  
  
 如果`ispublic`是`true`，已编译的正则表达式类提供公共可访问性。 也就是说，它可以执行的任何程序集中的代码中实例化。 如果`ispublic`是`false`，给定的已编译的正则表达式类`internal`（在 C# 中) 或`Friend`（在 Visual Basic) 可访问性。 也就是说，它可以只能从与正则表达式类相同的程序集中执行的代码实例化。  
  
   
  
## Examples  
 下面的示例创建并在两个步骤中使用已编译的正则表达式。  
  
 在第一个步骤中，编译并执行下面的代码示例。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A>构造函数中的代码示例定义已编译的正则表达式。 正在执行代码的结果是名为 FishRegex.dll 包含名为的已编译的正则表达式类型的程序集`FishRegex`。  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 在第二个步骤中，编译下面的代码示例使用 FishRegex.dll，对的引用，然后运行生成的可执行文件。 按使用的可执行文件匹配的目标字符串`FishRegex`键入，并在目标字符串中显示匹配、 组、 捕获组和的匹配项的索引位置。  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="name" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="fullnamespace" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="usage">
          <para>此构造函数创建已编译的正则表达式使用在其中创建的应用程序域的默认超时值。 如果应用程序域定义了超时值，已编译的正则表达式使用的值<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />，这将阻止从超时的模式匹配操作。创建已编译的正则表达式的建议构造函数是<see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />，可以在其中你设置的超时间隔。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">要编译的正则表达式。</param>
        <param name="options">编译正则表达式时使用的正则表达式选项。</param>
        <param name="name">表示已编译的正则表达式的类型名称。</param>
        <param name="fullnamespace">新类型所属的命名空间。</param>
        <param name="ispublic">
          若要使所编译的正则表达式对公共可见，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
        <param name="matchTimeout">正则表达式的默认超时间隔。</param>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例，该类包含有关要在程序集内包括的指定的超时值的信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个参数的<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>构造函数直接对应的属性<xref:System.Text.RegularExpressions.RegexCompilationInfo>类。 因为所有的属性是读/写，也可以直接分配它们的值。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法将生成该程序集包含已编译的正则表达式。 因此，不应指定<xref:System.Text.RegularExpressions.RegexOptions.Compiled>为的值之一`options`。  
  
 如果`ispublic`是`true`，已编译的正则表达式类提供公共可访问性。 也就是说，它可以执行的任何程序集中的代码中实例化。 如果`ispublic`是`false`，给定的已编译的正则表达式类`internal`（在 C# 中) 或`Friend`（在 Visual Basic) 可访问性。 也就是说，它可以只能从与正则表达式类相同的程序集中执行的代码实例化。  
  
 `matchTimeout`参数定义已编译的正则表达式的默认超时间隔。 此值表示的近似之前在操作超时时并且正则表达式引擎将引发，已编译的正则表达式对象将执行单个匹配操作的时间量<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>在其下一步的计时检查过程中的异常. 超时值有关的其他信息，请参阅<xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>属性。  
  
> [!IMPORTANT]
>  我们建议你始终设置已编译的正则表达式的默认超时值。 正则表达式库的使用者可以在通过传递的情况下重写该超时值<xref:System.TimeSpan>值，该值表示此构造函数重载的新的超时间隔。  
  
   
  
## Examples  
 下面的示例定义名为单个编译的正则表达式`DuplicateChars`标识的输入字符串中的相同字符的两个或多个匹配项。 已编译的正则表达式具有默认超时值为 2 秒。 执行该示例时，它会创建一个名为包含已编译的正则表达式的 RegexLib.dll 类库。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正则表达式模式 `(\w)\1+` 的定义如下表所示。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w)`|匹配任何单词字符，并将其分配给第一个捕获组。|  
|`\1+`|匹配一个或多个匹配项的值的第一个捕获组。|  
  
 下面的示例使用`DuplicatedChars`正则表达式，以标识字符串数组中的重复字符。 当它调用`DuplicatedChars`构造函数，它将更改为.5 秒超时间隔。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="name" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="fullnamespace" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示已编译的正则表达式是否具有公共可见性。</summary>
        <value>
          如果正则表达式具有公共可见性，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A>属性是`false`，由当前实例定义的正则表达式类可以仅通过中包含的类的程序集执行的代码实例化。 但是，因为<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType>方法生成包含仅已编译的正则表达式，并且不允许其他代码要添加的程序集时，通常没有理由将此属性的值分配`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置正则表达式的默认超时间隔。</summary>
        <value>在样式对的操作可经过的默认最长时间间隔时间，在 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 引发之前或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> ，如果挂起被禁用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>属性定义已编译的正则表达式的默认超时时间间隔。 此值表示的近似之前在操作超时时并且正则表达式引擎将引发，已编译的正则表达式将执行单个匹配操作的时间量<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>在其下一步的计时检查过程中的异常。  
  
> [!IMPORTANT]
>  我们建议你始终设置已编译的正则表达式的默认超时值。 正则表达式库的使用者可以在通过传递的情况下重写该超时值<xref:System.TimeSpan>值，该值表示已编译的正则表达式的类构造函数的新的超时间隔。  
  
 你可以分配到一个默认超时值<xref:System.Text.RegularExpressions.RegexCompilationInfo>处于以下任一对象：  
  
-   通过调用<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>方法并提供的字符串表示形式<xref:System.TimeSpan>"REGEX_DEFAULT_MATCH_TIMEOUT"属性值。  
  
-   通过调用<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29>构造函数和提供的值`matchTimeout`参数。  
  
-   通过设置此属性的值。  
  
 若要设置的合理的超时间隔，请考虑以下因素：  
  
-   长度和复杂性的正则表达式模式。 长而复杂的正则表达式需要比更简短和简单的更多时间。  
  
-   预期的机负载。 处理在具有高的 CPU 和内存利用率系统上花费更多时间。  
  
   
  
## Examples  
 下面的示例定义名为单个编译的正则表达式`DuplicateChars`标识的输入字符串中的相同字符的两个或多个匹配项。 已编译的正则表达式具有默认超时值为 2 秒。 执行该示例时，它会创建一个名为包含已编译的正则表达式的 RegexLib.dll 类库。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正则表达式模式 `(\w)\1+` 的定义如下表所示。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w)`|匹配任何单词字符，并将其分配给第一个捕获组。|  
|`\1+`|匹配一个或多个匹配项的值的第一个捕获组。|  
  
 下面的示例使用`DuplicatedChars`正则表达式，以标识字符串数组中的重复字符。 当它调用`DuplicatedChars`构造函数，它将更改为.5 秒超时间隔。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示已编译的正则表达式的类型名称。</summary>
        <value>新类型的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>类用于定义已编译的正则表达式，表示为从派生的类<xref:System.Text.RegularExpressions.Regex>。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>属性定义的正则表达式类型的类名称和<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>和<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>属性共同定义其完全限定的名称。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">此属性的值为空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置新类型所属的命名空间。</summary>
        <value>新类型的命名空间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>类用于定义已编译的正则表达式，表示为从派生的类<xref:System.Text.RegularExpressions.Regex>。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>属性定义包含已编译的正则表达式类型的命名空间和<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>和<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>属性共同定义其完全限定的名称。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编译正则表达式时使用的选项。</summary>
        <value>枚举值的按位组合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法将生成该程序集包含已编译的正则表达式。 因此，你不必指定<xref:System.Text.RegularExpressions.RegexOptions.Compiled>作为此属性的值之一。 如果不存在，<xref:System.Text.RegularExpressions.RegexOptions.Compiled>忽略选项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要编译的正则表达式。</summary>
        <value>要编译的正则表达式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>属性可以包含任何有效的正则表达式。 如果值<xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>属性不是语法正确的正则表达式模式中，调用<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法抛出异常<xref:System.ArgumentException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>