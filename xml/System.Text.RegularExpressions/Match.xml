<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7bd3cccac8dcf1dc1ebd2bd1454ae68b76101fc1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755143" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示单个正则表达式匹配的结果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match>对象是不可变，并且没有公共构造函数。 实例<xref:System.Text.RegularExpressions.Match>类返回的<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>方法中，表示第一个模式匹配字符串中。 由表示后续匹配项<xref:System.Text.RegularExpressions.Match>返回的对象<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>方法。 此外，<xref:System.Text.RegularExpressions.MatchCollection>对象，它由零个、 一个或多个组成<xref:System.Text.RegularExpressions.Match>返回的对象<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>方法。  
  
 如果<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>无法与输入字符串中的某个正则表达式模式匹配方法，它将返回空<xref:System.Text.RegularExpressions.MatchCollection>对象。 然后，可以使用`foreach`C# 中构造或`For Each`构造在 Visual Basic 进行循环访问集合中。  
  
 如果<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>无法与正则表达式模式匹配方法，它将返回<xref:System.Text.RegularExpressions.Match>对象，它等于<xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>。 可以使用<xref:System.Text.RegularExpressions.Group.Success%2A>属性来确定匹配是否成功。 下面的示例进行了这方面的演示。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 如果成功，模式匹配<xref:System.Text.RegularExpressions.Capture.Value%2A>属性包含匹配的子字符串，<xref:System.Text.RegularExpressions.Capture.Index%2A>属性指示从零开始的起始位置的匹配的子字符串在输入字符串中，和<xref:System.Text.RegularExpressions.Capture.Length%2A>属性指示匹配输入字符串中的子字符串的长度。  
  
 由于单个匹配项可能涉及多个捕获组<xref:System.Text.RegularExpressions.Match>已<xref:System.Text.RegularExpressions.Match.Groups%2A>返回的属性<xref:System.Text.RegularExpressions.GroupCollection>。 <xref:System.Text.RegularExpressions.Match>本身的实例是否等效于第一个对象在集合中，在`Match.Groups[0]`(`Match.Groups(0)`在 Visual Basic 中)，它表示整个匹配项。 可以按以下方式来访问在匹配中捕获的组：  
  
-   您可以循环访问的成员<xref:System.Text.RegularExpressions.GroupCollection>通过使用对象`foreach`(C#) 或`For Each`(Visual Basic 中) 构造。  
  
-   可以使用<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType>属性来检索组的捕获组数。 请注意，您可以确定哪些编号的组是出现在正则表达式中通过调用实例<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>方法。  
  
-   可以使用<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType>属性来检索组的捕获组的名称。 请注意，您可以确定哪些已命名的组将出现在正则表达式中通过调用实例<xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例使用正则表达式`Console\.Write(Line)?`。 正则表达式按如下方式解释：  
  
|||  
|-|-|  
|控制台\\。编写|匹配字符串“Console.Write”。 请注意，"。"字符将被转义，以便将其解释为文字句点，而不是作为通配符，可匹配任何字符。|  
|（行）？|匹配字符串“Line”的零个或一个匹配项。|  
  
 **示例 1**  
  
 下面的示例调用<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法来检索在输入字符串中的所有模式匹配项。 然后循环访问<xref:System.Text.RegularExpressions.Match>中返回的对象<xref:System.Text.RegularExpressions.MatchCollection>对象显示有关每个匹配项的信息。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **示例 2**  
  
 下面的示例调用<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>和<xref:System.Text.RegularExpressions.Match.NextMatch%2A>方法来一次检索一个匹配项。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取空组。 所有失败的匹配都返回此空匹配。</summary>
        <value>空匹配。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性不应该用于确定匹配是否成功。 请改用`Match.Success`属性 (其继承自<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由正则表达式匹配的组的集合。</summary>
        <value>由模式匹配的字符组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正则表达式模式可以包含由括号括起的正则表达式模式的一部分定义的子表达式。 每个此类子表达式构成一个组。 <xref:System.Text.RegularExpressions.Match.Groups%2A>属性提供访问有关这些子表达式匹配项的信息。 例如，正则表达式模式`(\d{3})-(\d{3}-\d{4})`，可匹配北美电话号码，有两个子表达式。 第一个包含区域代码，包含电话号码的前三位数字。 此组所捕获的正则表达式的第一个部分`(\d{3})`。第二个包含的各个电话号码，其中包含的电话号码的最后七位数字。 此组所捕获的正则表达式的第二个部分`(\d{3}-\d{4})`。 然后可以从检索这两个组<xref:System.Text.RegularExpressions.GroupCollection>返回的对象<xref:System.Text.RegularExpressions.Match.Groups%2A>属性，如以下示例所示。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <xref:System.Text.RegularExpressions.GroupCollection>返回对象<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>属性是始终有至少一个成员的从零开始的集合对象。 如果正则表达式引擎找不到特定的输入字符串中的所有匹配项<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>的单个属性<xref:System.Text.RegularExpressions.Group>集合 （索引 0 处的对象） 中的对象设置为`false`和<xref:System.Text.RegularExpressions.Group>对象<xref:System.Text.RegularExpressions.Capture.Value%2A>属性设置为<xref:System.String.Empty?displayProperty=nameWithType>。 如果正则表达式引擎可以找到匹配项的第一个元素<xref:System.Text.RegularExpressions.GroupCollection>返回的对象 （索引 0 处的元素）<xref:System.Text.RegularExpressions.Match.Groups%2A>属性包含与整个正则表达式模式匹配的字符串。 后续的每个元素，从一个索引上升、 表示非捕获的组，如果正则表达式中包含捕获组。 有关详细信息，请参阅的"分组构造和正则表达式对象"部分[的分组构造](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)一文。  
  
   
  
## Examples  
 下面的示例尝试匹配与示例字符串的正则表达式模式。 该示例使用<xref:System.Text.RegularExpressions.Match.Groups%2A>属性来存储通过向控制台显示的匹配项的信息。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。</summary>
        <returns>下一个正则表达式匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是类似于调用<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>再次和传递 (`Index+Length`) 作为新的开始位置。  
  
> [!NOTE]
>  此方法不会修改当前实例。 相反，它会返回一个新<xref:System.Text.RegularExpressions.Match>对象，其中包含有关下一个匹配项的信息。  
  
 尝试检索下一个匹配项可能会引发<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>如果匹配操作的超时值生效，并且尝试查找下一个匹配项超过该超时间隔。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Text.RegularExpressions.Match.NextMatch%2A>超出第一个匹配项的方法来捕获正则表达式匹配。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
        <block subset="none" type="usage">
          <para>当通过调用重复的匹配尝试<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />方法中，正则表达式引擎提供空匹配项特殊处理。通常情况下，<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />开始搜索下一个匹配完全上一个匹配项离开的位置。在空匹配项，但之后<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />方法尝试下一个匹配项之前提前一个字符。此行为可确保正则表达式引擎会通过字符串前进。否则为在空匹配项不会导致任何向前移动，因为下一个匹配项将在与上一个匹配项，相同的位置开始，它将重复匹配同一个空字符串。下面的示例进行了这方面的演示。正则表达式模式<c>*</c>搜索的零个或多个字母"a"字符串"abaabb"中。如示例输出所示，搜索未找到六个匹配项。第一个匹配尝试查找第一个"a"。与完全其中第一个匹配结束，第一个 b; 之前在第二个匹配项开始它查找"a"的零个匹配项，并返回一个空字符串。第三个匹配项不开始恰好第二个匹配结束的地方，因为返回空字符串的第二个匹配项。相反，它从一个字符开始更高版本之后第一个"b"。第三个匹配查找两个匹配项的"a"，并返回"aa"。第四个匹配尝试结束的地方开始第三个匹配项之前第二个"b"，, 并返回一个空字符串。第五个匹配尝试再次提升一个字符，以便它在第三个"b"之前开始，并返回一个空字符串。第六个匹配项开始后的最后一个"b"，并再次返回一个空字符串。 [！ code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)][！ code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">要使用的替换模式。</param>
        <summary>返回对指定替换模式的扩展。</summary>
        <returns>
          <paramref name="replacement" /> 参数的扩展版本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而<xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType>方法会在输入字符串中的所有匹配项替换为指定的替换模式中，<xref:System.Text.RegularExpressions.Match.Result%2A>方法会单个匹配项替换为指定的替换模式。 因为它对单个匹配项进行操作，还有可能对匹配的字符串执行处理，然后再调用<xref:System.Text.RegularExpressions.Match.Result%2A>方法。  
  
 `replacement`参数是标准的正则表达式替换模式。 它可以包含原义字符和正则表达式替换项。 有关详细信息，请参阅[替换](~/docs/standard/base-types/substitutions-in-regular-expressions.md)。  
  
   
  
## Examples  
 下面的示例将开始和结束带括号的表达式使用括号的连字符。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 正则表达式模式 `--(.+?)--` 的含义如下表所示。  
  
|模式|描述|  
|-------------|-----------------|  
|`--`|匹配两个连字符。|  
|`(.+?)`|一个或多个时间，但次数少尽可能匹配任何字符。 这是第一个捕获组。|  
|`--`|匹配两个连字符。|  
  
 请注意，正则表达式模式`--(.+?)--`使用惰性量符`+?`。 如果贪婪限定符`+`使用相反，正则表达式引擎将输入字符串中查找单个匹配项。  
  
 替换字符串`($1)`替换括在括号中的第一个捕获组匹配。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replacement" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">不允许对此模式进行扩展。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">与预期匹配等效的正则表达式匹配。</param>
        <summary>返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" /> 实例，该实例适合在多个线程间共享。</summary>
        <returns>适合在多个线程间共享的正则表达式匹配。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>