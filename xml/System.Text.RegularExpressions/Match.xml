<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9f456-101">表示单个正则表达式匹配的结果。</span><span class="sxs-lookup"><span data-stu-id="9f456-101">Represents the results from a single regular expression match.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f456-102"><xref:System.Text.RegularExpressions.Match>对象是不可变，并且没有公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="9f456-102">The <xref:System.Text.RegularExpressions.Match> object is immutable and has no public constructor.</span></span> <span data-ttu-id="9f456-103">实例<xref:System.Text.RegularExpressions.Match>类由<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>方法和表示字符串中的第一个模式匹配。</span><span class="sxs-lookup"><span data-stu-id="9f456-103">An instance of the <xref:System.Text.RegularExpressions.Match> class is returned by the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method and represents the first pattern match in a string.</span></span> <span data-ttu-id="9f456-104">后续匹配项都由<xref:System.Text.RegularExpressions.Match>返回的对象<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9f456-104">Subsequent matches are represented by <xref:System.Text.RegularExpressions.Match> objects returned by the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9f456-105">此外，<xref:System.Text.RegularExpressions.MatchCollection>对象组成的零个、 一个或多<xref:System.Text.RegularExpressions.Match>返回的对象<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9f456-105">In addition, a <xref:System.Text.RegularExpressions.MatchCollection> object that consists of zero, one, or more <xref:System.Text.RegularExpressions.Match> objects is returned by the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="9f456-106">如果<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>方法不匹配输入字符串中的正则表达式模式，它将返回空<xref:System.Text.RegularExpressions.MatchCollection>对象。</span><span class="sxs-lookup"><span data-stu-id="9f456-106">If the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method fails to match a regular expression pattern in an input string, it returns an empty <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="9f456-107">然后，可以使用`foreach`构造在 C# 或`For Each`构造 Visual basic 中循环访问集合。</span><span class="sxs-lookup"><span data-stu-id="9f456-107">You can then use a `foreach` construct in C# or a `For Each` construct in Visual Basic to iterate the collection.</span></span>  
  
 <span data-ttu-id="9f456-108">如果<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>方法不匹配正则表达式模式，它将返回<xref:System.Text.RegularExpressions.Match>对象，它等于<xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f456-108">If the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method fails to match the regular expression pattern, it returns a <xref:System.Text.RegularExpressions.Match> object that is equal to <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9f456-109">你可以使用<xref:System.Text.RegularExpressions.Group.Success%2A>属性来确定匹配是否成功。</span><span class="sxs-lookup"><span data-stu-id="9f456-109">You can use the <xref:System.Text.RegularExpressions.Group.Success%2A> property to determine whether the match was successful.</span></span> <span data-ttu-id="9f456-110">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="9f456-110">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 <span data-ttu-id="9f456-111">如果模式匹配成功，<xref:System.Text.RegularExpressions.Capture.Value%2A>属性包含匹配的子字符串，<xref:System.Text.RegularExpressions.Capture.Index%2A>属性指示从零开始的起始位置的匹配的子字符串在输入字符串中与<xref:System.Text.RegularExpressions.Capture.Length%2A>属性指示匹配输入字符串中的子字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="9f456-111">If a pattern match is successful, the <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the matched substring, the <xref:System.Text.RegularExpressions.Capture.Index%2A> property indicates the zero-based starting position of the matched substring in the input string, and the <xref:System.Text.RegularExpressions.Capture.Length%2A> property indicates the length of matched substring in the input string.</span></span>  
  
 <span data-ttu-id="9f456-112">由于单个匹配项可能涉及多个捕获组，<xref:System.Text.RegularExpressions.Match>具有<xref:System.Text.RegularExpressions.Match.Groups%2A>返回的属性<xref:System.Text.RegularExpressions.GroupCollection>。</span><span class="sxs-lookup"><span data-stu-id="9f456-112">Because a single match can involve multiple capturing groups, <xref:System.Text.RegularExpressions.Match> has a <xref:System.Text.RegularExpressions.Match.Groups%2A> property that returns the <xref:System.Text.RegularExpressions.GroupCollection>.</span></span> <span data-ttu-id="9f456-113"><xref:System.Text.RegularExpressions.Match>本身的实例是否等效于集合中的第一个对象在`Match.Groups[0]`(`Match.Groups(0)`在 Visual Basic 中)，表示整个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9f456-113">The <xref:System.Text.RegularExpressions.Match> instance itself is equivalent to the first object in the collection, at `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), which represents the entire match.</span></span> <span data-ttu-id="9f456-114">可以通过以下方式来访问在匹配中捕获的组：</span><span class="sxs-lookup"><span data-stu-id="9f456-114">You can access the captured groups in a match in the following ways:</span></span>  
  
-   <span data-ttu-id="9f456-115">你可以循环访问的成员<xref:System.Text.RegularExpressions.GroupCollection>通过使用对象`foreach`(C#) 或`For Each`(Visual Basic 中) 构造。</span><span class="sxs-lookup"><span data-stu-id="9f456-115">You can iterate the members of the <xref:System.Text.RegularExpressions.GroupCollection> object  by using a `foreach` (C#) or `For Each` (Visual Basic) construct.</span></span>  
  
-   <span data-ttu-id="9f456-116">你可以使用<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType>属性来检索组由捕获组的数目。</span><span class="sxs-lookup"><span data-stu-id="9f456-116">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> property to retrieve groups by the number of the capturing group.</span></span> <span data-ttu-id="9f456-117">请注意，您可以决定哪些编号的组是出现在正则表达式通过调用实例<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9f456-117">Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="9f456-118">你可以使用<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType>属性检索组的捕获组的名称。</span><span class="sxs-lookup"><span data-stu-id="9f456-118">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> property to retrieve groups by the name of the capturing group.</span></span> <span data-ttu-id="9f456-119">请注意，您可以决定哪些命名的组是正则表达式中存在的通过调用实例<xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9f456-119">Note that you can determine which named groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f456-120">下面的示例使用正则表达式`Console\.Write(Line)?`。</span><span class="sxs-lookup"><span data-stu-id="9f456-120">The following examples use the regular expression `Console\.Write(Line)?`.</span></span> <span data-ttu-id="9f456-121">正则表达式按如下方式解释：</span><span class="sxs-lookup"><span data-stu-id="9f456-121">The regular expression is interpreted as follows:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f456-122">Console\\.Write</span><span class="sxs-lookup"><span data-stu-id="9f456-122">Console\\.Write</span></span>|<span data-ttu-id="9f456-123">匹配字符串“Console.Write”。</span><span class="sxs-lookup"><span data-stu-id="9f456-123">Match the string "Console.Write".</span></span> <span data-ttu-id="9f456-124">请注意，"。"，以便将其解释为原义句点，而不是作为通配符，可匹配任何字符的转义字符。</span><span class="sxs-lookup"><span data-stu-id="9f456-124">Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</span></span>|  
|<span data-ttu-id="9f456-125">（行）？</span><span class="sxs-lookup"><span data-stu-id="9f456-125">(Line)?</span></span>|<span data-ttu-id="9f456-126">匹配字符串“Line”的零个或一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9f456-126">Match zero or one occurrence of the string "Line".</span></span>|  
  
 <span data-ttu-id="9f456-127">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="9f456-127">**Example 1**</span></span>  
  
 <span data-ttu-id="9f456-128">下面的示例调用<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法来检索在输入字符串中的所有模式匹配。</span><span class="sxs-lookup"><span data-stu-id="9f456-128">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method to retrieve all pattern matches in an input string.</span></span> <span data-ttu-id="9f456-129">然后，循环<xref:System.Text.RegularExpressions.Match>中返回的对象<xref:System.Text.RegularExpressions.MatchCollection>对象显示有关每个匹配项的信息。</span><span class="sxs-lookup"><span data-stu-id="9f456-129">It then iterates the <xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> object to display information about each match.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 <span data-ttu-id="9f456-130">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="9f456-130">**Example 2**</span></span>  
  
 <span data-ttu-id="9f456-131">下面的示例调用<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>和<xref:System.Text.RegularExpressions.Match.NextMatch%2A>方法来检索一次一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9f456-131">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> and <xref:System.Text.RegularExpressions.Match.NextMatch%2A> methods to retrieve one match at a time.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f456-132">获取空组。</span><span class="sxs-lookup"><span data-stu-id="9f456-132">Gets the empty group.</span></span> <span data-ttu-id="9f456-133">所有失败的匹配都返回此空匹配。</span><span class="sxs-lookup"><span data-stu-id="9f456-133">All failed matches return this empty match.</span></span></summary>
        <value><span data-ttu-id="9f456-134">空匹配。</span><span class="sxs-lookup"><span data-stu-id="9f456-134">An empty match.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f456-135">此属性不应该用于确定匹配是否成功。</span><span class="sxs-lookup"><span data-stu-id="9f456-135">This property should not be used to determine if a match is successful.</span></span> <span data-ttu-id="9f456-136">请改用`Match.Success`属性 (其继承自<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="9f456-136">Instead, use the `Match.Success` property (which is inherited from <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f456-137">获取由正则表达式匹配的组的集合。</span><span class="sxs-lookup"><span data-stu-id="9f456-137">Gets a collection of groups matched by the regular expression.</span></span></summary>
        <value><span data-ttu-id="9f456-138">由模式匹配的字符组。</span><span class="sxs-lookup"><span data-stu-id="9f456-138">The character groups matched by the pattern.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f456-139">正则表达式模式可以包含由正则表达式模式的一部分括在括号内定义的子表达式。</span><span class="sxs-lookup"><span data-stu-id="9f456-139">A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</span></span> <span data-ttu-id="9f456-140">每个此类子表达式构成一个组。</span><span class="sxs-lookup"><span data-stu-id="9f456-140">Every such subexpression forms a group.</span></span> <span data-ttu-id="9f456-141"><xref:System.Text.RegularExpressions.Match.Groups%2A>属性提供访问那些子表达式匹配项有关的信息。</span><span class="sxs-lookup"><span data-stu-id="9f456-141">The <xref:System.Text.RegularExpressions.Match.Groups%2A> property provides access to information about those subexpression matches.</span></span> <span data-ttu-id="9f456-142">例如，正则表达式模式`(\d{3})-(\d{3}-\d{4})`，它匹配北美的电话号码，有两个子表达式。</span><span class="sxs-lookup"><span data-stu-id="9f456-142">For example, the regular expression pattern `(\d{3})-(\d{3}-\d{4})`, which matches North American telephone numbers, has two subexpressions.</span></span> <span data-ttu-id="9f456-143">第一个包含的区域代码，它包含的电话号码的前三个数字。</span><span class="sxs-lookup"><span data-stu-id="9f456-143">The first consists of the area code, which composes the first three digits of the telephone number.</span></span> <span data-ttu-id="9f456-144">此组所捕获的正则表达式的第一个部分`(\d{3})`。第二个包含的单个电话号码，它包含的电话号码的最后七位数。</span><span class="sxs-lookup"><span data-stu-id="9f456-144">This group is captured by the first portion of the regular expression, `(\d{3})`.The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</span></span> <span data-ttu-id="9f456-145">此组所捕获的第二个部分的正则表达式， `(\d{3}-\d{4})`。</span><span class="sxs-lookup"><span data-stu-id="9f456-145">This group is captured by the second portion of the regular expression, `(\d{3}-\d{4})`.</span></span> <span data-ttu-id="9f456-146">然后可以从检索这两个组<xref:System.Text.RegularExpressions.GroupCollection>返回的对象<xref:System.Text.RegularExpressions.Match.Groups%2A>属性，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="9f456-146">These two groups can then be retrieved from the <xref:System.Text.RegularExpressions.GroupCollection> object that is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property, as the following example shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <span data-ttu-id="9f456-147"><xref:System.Text.RegularExpressions.GroupCollection>返回对象<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>属性是一个始终具有至少一个成员的从零开始的集合对象。</span><span class="sxs-lookup"><span data-stu-id="9f456-147">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property is a zero-based collection object that always has at least one member.</span></span> <span data-ttu-id="9f456-148">如果正则表达式引擎无法在特定的输入字符串中找到任何匹配项<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>的单个属性<xref:System.Text.RegularExpressions.Group>集合 （位于索引 0 处的对象） 中的对象设置为`false`和<xref:System.Text.RegularExpressions.Group>对象<xref:System.Text.RegularExpressions.Capture.Value%2A>属性设置为<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f456-148">If the regular expression engine cannot find any matches in a particular input string, the <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property of the single <xref:System.Text.RegularExpressions.Group> object in the collection (the object at index 0) is set to `false` and the <xref:System.Text.RegularExpressions.Group> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property is set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9f456-149">如果正则表达式引擎可以查找匹配项，第一个元素的<xref:System.Text.RegularExpressions.GroupCollection>返回的对象 （索引 0 处的元素）<xref:System.Text.RegularExpressions.Match.Groups%2A>属性包含与整个正则表达式模式匹配的字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-149">If the regular expression engine can find a match, the first element of the <xref:System.Text.RegularExpressions.GroupCollection> object (the element at index 0) returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property contains a string that matches the entire regular expression pattern.</span></span> <span data-ttu-id="9f456-150">每个后续元素，从一个索引向上，表示一个捕获的组，如果正则表达式包括捕获组。</span><span class="sxs-lookup"><span data-stu-id="9f456-150">Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="9f456-151">有关详细信息，请参阅的"分组构造和正则表达式对象"部分[分组构造](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)文章。</span><span class="sxs-lookup"><span data-stu-id="9f456-151">For more information, see the "Grouping Constructs and Regular Expression Objects" section of the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f456-152">下面的示例尝试匹配正则表达式模式与示例字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-152">The following example attempts to match a regular expression pattern against a sample string.</span></span> <span data-ttu-id="9f456-153">该示例使用<xref:System.Text.RegularExpressions.Match.Groups%2A>属性来存储通过向控制台显示的匹配项的信息。</span><span class="sxs-lookup"><span data-stu-id="9f456-153">The example uses the <xref:System.Text.RegularExpressions.Match.Groups%2A> property to store information that is retrieved by the match for display to the console.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f456-154">从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9f456-154">Returns a new <see cref="T:System.Text.RegularExpressions.Match" /> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</span></span></summary>
        <returns><span data-ttu-id="9f456-155">下一个正则表达式匹配。</span><span class="sxs-lookup"><span data-stu-id="9f456-155">The next regular expression match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f456-156">此方法是类似于调用<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>再次并传递 (`Index+Length`) 作为新的开始位置。</span><span class="sxs-lookup"><span data-stu-id="9f456-156">This method is similar to calling <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> again and passing (`Index+Length`) as the new starting position.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f456-157">此方法不会修改当前实例。</span><span class="sxs-lookup"><span data-stu-id="9f456-157">This method does not modify the current instance.</span></span> <span data-ttu-id="9f456-158">相反，它将返回一个新<xref:System.Text.RegularExpressions.Match>包含下一个匹配项有关的信息的对象。</span><span class="sxs-lookup"><span data-stu-id="9f456-158">Instead, it returns a new <xref:System.Text.RegularExpressions.Match> object that contains information about the next match.</span></span>  
  
 <span data-ttu-id="9f456-159">尝试检索下一个匹配项可能会引发<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>如果匹配操作的超时值是否生效，并且尝试查找下一个匹配项超出该超时时间间隔。</span><span class="sxs-lookup"><span data-stu-id="9f456-159">Attempting to retrieve the next match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f456-160">下面的示例使用<xref:System.Text.RegularExpressions.Match.NextMatch%2A>方法来捕获正则表达式匹配超出第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9f456-160">The following example uses the <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method to capture regular expression matches beyond the first match.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="9f456-161">发生超时。</span><span class="sxs-lookup"><span data-stu-id="9f456-161">A time-out occurred.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="9f456-162">当匹配尝试重复通过调用<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />方法，正则表达式引擎提供空匹配特殊处理。</span><span class="sxs-lookup"><span data-stu-id="9f456-162">When a match attempt is repeated by calling the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method, the regular expression engine gives empty matches special treatment.</span></span> <span data-ttu-id="9f456-163">通常情况下，<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />开始完全上一个匹配的地方开始下一个匹配项的搜索。</span><span class="sxs-lookup"><span data-stu-id="9f456-163">Usually, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> begins the search for the next match exactly where the previous match left off.</span></span> <span data-ttu-id="9f456-164">但是之后空匹配，,<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />方法然后再尝试下一个匹配项前移一个字符。</span><span class="sxs-lookup"><span data-stu-id="9f456-164">However, after an empty match, the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method advances by one character before trying the next match.</span></span> <span data-ttu-id="9f456-165">此行为保证正则表达式引擎将进度访问的字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-165">This behavior guarantees that the regular expression engine will progress through the string.</span></span> <span data-ttu-id="9f456-166">否则为因为空匹配不会导致任何向前移动，与上一个匹配项，相同的位置将开始下一个匹配项，它将重复匹配同一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-166">Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.</span></span>  
  
 <span data-ttu-id="9f456-167">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="9f456-167">The following example provides an illustration.</span></span> <span data-ttu-id="9f456-168">正则表达式模式<c>\*</c>搜索的零个或多个字母"a"字符串"abaabb"中。</span><span class="sxs-lookup"><span data-stu-id="9f456-168">The regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb".</span></span> <span data-ttu-id="9f456-169">如示例输出所示，搜索将查找六个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9f456-169">As the output from the example shows, the search finds six matches.</span></span> <span data-ttu-id="9f456-170">第一个匹配尝试找到第一个"a"。</span><span class="sxs-lookup"><span data-stu-id="9f456-170">The first match attempt finds the first "a".</span></span> <span data-ttu-id="9f456-171">完全其中第一个匹配结束时，在第一个 b; 之前在第二个匹配项开始它查找"a"的零个匹配项，并返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-171">The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string.</span></span> <span data-ttu-id="9f456-172">第三个匹配项不开始恰好第二个匹配结束的地方，因为第二个匹配返回空字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-172">The third match does not begin exactly where the second match ended, because the second match returned an empty string.</span></span> <span data-ttu-id="9f456-173">相反，它从一个字符开始，在后第一个"b"。</span><span class="sxs-lookup"><span data-stu-id="9f456-173">Instead, it begins one character later, after the first "b".</span></span> <span data-ttu-id="9f456-174">第三个匹配查找两个匹配项的"a"，并返回"aa"。</span><span class="sxs-lookup"><span data-stu-id="9f456-174">The third match finds two occurrences of "a" and returns "aa".</span></span> <span data-ttu-id="9f456-175">第四个匹配尝试结束的地方开始第三个匹配项之前第二个"b"，, 并返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-175">The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string.</span></span> <span data-ttu-id="9f456-176">第五个匹配尝试再次前移一个字符，以便它在第三个"b"之前开始，并返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-176">The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string.</span></span> <span data-ttu-id="9f456-177">第六个匹配项之后在最后一个"b"开始，并且再次返回空字符串。</span><span class="sxs-lookup"><span data-stu-id="9f456-177">The sixth match begins after the last "b" and returns an empty string again.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement"><span data-ttu-id="9f456-178">要使用的替换模式。</span><span class="sxs-lookup"><span data-stu-id="9f456-178">The replacement pattern to use.</span></span></param>
        <summary><span data-ttu-id="9f456-179">返回对指定替换模式的扩展。</span><span class="sxs-lookup"><span data-stu-id="9f456-179">Returns the expansion of the specified replacement pattern.</span></span></summary>
        <returns><span data-ttu-id="9f456-180"><paramref name="replacement" /> 参数的扩展版本。</span><span class="sxs-lookup"><span data-stu-id="9f456-180">The expanded version of the <paramref name="replacement" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f456-181">而<xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType>方法会在输入字符串中的所有匹配项替换为指定的替换模式中，<xref:System.Text.RegularExpressions.Match.Result%2A>方法会单个匹配项替换为指定的替换模式。</span><span class="sxs-lookup"><span data-stu-id="9f456-181">Whereas the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> method replaces all matches in an input string with a specified replacement pattern, the <xref:System.Text.RegularExpressions.Match.Result%2A> method replaces a single match with a specified replacement pattern.</span></span> <span data-ttu-id="9f456-182">因为它对单个匹配项时，还有可能对匹配的字符串执行处理，然后才能调用<xref:System.Text.RegularExpressions.Match.Result%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9f456-182">Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <xref:System.Text.RegularExpressions.Match.Result%2A> method.</span></span>  
  
 <span data-ttu-id="9f456-183">`replacement`参数是标准的正则表达式替换模式。</span><span class="sxs-lookup"><span data-stu-id="9f456-183">The `replacement` parameter is a standard regular expression replacement pattern.</span></span> <span data-ttu-id="9f456-184">它可由原义字符和正则表达式替换项组成。</span><span class="sxs-lookup"><span data-stu-id="9f456-184">It can consist of literal characters and regular expression substitutions.</span></span> <span data-ttu-id="9f456-185">有关详细信息，请参阅[替换](~/docs/standard/base-types/substitutions-in-regular-expressions.md)。</span><span class="sxs-lookup"><span data-stu-id="9f456-185">For more information, see [Substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f456-186">下面的示例替换开始和结束带括号带括号的表达式的连字符。</span><span class="sxs-lookup"><span data-stu-id="9f456-186">The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 <span data-ttu-id="9f456-187">正则表达式模式 `--(.+?)--` 的含义如下表所示。</span><span class="sxs-lookup"><span data-stu-id="9f456-187">The regular expression pattern `--(.+?)--` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="9f456-188">模式</span><span class="sxs-lookup"><span data-stu-id="9f456-188">Pattern</span></span>|<span data-ttu-id="9f456-189">描述</span><span class="sxs-lookup"><span data-stu-id="9f456-189">Description</span></span>|  
|-------------|-----------------|  
|`--`|<span data-ttu-id="9f456-190">匹配两个连字符。</span><span class="sxs-lookup"><span data-stu-id="9f456-190">Match two hyphens.</span></span>|  
|`(.+?)`|<span data-ttu-id="9f456-191">一个或多个次多次，但次数少尽可能匹配任何字符。</span><span class="sxs-lookup"><span data-stu-id="9f456-191">Match any character one or more times, but as few times as possible.</span></span> <span data-ttu-id="9f456-192">这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="9f456-192">This is the first capturing group.</span></span>|  
|`--`|<span data-ttu-id="9f456-193">匹配两个连字符。</span><span class="sxs-lookup"><span data-stu-id="9f456-193">Match two hyphens.</span></span>|  
  
 <span data-ttu-id="9f456-194">请注意，正则表达式模式`--(.+?)--`使用惰性限定符一起`+?`。</span><span class="sxs-lookup"><span data-stu-id="9f456-194">Note that the regular expression pattern `--(.+?)--` uses the lazy quantifier `+?`.</span></span> <span data-ttu-id="9f456-195">如果贪婪限定符`+`使用相反，正则表达式引擎将输入字符串中查找单个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9f456-195">If the greedy quantifier `+` were used instead, the regular expression engine would find only a single match in the input string.</span></span>  
  
 <span data-ttu-id="9f456-196">替换字符串`($1)`括在括号中的第一个捕获组替换匹配项。</span><span class="sxs-lookup"><span data-stu-id="9f456-196">The replacement string `($1)` replaces the match with the first captured group, which is enclosed in parentheses.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f456-197"><paramref name="replacement" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f456-197"><paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9f456-198">不允许对此模式进行扩展。</span><span class="sxs-lookup"><span data-stu-id="9f456-198">Expansion is not allowed for this pattern.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner"><span data-ttu-id="9f456-199">与预期匹配等效的正则表达式匹配。</span><span class="sxs-lookup"><span data-stu-id="9f456-199">A regular expression match equivalent to the one expected.</span></span></param>
        <summary><span data-ttu-id="9f456-200">返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" /> 实例，该实例适合在多个线程间共享。</span><span class="sxs-lookup"><span data-stu-id="9f456-200">Returns a <see cref="T:System.Text.RegularExpressions.Match" /> instance equivalent to the one supplied that is suitable to share between multiple threads.</span></span></summary>
        <returns><span data-ttu-id="9f456-201">适合在多个线程间共享的正则表达式匹配。</span><span class="sxs-lookup"><span data-stu-id="9f456-201">A regular expression match that is suitable to share between multiple threads.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f456-202"><paramref name="inner" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f456-202"><paramref name="inner" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>