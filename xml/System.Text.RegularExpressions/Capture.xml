<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c97593c82b72397c42d3d64ff78e34c8ee2870d" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52352434" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示来自单个成功子表达式捕获的结果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Text.RegularExpressions.Capture>对象是不可变，并且没有公共构造函数。 通过返回实例<xref:System.Text.RegularExpressions.CaptureCollection>对象，该返回的对象`Match.Captures`和<xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType>属性。 但是，`Match.Captures`属性提供相同的匹配项有关的信息<xref:System.Text.RegularExpressions.Match>对象。  
  
 如果不适用于捕获组<xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType>属性返回<xref:System.Text.RegularExpressions.CaptureCollection>与单个<xref:System.Text.RegularExpressions.Capture>提供相同的捕获有关的信息的对象<xref:System.Text.RegularExpressions.Group>对象。 如果您对一个捕获组应用限定符`Group.Index`， `Group.Length`，并`Group.Value`属性提供仅有关最后捕获的组的信息，而<xref:System.Text.RegularExpressions.Capture>中的对象<xref:System.Text.RegularExpressions.CaptureCollection>提供所有信息捕获子表达式。 说明如示例所示。  
  
   
  
## Examples  
 下面的示例定义正则表达式匹配包含除句点以外没有标点符号的句子 ("。")。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 正则表达式模式 `((\w+)[\s.])+` 的定义如下表所示。 请注意，在此正则表达式，限定符 （+） 应用于整个正则表达式。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w+)`|匹配一个或多个单词字符。 这是第二个捕获组。|  
|`[\s.])`|匹配空白字符或句点 ("。")。|  
|`((\w+)[\s.])`|匹配一个或多个单词字符后跟空白字符或句点 ("。")。 这是第一个捕获组。|  
|`((\w+)[\s.])+`|匹配一个或多个单词字符或字符后跟空白字符或句点 ("。")。|  
  
 在此示例中，输入的字符串包含两个句子。 如输出所示，第一个句子包含只有一个单词，因此<xref:System.Text.RegularExpressions.CaptureCollection>对象具有单个<xref:System.Text.RegularExpressions.Capture>对象，表示相同的捕获<xref:System.Text.RegularExpressions.Group>对象。 第二个句子包含多个单词，因此<xref:System.Text.RegularExpressions.Group>对象只包含有关最后一个匹配的子表达式的信息。 组 1，表示第一次捕获，包含用于关闭周期的句子中最后一个单词。 组 2，它表示第二个捕获，包含该句中最后一个单词。 但是，<xref:System.Text.RegularExpressions.Capture>组中的对象<xref:System.Text.RegularExpressions.CaptureCollection>对象捕获每个的子表达式匹配项。 <xref:System.Text.RegularExpressions.Capture>的捕获的第一个捕获组的集合中的对象包含有关每个已捕获的单词以及空白字符或句号的信息。 <xref:System.Text.RegularExpressions.Capture>的捕获的第二个捕获组的集合中的对象包含有关每个已捕获的单词的信息。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>原始字符串中发现捕获的子字符串的第一个字符的位置。</summary>
        <value>原始字符串中发现捕获的子字符串的从零开始的起始位置。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取捕获的子字符串的长度。</summary>
        <value>捕获的子字符串的长度。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过调用 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 属性，从输入的字符串中检索捕获的子字符串。</summary>
        <returns>通过匹配捕获的子字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString` 是实际的内部调用到<xref:System.Text.RegularExpressions.Capture.Value%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取输入的字符串中的捕获的子字符串。</summary>
        <value>通过匹配捕获的子字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调用<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>或<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>方法无法找到匹配项，则返回的值`Match.Value`属性是<xref:System.String.Empty?displayProperty=nameWithType>。 如果正则表达式引擎不能与捕获组匹配。 所返回的值`Group.Value`属性是<xref:System.String.Empty?displayProperty=nameWithType>。 请参阅说明第二个示例。  
  
   
  
## Examples  
 下面的示例定义正则表达式匹配包含除句点以外没有标点符号的句子 ("。")。 `Match.Value`属性将显示结果字符串，其中包括匹配句子中，每个匹配项。 `Group.Value`属性将显示每个捕获组的结果字符串; 它包含由该捕获组捕获的最后一个字符串。 <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType>属性将显示每个捕获的结果字符串。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 正则表达式模式 `((\w+)[\s.])+` 的定义如下表所示。 请注意，在此正则表达式，限定符 （+） 应用于整个正则表达式。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w+)`|匹配一个或多个单词字符。 这是第二个捕获组。|  
|`[\s.])`|匹配空白字符或句点 ("。")。|  
|`((\w+)[\s.])`|匹配一个或多个单词字符后跟空白字符或句点 ("。")。 这是第一个捕获组。|  
|`((\w+)[\s.])+`|匹配一个或多个单词字符或字符后跟空白字符或句点 ("。")。|  
  
 在此示例中，输入的字符串包含两个句子。 如输出所示，第一个句子包含只有一个单词，因此<xref:System.Text.RegularExpressions.CaptureCollection>对象具有单个<xref:System.Text.RegularExpressions.Capture>对象，表示相同的捕获<xref:System.Text.RegularExpressions.Group>对象。 第二个句子包含多个单词，因此<xref:System.Text.RegularExpressions.Group>对象只包含有关最后一个匹配的子表达式的信息。 组 1，表示第一次捕获，包含用于关闭周期的句子中最后一个单词。 组 2，它表示第二个捕获，包含该句中最后一个单词。 但是，<xref:System.Text.RegularExpressions.Capture>组中的对象<xref:System.Text.RegularExpressions.CaptureCollection>对象捕获每个的子表达式匹配项。 <xref:System.Text.RegularExpressions.Capture>的捕获的第一个捕获组的集合中的对象包含有关每个已捕获的单词以及空白字符或句号的信息。 <xref:System.Text.RegularExpressions.Capture>的捕获的第二个捕获组的集合中的对象包含有关每个已捕获的单词的信息。  
  
 下面的示例使用的正则表达式模式`^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`，以匹配由句点分隔的两个部分组成的产品号。 这两个部分包含字母字符后跟可选的数字。 因为第一个输入的字符串与模式，所返回的值不匹配<xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType>对象的`Value`属性是<xref:System.String.Empty?displayProperty=nameWithType>。 同样，当正则表达式模式不能与捕获组，相应的值匹配时<xref:System.Text.RegularExpressions.Group>对象的`Value`属性是<xref:System.String.Empty?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 正则表达式模式的定义如下表所示：  
  
|模式|描述|  
|-------------|-----------------|  
|`^`|从字符串开头开始匹配。|  
|`([a-z]+)`|匹配一个或多个匹配项的从任意字符到 z。 由于传递正则表达式引擎<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>选项时，此比较不区分大小写。 这是第一个捕获组。|  
|`(\d+)?`|匹配零个或一个匹配项的一个或多个十进制数字。 这是第二个捕获组。|  
|`\.`|匹配文本句点字符。|  
|`([a-z]+`|匹配一个或多个匹配项的从任意字符到 z。 比较不区分大小写。|  
|`(\d)*`|匹配零个或多个十进制数字。 匹配一位数是第四个捕获组。|  
|`([a-z]+(\d)*)`|匹配一个或多个字母字符到 z 后跟零个、 一个或多个十进制数。 这是第四个捕获组。|  
|`$`|得出结论： 在字符串的末尾匹配。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>