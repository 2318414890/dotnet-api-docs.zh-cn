<Type Name="GroupCollection" FullName="System.Text.RegularExpressions.GroupCollection">
  <TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="fa5d2-101">返回一次匹配中捕获的组的集。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-101">Returns the set of captured groups in a single match.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa5d2-102"><xref:System.Text.RegularExpressions.GroupCollection>类是从零开始的集合类包含一个或多个<xref:System.Text.RegularExpressions.Group>提供了一些信息的对象已捕获的组中的正则表达式匹配项。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-102">The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match.</span></span> <span data-ttu-id="fa5d2-103">该集合是不可变 （只读） 并且没有公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-103">The collection is immutable (read-only) and has no public constructor.</span></span> <span data-ttu-id="fa5d2-104">A<xref:System.Text.RegularExpressions.GroupCollection>会返回对象<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-104">A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="fa5d2-105">集合包含一个或多个<xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType>对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-105">The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objects.</span></span> <span data-ttu-id="fa5d2-106">如果匹配成功，包含集合中的第一个元素<xref:System.Text.RegularExpressions.Group>对应于整个匹配项的对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-106">If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match.</span></span> <span data-ttu-id="fa5d2-107">每个后续元素表示一个捕获的组，如果正则表达式包括捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-107">Each subsequent element represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="fa5d2-108">从编号 （未命名） 的捕获组的匹配项将显示在之前的匹配项的数字顺序从命名的捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-108">Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</span></span> <span data-ttu-id="fa5d2-109">如果匹配不成功，则集合包含单个<xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType>对象，其<xref:System.Text.RegularExpressions.Group.Success%2A>属性是`false`并且其<xref:System.Text.RegularExpressions.Capture.Value%2A>属性等于<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-109">If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fa5d2-110">有关详细信息，请参阅中的"分组构造和正则表达式对象"一节[分组构造](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)文章。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-110">For more information, see the "Grouping Constructs and Regular Expression Objects" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
 <span data-ttu-id="fa5d2-111">若要循环访问集合的成员，应使用由你的语言提供的集合迭代构造 (如`foreach`在 C# 和`For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="fa5d2-111">To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="fa5d2-112">在 Visual Basic 中) 而不是检索的枚举器返回<xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-112">in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method.</span></span> <span data-ttu-id="fa5d2-113">此外，你可以访问各个已编号的捕获的组从<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29>属性 （索引器在 C# 中），并且可以访问各个已命名的捕获的组从<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29>属性。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-113">In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property.</span></span> <span data-ttu-id="fa5d2-114">请注意，你可以检索通过调用包含数字和所有捕获的组名称的数组<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>和<xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-114">Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> methods, respectively.</span></span> <span data-ttu-id="fa5d2-115">两个实例方法，并需要您实例化<xref:System.Text.RegularExpressions.Regex>表示要匹配的正则表达式的对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-115">Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa5d2-116">下面的示例使用正则表达式捕获组来提取有关商标和注册的商标文本中使用信息。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-116">The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text.</span></span> <span data-ttu-id="fa5d2-117">正则表达式模式`\b(\w+?)([\u00AE\u2122])`，这可以解释为下表中所示。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-117">The regular expression pattern is `\b(\w+?)([\u00AE\u2122])`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="fa5d2-118">模式</span><span class="sxs-lookup"><span data-stu-id="fa5d2-118">Pattern</span></span>|<span data-ttu-id="fa5d2-119">描述</span><span class="sxs-lookup"><span data-stu-id="fa5d2-119">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="fa5d2-120">查找在单词边界。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-120">Look for a word boundary.</span></span>|  
|`(\w+?)`|<span data-ttu-id="fa5d2-121">查找一个或多个单词字符。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-121">Look for one or more word characters.</span></span> <span data-ttu-id="fa5d2-122">在一起，这些对象会形成商标字的名称。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-122">Together, these form the trademarked name.</span></span> <span data-ttu-id="fa5d2-123">（请注意，此正则表达式假定商标包含单个单词。）这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-123">(Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.</span></span>|  
|`([\u00AE\u2122])`|<span data-ttu-id="fa5d2-124">查找这两® 或™ 字符。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-124">Look for either the ® or the ™ character.</span></span> <span data-ttu-id="fa5d2-125">这是第二个捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-125">This is the second capturing group.</span></span>|  
  
 <span data-ttu-id="fa5d2-126">对于每个匹配项，<xref:System.Text.RegularExpressions.GroupCollection>包含三种<xref:System.Text.RegularExpressions.Group>对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-126">For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects.</span></span> <span data-ttu-id="fa5d2-127">第一个对象包含与整个正则表达式匹配的字符串。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-127">The first object contains the string that matches the entire regular expression.</span></span> <span data-ttu-id="fa5d2-128">第二个对象，它表示第一个捕获的组，包含产品名称。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-128">The second object, which represents the first captured group, contains the product name.</span></span> <span data-ttu-id="fa5d2-129">第三个对象，它表示第二个捕获的组，包含商标或注册商标符号。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-129">The third object, which represents the second captured group, contains the trademark or registered trademark symbol.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.Group" />
  </Docs>
  <Members>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="fa5d2-130">要将集合复制到其中的数组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-130">The array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="fa5d2-131">目标数组中开始复制的位置。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-131">The position in the destination array where the copying is to begin.</span></span></param>
        <summary><span data-ttu-id="fa5d2-132">将集合的所有元素复制到给定数组中（从给定索引处开始）。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-132">Copies all the elements of the collection to the given array beginning at the given index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa5d2-133">整个集合复制到数组中从给定索引处开始，因为目标数组都必须具有至少与集合一样大。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-133">Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="fa5d2-134">此成员中不存在[!INCLUDE[net_portable](~/includes/net-portable-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-134">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="fa5d2-135">如果你正在开发应用程序面向[!INCLUDE[net_portable](~/includes/net-portable-md.md)]，使用<xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-135">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> method instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa5d2-136">下面的示例从一个句子中提取每个单词，并在捕获组中，捕获该<xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A>方法然后用于每个匹配项中的元素复制<xref:System.Text.RegularExpressions.GroupCollection>从所有匹配项进行分组到一个数组，包含捕获的对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-136">The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches.</span></span> <span data-ttu-id="fa5d2-137">捕获的各个单词将显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-137">The individual captured words are then displayed to the console.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  
  
 <span data-ttu-id="fa5d2-138">正则表达式定义，如下所示：</span><span class="sxs-lookup"><span data-stu-id="fa5d2-138">The regular expression is defined as follows:</span></span>  
  
|<span data-ttu-id="fa5d2-139">模式</span><span class="sxs-lookup"><span data-stu-id="fa5d2-139">Pattern</span></span>|<span data-ttu-id="fa5d2-140">描述</span><span class="sxs-lookup"><span data-stu-id="fa5d2-140">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="fa5d2-141">与字边界匹配。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-141">Match a word boundary.</span></span>|  
|`(\S+?)`|<span data-ttu-id="fa5d2-142">匹配一个或多个非空白字符。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-142">Match one or more non-white space characters.</span></span> <span data-ttu-id="fa5d2-143">将它们分配给第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-143">Assign them to the first capturing group.</span></span>|  
|`\b`|<span data-ttu-id="fa5d2-144">与字边界匹配。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-144">Match a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fa5d2-145"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-145"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="fa5d2-146"><paramref name="arrayIndex" /> 在 <paramref name="array" /> 的界限外。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-146"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="fa5d2-147">或</span><span class="sxs-lookup"><span data-stu-id="fa5d2-147">-or-</span></span>  
  
 <span data-ttu-id="fa5d2-148"><paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 在 <paramref name="array" /> 的界限外。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-148"><paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Text.RegularExpressions.Group[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Group(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Text::RegularExpressions::Group ^&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Text.RegularExpressions.Group[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa5d2-149">返回集合中的组数。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-149">Returns the number of groups in the collection.</span></span></summary>
        <value><span data-ttu-id="fa5d2-150">集合中的组数。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-150">The number of groups in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa5d2-151"><xref:System.Text.RegularExpressions.GroupCollection>对象始终包含至少一个成员。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-151">The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member.</span></span> <span data-ttu-id="fa5d2-152">如果成功，则匹配<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>属性返回<xref:System.Text.RegularExpressions.GroupCollection>包含单个成员的对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-152">If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fa5d2-153">提供一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-153">Provides an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="fa5d2-154">一个枚举器，其中包含 <see cref="T:System.Text.RegularExpressions.Group" /> 中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-154">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa5d2-155">而不是调用<xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A>方法来检索的枚举数可以循环访问<xref:System.Text.RegularExpressions.Group>对象在集合中，应使用的组迭代构造 (如`foreach`在 C# 和`For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="fa5d2-155">Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="fa5d2-156">在 Visual Basic 中) 是由您的编程语言提供。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-156">in Visual Basic) that is provided by your programming language.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa5d2-157">获取一个值，指示集合是否为只读集合。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-157">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value>
          <span data-ttu-id="fa5d2-158">在所有情况下均为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-158"><see langword="true" /> in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa5d2-159">获取一个值，该值指示是否同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-159">Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).</span></span></summary>
        <value>
          <span data-ttu-id="fa5d2-160">在所有情况下均为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-160"><see langword="false" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="fa5d2-161">此成员中不存在[!INCLUDE[net_portable](~/includes/net-portable-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-161">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="fa5d2-162">如果你正在开发应用程序面向[!INCLUDE[net_portable](~/includes/net-portable-md.md)]，使用<xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType>属性改为。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-162">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa5d2-163">允许通过整数索引或字符串索引访问集合的单个成员。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-163">Enables access to a single member of the collection by integer or string index.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[int groupnum] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupnum As Integer) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[int] { System::Text::RegularExpressions::Group ^ get(int groupnum); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupnum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupnum"><span data-ttu-id="fa5d2-164">要检索的集合成员的索引（从零开始）。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-164">The zero-based index of the collection member to be retrieved.</span></span></param>
        <summary><span data-ttu-id="fa5d2-165">允许通过整数索引访问集合成员。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-165">Enables access to a member of the collection by integer index.</span></span></summary>
        <value><span data-ttu-id="fa5d2-166">由 <paramref name="groupnum" /> 指定的集合的成员。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-166">The member of the collection specified by <paramref name="groupnum" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa5d2-167"><xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29>属性为 （在 C# 中) 的索引或的默认属性 （在 Visual Basic 中)<xref:System.Text.RegularExpressions.GroupCollection>类。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-167">The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class.</span></span> <span data-ttu-id="fa5d2-168">它允许你通过使用枚举集合的成员`foreach`C# 中的语句或`For Each`在 Visual Basic 中的语句。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-168">It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.</span></span>  
  
 <span data-ttu-id="fa5d2-169">此属性还可用于按其索引号检索单个捕获的组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-169">You can also use this property to retrieve individual captured groups by their index number.</span></span> <span data-ttu-id="fa5d2-170">你可以检索通过调用该实例包含正则表达式中的所有捕获组的数字的数组<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-170">You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fa5d2-171">你还可以将命名的捕获组通过调用实例映射到其数字<xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-171">You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="fa5d2-172">你可以通过检索的值确定集合中的项的数目<xref:System.Text.RegularExpressions.GroupCollection.Count%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-172">You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property.</span></span> <span data-ttu-id="fa5d2-173">有效值为`groupnum`参数范围从 0 到减 1 所得的集合中的项数。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-173">Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.</span></span>  
  
 <span data-ttu-id="fa5d2-174"><xref:System.Text.RegularExpressions.GroupCollection>返回对象<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>属性始终具有至少一个成员。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-174">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property always has at least one member.</span></span> <span data-ttu-id="fa5d2-175">如果正则表达式引擎找不到任何匹配项，在特定的输入字符串中单个<xref:System.Text.RegularExpressions.Group>集合中的对象具有其<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>属性设置为`false`及其`Group.Value`属性设置为<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-175">If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="fa5d2-176">如果`groupnum`不是索引的一个成员的集合，或者如果`groupnum`是具有不在中找到匹配输入字符串，该方法返回的捕获组的索引<xref:System.Text.RegularExpressions.Group>对象，其<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>属性是`false`并且其`Group.Value`属性是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-176">If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa5d2-177">下面的示例定义所组成的两个带编号的组的正则表达式。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-177">The following example defines a regular expression that consists of two numbered groups.</span></span> <span data-ttu-id="fa5d2-178">第一个组捕获一个或多个连续的数字。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-178">The first group captures one or more consecutive digits.</span></span> <span data-ttu-id="fa5d2-179">第二个组匹配单个字符。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-179">The second group matches a single character.</span></span> <span data-ttu-id="fa5d2-180">因为正则表达式引擎查找第一个组的零个或一个匹配项时，它不会不始终发现匹配项即使正则表达式匹配成功。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-180">Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful.</span></span> <span data-ttu-id="fa5d2-181">该示例然后阐释结果时<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29>属性用于检索不匹配的组、 匹配的组和正则表达式中未定义的组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-181">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="fa5d2-182">该示例定义正则表达式模式`(\d+)*(\w)\2`，这可以解释为下表中所示。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-182">The example defines a regular expression pattern `(\d+)*(\w)\2`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="fa5d2-183">模式</span><span class="sxs-lookup"><span data-stu-id="fa5d2-183">Pattern</span></span>|<span data-ttu-id="fa5d2-184">描述</span><span class="sxs-lookup"><span data-stu-id="fa5d2-184">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)*`|<span data-ttu-id="fa5d2-185">匹配一个或多个匹配项的一个十进制数字。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-185">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="fa5d2-186">这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-186">This is the first capturing group.</span></span> <span data-ttu-id="fa5d2-187">与此模式匹配零个或一个时间。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-187">Match this pattern either zero or one time.</span></span>|  
|`(\w)`|<span data-ttu-id="fa5d2-188">这是第二个捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-188">This is the second capturing group.</span></span>|  
|`\k`|<span data-ttu-id="fa5d2-189">与第二个捕获组捕获的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-189">Match the string captured by the second capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[string groupname] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupname As String) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[System::String ^] { System::Text::RegularExpressions::Group ^ get(System::String ^ groupname); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupname"><span data-ttu-id="fa5d2-190">捕获组的名称。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-190">The name of a capturing group.</span></span></param>
        <summary><span data-ttu-id="fa5d2-191">允许通过字符串索引访问集合成员。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-191">Enables access to a member of the collection by string index.</span></span></summary>
        <value><span data-ttu-id="fa5d2-192">由 <paramref name="groupname" /> 指定的集合的成员。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-192">The member of the collection specified by <paramref name="groupname" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa5d2-193">`groupName` 可以通过定义的捕获组名`(?<`*名称*`>)`正则表达式或由一组定义的捕获组数的字符串表示形式中的元素构造。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-193">`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</span></span> <span data-ttu-id="fa5d2-194">有关正则表达式中的组的详细信息，请参阅[分组构造](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-194">For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="fa5d2-195">你可以检索中的所有捕获组的名称<xref:System.Text.RegularExpressions.Regex>对象通过调用<xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-195">You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fa5d2-196">您还可以映射通过调用捕获其名称的正则表达式中的组数字<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-196">You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fa5d2-197">然后，从数组的各个名称可以传递给<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29>属性来检索捕获的字符串。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-197">Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.</span></span>  
  
 <span data-ttu-id="fa5d2-198">如果`groupname`不是在集合中，捕获组的名称或如果`groupname`是具有不在中找到匹配输入字符串，该方法返回的捕获组的名称<xref:System.Text.RegularExpressions.Group>对象，其<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>属性是`false`并且其`Group.Value`属性是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-198">If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa5d2-199">下面的示例定义所组成的两个已命名的组的正则表达式。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-199">The following example defines a regular expression that consists of two named groups.</span></span> <span data-ttu-id="fa5d2-200">第一个组， `numbers`，捕获一个或多个连续的数字。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-200">The first group, `numbers`, captures one or more consecutive digits.</span></span> <span data-ttu-id="fa5d2-201">第二个组中， `letter`，单个字符匹配。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-201">The second group, `letter`, matches a single character.</span></span> <span data-ttu-id="fa5d2-202">因为正则表达式引擎将查找的零个或一个匹配项的定义的模式`numbers`组，`numbers`组并不总是存在即使匹配是否成功。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-202">Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful.</span></span> <span data-ttu-id="fa5d2-203">该示例然后阐释结果时<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29>属性用于检索不匹配的组、 匹配的组和正则表达式中未定义的组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-203">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="fa5d2-204">该示例定义正则表达式模式`(?<numbers>\d+)*(?<letter>\w)\k<letter>`，这可以解释为下表中所示。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-204">The example defines a regular expression pattern `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="fa5d2-205">模式</span><span class="sxs-lookup"><span data-stu-id="fa5d2-205">Pattern</span></span>|<span data-ttu-id="fa5d2-206">描述</span><span class="sxs-lookup"><span data-stu-id="fa5d2-206">Description</span></span>|  
|-------------|-----------------|  
|`(?<numbers>\d+)*`|<span data-ttu-id="fa5d2-207">匹配一个或多个匹配项的一个十进制数字。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-207">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="fa5d2-208">命名此`numbers`捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-208">Name this the `numbers` capturing group.</span></span> <span data-ttu-id="fa5d2-209">与此模式匹配零个或一个时间。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-209">Match this pattern either zero or one time.</span></span>|  
|`(?<letter>\w)`|<span data-ttu-id="fa5d2-210">匹配单个单词字符。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-210">Match a single word character.</span></span> <span data-ttu-id="fa5d2-211">命名此`letter`捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-211">Name this the `letter` capturing group.</span></span>|  
|`\k<letter>`|<span data-ttu-id="fa5d2-212">匹配由捕获的字符串`letter`捕获组。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-212">Match the string captured by the `letter` capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa5d2-213">获取可用于同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-213">Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></summary>
        <value><span data-ttu-id="fa5d2-214">要同步的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的副本。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-214">A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="fa5d2-215">此成员中不存在[!INCLUDE[net_portable](~/includes/net-portable-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-215">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="fa5d2-216">如果你正在开发应用程序面向[!INCLUDE[net_portable](~/includes/net-portable-md.md)]，使用<xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType>属性改为。</span><span class="sxs-lookup"><span data-stu-id="fa5d2-216">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Add (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Add(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As Group) Implements ICollection(Of Group).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of Group).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Contains (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Contains(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Group) As Boolean Implements ICollection(Of Group).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Remove (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Remove(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As Group) As Boolean Implements ICollection(Of Group).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt; IEnumerable&lt;Group&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Text.RegularExpressions.Group&gt; System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Text#RegularExpressions#Group&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Group) Implements IEnumerable(Of Group).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Text::RegularExpressions::Group ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Group&gt;.IndexOf (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#IndexOf(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Group) As Integer Implements IList(Of Group).IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.Insert (int index, System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int32 index, class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Insert(System.Int32,System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Group) Implements IList(Of Group).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int index, System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item">
      <MemberSignature Language="C#" Value="System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Group Implements IList(Of Group).Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Text::RegularExpressions::Group ^ System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int] { System::Text::RegularExpressions::Group ^ get(int index); void set(int index, System::Text::RegularExpressions::Group ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of Group).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>