<Type Name="SrgsRule" FullName="System.Speech.Recognition.SrgsGrammar.SrgsRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="307e4841afae122a83c6584e1ea3f426c3a238af" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33680999" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsRule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsRule" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Rule={_id.ToString()} Scope={_scope.ToString()}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Speech.Recognition.SrgsGrammar.SrgsRule/SrgsRuleDebugDisplay))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示语法规则。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>类在运行时创建新规则，或在运行时修改的现有语法流或文件中的规则。  
  
 单词和短语由指定<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>在语法中所定义的对象<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>实例限制语音识别器必须能够识别的输入。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象指定在其中的单词和短语必须要朗读通过排序包含它们的对象的序列。 单词和短语规则中的表示由对象如<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>，和<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>元素。 使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A>属性来访问的子集合对象<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象包含。  
  
 你可以确定是否<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>可以通过将设置指定在从外部语法中的规则的规则引用其<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope%2A>属性。  
  
 它是不合法定义<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>，它是空的或者仅包含空格。  
  
 此类表示`rule`World Wide Web 联合会 (W3C) 中定义的元素[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)。 璝惠 SRGS`rule`元素以及它支持通过 System.Speech，有关详细信息请参阅[规则元素](http://msdn.microsoft.com/library/da67b4aa-0545-426a-a02f-1417b968021e)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsRule (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsRule(System::String ^ id);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">规则的标识符。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> 类和指定规则的标识符的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.%23ctor%2A>构造函数初始化<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A>属性。 标识符必须是在给定的语法中是唯一的。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.%23ctor%2A>构造函数引发<xref:System.FormatException>出现下列情况：  
  
-   `id` 不是有效的 XML 名称中定义[可扩展标记语言 (XML) 1.0 （第 5 版）](https://www.w3.org/TR/REC-xml/)。 来解答问题此定义，有效的 XML 名称必须以字母、 下划线 ('_') 或冒号开头 (:) 后, 跟零个或多个 NameChar 字符 （也在 XML 规范中定义）。  
  
-   `id` 为"NULL"或"VOID"或"垃圾"。  
  
-   `id` 包含至少一个无效的规则 ID 字符。 这些字符:？，*，+、&#124;，（'，'），^，'$'、 '/'，';'，'。，'='\<，>，[，]，{，} '，'\\\\'，' '，'\t'、 '\r 和 \n。  
  
   
  
## Examples  
 下面的示例创建识别短语语法"赢得了世界杯 nation is"跟赢得了世界杯的国家/地区的名称。 该示例创建<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象名为`winnerRule`并传递在标识符中`WorldCupWinner`作为<xref:System.String>。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>对象包含的数组新<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>包含可选方案可供无法识别的规则的对象。  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the world cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> 为空。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="id" /> 不是正确的规则标识符。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsRule (string id, params System.Speech.Recognition.SrgsGrammar.SrgsElement[] elements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string id, class System.Speech.Recognition.SrgsGrammar.SrgsElement[] elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String,System.Speech.Recognition.SrgsGrammar.SrgsElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (id As String, ParamArray elements As SrgsElement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsRule(System::String ^ id, ... cli::array &lt;System::Speech::Recognition::SrgsGrammar::SrgsElement ^&gt; ^ elements);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="elements" Type="System.Speech.Recognition.SrgsGrammar.SrgsElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="id">规则的标识符。</param>
        <param name="elements">一个由 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" /> 元素组成的数组。</param>
        <summary>从 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" /> 对象的数组初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.%23ctor%2A>构造函数初始化<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A>属性。 标识符必须是在给定的语法中是唯一的。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.%23ctor%2A>构造函数引发<xref:System.FormatException>出现下列情况：  
  
-   `id` 不是有效的 XML 名称中定义[可扩展标记语言 (XML) 1.0 （第 5 版）](https://www.w3.org/TR/REC-xml/)。 来解答问题此定义，有效的 XML 名称必须以字母、 下划线 ('_') 或冒号开头 (:) 后, 跟零个或多个 NameChar 字符 （也在 XML 规范中定义）。  
  
-   `id` 为"NULL"或"VOID"或"垃圾"。  
  
-   `id` 包含至少一个无效的规则 ID 字符。 这些字符:？，*，+、&#124;，（'，'），^，'$'、 '/'，';'，'。，'='\<，>，[，]，{，} '，'\\\\'，' '，'\t'、 '\r 和 \n。  
  
   
  
## Examples  
 下面的示例创建识别短语语法"赢得了世界杯 nation is"跟赢得了世界杯的国家/地区的名称。 该示例创建一个名为的公共规则`WorldCupWinner`。 然后，该示例创建两个<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象，`ruleEurope`和`ruleSAmerica`，并传入<xref:System.String>规则标识符和<xref:System.Speech.Recognition.SrgsGrammar.SrgsElement>数组，包含<xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>对象。 随后，该示例将添加到规则引用`ruleEurope`和`ruleSAmerica`从规则`WorldCupWinner`。  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  // Create a grammar from an SRGSDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument srgsGrammar = new SrgsDocument ();  
  SrgsRule winnerRule = new SrgsRule ("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add (new SrgsItem ("A nation that has won the world cup is"));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"), new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"), new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the grammar and make winnerRule  
  // the root rule of the grammar.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  srgsGrammar.Root = winnerRule;  
}  
```  
  
 创建的语法具有以下形式。  
  
```xml  
<grammar version="1.0" xml:lang="en-US" xmlns="http://www.w3.org/2001/06/grammar" root="WorldCupWinner">  
    <rule id="WorldCupWinner" scope="public">  
        <item> A nation that has won the world cup is </item>  
        <one-of>  
            <item>  
                <ruleref uri="#EuropeanNations" />  
            </item>  
            <item>  
                <ruleref uri="#SouthAmericanNations" />  
            </item>  
        </one-of>  
    </rule>  
    <rule id="EuropeanNations">  
        <one-of>  
            <item> England </item>  
            <item> France </item>  
            <item> Germany </item>  
            <item> Italy </item>  
        </one-of>  
    </rule>  
    <rule id="SouthAmericanNations">  
        <one-of>  
            <item> Argentina </item>  
            <item> Brazil </item>  
            <item> Uruguay </item>  
        </one-of>  
    </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 为 <see langword="null" />。  
  
 <paramref name="elements" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> 为空。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="id" /> 不是正确的规则标识符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Speech.Recognition.SrgsGrammar.SrgsElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.SrgsGrammar.SrgsElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsRule.Add(System.Speech.Recognition.SrgsGrammar.SrgsElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (element As SrgsElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Speech::Recognition::SrgsGrammar::SrgsElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Speech.Recognition.SrgsGrammar.SrgsElement" />
      </Parameters>
      <Docs>
        <param name="element">从 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" /> 继承并指定能识别的对象。</param>
        <summary>向 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" /> 对象添加一个 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 典型添<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象包括<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>，和<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>指定发言人可以说的对象。 一个有效规则元素必须包含至少一种可识别的文本或一个规则引用。 请参阅[创建语法使用 SrgsGrammar](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906)有关详细信息。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象也可能包含<xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag>和<xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>向规则添加语义值和语义的键的对象。 语音识别引擎将返回的语义信息，以及所识别的短语时它可以识别的短语。 请参阅[语义解释标记](http://msdn.microsoft.com/library/2e115391-73b3-4666-8fd1-540c529de3b0)有关详细信息。  
  
   
  
## Examples  
 下面的示例创建识别短语语法"赢得了世界杯 nation is"跟赢得了世界杯的国家/地区的名称。 在创建后<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象`winnerRule`并为其提供的字符串标识符`WorldCupWinner`，该示例使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Add%2A>方法以将字符串追加"赢得了世界杯 nation is"规则。 然后，示例创建两个其他规则，`ruleEurope`和`ruleSAmerica`。 再次使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Add%2A>方法，该示例将追加<xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>对象传递给`WorldCupWinner`包含对规则引用的规则`ruleEurope`和`ruleSAmerica`。  
  
```csharp  
// Create an SrgsDocument, create a new rule  
// and set its scope to public.  
SrgsDocument document = new SrgsDocument();  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
// Add the introduction.  
winnerRule.Elements.Add(new SrgsItem("A nation that has won the world cup is: "));  
  
// Create the rule for the European nations.  
SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"), new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
// Create the rule for the South American nations.  
SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"), new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
// Add references to winnerRule for ruleEurope and ruleSAmerica.  
winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
// Add all the rules to the document and make winnerRule   
// the root rule of the document.  
document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
document.Root = winnerRule;  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseClass">
      <MemberSignature Language="C#" Value="public string BaseClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseClass" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>目前不支持此属性。</summary>
        <value>不支持。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.SrgsGrammar.SrgsElement&gt; Elements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.SrgsGrammar.SrgsElement&gt; Elements" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elements As Collection(Of SrgsElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::SrgsGrammar::SrgsElement ^&gt; ^ Elements { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::SrgsGrammar::SrgsElement ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.SrgsGrammar.SrgsElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" /> 实例中 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> 对象的集合。</summary>
        <value>规则中元素的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的元素<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象可以包含<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>， <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag>，和<xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置规则的标识符。</summary>
        <value>规则的标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 规则的标识符是包含规则的名称的字符串。  
  
 用于设置一个值<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A>必须遵守以下规则：  
  
-   值必须是有效的 XML 名称中定义[可扩展标记语言 (XML) 1.0 （第 5 版）](https://www.w3.org/TR/REC-xml/)。 来解答问题此定义，有效的 XML 名称必须以字母、 下划线 ('_') 或冒号开头 (:) 后, 跟零个或多个 NameChar 字符 （也在 XML 规范中定义）。  
  
-   该值可以为"NULL"或"VOID"或"垃圾"。  
  
-   值不能包含任何无效的规则 ID 字符。 这些字符:？，*，+、&#124;，（'，'），^，'$'、 '/'，';'，'。，'='\<，>，[，]，{，} '，'\\\\'，' '，'\t'、 '\r 和 \n。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">尝试将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id" /> 设置为无效值。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public string OnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnError" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError" />
      <MemberSignature Language="VB.NET" Value="Public Property OnError As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OnError { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>目前不支持此属性。</summary>
        <value>不支持。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="public string OnInit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnInit" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" />
      <MemberSignature Language="VB.NET" Value="Public Property OnInit As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OnInit { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>目前不支持此属性。</summary>
        <value>不支持。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="public string OnParse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnParse" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse" />
      <MemberSignature Language="VB.NET" Value="Public Property OnParse As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OnParse { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>目前不支持此属性。</summary>
        <value>不支持。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRecognition">
      <MemberSignature Language="C#" Value="public string OnRecognition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnRecognition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition" />
      <MemberSignature Language="VB.NET" Value="Public Property OnRecognition As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OnRecognition { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>目前不支持此属性。</summary>
        <value>不支持。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scope">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRuleScope Scope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsRuleScope Scope" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope" />
      <MemberSignature Language="VB.NET" Value="Public Property Scope As SrgsRuleScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRuleScope Scope { System::Speech::Recognition::SrgsGrammar::SrgsRuleScope get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRuleScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRuleScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置是否可以为识别激活一条规则，以及此规则何时可由其他规则引用。</summary>
        <value>设置规则范围的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作用域的默认值是`Private`。 私有规则仅可以识别通过从其包含的语法中的根规则或从根规则引用的另一个规则的规则引用激活。 不能由外部的语法，引用专用的规则，除非私有规则被声明为其包含的语法的根规则。  
  
 如果其作用域设置为`Public`、<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>对象可以通过从引用激活进行识别<xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>对象在包含语法或从外部语法中的规则。  
  
   
  
## Examples  
 下面的示例创建识别短语语法"赢得了世界杯 nation is"跟赢得了世界杯的国家/地区的名称。 它将创建一个名为的公共规则`WorldCupWinner`，并将该规则的作用域设置为公共。  
  
```csharp  
// Create an SrgsDocument, create a new rule and set its scope to public.  
SrgsDocument document = new SrgsDocument();  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
// Add the introduction.  
winnerRule.Elements.Add(new SrgsItem("A nation that has won the world cup is: "));  
  
// Create the rule for the European nations.  
SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"), new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
// Create the rule for the South American nations.  
SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"), new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
// Add references to winnerRule for ruleEurope and ruleSAmerica.  
winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem (new SrgsRuleRef(ruleEurope)), new SrgsItem(new SrgsRuleRef(ruleSAmerica)})));  
  
// Add all the rules to the document and make winnerRule   
// the root rule of the document.  
document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
document.Root = winnerRule;  
```  
  
 创建的语法具有以下形式。  
  
```xml  
<grammar version="1.0" xml:lang="en-US" xmlns="http://www.w3.org/2001/06/grammar" root="WorldCupWinner">  
    <rule id="WorldCupWinner" scope="public">  
        <item> A nation that has won the world cup is </item>  
        <one-of>  
            <item>  
                <ruleref uri="#EuropeanNations" />  
            </item>  
            <item>  
                <ruleref uri="#SouthAmericanNations" />  
            </item>  
        </one-of>  
    </rule>  
    <rule id="EuropeanNations">  
        <one-of>  
            <item> England< /item>  
            <item> France </item>  
            <item> Germany </item>  
            <item> Italy </item>  
        </one-of>  
    </rule>  
    <rule id="SouthAmericanNations">  
        <one-of>  
            <item> Argentina </item>  
            <item> Brazil </item>  
            <item> Uruguay </item>  
        </one-of>  
    </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>目前不支持此属性。</summary>
        <value>不支持。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>