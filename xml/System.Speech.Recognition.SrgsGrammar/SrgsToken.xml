<Type Name="SrgsToken" FullName="System.Speech.Recognition.SrgsGrammar.SrgsToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77b77f058f82ea6c785de084d18f4dbb88a9e2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528521" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsToken : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsToken extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsToken&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsToken : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示能识别的单词或短语。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的成员<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>类，你可以指定词的三种形式：<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>窗体中，<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>窗体，并自定义<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>的单词。  
  
 如果多个字词存储在单个<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>对象，每个将被视为不同的标记，内部，然后在结果中。  
  
 此类表示`token`由万维网联合会 (W3C) 定义的元素[语音识别语法规范 (SRGS) 版本 1.0。](http://go.microsoft.com/fwlink/?LinkId=201761)。 璝惠 SRGS`token`元素以及它支持通过 System.Speech，有关详细信息请参阅[令牌元素](http://msdn.microsoft.com/library/3a9e8d64-7bd4-4188-a6f4-dbf28ea71632)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsToken (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsToken(System::String ^ text);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">新建 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> 类实例的文本。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> 类的新实例并指定要识别的文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>对象，其<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>属性最初设置的值为`text`参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="text" /> 为空。</exception>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public string Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Display" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Display { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置需朗读的文本的显示形式。</summary>
        <value>标记应显示的表示形式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管它们通常表示相同的值，但<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>窗体可能不同于<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>窗体中的单词或短语中<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>。 例如，显示窗体可能的首字母缩写，如"USA"时将使用的文本和向其<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>适用，是"美国"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> 设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">试图将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> 指定为空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置定义标记发音的字符串。</summary>
        <value>返回包含在 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" /> 中指定的语音字母表的电话的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 手机是语音的字母或描述声音的符号。 System.Speech 支持三个拼音字母表，用于指定自定义发音： 通用电话设置 (UPS)、 设置语音 API (SAPI) 电话时，和国际音标 (IPA)。 中指定手机<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>必须匹配拼音字母表中指定<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>。 请参阅[词典和拼音字母表](http://msdn.microsoft.com/library/435e3c6f-6834-4e5a-b0f6-c17b2275dc51)有关详细信息。  
  
 中指定手机<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>指示如何的内容<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>应成功识别发音。  语音识别引擎使用中指定的发音<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>以匹配的语音输入并返回该字符串包含由<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>识别结果中。  
  
 如果手机不可用空格分隔，或者指定的字符串包含无法识别的电话，识别引擎无法识别语法一样有效发音所包含的单词的发音指定的<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>。  
  
 中指定的发音<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>优先于与语法或识别引擎关联的词典中指定的发音。 此外，在发音<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>属性仅适用于的字词或短语所包含的单一匹配项<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>。  
  
   
  
## Examples  
 下面的示例中的语法包含俚语单词，其中还具有一个不常见的单词:"whatchamacallit"。 添加自定义的内联发音使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>属性<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>类可以提高 word"whatchamacallit"以及与包含它的整个短语识别的准确性。 该示例使用手机从 Microsoft 通用电话设置 (UPS) 来定义自定义的发音。  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an instance of the in-process recognizer.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build the SrgsOneOf objects with alternative choices for the slang phrase.  
        SrgsOneOf gimme = new SrgsOneOf(  
          new string[] { "give me", "gimme", "hand me", "ha'me" });  
        SrgsOneOf the = new SrgsOneOf(new string[] { "the", "duh" });  
  
        // Build the one-of element that contains the pronunciation.  
        SrgsItem thing = new SrgsItem("thingamajig");  
        SrgsItem whatcha = new SrgsItem();  
        SrgsToken callit = new SrgsToken("whatchamacallit");  
        callit.Pronunciation = "W AE T CH AE M AE K AA L IH T";  
        whatcha.Add(callit);  
        SrgsOneOf what = new SrgsOneOf(new SrgsItem[] {thing, whatcha});  
  
        // Create the rule from the SrgsOneOf objects.  
        SrgsRule slangRule = new SrgsRule("slang", gimme, the, what);  
  
        // Build an SrgsDocument object from the rule and set the phonetic alphabet.  
        SrgsDocument tokenPron = new SrgsDocument(slangRule);  
        tokenPron.PhoneticAlphabet = SrgsPhoneticAlphabet.Ups;  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar g_Slang = new Grammar(tokenPron);  
        g_Slang.Name = ("Slang Pronunciation");  
        recognizer.LoadGrammarAsync(g_Slang);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized phrase: " + e.Result.Text);  
      Console.WriteLine("Confidence: " + e.Result.Confidence);  
      Console.WriteLine("  Word summary: ");  
      foreach (RecognizedWordUnit word in e.Result.Words)  
      {  
        Console.WriteLine(  
          "    Lexical form ({1})" +  
          " Pronunciation ({0})" +  
          " Confidence ({2})",  
          word.Pronunciation, word.LexicalForm, word.Confidence);  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> 设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">试图将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> 指定为空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应朗读的单词的书写形式。</summary>
        <value>在 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> 类别实例中包含的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管它们通常表示相同的值，但<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>窗体可能不同于<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>窗体中的单词或短语中<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>。 例如，<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>窗体可能是首字母缩写词，如"USA"时将使用的文本和向其<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>适用，是"美国"。  
  
 默认值为<xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>属性为空字符串-""。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> 设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">试图将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> 指定为空字符串。</exception>
        <exception cref="T:System.ArgumentException">尝试把包含引号 (") 的字符串分配到 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>