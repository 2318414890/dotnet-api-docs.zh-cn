<Type Name="OleDbConnection" FullName="System.Data.OleDb.OleDbConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b802cc1a9b4877005b91b1d9770aa1885b696e12" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452273" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OleDbConnection : System.Data.Common.DbConnection, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbConnection extends System.Data.Common.DbConnection implements class System.Data.IDbConnection, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OleDbConnection&#xA;Inherits DbConnection&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OleDbConnection sealed : System::Data::Common::DbConnection, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示到数据源的连接是打开的。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbConnection>对象表示与数据源的唯一连接。 使用客户端/服务器数据库系统，它相当于网络连接到服务器。 具体取决于支持本机 OLE DB 访问接口，某些方法或属性的功能<xref:System.Data.OleDb.OleDbConnection>对象可能不可用。  
  
 当你创建的实例<xref:System.Data.OleDb.OleDbConnection>，所有属性均都设置为其初始值。 有关这些值的列表，请参阅<xref:System.Data.OleDb.OleDbConnection>构造函数。  
  
 你可以打开在单个上的多个 DataReader <xref:System.Data.OleDb.OleDbConnection>。 如果你使用的 OLE DB 访问接口不支持在单个连接上的多个 DataReader，提供程序为每个隐式打开其他连接。  
  
 如果<xref:System.Data.OleDb.OleDbConnection>超出范围，它没有闭合是。 因此，必须显式关闭连接通过调用<xref:System.Data.OleDb.OleDbConnection.Close%2A>或**释放**，或通过使用<xref:System.Data.OleDb.OleDbConnection>对象内`Using`语句。  
  
> [!NOTE]
>  若要部署高性能应用程序，必须使用连接池。 对于 OLE DB 使用.NET Framework 数据提供程序时，你无需启用连接池，因为提供程序会自动管理。 有关如何使用连接池与.NET Framework 数据提供程序用于 OLE DB，请参阅[OLE DB、 ODBC 和 Oracle 连接池](~/docs/framework/data/adonet/ole-db-odbc-and-oracle-connection-pooling.md)。  
  
 如果致命<xref:System.Data.OleDb.OleDbException>（例如，SQL Server 严重性级别为 20 或更高版本） 生成的方法执行<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbConnection>可能已关闭。 但是，用户可以重新打开连接并继续操作。  
  
 创建的实例的应用程序<xref:System.Data.OleDb.OleDbConnection>对象可以要求所有直接和间接调用方拥有足够权限的代码通过设置声明性或命令性安全要求。 <xref:System.Data.OleDb.OleDbConnection> 发出安全要求使用<xref:System.Data.OleDb.OleDbPermission>对象。 用户可以验证他们的代码通过使用具有足够的权限<xref:System.Data.OleDb.OleDbPermissionAttribute>对象。 用户和管理员还可以使用[Caspol.exe （代码访问安全策略工具）](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md)可修改计算机、 用户和企业级别的安全策略。 有关详细信息，请参阅[代码访问安全性和 ADO.NET](~/docs/framework/data/adonet/code-access-security.md)。  
  
 有关处理来自数据服务器的警告和信息性消息的详细信息，请参阅[连接事件](~/docs/framework/data/adonet/connection-events.md)。  
  
> [!NOTE]
>  <xref:System.Data.OleDb.OleDbConnection>对象不支持设置或检索特定于 OLE DB 提供程序的动态属性。 只支持可在 OLE DB 提供程序连接字符串中传递的属性。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbCommand>和<xref:System.Data.OleDb.OleDbConnection>。 <xref:System.Data.OleDb.OleDbConnection>打开并将其设置为<xref:System.Data.OleDb.OleDbCommand.Connection%2A>为<xref:System.Data.OleDb.OleDbCommand>。 该示例然后调用<xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A>关闭连接。 若要实现此目的，<xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A>传递连接字符串和一个 SQL INSERT 语句的查询字符串。  
  
 [!code-csharp[Classic WebData OleDbConnection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新实例时<xref:System.Data.OleDb.OleDbConnection>创建读/写属性设置为以下初始值，除非它们专门设置使用在其关联的关键字<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>属性。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>|空字符串 ("")|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.OleDb.OleDbConnection.Database%2A>|空字符串 ("")|  
|<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>|空字符串 ("")|  
  
 你可以更改这些属性的值只能通过使用<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>属性。  
  
   
  
## Examples  
 下面的示例创建并打开<xref:System.Data.OleDb.OleDbConnection>。  
  
 [!code-csharp[Classic WebData OleDbConnection.OleDbConnection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.OleDbConnection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbConnection(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">用于打开数据库的连接。</param>
        <summary>使用指定的连接字符串初始化 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新实例时<xref:System.Data.OleDb.OleDbConnection>创建读/写属性设置为以下初始值，除非它们专门设置使用在其关联的关键字<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>属性。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>|`connectionString`|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.OleDb.OleDbConnection.Database%2A>|空字符串 ("")|  
|<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>|空字符串 ("")|  
  
 你可以更改这些属性的值只能通过使用<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>属性。  
  
   
  
## Examples  
 下面的示例创建并打开<xref:System.Data.OleDb.OleDbConnection>。  
  
 [!code-csharp[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>开始数据库事务。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As OleDbTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OleDb::OleDbTransaction ^ BeginTransaction();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以当前的 <see cref="T:System.Data.IsolationLevel" /> 值开始数据库事务。</summary>
        <returns>表示新事务的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你必须显式提交或回滚事务使用<xref:System.Data.OleDb.OleDbTransaction.Commit%2A>或<xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>方法。 若要确保.NET Framework Data Provider for OLE DB 事务管理模型正常运行，请避免使用其他事务管理模型，如提供的数据源。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>和<xref:System.Data.OleDb.OleDbTransaction>。 它还演示如何使用<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>， <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>，和<xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData OleDbConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OleDb::OleDbTransaction ^ BeginTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">事务应在其下运行的隔离级别。</param>
        <summary>以指定的隔离级别启动数据库事务。</summary>
        <returns>表示新事务的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你必须显式提交或回滚事务使用<xref:System.Data.OleDb.OleDbTransaction.Commit%2A>或<xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>方法。 若要确保.NET Framework Data Provider for OLE DB 事务管理模型正常运行，请避免使用其他事务管理模型，如提供的数据源。  
  
> [!NOTE]
>  如果你不指定隔离级别，使用基础提供程序的默认隔离级别。 若要指定隔离级别与<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>方法，请使用采用的重载`isolationLevel`参数。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>和<xref:System.Data.OleDb.OleDbTransaction>。 它还演示如何使用<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>、 <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>，和<xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.ChangeDatabase(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">数据库名称。</param>
        <summary>更改已打开的 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的当前数据库。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中提供的值`database`参数必须是有效的数据库名称。 `database`参数不能包含 null 值、 空字符串或仅有空白字符的字符串。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>并显示部分只读属性。  
  
 [!code-csharp[Classic WebData OleDbConnection.Database Example#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/CS/source.cs#2)]
 [!code-vb[Classic WebData OleDbConnection.Database Example#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
        <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">不能更改数据库。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭到数据源的连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbConnection.Close%2A>方法回滚任何挂起的事务。 然后，它将释放到连接池，连接或关闭的连接，如果禁用连接池。 如果<xref:System.Data.OleDb.OleDbConnection.Close%2A>时处理调用<xref:System.Data.Common.DbConnection.StateChange>事件，无需额外<xref:System.Data.Common.DbConnection.StateChange>事件触发。  
  
 应用程序可以调用<xref:System.Data.OleDb.OleDbConnection.Close%2A>不止一次。 不会生成异常。  
  
> [!CAUTION]
>  不要调用<xref:System.Data.OleDb.OleDbConnection.Close%2A>或**释放**上<xref:System.Data.OleDb.OleDbConnection>、 <xref:System.Data.OleDb.OleDbDataReader>，或在任何其他托管的对象`Finalize`你类的方法。 在终结器中，你应仅释放类直接拥有的非托管的资源。 如果类不拥有任何非托管资源，则不要在类定义中包含 `Finalize` 方法。 有关详细信息，请参阅[垃圾回收](~/docs/standard/garbage-collection/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.ADO.Design.OleDbConnectionStringEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于打数据库的字符串。</summary>
        <value>OLE DB 提供程序连接字符串，它包括建立初始连接所必需的数据源名称和其他参数。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>旨在与 OLE DB 连接字符串格式匹配尽可能有以下例外：  
  
-   "提供程序 = `value` "子句是必需的。 但是，不能使用"提供程序 = MSDASQL"因为 OLE DB.NET Framework 数据提供程序不支持 OLE DB 提供程序的 ODBC （msdasql） 一起使用。 若要访问 ODBC 数据源，请使用<xref:System.Data.Odbc.OdbcConnection>为处于对象<xref:System.Data.Odbc>命名空间。  
  
-   与 ODBC 或 ADO，不同的连接字符串，则返回等同于用户设置<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>，安全信息减如果`Persist Security Info`设置为`false`（默认值）。 用于 OLE DB.NET Framework 数据提供程序不会保留或返回一个连接字符串中的密码，除非你设置`Persist Security Info`关键字`true`（不推荐）。 若要维护高级别的安全性，强烈建议你使用`Integrated Security`关键字后的跟`Persist Security Info`设置为`false`。  
  
 你可以使用<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>属性，以连接到各种数据源。 下面的示例演示几个可能的连接字符串。  
  
```  
"Provider=MSDAORA; Data Source=ORACLE8i7;Persist Security Info=False;Integrated Security=Yes"  
  
"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\bin\LocalAccess40.mdb"  
  
"Provider=SQLOLEDB;Data Source=(local);Integrated Security=SSPI"  
```  
  
 如果`Data Source`关键字未指定连接字符串中，提供程序将尝试连接到本地服务器，如果有的话。  
  
 有关连接字符串的详细信息，请参阅[Using Connection String Keywords with SQL Server Native Client](http://go.microsoft.com/fwlink/?LinkId=126696)。  
  
 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>关闭连接时，才可以设置属性。 连接字符串值的许多具有相应的只读属性。 当设置连接字符串时，将更新这些属性，除非当检测到错误。 在这种情况下，不会更新任何属性。 <xref:System.Data.OleDb.OleDbConnection> 属性返回中包含的那些设置<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>。  
  
 重置<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>关闭的连接将重置所有连接字符串值和相关的属性。 这包括密码。 例如，如果你设置包括的连接字符串"Initial Catalog = AdventureWorks"，然后重置的连接字符串"提供程序 = SQLOLEDB; 数据源 = MySQLServer; IntegratedSecurity = SSPI"，则<xref:System.Data.OleDb.OleDbConnection.Database%2A>属性不能再设置为AdventureWorks。 (连接字符串的初始目录值对应于`Database`属性。)  
  
 设置该属性时执行的连接字符串的预验证。 如果值为`Provider`， `Connect Timeout`， `Persist Security Info`，或`OLE DB Services`包括在字符串中，检查这些值。 在应用程序调用<xref:System.Data.OleDb.OleDbConnection.Open%2A>完全验证方法，连接字符串。 如果连接字符串包含无效或不受支持属性中，运行时异常，如<xref:System.ArgumentException>，生成。  
  
> [!CAUTION]
>  可以提供的连接信息<xref:System.Data.OleDb.OleDbConnection>在通用数据链接 (UDL) 文件; 但是，应避免这样做。 UDL 文件未加密，并公开以明文形式的连接字符串信息。 因为 UDL 文件对您的应用程序来说是一个基于文件的外部资源，所以无法使用 .NET Framework 保护该文件。  
  
 连接字符串的基本格式包含一系列的用分号分隔的关键字/值对。 每个关键字和它的值之间用等号 (=) 连接。 若要包含的值包含分号、 单引号字符或双引号字符，则该值必须括在双引号内。 如果值包含分号和双引号字符，则该值可以括在单引号中。 单引号也是有用的值以双引号字符开头。 相反，如果值以单引号开头，则可以使用双引号。 如果值包含单引号和双引号字符，每次它的值中发生时，用于将值括起来的引号字符必须采用双重方括号。  
  
 若要包含前导或尾随空格的字符串值，则该值必须括在单引号或双引号中。 忽略任何前导空格或尾随空格围绕整数、 布尔值或枚举的值，即使用引号引起来。 但是，将保留在字符串文字关键字或值中的空间。 而不使用分隔符，可能在连接字符串中使用单引号或双引号引号 (例如，`Data Source= my'Server`或`Data Source= my"Server`) 如果双引号字符不是值中的第一个或最后一个字符。  
  
 若要包含等号 （=） 中的关键字或值，它前面必须是另一个等号。 例如，在假设的连接字符串  
  
```  
"key==word=value"  
```  
  
 关键字是"键 = word"，值为"value"。  
  
 如果关键字中的特定关键字 = 对发生多次在连接字符串中设置的值使用列出的最后一个匹配项的值。  
  
 关键字不区分大小写。  
  
> [!CAUTION]
>  构造根据用户输入，例如，从对话框中，并将其追加到连接字符串中检索用户 ID 和密码信息时的连接字符串时应十分小心。 应用程序应确保用户不能嵌入其他的连接字符串参数，这些值，例如，输入一个密码作为"validpassword; 数据库 = somedb"尝试附加到不同数据库中。 如果使用 OLE DB 连接的扩展属性连接字符串参数，避免，因为你应该避免存储用户 Id 和密码以明文形式，如果你知道如何操作，并且传递用户 Id 和密码的默认设置`Persist Security Info= false`不影响`Extended Properties`参数。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>并设置其属性的一些连接字符串中。  
  
 [!code-csharp[Classic WebData OleDbConnection.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">提供了无效的连接字符串参数或未提供所需的连接字符串参数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。</summary>
        <value>等待连接打开的时间（以秒为单位）。 默认值为 15 秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值为 0 表示没有限制，，应当避免在<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>由于尝试连接将无限期等待。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>并设置其属性的一些连接字符串中。  
  
 [!code-csharp[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ConnectionTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ConnectionTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置的值小于 0。</exception>
        <altmember cref="P:System.Data.OleDb.OleDbConnection.Database" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.DataSource" />
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As OleDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OleDb::OleDbCommand ^ CreateCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回一个与该 <see cref="T:System.Data.OleDb.OleDbCommand" /> 关联的 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象。</summary>
        <returns>一个 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.Database</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
        <value>当前数据库的名称或打开连接后要使用的数据库的名称。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbConnection.Database%2A>属性会动态更新。 如果你更改当前数据库使用 SQL 语句或<xref:System.Data.OleDb.OleDbConnection.ChangeDatabase%2A>方法，发送一条信息性消息，并自动更新的属性。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>并显示部分只读属性。  
  
 [!code-csharp[Classic WebData OleDbConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.DataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据源的服务器名或文件名。</summary>
        <value>数据源的服务器名或文件名。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果数据库的连接已关闭，`DataSource`属性返回中包含的所有内容`ConnectionString`为数据源关键字。 如果连接是打开和`ConnectionString`数据源关键字的值开头"&#124;datadirectory&#124;"，该属性返回中包含的所有内容`ConnectionString`为数据源关键字。 如果数据库的连接处于打开状态，该属性返回本机提供程序返回有关`DBPROP_INIT_DATASOURCE,`和的是否为空，本机提供程序的`DBPROP_DATASOURCENAME`返回。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>并显示部分只读属性。  
  
 [!code-csharp[Classic WebData OleDbConnection.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.Database" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistDistributedTransaction (transaction As ITransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnlistDistributedTransaction(System::EnterpriseServices::ITransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
        <summary>在指定的事务中登记为分布式事务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增 ADO.NET 2.0 中功能支持使用<xref:System.Data.Common.DbConnection.EnlistTransaction%2A>方法在分布式事务中登记。 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**为此目的。 有关详细信息，请参阅[分布式事务](~/docs/framework/data/adonet/distributed-transactions.md)。  
  
 你可以继续在现有使用分布式的事务中登记<xref:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction%2A>方法如果禁用了自动登记。 在现有分布式事务中登记可以确保，如果事务是提交还是回滚，数据源的代码所做的修改也提交或回滚。 有关分布式事务的详细信息，请参阅[分布式事务](~/docs/framework/data/adonet/distributed-transactions.md)。  
  
 <xref:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction%2A> 如果返回异常<xref:System.Data.OleDb.OleDbConnection>已经启动了事务使用<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>。 但是，如果事务是在数据源上开始的本地事务 (例如，通过显式执行 BEGIN TRANSACTION 语句使用<xref:System.Data.OleDb.OleDbCommand>对象)，<xref:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction%2A>回滚该本地事务并在现有中登记为请求的分布式的事务。 你不会收到通知，该本地事务已回滚，并且会负责管理任何本地事务没有启动使用<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
        <summary>在指定的事务中登记为分布式事务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增 ADO.NET 2.0 中功能支持使用<xref:System.Data.Common.DbConnection.EnlistTransaction%2A>方法在分布式事务中登记。 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**，它使用<xref:System.EnterpriseServices.ITransaction>对象。 它还具有略有不同的语义： 后在事务中显式登记连接，不能取消登记或第一个事务完成之前在另一个事务中登记。 有关分布式事务的详细信息，请参阅[分布式事务](~/docs/framework/data/adonet/distributed-transactions.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOleDbSchemaTable">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetOleDbSchemaTable (Guid schema, object[] restrictions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetOleDbSchemaTable(valuetype System.Guid schema, object[] restrictions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOleDbSchemaTable (schema As Guid, restrictions As Object()) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetOleDbSchemaTable(Guid schema, cli::array &lt;System::Object ^&gt; ^ restrictions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Guid" />
        <Parameter Name="restrictions" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Data.OleDb.OleDbSchemaGuid" /> 的值之一，它指定要返回的架构表。</param>
        <param name="restrictions">限制值的 <see cref="T:System.Object" /> 数组。 这些值按照限制列的顺序来应用。 即，第一个限制值应用于第一个限制列，第二个限制值应用于第二个限制列，依此类推。</param>
        <summary>应用了指定的限制之后，按照 GUID 的指示从数据源返回架构信息。</summary>
        <returns>一个包含所请求的架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 架构表返回作为<xref:System.Data.DataTable>具有相同的格式由指定的 OLE DB 架构行集`schema`参数。 使用`restrictions`参数来筛选要在中返回的行<xref:System.Data.DataTable>（例如，通过指定的表名称、 类型、 所有者或架构限制）。 当您将值传递数组中时，包括空字符串或不包含值的数组元素的空值。 如果您传递到一个空数组`restrictions`，返回所有行 （一个用于每个表） 在默认顺序。 数组中的值对应源表中列的顺序和<xref:System.Data.DataTable>。 限制数组中的每个元素进行比较的对应列中的架构行集的内容。 例如，与在行集中的第一列的限制数组中的第一个元素进行比较。 如果限制元素不为 null，仅与的限制值完全匹配的行从架构行集将添加到生成<xref:System.Data.DataTable>。  
  
 <xref:System.Data.OleDb.OleDbConnection>方法调用基础 OLE DB **idbschemarowset::** 方法使用标准公共语言运行时转换规则。 有关详细信息，请参阅[COM 数据类型](http://msdn.microsoft.com/library/f93ae35d-a416-4218-8700-c8218cc90061)。  
  
 你可以使用检索的文字信息<xref:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals>。 它提供了等效于调用 OLE DB 信息**IDBInfo::GetLiteralInfo**接口或 ADO **Connection.OpenSchema**方法替换`adSchemaDBInfoLiterals`常量。  
  
   
  
## Examples  
 下面的示例返回数据库中表的列表。  
  
 [!code-csharp[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.GetOleDbSchemaTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.GetOleDbSchemaTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OleDb.OleDbException">指定的限制集无效。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.OleDb.OleDbConnection" /> 已关闭。</exception>
        <exception cref="T:System.ArgumentException">OLE DB 提供程序不支持指定的架构行集合。  - 或 -  <paramref name="schema" /> 参数包含 <see cref="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals" /> 的值，<paramref name="restrictions" /> 参数包含一条或多条限制。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回此 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的数据源的架构信息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的数据源的架构信息。</summary>
        <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">指定要返回的架构的名称。</param>
        <summary>使用表示架构名称的指定字符串返回此 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的数据源的架构信息。</summary>
        <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当`collectionName`指定为 null，<xref:System.Data.DataTable>将包含有关可用的所有元数据和及其限制的信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String, restrictionValues As String()) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName, cli::array &lt;System::String ^&gt; ^ restrictionValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">指定要返回的架构的名称。</param>
        <param name="restrictionValues">为请求的架构指定一组限制值。</param>
        <summary>使用表示架构名称的指定字符串以及表示限制值的指定字符串数组返回此 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的数据源的架构信息。</summary>
        <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当`collectionName`指定为 null，<xref:System.Data.DataTable>将包含有关可用的所有元数据和及其限制的信息。  
  
 `restrictionValues`参数可以提供*n*深度的值所指定的特定集合的限制集合。 为了对给定的限制，设置值和设置的其他限制的值，你需要设置前面的限制条件为 null，然后为你想要为指定值的限制中的相应值。  
  
 此示例为"表"集合。 如果"表"集合具有三个限制 （数据库、 所有者和表名称），并且你想要取回仅与"Carl"的所有者关联的表，则必须传递以下值 （至少）： null，"Carl"。 如果未传入限制值，默认值用于该限制。 这将是相同的映射与传入 null，这是不同于传入的参数值为空字符串。 在这种情况下，空字符串 ("") 被视为可为指定的参数的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InfoMessage As OleDbInfoMessageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::OleDb::OleDbInfoMessageEventHandler ^ InfoMessage;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在提供程序发送警告或信息性消息时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要处理警告或信息性消息由服务器发送客户端应创建<xref:System.Data.OleDb.OleDbInfoMessageEventHandler>委托来侦听此事件。  
  
 <xref:System.Data.OleDb.OleDbConnection.InfoMessage>事件发生时从数据源返回低严重性的消息。 低严重性消息是指那些不会引发异常。 对于 Microsoft SQL Server，这包括 10 或更少的严重性的错误消息  
  
 有关详细信息及示例，请参阅[连接事件](~/docs/framework/data/adonet/connection-events.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Open</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用由 <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> 指定的属性设置打开一个数据库连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbConnection>从连接池中绘制的开放连接，如果有的话。 否则，它在建立与数据源的新连接。 你可以打开在单个上的多个 DataReader <xref:System.Data.OleDb.OleDbConnection>。 如果你使用的 OLEDB 访问接口不支持在单个连接上的多个活动的 DataReader，OLEDB 提供程序为每个隐式打开其他连接。  
  
> [!NOTE]
>  如果<xref:System.Data.OleDb.OleDbConnection>超出范围，它没有闭合是。 因此，必须显式关闭连接通过调用<xref:System.Data.OleDb.OleDbConnection.Close%2A>或**释放**，或使用的连接中`Using`语句。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已打开。</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">打开连接时出现的连接级别错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public string Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Provider { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在连接字符串的“Provider = ”子句中指定的 OLE DB 提供程序的名称。</summary>
        <value>在连接字符串的“Provider= ”子句中指定的提供程序的名称。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>并显示部分只读属性。  
  
 [!code-csharp[Classic WebData OleDbConnection.Provider Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Provider Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.Provider Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Provider Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseObjectPool">
      <MemberSignature Language="C#" Value="public static void ReleaseObjectPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReleaseObjectPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.ReleaseObjectPool" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReleaseObjectPool ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReleaseObjectPool();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示可在释放最后一个基础连接时释放 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象池。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReleaseObjectPool` 可以对用于共用原本保留的可用资源调用<xref:System.Data.OleDb.OleDbConnection>对象。 你可能想要调用此方法，如果，例如，将不会使用连接对象再次按 OLE DB 服务通常保留共用的连接活动时间量。 请注意，仅仅调用此方法不会实际释放位于池中的活动连接。  
  
 池最终被释放之前，必须执行以下操作：  
  
1.  调用<xref:System.Data.OleDb.OleDbConnection.Close%2A>以返回到池的连接对象。  
  
2.  允许每个连接对象的池的超时。  
  
3.  调用 <xref:System.Data.OleDb.OleDbConnection.ReleaseObjectPool%2A>。  
  
4.  调用垃圾回收。  
  
 相反，如果调用<xref:System.Data.OleDb.OleDbConnection.Close%2A>上所有活动连接，并调用垃圾回收，但是不调用<xref:System.Data.OleDb.OleDbConnection.ReleaseObjectPool%2A>，保留为仍可使用共用的对象的资源。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>将其打开，显示它的一些属性，关闭了连接，以及释放对象池以节省资源。  
  
 [!code-csharp[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ReleaseObjectPool Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ReleaseObjectPool Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更新 <see cref="P:System.Data.OleDb.OleDbConnection.State" /> 对象的 <see cref="T:System.Data.OleDb.OleDbConnection" /> 属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些 OLE DB 访问接口可以检查连接的当前状态。 例如，如果数据库服务器具有回收以来你打开你<xref:System.Data.OleDb.OleDbConnection>、<xref:System.Data.OleDb.OleDbConnection.State%2A>属性将继续返回`Open`。 如果你正在使用 OLE DB 支持的提供程序轮询有关此信息的实时连接，则调用<xref:System.Data.OleDb.OleDbConnection.ResetState%2A>方法，然后检查<xref:System.Data.OleDb.OleDbConnection.State%2A>属性将告诉你，连接将无法再打开。 <xref:System.Data.OleDb.OleDbConnection.ResetState%2A>方法依赖于在 OLE DB 提供程序以验证连接的当前状态的功能。 若要确定你 OLE DB 提供程序是否支持此功能，请检查有关 DBPROP_CONNECTIONSTATUS 信息的提供程序的文档。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个包含客户端所连接到的服务器的版本的字符串。</summary>
        <value>连接的服务器的版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbConnection.ServerVersion%2A>属性将映射到 OLE DB DBPROP_DBMSVER 属性。 如果<xref:System.Data.OleDb.OleDbConnection.ServerVersion%2A>不支持的基础的 OLE DB 提供程序，则返回空字符串。  
  
 版本的形式 *# #。 # #。 # # #*，其中前两个数字是否为主要版本，接下来的两位数字是次要版本，，最后四位数是发布版本。 提供程序必须呈现此窗体中的产品版本，但也可以附加的特定于产品的版本 — 例如，"04.01.0000 Rdb 4.1"。 字符串的形式*major.minor.build*，其中主要和次要是恰好两位，生成是四位数字。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>并显示部分只读属性。  
  
 [!code-csharp[Classic WebData OleDbConnection.ServerVersion Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ServerVersion Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.ServerVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ServerVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.State</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取连接的当前状态。</summary>
        <value>
          <see cref="T:System.Data.ConnectionState" /> 值的按位组合。 默认值为 Closed。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面被允许的状态更改：  
  
-   从`Closed`到`Open`，使用<xref:System.Data.OleDb.OleDbConnection.Open%2A>方法<xref:System.Data.OleDb.OleDbConnection>对象。  
  
-   从`Open`到`Closed`，使用<xref:System.Data.OleDb.OleDbConnection.Close%2A>方法或**释放**方法<xref:System.Data.OleDb.OleDbConnection>对象。  
  
> [!NOTE]
>  早期版本的.NET Framework 中，调用<xref:System.Data.OleDb.OleDbConnection.State%2A>属性增加应用程序开销，因为每个调用导致了对打开的连接的 OLE DB DBPROP_CONNECTIONSTATUS 属性的调用。 .NET Framework 2.0 版本中，这不再是问题。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
        <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Data.OleDb.OleDbConnection> 实例强制转换为 <xref:System.ICloneable> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>