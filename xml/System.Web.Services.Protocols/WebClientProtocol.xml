<Type Name="WebClientProtocol" FullName="System.Web.Services.Protocols.WebClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3f105aaabd9f908e04e2b55096014df9d110c1ec" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36595007" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WebClientProtocol : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WebClientProtocol extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.WebClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WebClientProtocol&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebClientProtocol abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type WebClientProtocol = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定使用 ASP.NET 创建的所有 XML Web services 客户端代理的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性<xref:System.Web.Services.Protocols.WebClientProtocol>类用于控制用于传输的 XML Web 服务请求和响应的传输的行为。 此类上的属性映射到在上找到的属性<xref:System.Net.WebRequest>。 派生自的类的实例<xref:System.Net.WebRequest>，如<xref:System.Net.HttpWebRequest>，用作 XML Web 服务使用 ASP.NET 创建的传输机制。  
  
 若要与 XML Web 服务进行通信，必须创建代理类中派生间接或直接从<xref:System.Web.Services.Protocols.WebClientProtocol>为你想要调用 XML Web 服务。 而不是手动创建代理类，你可以使用 Wsdl.exe 工具创建给定的 XML Web 服务的服务说明的代理类。 由于<xref:System.Web.Services.Protocols.WebClientProtocol>是基类对于你的客户端代理，你将在代理类中找到其属性。 这些属性可用于控制基础传输的请求行为。 例如，使用<xref:System.Web.Services.Protocols.WebClientProtocol.Credentials%2A>属性来调用身份验证的 XML Web 服务。 许多<xref:System.Web.Services.Protocols.WebClientProtocol>属性将用来初始化<xref:System.Net.WebRequest>用于发出 Web 请求的对象。  
  
   
  
## Examples  
 下面的示例是调用 XML Web 服务名为 ASP.NET Web 窗体`Math`。 在`EnterBtn_Click`函数，Web 窗体设置代理信息和客户端凭据之前调用远程 XML Web service 方法的代理类。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[Classic WebClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebClientProtocol Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic WebClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebClientProtocol Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类上的属性复制到的新实例<see cref="T:System.Net.WebRequest" />每个 XML Web 服务方法调用的对象。 虽然你可以在同一调用 XML Web 服务方法<see cref="T:System.Web.Services.Protocols.WebClientProtocol" />实例从在同一时间的不同线程，没有完成，以确保将获取属性的一致性快照传输到的同步<see cref="T:System.Net.WebRequest" />对象。 因此如果你需要修改的属性并通过不同的并发的方法调用线程，你应使用不同的实例的 XML Web 服务代理，或提供自己的同步。</threadsafe>
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
    <altmember cref="T:System.Net.HttpWebRequest" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Protocols.WebClientProtocol" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Web.Services.Protocols.WebClientProtocol constructor/CPP/class1.cpp#1)]
 [!code-csharp[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Web.Services.Protocols.WebClientProtocol constructor/CS/class1.cs#1)]
 [!code-vb[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Web.Services.Protocols.WebClientProtocol constructor/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
        <altmember cref="T:System.Net.HttpWebRequest" />
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public virtual void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientProtocol.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Abort();" />
      <MemberSignature Language="F#" Value="abstract member Abort : unit -&gt; unit&#xA;override this.Abort : unit -&gt; unit" Usage="webClientProtocol.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消对 XML Web services 方法的请求。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="M:System.Net.WebRequest.Abort" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="AddToCache">
      <MemberSignature Language="C#" Value="protected static void AddToCache (Type type, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void AddToCache(class System.Type type, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void AddToCache(Type ^ type, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member AddToCache : Type * obj -&gt; unit" Usage="System.Web.Services.Protocols.WebClientProtocol.AddToCache (type, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">客户端协议处理程序的 <see cref="T:System.Type" />。</param>
        <param name="value">要添加到缓存中的客户端协议处理程序。</param>
        <summary>向缓存添加客户端协议处理程序的实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionGroupName">
      <MemberSignature Language="C#" Value="public string ConnectionGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectionGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConnectionGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionGroupName : string with get, set" Usage="System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置请求的连接组的名称。</summary>
        <value>连接组的名称。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName%2A>属性使您能够将关联到连接组的请求。 有关更多详细信息，请参阅 <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.WebRequest.ConnectionGroupName" />
        <altmember cref="P:System.Net.HttpWebRequest.ConnectionGroupName" />
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientProtocol.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials with get, set" Usage="System.Web.Services.Protocols.WebClientProtocol.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 XML Web services 客户端身份验证的安全凭据。</summary>
        <value>XML Web services 客户端的 <see cref="T:System.Net.ICredentials" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用时`Credentials`属性，XML Web 服务客户端必须实例化类实现<xref:System.Net.ICredentials>，如<xref:System.Net.NetworkCredential>，并将客户端凭据特定为身份验证机制。 <xref:System.Net.NetworkCredential>类可以用于设置身份验证凭据使用基本、 摘要式、 NTLM 和 Kerberos 身份验证机制。  
  
 如果将 <xref:System.Web.Services.Protocols.WebClientProtocol.Credentials%2A> 属性设置为 <xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=nameWithType>，则客户端将与服务器进行协商，并根据服务器的配置方式执行 Kerberos 和/或 NTLM 身份验证。  
  
   
  
## Examples  
 下面的示例是调用 XML Web 服务名为 ASP.NET Web 窗体`Math`。 在`EnterBtn_Click`函数，Web 窗体显式设置使用的身份验证凭据`Credentials`属性。 将传入的构造函数的用户名、 密码和域<xref:System.Net.NetworkCredential>类。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅：  
  
 [!code-aspx-csharp[Classic WebClientProtocol.Credentials Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebClientProtocol.Credentials Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic WebClientProtocol.Credentials Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebClientProtocol.Credentials Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetFromCache">
      <MemberSignature Language="C#" Value="protected static object GetFromCache (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetFromCache(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetFromCache(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetFromCache : Type -&gt; obj" Usage="System.Web.Services.Protocols.WebClientProtocol.GetFromCache type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要从缓存返回的客户端协议处理程序的 <see cref="T:System.Type" />。</param>
        <summary>获取缓存中的客户端协议处理程序的实例。</summary>
        <returns>缓存中的客户端协议处理程序的实例。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="abstract member GetWebRequest : Uri -&gt; System.Net.WebRequest&#xA;override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="webClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">
          <see cref="T:System.Uri" /> 在创建 <see cref="T:System.Net.WebRequest" /> 时使用。</param>
        <summary>为指定的 <paramref name="uri" /> 创建一个 <see cref="T:System.Net.WebRequest" /> 实例。 这一受保护的方法由 XML Web services 客户端基础结构调用来获取新的 <see cref="T:System.Net.WebRequest" /> 传输对象，以传输 XML Web services 请求。</summary>
        <returns>
          <see cref="T:System.Net.WebRequest" /> 实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以重写此方法以自定义<xref:System.Net.WebRequest>对象，然后发出 XML Web 服务请求。 例如，你无法对请求中添加自定义标头。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="uri" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.Abort" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetWebResponse">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将请求中的响应返回给 XML Web services 方法。 这一受保护的方法由 XML Web services 客户端基础结构调用来获取来自同步 XML Web services 请求的响应。</summary>
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" />
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.Abort" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetWebResponse : System.Net.WebRequest -&gt; System.Net.WebResponse&#xA;override this.GetWebResponse : System.Net.WebRequest -&gt; System.Net.WebResponse" Usage="webClientProtocol.GetWebResponse request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
      </Parameters>
      <Docs>
        <param name="request">从中获取响应的 <see cref="T:System.Net.WebRequest" />。</param>
        <summary>将同步请求中的响应返回给 XML Web services 方法。</summary>
        <returns>从同步请求到 XML Web services 方法的响应。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Net.WebException">如果在调用 <see cref="M:System.Web.Services.Protocols.WebClientProtocol.Abort" /> 之前调用 <see cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />。</exception>
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" />
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.Abort" />
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request, class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest, result As IAsyncResult) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request, IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member GetWebResponse : System.Net.WebRequest * IAsyncResult -&gt; System.Net.WebResponse&#xA;override this.GetWebResponse : System.Net.WebRequest * IAsyncResult -&gt; System.Net.WebResponse" Usage="webClientProtocol.GetWebResponse (request, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="request">从中获取响应的 <see cref="T:System.Net.WebRequest" />。</param>
        <param name="result">当响应完成时要传递到 <see cref="T:System.IAsyncResult" /> 的 <see cref="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)" />。</param>
        <summary>将异步请求中的响应返回给 XML Web services 方法。 这一受保护的方法由 XML Web services 客户端基础结构调用来获取来自异步 XML Web services 请求的响应。</summary>
        <returns>从异步请求到 XML Web services 方法的响应。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Net.WebException">如果在调用 <see cref="M:System.Web.Services.Protocols.WebClientProtocol.Abort" /> 之前调用 <see cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />。</exception>
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" />
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.Abort" />
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public bool PreAuthenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreAuthenticate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property PreAuthenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PreAuthenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PreAuthenticate : bool with get, set" Usage="System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置是否启用了预身份验证。</summary>
        <value>若要对请求进行预身份验证，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当客户端请求资源时不使用凭据的情况下时，服务器质询请求，并指示它支持何种身份验证方案。 客户端选择身份验证方案，并将发送相应`WWW-authenticate`到服务器的标头。 当<xref:System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate%2A>是`true`、`WWW-authenticate`标头发送的所有后续请求。  
  
 当<xref:System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate%2A>是`false`，指向 XML Web service 方法而无需最初尝试进行身份验证的用户发出请求。 如果 XML Web 服务允许匿名访问，则会执行 XML Web service 方法。 如果不允许匿名访问，401 HTTP 返回代码发送回客户端。 在响应中，<xref:System.Web.Services.Protocols.WebClientProtocol>类返回到 Web 服务器的身份验证凭据。 如果客户端身份验证并且随后有权访问 XML Web 服务，则执行 XML Web service 方法;否则客户端将被拒绝访问。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpWebRequest.PreAuthenticate" />
      </Docs>
    </Member>
    <Member MemberName="RequestEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding RequestEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding RequestEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientProtocol.RequestEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ RequestEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RequestEncoding : System.Text.Encoding with get, set" Usage="System.Web.Services.Protocols.WebClientProtocol.RequestEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用于对 XML Web services 发出客户端请求的 <see cref="T:System.Text.Encoding" />。</summary>
        <value>客户端请求的字符编码。 默认值为 <see langword="null" />，它将默认编码用于基础传输和协议。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.WebClientProtocol.RequestEncoding%2A>确定请求消息的编码。 <xref:System.Net.WebRequest.ContentType%2A>的请求将使用添加批注的编码值。  
  
 类派生自<xref:System.Web.Services.Protocols.WebClientProtocol>支持特定的协议，如<xref:System.Web.Services.Protocols.SoapHttpClientProtocol>未对于 SOAP、 设置此属性，以符合编码要求特定的协议。 例如，<xref:System.Web.Services.Protocols.SoapHttpClientProtocol>设置默认编码为 utf-8。  
  
   
  
## Examples  
 下面的示例是调用 XML Web 服务名为 ASP.NET Web 窗体`Math`。 在`EnterBtn_Click`函数，Web 窗体显式设置 RequestEncoding 为 utf-8。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[Classic WebClientProtocol.RequestEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebClientProtocol.RequestEncoding Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic WebClientProtocol.RequestEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebClientProtocol.RequestEncoding Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="P:System.Net.WebRequest.ContentType" />
        <altmember cref="T:System.Net.WebRequest" />
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientProtocol.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="System.Web.Services.Protocols.WebClientProtocol.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100000)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示 XML Web services 客户端等待同步 XML Web services 请求完成的时间（以毫秒计）的回复。</summary>
        <value>对 XML Web services 的同步调用的超时（以毫秒为单位）。 默认值为 100000 毫秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置<xref:System.Web.Services.Protocols.WebClientProtocol.Timeout%2A>属性<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>指示请求不会超时。即使 XML Web 服务客户端可以设置<xref:System.Web.Services.Protocols.WebClientProtocol.Timeout%2A>属性不会超时，Web 服务器仍可能会致使服务器端的超时请求。  
  
   
  
## Examples  
 下面的示例设置`Timeout`到同步调用 15000 （15 秒） 之间的值`Add`中的 XML Web service 方法`Math`XML Web 服务。  
  
 [!code-cpp[Classic WebClientProtocol.Timeout Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic WebClientProtocol.Timeout Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebClientProtocol.Timeout Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebClientProtocol.Timeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebClientProtocol.Timeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebClientProtocol.Timeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="P:System.Net.WebRequest.ContentType" />
        <altmember cref="T:System.Net.WebRequest" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public string Url { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Url" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientProtocol.Url" />
      <MemberSignature Language="VB.NET" Value="Public Property Url As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Url { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Url : string with get, set" Usage="System.Web.Services.Protocols.WebClientProtocol.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置客户端正在请求的 XML Web services 的基 URL。</summary>
        <value>客户端正在请求的 XML Web services 的基 URL。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 Wsdl.exe 生成的代理类将设置默认值<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>客户端使用的属性。 默认值<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>由从中生成代理类的服务说明中找到的位置属性。  
  
 派生类支持特定的协议，如<xref:System.Web.Services.Protocols.HttpGetClientProtocol>和<xref:System.Web.Services.Protocols.HttpPostClientProtocol>可能额外将信息添加到<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>以使 XML Web 服务请求。  
  
 <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>可以更改属性来实现相同的服务说明的代理类生成从任何 XML Web 服务引用。  
  
   
  
## Examples  
 下面的示例更改<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>属性`math`XML Web 服务向 Web 服务器名为`http:// www.contoso.com`。  
  
 [!code-cpp[Classic WebClientProtocol.Url Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic WebClientProtocol.Url Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebClientProtocol.Url Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebClientProtocol.Url Example/CS/source.cs#1)]
 [!code-vb[Classic WebClientProtocol.Url Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebClientProtocol.Url Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="P:System.Net.WebRequest.ContentType" />
        <altmember cref="T:System.Net.WebRequest" />
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否将 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials" /> 属性设置为 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 属性的值。</summary>
        <value>如果将 Credentials 属性设置为 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 属性的值，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="P:System.Net.WebRequest.ContentType" />
        <altmember cref="T:System.Net.WebRequest" />
      </Docs>
    </Member>
  </Members>
</Type>