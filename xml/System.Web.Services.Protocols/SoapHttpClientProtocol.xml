<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SoapHttpClientProtocol.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52ecf0c0b2e728e3d99693d8911f8def281322ee2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ecf0c0b2e728e3d99693d8911f8def281322ee2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>Specifies the class client that proxies derive from when using SOAP.</source>
          <target state="translated">指定当使用 SOAP 时客户端代理从其中派生的类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>If you are building an XML Web service client, then a proxy class that derives indirectly or directly from <ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph> must be created for the XML Web service.</source>
          <target state="translated">如果要生成的 XML Web 服务客户端，然后代理派生的类间接或直接从<ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph>必须为 XML Web 服务创建。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>When the XML Web service client calls using SOAP, the proxy class must derive from <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol&gt;</ph>, which derives from <ph id="ph2">&lt;xref:System.Web.Services.Protocols.HttpWebClientProtocol&gt;</ph>.</source>
          <target state="translated">当 XML Web 服务客户端调用时使用 SOAP 时，代理类必须派生自<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol&gt;</ph>，它派生自<ph id="ph2">&lt;xref:System.Web.Services.Protocols.HttpWebClientProtocol&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source><ph id="ph1">&lt;xref:System.Web.Services.Protocols.HttpWebClientProtocol&gt;</ph>, in turn, derives from <ph id="ph2">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.Services.Protocols.HttpWebClientProtocol&gt;</ph>反过来，派生自<ph id="ph2">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>To communicate with an XML Web service, create a proxy class that derives indirectly or directly from <ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph> for the XML Web service you want to call.</source>
          <target state="translated">若要与 XML Web 服务进行通信，创建派生自的间接或直接代理类<ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph>为你想要调用 XML Web 服务。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>Instead of creating the proxy class manually, use the Web Services Description Language tool (Wsdl.exe) to create a proxy class for a given XML Web service's service description.</source>
          <target state="translated">而不是手动创建代理类，使用 Web 服务描述语言工具 (Wsdl.exe) 创建给定的 XML Web 服务的服务说明的代理类。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>When a proxy class is generated for the SOAP protocol, synchronous calls to XML Web service methods are made via the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A&gt;</ph> method, whereas asynchronous calls are made using the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A&gt;</ph> method.</source>
          <target state="translated">当 SOAP 协议生成代理类时，同步对 XML Web 服务方法调用通过<ph id="ph1">&lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A&gt;</ph>方法，而使用进行异步调用<ph id="ph2">&lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>The following code example is a proxy class generated by Wsdl.exe for the <ph id="ph1">`Math`</ph> XML Web service.</source>
          <target state="translated">下面的代码示例是由 Wsdl.exe 为生成的代理类<ph id="ph1">`Math`</ph>XML Web 服务。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>The proxy class derives from <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol&gt;</ph>, which derives from the abstract <ph id="ph2">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph> class.</source>
          <target state="translated">代理类派生自<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol&gt;</ph>，它派生自抽象<ph id="ph2">&lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>The following code example is the <ph id="ph1">`Math`</ph> XML Web service, from which the preceding proxy class was generated.</source>
          <target state="translated">下面的代码示例是<ph id="ph1">`Math`</ph>XML Web 服务，从其生成前面的代理类。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>This example has a text box that accepts user input, which is a potential security threat.</source>
          <target state="translated">此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>By default, ASP.NET Web pages validate that user input does not include script or HTML elements.</source>
          <target state="translated">默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>For more information, see <bpt id="p1">[</bpt>Script Exploits Overview<ept id="p1">](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>脚本侵入概述<ept id="p1">](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>When you override this class, you can introduce methods in the derived class which are specific to a particular type of XML Web service.</source>
          <target state="translated">当你重写此类时，可引入在派生类中的方法，它是特定于特定类型的 XML Web 服务。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>The methods capture the parameters and call the base class to do the work of communicating with the XML Web service.</source>
          <target state="translated">这些方法捕获参数，并调用基类来执行的与 XML Web 服务进行通信的工作。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>If the introduced methods are asynchronous, call the <ph id="ph1">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph> method and the <ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /&gt;</ph> method.</source>
          <target state="translated">引入的方法是异步的如果调用<ph id="ph1">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph>方法和<ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>If the introduced methods are synchronous, call the <ph id="ph1">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /&gt;</ph> method.</source>
          <target state="translated">引入的方法是同步的如果调用<ph id="ph1">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>The overridden constructor typically sets the <ph id="ph1">&lt;see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /&gt;</ph> property to the URL of the XML Web service method.</source>
          <target state="translated">重写构造函数通常设置<ph id="ph1">&lt;see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /&gt;</ph>到的 URL 的 XML Web service 方法的属性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The name of the XML Web service method in the derived class that is invoking the <ph id="ph1">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">正调用 <ph id="ph1">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph> 方法的派生类中的 XML Web services 方法的名称。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>An array of objects containing the parameters to pass to the XML Web service.</source>
          <target state="translated">对象的数组，包含要传递给 XML Web services 的参数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.</source>
          <target state="translated">数组中值的顺序与派生类的调用方法中的参数顺序对应。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The delegate to call when the asynchronous invoke is complete.</source>
          <target state="translated">异步调用完成时要调用的委托。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the delegate is not called.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则不调用委托。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>Extra information supplied by the caller.</source>
          <target state="translated">调用方提供的额外信息。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>Starts an asynchronous invocation of an XML Web service method using SOAP.</source>
          <target state="translated">开始使用 SOAP 异步调用 XML Web services 方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that is passed to the <ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /&gt;</ph> method to obtain the return values from the remote method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，传递给 <ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /&gt;</ph> 方法以从远程方法调用中获取返回值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>Typically, you would not call the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph> method directly, unless you were building your own proxy class for an XML Web service.</source>
          <target state="translated">通常情况下，你不应该调用<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph>方法直接，除非你打算重新构建您自己的 XML Web 服务的代理类。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>A proxy class generated by the Web Services Description Language tool (Wsdl.exe) from a Service Description exposes the XML Web service methods as names derived from the proxy class to call the XML Web service methods synchronously.</source>
          <target state="translated">从服务说明由 Web 服务描述语言工具 (Wsdl.exe) 生成的代理类将 XML Web 服务方法公开为派生自要以同步方式调用 XML Web 服务方法的代理类的名称。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>To call the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the <ph id="ph1">`Begin`</ph> prefix added to the name of the XML Web service method and one with the <ph id="ph2">`End`</ph> prefix added.</source>
          <target state="translated">若要以异步方式调用 XML Web 服务方法，两个其他方法将添加到每个 XML Web 服务方法中，另一个使用的代理类<ph id="ph1">`Begin`</ph>添加到的 XML Web service 方法和一个具有名称的前缀<ph id="ph2">`End`</ph>添加的前缀。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The proxy class calls the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph> method to start an asynchronous invocation call to the XML Web service method.</source>
          <target state="translated">代理类调用<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph>方法以启动对 XML Web service 方法的异步调用调用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>For example, if an XML Web service exposes an XML Web service method named <ph id="ph1">`Add`</ph>, the proxy class contains a method named <ph id="ph2">`BeginAdd`</ph>, for starting an invocation to the XML Web service method.</source>
          <target state="translated">例如，如果 XML Web 服务公开 XML Web 服务方法名为<ph id="ph1">`Add`</ph>，代理类包含一个名为方法<ph id="ph2">`BeginAdd`</ph>，用于启动调用到 XML Web 服务方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>Within the code for the <ph id="ph1">`BeginAdd`</ph>, a call is made to the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph> method and the results are placed into the expected return type for <ph id="ph3">`Add`</ph>.</source>
          <target state="translated">中的代码<ph id="ph1">`BeginAdd`</ph>，调用了<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph>都被置于为预期的返回类型的方法和结果<ph id="ph3">`Add`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`methodName`</ph> is used to find the custom attributes which may have been added to the method, such as <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`methodName`</ph>用于查找可能已添加到该方法，如的自定义属性<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph> provides additional information about the derived method that is required for the SOAP protocol.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph> 提供有关派生方法所需的 SOAP 协议的其他信息。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source><ph id="ph1">`asyncState`</ph> is passed into <ph id="ph2">`callback`</ph> and is included in the <ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph> that is returned from the <ph id="ph4">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`asyncState`</ph> 传递到<ph id="ph2">`callback`</ph>并且包含在<ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph>从返回<ph id="ph4">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`asyncState`</ph> parameter can be used to pass information about the context of the asynchronous call, specified in the <ph id="ph2">`callback`</ph> parameter, to the delegate that handles the result.</source>
          <target state="translated"><ph id="ph1">`asyncState`</ph>参数可以用于传递信息有关的上下文中指定的异步调用的<ph id="ph2">`callback`</ph>参数，处理结果的委托。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the <ph id="ph1">`Math`</ph> XML Web service.</source>
          <target state="translated">下面的代码示例是由 Web 服务描述语言工具 (Wsdl.exe) 生成的代理类的<ph id="ph1">`Math`</ph>XML Web 服务。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>Within the <ph id="ph1">`BeginAdd`</ph> method of the proxy class, the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph> method is starting an asynchronous invocation to the <ph id="ph3">`Add`</ph> XML Web service method.</source>
          <target state="translated">在<ph id="ph1">`BeginAdd`</ph>代理类的方法<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph>方法正在启动对异步调用<ph id="ph3">`Add`</ph>XML Web service 方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The following code example is the <ph id="ph1">`Math`</ph> XML Web service, from which the preceding proxy class was created.</source>
          <target state="translated">下面的代码示例是<ph id="ph1">`Math`</ph>XML Web 服务，从中创建前面的代理类。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The request reached the server computer, but was not processed successfully.</source>
          <target state="translated">请求到达了服务器计算机，但未被成功处理。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>The request was not valid for the object's current state.</source>
          <target state="translated">请求对对象的当前状态无效。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
          <source>An error occurred while accessing the network.</source>
          <target state="translated">访问网络时出错。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>Dynamically binds to an XML Web service described in the discovery document at <ph id="ph1">&lt;see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /&gt;</ph>.</source>
          <target state="translated">动态绑定到 <ph id="ph1">&lt;see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /&gt;</ph> 处的发现文档中描述的 XML Web services。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>An XML Web service client can dynamically bind to an XML Web service other than the one referenced in the proxy class using the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph> method.</source>
          <target state="translated">可以将 XML Web 服务客户端动态绑定到 XML Web 服务代理类使用引用以外<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt;</ph> property refers to the base address of the XML Web service.</source>
          <target state="translated">通常情况下，<ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt;</ph>属性是指 XML Web 服务的基址。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>However, before invoking the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph> method, set the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt;</ph> property to a URL of a discovery document.</source>
          <target state="translated">但是，然后再调用<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph>方法，设置<ph id="ph2">&lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt;</ph>到发现文档的 URL 的属性。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>The <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph> method attempts to find a match in the discovery document to the binding defined in the proxy class and then dynamically bind to it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph>方法尝试发现的代理类中定义的绑定到文档中找到匹配项，然后动态绑定到它。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>If successful, subsequent method calls are directed to the XML Web service described in the discovery document.</source>
          <target state="translated">如果成功，则后续方法调用将定向到 XML Web 服务发现文档中所述。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>If the proxy class is built using the Web Services Description Language tool (Wsdl.exe), the proxy class defines the binding implemented by the XML Web service methods it invokes using the <ph id="ph1">&lt;xref:System.Web.Services.WebServiceBindingAttribute&gt;</ph>.</source>
          <target state="translated">如果代理类使用 Web 服务描述语言工具 (Wsdl.exe) 生成的代理类定义了由它调用使用的 XML Web 服务方法实现该绑定<ph id="ph1">&lt;xref:System.Web.Services.WebServiceBindingAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>When an XML Web service implements multiple bindings, Wsdl.exe creates a proxy class for each binding.</source>
          <target state="translated">当 XML Web 服务实现多个绑定时，Wsdl.exe 创建每个绑定的代理类。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>Applied to each proxy class is a <ph id="ph1">&lt;xref:System.Web.Services.WebServiceBindingAttribute&gt;</ph> that defines the name of the binding and its namespace.</source>
          <target state="translated">应用于每个代理类是<ph id="ph1">&lt;xref:System.Web.Services.WebServiceBindingAttribute&gt;</ph>，它定义的绑定和其命名空间的名称。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>The discovery document you set the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt;</ph> property to must contain a reference to an XML Web service that implements the same binding name and namespace, or an exception is thrown.</source>
          <target state="translated">你设置的发现文档<ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt;</ph>属性必须包含对实现相同的绑定名称和命名空间，XML Web 服务的引用或引发异常。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>The following code example is a proxy class generated using the Wsdl.exe utility for the <ph id="ph1">`Math`</ph> XML Web service.</source>
          <target state="translated">下面的代码示例是使用的 Wsdl.exe 实用程序生成的代理类<ph id="ph1">`Math`</ph>XML Web 服务。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>A <ph id="ph1">&lt;xref:System.Web.Services.WebServiceBindingAttribute&gt;</ph> is applied to the <ph id="ph2">`Math`</ph> proxy class setting the binding name to <ph id="ph3">`MathSoap`</ph> and its namespace to <ph id="ph4">`http://tempuri.org/`</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Web.Services.WebServiceBindingAttribute&gt;</ph>应用于<ph id="ph2">`Math`</ph>代理类将绑定名称设置为<ph id="ph3">`MathSoap`</ph>和为其命名空间<ph id="ph4">`http://tempuri.org/`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>The following code example is a Web Service client using the preceding proxy class.</source>
          <target state="translated">下面的代码示例是使用前面的代理类的 Web 服务客户端。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>Within the <ph id="ph1">`EnterBtn_Click`</ph> event of the Web Form, the XML Web service client calls the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph> method attempting to dynamically bind to the URL supplied by the user.</source>
          <target state="translated">在<ph id="ph1">`EnterBtn_Click`</ph>的 Web 窗体，XML Web 服务客户端调用的事件<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A&gt;</ph>尝试动态绑定到的用户提供的 URL 的方法。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>This example has a text box that accepts user input, which is a potential security threat.</source>
          <target state="translated">此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>By default, ASP.NET Web pages validate that user input does not include script or HTML elements.</source>
          <target state="translated">默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>For more information, see <bpt id="p1">[</bpt>Script Exploits Overview<ept id="p1">](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>脚本侵入概述<ept id="p1">](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)</ept>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover">
          <source>The proxy class does not have a binding defined.</source>
          <target state="translated">代理类没有定义绑定。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned from the <ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 方法返回的 <ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>Ends an asynchronous invocation of an XML Web service method using SOAP.</source>
          <target state="translated">结束使用 SOAP 异步调用 XML Web services 方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>An array of objects that contains the return value and any by-reference or <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameters of the derived class method.</source>
          <target state="translated">包含派生类方法的返回值、所有引用或 <ph id="ph1">&lt;see langword="out" /&gt;</ph> 参数的对象数组。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>Typically, you would not call the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph> method directly, unless you were building your own proxy class for an XML Web service.</source>
          <target state="translated">通常情况下，你不应该调用<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph>方法直接，除非你打算重新构建您自己的 XML Web 服务的代理类。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class for calling the XML Web service methods synchronously.</source>
          <target state="translated">由 XML Web 服务 Web 服务描述语言工具 (Wsdl.exe) 生成的代理类公开 XML Web 服务方法，用作从代理类中移出的同步调用 XML Web 服务方法的名称。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>For calling the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the <ph id="ph1">`Begin`</ph> prefix added to the name of the XML Web service method and one with the <ph id="ph2">`End`</ph> prefix added.</source>
          <target state="translated">用于以异步方式调用 XML Web 服务方法，两个附加方法添加到每个 XML Web 服务方法中，另一个使用的代理类<ph id="ph1">`Begin`</ph>添加到的 XML Web service 方法和一个具有名称的前缀<ph id="ph2">`End`</ph>添加的前缀。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>The proxy class calls the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph> method to complete an asynchronous invocation call to the XML Web service method.</source>
          <target state="translated">代理类调用<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph>方法以完成对 XML Web service 方法的异步调用调用。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>For example, if an XML Web service exposes an XML Web service method named <ph id="ph1">`Add`</ph>, the proxy class contains a method named <ph id="ph2">`EndAdd`</ph>, for completing an asynchronous invocation of an XML Web service method.</source>
          <target state="translated">例如，如果 XML Web 服务公开 XML Web 服务方法名为<ph id="ph1">`Add`</ph>，代理类包含一个名为方法<ph id="ph2">`EndAdd`</ph>，完成的异步调用 XML Web 服务方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>Within the code for the <ph id="ph1">`EndAdd`</ph> a call is made to the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph> method and then the results are placed into the expected return type for <ph id="ph3">`Add`</ph>.</source>
          <target state="translated">中的代码<ph id="ph1">`EndAdd`</ph>调用<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph>都被置于为预期的返回类型的方法，然后将结果<ph id="ph3">`Add`</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>The following code example is a proxy class generated by Wsdl.exe for the <ph id="ph1">`Math`</ph> XML Web service.</source>
          <target state="translated">下面的代码示例是由 Wsdl.exe 为生成的代理类<ph id="ph1">`Math`</ph>XML Web 服务。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>Within the <ph id="ph1">`EndAdd`</ph> method of the proxy class, the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph> method completes the asynchronous invocation to the <ph id="ph3">`Add`</ph> XML Web service method.</source>
          <target state="translated">在<ph id="ph1">`EndAdd`</ph>代理类的方法<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt;</ph>方法完成对异步调用<ph id="ph3">`Add`</ph>XML Web service 方法。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>The following code example is the <ph id="ph1">`Math`</ph> XML Web service, from which the preceding proxy class was created.</source>
          <target state="translated">下面的代码示例是<ph id="ph1">`Math`</ph>XML Web 服务，从中创建前面的代理类。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is not the return value from the <ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph> 方法的返回值。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>The request reached the server computer, but was not processed successfully.</source>
          <target state="translated">请求到达了服务器计算机，但未被成功处理。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>The request was not valid for the object's current state.</source>
          <target state="translated">请求对对象的当前状态无效。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)">
          <source>An error occurred while accessing the network.</source>
          <target state="translated">访问网络时出错。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph> that provides the <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> to initialize the <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph>，提供 <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> 来初始化 <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>The initial buffer size of the <ph id="ph1">&lt;see cref="T:System.IO.StreamReader" /&gt;</ph> used by the <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.StreamReader" /&gt;</ph> 使用的 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 的初始缓冲区大小。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> initialized with the <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> property of the <ph id="ph3">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph> parameter.</source>
          <target state="translated">返回一个用 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 参数的 <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> 属性初始化的 <ph id="ph3">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> initialized with the <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> property of the <ph id="ph3">&lt;paramref name="message" /&gt;</ph> parameter.</source>
          <target state="translated">用 <ph id="ph3">&lt;paramref name="message" /&gt;</ph> 参数的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 属性初始化的 <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> to use when creating the <ph id="ph2">&lt;see cref="T:System.Net.WebRequest" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> 在创建 <ph id="ph2">&lt;see cref="T:System.Net.WebRequest" /&gt;</ph> 时使用。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Net.WebRequest" /&gt;</ph> for the specified <ph id="ph2">&lt;paramref name="uri" /&gt;</ph>.</source>
          <target state="translated">为指定的 <ph id="ph2">&lt;paramref name="uri" /&gt;</ph> 创建 <ph id="ph1">&lt;see cref="T:System.Net.WebRequest" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.WebRequest" /&gt;</ph> for the specified URI.</source>
          <target state="translated">指定 URI 的 <ph id="ph1">&lt;see cref="T:System.Net.WebRequest" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)">
          <source>This method can be overridden to customize the <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> before the XML Web service request is made.</source>
          <target state="translated">可以重写此方法以自定义<ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph>之前 XML Web 服务请求。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)">
          <source>For example, you could add a custom header to the request.</source>
          <target state="translated">例如，无法将自定义标头添加到请求。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)">
          <source>The <ph id="ph1">&lt;paramref name="uri" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="uri" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph> that provides the <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> to initialize the <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph>，提供 <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> 来初始化 <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>The initial buffer size of the <ph id="ph1">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> used by the <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> 使用的 <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 的初始缓冲区大小。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> initialized with the <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> property of the <ph id="ph3">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph> parameter.</source>
          <target state="translated">返回用 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 参数的 <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> 属性初始化的 <ph id="ph3">&lt;see cref="T:System.Web.Services.Protocols.SoapClientMessage" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> initialized with the <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph> property of the <ph id="ph3">&lt;paramref name="message" /&gt;</ph> parameter.</source>
          <target state="translated">用 <ph id="ph3">&lt;paramref name="message" /&gt;</ph> 参数的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 属性初始化的 <ph id="ph2">&lt;see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>An array of objects that contains the parameters to pass to the XML Web service.</source>
          <target state="translated">包含要传递给 XML Web services 的参数的对象数组。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.</source>
          <target state="translated">数组中值的顺序与派生类的调用方法中的参数顺序对应。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>Invokes an XML Web service method synchronously using SOAP.</source>
          <target state="translated">使用 SOAP 同步调用 XML Web services 方法。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>An array of objects that contains the return value and any <ph id="ph1">&lt;see langword="reference" /&gt;</ph> or <ph id="ph2">&lt;see langword="out" /&gt;</ph> parameters of the derived class method.</source>
          <target state="translated">包含派生类方法的返回值、所有 <ph id="ph1">&lt;see langword="reference" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="out" /&gt;</ph> 参数的对象数组。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>Typically, you do not call the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph> method directly, unless you are building your own proxy class for an XML Web service.</source>
          <target state="translated">通常情况下，不调用<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph>方法直接，除非正在生成您自己的 XML Web 服务的代理类。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class.</source>
          <target state="translated">由 XML Web 服务 Web 服务描述语言工具 (Wsdl.exe) 生成的代理类将从代理类的名称作为公开 XML Web 服务方法。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>The proxy class calls the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph> method to invoke an XML Web service method call.</source>
          <target state="translated">代理类调用<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph>方法来调用 XML Web 服务方法调用。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>For example, if an XML Web service exposes an XML Web service method named <ph id="ph1">`Add`</ph>, the proxy class also contains a method named <ph id="ph2">`Add`</ph>.</source>
          <target state="translated">例如，如果 XML Web 服务公开 XML Web 服务方法名为<ph id="ph1">`Add`</ph>，代理类还包含一个名为方法<ph id="ph2">`Add`</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>Within the code for the <ph id="ph1">`Add`</ph> method in the proxy class, a synchronous call is made to the XML Web service method through the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph> method and then the results are placed into the expected return type for <ph id="ph3">`Add`</ph>.</source>
          <target state="translated">中的代码<ph id="ph1">`Add`</ph>方法中的代理类，指向通过 XML Web service 方法进行同步调用<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph>都被置于为预期的返回类型的方法，然后将结果<ph id="ph3">`Add`</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>The <ph id="ph1">`methodName`</ph> parameter is used to find the custom attributes that may have been added to the method, such as <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`methodName`</ph>参数用于查找可能已添加到该方法，如自定义属性<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source><ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph> provides additional information on the derived method which is required for the SOAP protocol.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph> 如果派生方法所需的 SOAP 协议上提供其他信息。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>The following code example is a proxy class generated by Wsdl.exe for the <ph id="ph1">`Math`</ph> XML Web service.</source>
          <target state="translated">下面的代码示例是由 Wsdl.exe 为生成的代理类<ph id="ph1">`Math`</ph>XML Web 服务。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>Within the <ph id="ph1">`Add`</ph> method of the proxy class, the <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph> method is calling the <ph id="ph3">`Add`</ph> XML Web service method.</source>
          <target state="translated">在<ph id="ph1">`Add`</ph>代理类的方法<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A&gt;</ph>调用方法<ph id="ph3">`Add`</ph>XML Web service 方法。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>The following code example is the <ph id="ph1">`Math`</ph> XML Web service, from which the preceding proxy class was created.</source>
          <target state="translated">下面的代码示例是<ph id="ph1">`Math`</ph>XML Web 服务，从中创建前面的代理类。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>The request reached the server computer, but was not processed successfully.</source>
          <target state="translated">请求到达了服务器计算机，但未被成功处理。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>The request was not valid for the object's current state.</source>
          <target state="translated">请求对对象的当前状态无效。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
          <source>An error occurred while accessing the network.</source>
          <target state="translated">访问网络时出错。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="T:System.Web.Services.Protocols.SoapHttpClientProtocol">
          <source>Invokes the specified method asynchronously.</source>
          <target state="translated">异步调用指定的方法。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)">
          <source>The name of the method to invoke.</source>
          <target state="translated">要调用的方法的名称。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)">
          <source>The parameters to pass to the method.</source>
          <target state="translated">要传递给该方法的参数。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)">
          <source>The delegate called when the method invocation has completed.</source>
          <target state="translated">当方法调用完成后调用的委托。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)">
          <source>Invokes the specified method asynchronously.</source>
          <target state="translated">异步调用指定的方法。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)">
          <source>The name of the method to invoke.</source>
          <target state="translated">要调用的方法的名称。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)">
          <source>The parameters to pass to the method.</source>
          <target state="translated">要传递给该方法的参数。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)">
          <source>The delegate called when the method invocation has completed.</source>
          <target state="translated">当方法调用完成后调用的委托。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)">
          <source>An object used to pass state information into the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">用于将状态信息传入 <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> 委托的对象。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)">
          <source>Invokes the specified method asynchronously.</source>
          <target state="translated">异步调用指定的方法。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion">
          <source>Gets or sets the version of the SOAP protocol used to make the SOAP request to the XML Web service.</source>
          <target state="translated">获取或设置用于对 XML Web services 修改的 SOAP 请求的 SOAP 协议版本。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion">
          <source>The <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A&gt;</ph> property is set in the proxy class generated by the Web Services Description Language tool (Wsdl.exe) to <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11&gt;</ph> by default when a WSDL document for an XML Web service supports SOAP version 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A&gt;</ph>属性设置到由 Web 服务描述语言工具 (Wsdl.exe) 生成的代理类中<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11&gt;</ph>默认情况下，如果 XML Web 服务的 WSDL 文档支持 SOAP 1.1 版。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion">
          <source>However, when an XML Web service only supports SOAP 1.2, Wsdl.exe sets the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12&gt;</ph>.</source>
          <target state="translated">但是，当一个 XML Web 服务仅支持 SOAP 1.2，Wsdl.exe 集<ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion">
          <source>To choose the version of the SOAP protocol when generating the proxy class with Wsdl.exe, use the <ph id="ph1">`/protocol`</ph> switch with the <ph id="ph2">`SOAP`</ph> or <ph id="ph3">`SOAP12`</ph> settings to set the <ph id="ph4">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A&gt;</ph> property to <ph id="ph5">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11&gt;</ph> and <ph id="ph6">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12&gt;</ph>, respectively.</source>
          <target state="translated">若要生成与 Wsdl.exe 的代理类时，请选择 SOAP 协议的版本，使用<ph id="ph1">`/protocol`</ph>切换与<ph id="ph2">`SOAP`</ph>或<ph id="ph3">`SOAP12`</ph>设置，以设置<ph id="ph4">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A&gt;</ph>属性<ph id="ph5">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11&gt;</ph>和<ph id="ph6">&lt;xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12&gt;</ph>分别.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion">
          <source>The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.</source>
          <target state="translated">下面的代码示例设置用于与 SOAP 1.2 的 XML Web 服务进行通信的协议的版本。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>