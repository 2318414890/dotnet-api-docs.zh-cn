<Type Name="SoapHeader" FullName="System.Web.Services.Protocols.SoapHeader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="732daa2487ec9d473ef56917139f1ca0370354e2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30549281" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SoapHeader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapHeader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHeader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SoapHeader" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHeader abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Xml.Serialization.SoapType(IncludeInSchema=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlType(IncludeInSchema=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>当在派生类中被重写时，表示 SOAP 标头的内容。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SOAP 标头提供了用于传递数据传入和传出 XML Web 服务方法，如果数据不与 XML Web service 方法的主要功能直接相关的方法。 例如，XML Web 服务可能包含多个 XML Web 服务方法，每个需要自定义身份验证方案。 而不是将参数添加到自定义身份验证方案中，每个 XML Web service 方法<xref:System.Web.Services.Protocols.SoapHeaderAttribute>，以派生自的类引用<xref:System.Web.Services.Protocols.SoapHeader>，可以应用于每个 XML Web 服务方法。 派生自的类的实现<xref:System.Web.Services.Protocols.SoapHeader>处理的自定义身份验证方案。 这种方式，XML Web 服务方法实现特定于它的功能，并添加了使用 SOAP 标头的其他功能。  
  
 下面的列表概述的基本步骤为接收和处理的 SOAP 标头：  
  
1.  创建一个类，派生自<xref:System.Web.Services.Protocols.SoapHeader>表示的数据传入的 SOAP 标头。  
  
2.  将成员添加到实现 XML Web 服务的类或 XML Web 服务客户端代理类，在第一步中创建的类型。  
  
3.  应用<xref:System.Web.Services.Protocols.SoapHeaderAttribute>为 XML Web service 方法或代理类中的相应方法，指定该成员在第二步中创建<xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A>属性。  
  
4.  在 XML Web service 方法或 XML Web 服务客户端代码中，访问<xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A>属性来处理的 SOAP 标头中发送的数据。  
  
   
  
## Examples  
 以下`MyWebService`XML Web 服务定义`MyHeader`SOAP 标头，并且要求它的任何调用发送`MyWebMethod`XML Web service 方法。 此外，`MyWebMethod`而不接收任何 SOAP 标头`MyHeader`SOAP 标头。  
  
  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapUnknownHeader" />
    <altmember cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    <altmember cref="T:System.Web.Services.Protocols.SoapHeaderAttribute" />
    <altmember cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapHeader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHeader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoapHeader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Protocols.SoapHeader" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actor">
      <MemberSignature Language="C#" Value="public string Actor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Actor" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.Actor" />
      <MemberSignature Language="VB.NET" Value="Public Property Actor As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Actor { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapAttribute("actor", Namespace="http://schemas.xmlsoap.org/soap/envelope/")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("actor", Namespace="http://schemas.xmlsoap.org/soap/envelope/")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 SOAP 标头的接收者。</summary>
        <value>SOAP 标头的接收者。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置的 SOAP 标头的接收方，设置<xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>属性。 而不考虑与 XML Web 服务进行通信时使用 SOAP 协议的版本，.NET Framework 自动生成特定于 SOAP 协议的版本的 SOAP 消息。 具体而言，显示的 XML 元素和表示接收方的 XML 命名空间不同的两个版本。  
  
 XML Web 服务接收的 SOAP 标头可以获取的目标接收方通过获取任一<xref:System.Web.Services.Protocols.SoapHeader.Role%2A>或<xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>属性。  
  
 为收件人`Body`元素和每个 SOAP 标头内`Header`SOAP 消息元素需要不能相同。 如果`Header`SOAP 消息中存在元素，它表示与 XML Web service 方法或中介可以发送的其他数据。 该数据，称为 SOAP 的接收方`Actor`在 1.1 版中，可以比 XML Web service 方法的 URI 不同的 URI。  
  
 有关详细信息 SOAP`actor`属性，请参阅在 SOAP 规范http://www.w3.org/TR/SOAP/。  
  
   
  
## Examples  
 下面的 XML Web 服务客户端调用`MyWebMethod`XML Web service 方法创建的类型的自定义 SOAP 标头之后`MyHeader`和设置<xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>属性`http://www.contoso.com/MySoapHeaderHandler`。  
  
 [!code-cpp[Classic SoapHeader.Actor Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHeader.Actor Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHeader.Actor Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHeader.Actor Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHeader.Actor Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHeader.Actor Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUnderstand">
      <MemberSignature Language="C#" Value="public bool DidUnderstand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DidUnderstand" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.DidUnderstand" />
      <MemberSignature Language="VB.NET" Value="Public Property DidUnderstand As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DidUnderstand { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 XML Web services 方法是否已正确处理 SOAP 标头。</summary>
        <value>
          如果已正确处理 SOAP 标头，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为 XML Web 服务定义的 SOAP 标头，ASP.NET 假定 XML Web 服务方法正确处理的 SOAP 标头设置的初始值<xref:System.Web.Services.Protocols.SoapHeader.DidUnderstand%2A>到`true`。 为未定义的 XML Web 服务 SOAP 标头的初始值是`false`。 如果 ASP.NET 检测到 SOAP 标头传递到 XML Web 服务方法使用<xref:System.Web.Services.Protocols.SoapHeader.DidUnderstand%2A>设置为`false`该方法返回后即<xref:System.Web.Services.Protocols.SoapHeaderException>返回调用而不是结果的 XML Web 服务客户端从 XML Web 服务方法。  
  
   
  
## Examples  
 以下`MyWebService`XML Web 服务定义`MyHeader`SOAP 标头，并且要求它的任何调用发送`MyWebMethod`XML Web service 方法。 此外，`MyWebMethod`而不接收任何 SOAP 标头`MyHeader`SOAP 标头。 为 SOAP 标头，`MyWebMethod`可以处理<xref:System.Web.Services.Protocols.SoapHeader.DidUnderstand%2A>设置为`true`。  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Services.Protocols.SoapHeader.MustUnderstand" />
        <altmember cref="T:System.Web.Services.Protocols.SoapHeaderException" />
      </Docs>
    </Member>
    <Member MemberName="EncodedMustUnderstand">
      <MemberSignature Language="C#" Value="public string EncodedMustUnderstand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncodedMustUnderstand" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand" />
      <MemberSignature Language="VB.NET" Value="Public Property EncodedMustUnderstand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EncodedMustUnderstand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapAttribute("mustUnderstand", Namespace="http://schemas.xmlsoap.org/soap/envelope/")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("mustUnderstand", Namespace="http://schemas.xmlsoap.org/soap/envelope/")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当与 SOAP 协议 1.1 版通信时，获取或设置 SOAP 标头的 <see langword="mustUnderstand" /> XML 特性值。</summary>
        <value>
          <see langword="mustUnderstand" /> 特性的值。 默认为“0”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要使用此属性。 改用<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性。  
  
   
  
## Examples  
 [!code-cpp[SoapHeader_EncodedMustUnderstand#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHeader_EncodedMustUnderstand/CPP/soapheader_encodedmustunderstand.cpp#1)]
 [!code-csharp[SoapHeader_EncodedMustUnderstand#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHeader_EncodedMustUnderstand/CS/soapheader_encodedmustunderstand.cs#1)]
 [!code-vb[SoapHeader_EncodedMustUnderstand#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHeader_EncodedMustUnderstand/VB/soapheader_encodedmustunderstand.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">属性设置为“0”、“1”、“true”或“false”之外的值。</exception>
        <altmember cref="P:System.Web.Services.Protocols.SoapHeader.MustUnderstand" />
      </Docs>
    </Member>
    <Member MemberName="EncodedMustUnderstand12">
      <MemberSignature Language="C#" Value="public string EncodedMustUnderstand12 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncodedMustUnderstand12" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12" />
      <MemberSignature Language="VB.NET" Value="Public Property EncodedMustUnderstand12 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EncodedMustUnderstand12 { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapAttribute("mustUnderstand", Namespace="http://www.w3.org/2003/05/soap-envelope")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("mustUnderstand", Namespace="http://www.w3.org/2003/05/soap-envelope")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>与 SOAP 协议 1.2 版通信时，获取或设置 SOAP 标头的 <see langword="mustUnderstand" /> XML 属性的值。</summary>
        <value>SOAP 标头的 <see langword="mustUnderstand" /> XML 特性的值。 默认为“0”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要使用此属性。 改用<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">属性设置为“0”、“1”、“true”或“false”之外的值。</exception>
        <altmember cref="P:System.Web.Services.Protocols.SoapHeader.MustUnderstand" />
      </Docs>
    </Member>
    <Member MemberName="EncodedRelay">
      <MemberSignature Language="C#" Value="public string EncodedRelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncodedRelay" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.EncodedRelay" />
      <MemberSignature Language="VB.NET" Value="Public Property EncodedRelay As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EncodedRelay { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapAttribute("relay", Namespace="http://www.w3.org/2003/05/soap-envelope")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("relay", Namespace="http://www.w3.org/2003/05/soap-envelope")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 SOAP 1.2 标头的中转特性。</summary>
        <value>“0”、“false”、“1”或“true”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapHeader.EncodedRelay%2A>属性仅适用于 SOAP 1.2，指示它转发到下游的下一个节点消息时，消息的接收方是否转发此标头。 .NET Framework 不支持 SOAP 媒介，因为此属性是序列化和反序列化但忽略。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MustUnderstand">
      <MemberSignature Language="C#" Value="public bool MustUnderstand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MustUnderstand" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.MustUnderstand" />
      <MemberSignature Language="VB.NET" Value="Public Property MustUnderstand As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MustUnderstand { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否必须理解 <see cref="T:System.Web.Services.Protocols.SoapHeader" />。</summary>
        <value>
          如果 XML Web services 必须正确解释和处理 <see cref="T:System.Web.Services.Protocols.SoapHeader" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML Web 服务客户端将 SOAP 标头中添加到 XML Web 服务方法调用与<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性设置为`true`，XML Web service 方法必须设置<xref:System.Web.Services.Protocols.SoapHeader.DidUnderstand%2A>属性`true`; 否则为<xref:System.Web.Services.Protocols.SoapHeaderException>重新引发为 asp.net 的 XML Web 服务客户端。  
  
 尽管同时<xref:System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand%2A>和<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性可以用于设置的值`mustUnderstand`在 SOAP 标头中，属性<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性可以设置使用布尔值的特性。  
  
 有关将 SOAP 标头添加到客户端的详细信息，请参阅[ &#91; \<topic://cpconusingsoapheaders >&#93;](http://msdn.microsoft.com/library/7bd961f2-b492-48d0-bafe-09d5d5fec3ba)。  
  
   
  
## Examples  
 下面的 XML Web 服务客户端定义的类型的自定义 SOAP 标头`MyHeader`，设置<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性`true`，并调用`MyWebMethod`XML Web service 方法。 如果 XML Web service 方法不会设置<xref:System.Web.Services.Protocols.SoapHeader.DidUnderstand%2A>属性`MyHeader`到 SOAP 标头`true`、<xref:System.Web.Services.Protocols.SoapHeaderException>引发。  
  
 [!code-cpp[Classic SoapHeader.MustUnderstand Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHeader.MustUnderstand Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHeader.MustUnderstand Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHeader.MustUnderstand Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHeader.MustUnderstand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHeader.MustUnderstand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Services.Protocols.SoapHeader.DidUnderstand" />
        <altmember cref="T:System.Web.Services.Protocols.SoapHeaderException" />
      </Docs>
    </Member>
    <Member MemberName="Relay">
      <MemberSignature Language="C#" Value="public bool Relay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Relay" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.Relay" />
      <MemberSignature Language="VB.NET" Value="Public Property Relay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Relay { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当前节点不理解 SOAP 标头时是否将该标头中转到下一个 SOAP 节点。</summary>
        <value>
          如果 SOAP 标头的某个“relay”特性设置为“true”，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认 SOAP 1.2 处理规则需要 SOAP 节点进行删除然后再将传递到下一个节点的消息的 SOAP 处理节点不理解的标头。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Role">
      <MemberSignature Language="C#" Value="public string Role { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Role" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHeader.Role" />
      <MemberSignature Language="VB.NET" Value="Public Property Role As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Role { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapAttribute("role", Namespace="http://www.w3.org/2003/05/soap-envelope")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("role", Namespace="http://www.w3.org/2003/05/soap-envelope")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 SOAP 标头的接收者。</summary>
        <value>一个 URI，表示 SOAP 标头的接收者。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置的 SOAP 标头的接收方，设置<xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>属性。 而不考虑与 XML Web 服务进行通信时使用 SOAP 协议的版本，.NET Framework 自动生成特定于 SOAP 协议的版本的 SOAP 消息。 具体而言，显示的 XML 元素和表示接收方的 XML 命名空间不同的两个版本。  
  
 XML Web 服务接收的 SOAP 标头可以获取的目标接收方通过获取任一<xref:System.Web.Services.Protocols.SoapHeader.Role%2A>或<xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>属性。  
  
 为收件人`Body`元素和每个 SOAP 标头内`Header`SOAP 消息元素需要不能相同。 如果`Header`SOAP 消息中存在元素，它表示与 XML Web service 方法或中介可以发送的其他数据。 该数据，称为 SOAP 的接收方`Role`版本的 SOAP 规范和 SOAP 1.2 中`Actor`在 1.1 版中，可以比 XML Web service 方法的 URI 不同的 URI。  
  
 有关详细信息 SOAP`actor`属性，请参阅在 SOAP 规范http://www.w3.org/TR/SOAP/。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>