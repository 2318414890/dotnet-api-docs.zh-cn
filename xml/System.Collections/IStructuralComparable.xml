<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cf8d7de2981a659a0ec7ffa7680e40f16114e0a5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30368051" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>支持集合对象的结构化比较。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable>接口可以实现自定义的比较的集合成员。 也就是说，你可以定义精确它的含义的一个集合对象之前、 之后还是发生在第二个的集合对象在排序顺序的相同位置中。 你可以随后指定与接受的集合类型会使用此定义<xref:System.Collections.IStructuralComparable>接口。  
  
 此接口具有一个成员<xref:System.Collections.IStructuralComparable.CompareTo%2A>，用于确定当前集合对象是小于、 等于还是大于第二个对象在排序顺序。 通过执行实际的成员或当前实例中与第二个对象中的元素的比较<xref:System.Collections.IComparer>接口的实现，其中包含自定义比较的定义。  
  
> [!NOTE]
>  <xref:System.Collections.IStructuralComparable>接口仅支持结构化比较的排序或顺序。 <xref:System.Collections.IStructuralEquatable>接口支持自定义比较的结构是否相等。  
  
 .NET Framework 提供了两个默认比较器。 通过返回的其中一个<xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType>属性; 另返回<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>属性。  
  
 泛型的元组类 (<xref:System.Tuple%601>， <xref:System.Tuple%602>， <xref:System.Tuple%603>，依次类推) 和<xref:System.Array>类提供的显式实现<xref:System.Collections.IStructuralComparable>接口。 通过强制转换 （在 C# 中) 或当前实例的数组或到的元组的转换 （在 Visual Basic)<xref:System.Collections.IStructuralComparable>接口值并提供你<xref:System.Collections.IComparer>实现的自变量作为<xref:System.Collections.IStructuralComparable.CompareTo%2A>方法，你可以定义的自定义排序顺序数组或集合。 但是，不调用<xref:System.Collections.IStructuralComparable.CompareTo%2A>直接在大多数情况下的方法。 相反，<xref:System.Collections.IStructuralComparable.CompareTo%2A>如排序方法调用方法<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>。 在这种情况下，定义你<xref:System.Collections.IComparer>实现并将其作为自变量传递到一个排序方法或集合对象的类构造函数。 <xref:System.Collections.IStructuralComparable.CompareTo%2A>每当集合是否排序就，然后会自动调用方法替换你自定义比较器。  
  
   
  
## Examples  
 下面的示例创建的数组<xref:System.Tuple%606>包含三个从 1960年到 2000年的美国城市的填充数据的对象。 六元组的第一个组件是市/县名。 剩余的五个组件表示 1960年到 2000年个十年间隔的人口。  
  
 `PopulationComparer`类提供<xref:System.Collections.IComparer>实现，它允许对六元按任一及其组件进行排序数组。 两个值提供给`PopulationComparer`其构造函数中的类： 用于定义排序顺序的组件和一个布尔值，该值指示是否应按升序或降序排序元组对象的位置。  
  
 该示例然后显示未排序顺序中的数组中的元素，按第三个组件 （1970 年的人口） 进行排序和显示，然后按第六个分量 （2000 年的人口） 进行排序并显示它们。 请注意，该示例不直接调用<xref:System.Collections.IStructuralComparable.CompareTo%2A>方法。 隐式调用该方法<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>数组中每个元组对象的方法。  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">要与当前实例进行比较的对象。</param>
        <param name="comparer">一个将当前集合对象的成员与 <c>other</c> 的对应成员进行比较的对象。</param>
        <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
        <returns>一个指示当前集合对象与 <paramref name="other" /> 的关系的整数，如下表所示。  
  
 <list type="table"><listheader><term> 返回值  
  
 </term><description> 描述  
  
 </description></listheader><item><term> -1  
  
 </term><description> 当前实例位于 <paramref name="other" /> 之前。  
  
 </description></item><item><term> 0  
  
 </term><description> 当前实例和 <paramref name="other" /> 相等。  
  
 </description></item><item><term> 1  
  
 </term><description> 当前实例位于 <paramref name="other" /> 之后。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable.CompareTo%2A>方法支持自定义的结构化比较和排序的数组和元组对象。 <xref:System.Collections.IStructuralComparable.CompareTo%2A>方法调用`comparer`对象的<xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>方法来比较各个数组元素或元组组件，从第一个元素或组件开始。 单个调用<xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>结束和<xref:System.Collections.IStructuralComparable.CompareTo%2A>方法返回一个值，当以下条件之一为真：  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>方法返回-1。  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>方法返回 1。  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>为最后一个元素或集合对象中的组件调用方法。  
  
   
  
## Examples  
 下面的示例创建的数组<xref:System.Tuple%606>包含三个从 1960年到 2000年的美国城市的填充数据的对象。 六元组的第一个组件是市/县名。 剩余的五个组件表示 1960年到 2000年个十年间隔的人口。  
  
 `PopulationComparer`类提供<xref:System.Collections.IComparer>实现，它允许对六元按任一及其组件进行排序数组。 两个值提供给`PopulationComparer`其构造函数中的类： 定义排序顺序中，该组件的位置和一个<xref:System.Boolean>值，该值指示是否应按升序或降序排序元组对象。  
  
 该示例然后显示未排序顺序中的数组中的元素，按第三个组件 （1970 年的人口） 进行排序和显示，然后按第六个分量 （2000 年的人口） 进行排序并显示它们。 请注意，该示例不直接调用<xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType>实现。 隐式调用该方法<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>数组中每个元组对象的方法。  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此实例与 <paramref name="other" /> 不是同一类型。</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>