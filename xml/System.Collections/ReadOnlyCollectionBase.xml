<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReadOnlyCollectionBase.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58dc969bb4180a41a4a3642449038c15e5e069bc3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8dc969bb4180a41a4a3642449038c15e5e069bc3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>Provides the <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> base class for a strongly typed non-generic read-only collection.</source>
          <target state="translated">为强类型非泛型只读集合提供 <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> 基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>A <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> instance is always read-only.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>实例始终是只读的。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>See <ph id="ph1">&lt;xref:System.Collections.CollectionBase&gt;</ph> for a modifiable version of this class.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:System.Collections.CollectionBase&gt;</ph>此类的可修改版本。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> class.</source>
          <target state="translated">下面的代码示例实现<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">公共静态 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph>在 Visual Basic 中) 的此类型的成员都是线程安全。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">但不保证所有实例成员都是线程安全的。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>This implementation does not provide a synchronized (thread safe) wrapper for a <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>, but derived classes can create their own synchronized versions of the <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> using the <ph id="ph3">&lt;see cref="P:System.Collections.ICollection.SyncRoot" /&gt;</ph> property.</source>
          <target state="translated">此实现不提供同步 （线程安全） 包装器<ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>，但是，派生的类可以创建他们自己的同步的版本<ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>使用<ph id="ph3">&lt;see cref="P:System.Collections.ICollection.SyncRoot" /&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>This base class is provided to make it easier for implementers to create a strongly typed read-only custom collection.</source>
          <target state="translated">此基类用于轻松实现器来创建强类型的只读的自定义集合。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>Implementers are encouraged to extend this base class instead of creating their own.</source>
          <target state="translated">建议来扩展此基类的类，而不是创建其自己的实施者。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>Members of this base class are protected and are intended to be used through a derived class only.</source>
          <target state="translated">此基类的成员进行保护，并且可用于通过派生类使用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>This class makes the underlying collection available through the <ph id="ph1">&lt;see cref="P:System.Collections.ReadOnlyCollectionBase.InnerList" /&gt;</ph> property, which is intended for use only by classes that are derived directly from <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>.</source>
          <target state="translated">此类使基础集合可通过<ph id="ph1">&lt;see cref="P:System.Collections.ReadOnlyCollectionBase.InnerList" /&gt;</ph>属性，仅供直接派生自的类<ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ReadOnlyCollectionBase">
          <source>The derived class must ensure that its own users cannot modify the underlying collection.</source>
          <target state="translated">派生的类必须确保它自己的用户不能修改基础集合。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">此构造函数是 o （1） 操作。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Collections.ReadOnlyCollectionBase.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> instance.</source>
          <target state="translated">获取包含在 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 实例中的元素数。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> instance.</source>
          <target state="translated">包含在 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 实例中的元素数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.Count">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> class.</source>
          <target state="translated">下面的代码示例实现<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> instance.</source>
          <target state="translated">返回循环访问 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 实例的枚举器。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> instance.</source>
          <target state="translated">用于 <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 实例的 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">C# 语言的 <ph id="ph1">`foreach`</ph> 语句（在 Visual Basic 中为 <ph id="ph2">`for each`</ph>）隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 也会将枚举器放回此位置。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 之前，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 返回同一对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">若要再次将 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为集合的第一个元素，可以调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 并接着调用 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> class.</source>
          <target state="translated">下面的代码示例实现<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Collections.ReadOnlyCollectionBase.InnerList">
          <source>Gets the list of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> instance.</source>
          <target state="translated">获取包含在 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 实例中的元素的列表。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.InnerList">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> representing the <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> instance itself.</source>
          <target state="translated">表示 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 实例本身的 <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.InnerList">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.InnerList">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> class.</source>
          <target state="translated">下面的代码示例实现<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.InnerList">
          <source>This class makes the underlying collection available through the <ph id="ph1">&lt;see cref="P:System.Collections.ReadOnlyCollectionBase.InnerList" /&gt;</ph> property, which is intended for use only by classes that are derived directly from <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>.</source>
          <target state="translated">此类使基础集合可通过<ph id="ph1">&lt;see cref="P:System.Collections.ReadOnlyCollectionBase.InnerList" /&gt;</ph>属性，仅供直接派生自的类<ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.InnerList">
          <source>The derived class must ensure that its own users cannot modify the underlying collection.</source>
          <target state="translated">派生的类必须确保它自己的用户不能修改基础集合。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph>.</source>
          <target state="translated">一维 <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>，它是从 <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 复制的元素的目标。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> 必须具有从零开始的索引。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 中从零开始的索引，在此处开始复制。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated">从目标数组的指定索引处开始将整个 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 复制到兼容的一维 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">指定的数组必须具有兼容类型。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">此方法使用<ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>要复制的元素。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ReadOnlyCollectionBase.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.ReadOnlyCollectionBase.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 是多维的。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">源 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 中的元素个数大于从 <ph id="ph2">&lt;paramref name="index" /&gt;</ph> 到目标 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> 末尾之间的可用空间。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">无法自动将源 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 的类型转换为目标 <ph id="ph2">&lt;paramref name="array" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to a <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> object is synchronized (thread safe).</source>
          <target state="translated">获取一个值，该值指示对 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 对象的访问是否同步（线程安全）。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> object is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果对 <ph id="ph2">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 对象的访问是同步的（线程安全），则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>A <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> object is not synchronized.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>不同步对象。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>Derived classes can provide a synchronized version of the <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> class using the <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">派生的类可以提供的同步的版本<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>类使用<ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property during the entire enumeration.</source>
          <target state="translated">下面的代码示例演示如何锁定集合使用<ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>属性在整个枚举期间。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to a <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> object.</source>
          <target state="translated">获取一个对象，该对象可用于同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 对象的访问。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> object.</source>
          <target state="translated">一个对象，该对象可用于同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ReadOnlyCollectionBase" /&gt;</ph> 对象的访问。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>Derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> class using the <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">派生的类可以提供自己的同步的版本<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>类使用<ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> object, not directly on the <ph id="ph3">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> object.</source>
          <target state="translated">同步代码必须在执行操作<ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>对象，不是直接对<ph id="ph3">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">这样可确保对从其他对象派生的集合正确地执行操作。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph> object.</source>
          <target state="translated">具体地说，这样可保持正确的同步，与可能同时对修改其他线程<ph id="ph1">&lt;xref:System.Collections.ReadOnlyCollectionBase&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property during the entire enumeration.</source>
          <target state="translated">下面的代码示例演示如何锁定集合使用<ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>属性在整个枚举期间。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>