<Type Name="DictionaryBase" FullName="System.Collections.DictionaryBase">
  <TypeSignature Language="C#" Value="public abstract class DictionaryBase : System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit DictionaryBase extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.DictionaryBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DictionaryBase&#xA;Implements IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictionaryBase abstract : System::Collections::IDictionary" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="87c2b-101">为键/值对的强类型集合提供 <see langword="abstract" /> 基类。</span><span class="sxs-lookup"><span data-stu-id="87c2b-101">Provides the <see langword="abstract" /> base class for a strongly typed collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-102">（有关在 Visual Basic 中的每个） 的 C# 语言的 foreach 语句返回集合中元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-102">The foreach statement of the C# language (for each in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="87c2b-103">由于每个元素的<xref:System.Collections.DictionaryBase>是一个键/值对，元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="87c2b-103">Since each element of the <xref:System.Collections.DictionaryBase> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="87c2b-104">相反，元素类型是<xref:System.Collections.DictionaryEntry>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-104">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span>  
  
 <span data-ttu-id="87c2b-105">`foreach`语句是枚举数，仅允许从，不写入集合读取周围的包装器。</span><span class="sxs-lookup"><span data-stu-id="87c2b-105">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87c2b-106">因为可以继承密钥，但不更改其行为，使用比较能保证其绝对唯一性<xref:System.Type.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-106">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-107">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-107">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="87c2b-108">公共静态 (<see langword="Shared" />在 Visual Basic 中) 的此类型的成员都是线程安全。</span><span class="sxs-lookup"><span data-stu-id="87c2b-108">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="87c2b-109">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="87c2b-109">Any instance members are not guaranteed to be thread safe.</span></span>  
  
 <span data-ttu-id="87c2b-110">此实现不提供同步的 （线程安全） 包装器<see cref="T:System.Collections.DictionaryBase" />，但是，派生的类可以创建他们自己的同步的版本<see cref="T:System.Collections.DictionaryBase" />使用<see cref="P:System.Collections.ICollection.SyncRoot" />属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-110">This implementation does not provide a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.DictionaryBase" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.DictionaryBase" /> using the <see cref="P:System.Collections.ICollection.SyncRoot" /> property.</span></span>  
  
 <span data-ttu-id="87c2b-111">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-111">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="87c2b-112">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-112">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="87c2b-113">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-113">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="87c2b-114">此基类用于轻松实现器来创建强类型的自定义集合。</span><span class="sxs-lookup"><span data-stu-id="87c2b-114">This base class is provided to make it easier for implementers to create a strongly typed custom collection.</span></span> <span data-ttu-id="87c2b-115">建议来扩展此基类的类，而不是创建其自己的实施者。</span><span class="sxs-lookup"><span data-stu-id="87c2b-115">Implementers are encouraged to extend this base class instead of creating their own.</span></span>  
  
 <span data-ttu-id="87c2b-116">此基类的成员进行保护，并且可用于通过派生类使用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-116">Members of this base class are protected and are intended to be used through a derived class only.</span></span></para>
    </block>
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="N:System.Collections.Generic" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DictionaryBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DictionaryBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87c2b-117">初始化 <see cref="T:System.Collections.DictionaryBase" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="87c2b-117">Initializes a new instance of the <see cref="T:System.Collections.DictionaryBase" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-118">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-118">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87c2b-119">清除 <see cref="T:System.Collections.DictionaryBase" /> 实例的内容。</span><span class="sxs-lookup"><span data-stu-id="87c2b-119">Clears the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-120"><xref:System.Collections.DictionaryBase.Count%2A> 是设置为零，并且集合的元素对其他对象的引用也被释放。</span><span class="sxs-lookup"><span data-stu-id="87c2b-120"><xref:System.Collections.DictionaryBase.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="87c2b-121">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.DictionaryBase.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-121">This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="87c2b-122">一维 <see cref="T:System.Array" />，为从 <see cref="T:System.Collections.DictionaryEntry" /> 实例复制的 <see cref="T:System.Collections.DictionaryBase" /> 对象的目标位置。</span><span class="sxs-lookup"><span data-stu-id="87c2b-122">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span> <span data-ttu-id="87c2b-123"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="87c2b-123">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="87c2b-124"><c>array</c> 中从零开始的索引，在此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="87c2b-124">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="87c2b-125">将 <see cref="T:System.Collections.DictionaryBase" /> 元素复制到位于指定索引处的一维 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="87c2b-125">Copies the <see cref="T:System.Collections.DictionaryBase" /> elements to a one-dimensional <see cref="T:System.Array" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-126">元素被复制到<xref:System.Array>枚举数循环访问的相同顺序<xref:System.Collections.DictionaryBase>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-126">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.DictionaryBase>.</span></span>  
  
 <span data-ttu-id="87c2b-127">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.DictionaryBase.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-127">This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87c2b-128"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-128"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="87c2b-129"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="87c2b-129"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87c2b-130"><paramref name="array" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="87c2b-130"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="87c2b-131">或</span><span class="sxs-lookup"><span data-stu-id="87c2b-131">-or-</span></span>  
  
 <span data-ttu-id="87c2b-132">源 <see cref="T:System.Collections.DictionaryBase" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="87c2b-132">The number of elements in the source <see cref="T:System.Collections.DictionaryBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="87c2b-133">无法自动将源 <see cref="T:System.Collections.DictionaryBase" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="87c2b-133">The type of the source <see cref="T:System.Collections.DictionaryBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.DictionaryBase.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-134">获取包含在 <see cref="T:System.Collections.DictionaryBase" /> 实例中的元素数。</span><span class="sxs-lookup"><span data-stu-id="87c2b-134">Gets the number of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="87c2b-135">包含在 <see cref="T:System.Collections.DictionaryBase" /> 实例中的元素数。</span><span class="sxs-lookup"><span data-stu-id="87c2b-135">The number of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-136">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-136">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Dictionary { System::Collections::IDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-137">获取包含在 <see cref="T:System.Collections.DictionaryBase" /> 实例中的元素的列表。</span><span class="sxs-lookup"><span data-stu-id="87c2b-137">Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="87c2b-138">表示 <see cref="T:System.Collections.IDictionary" /> 实例本身的 <see cref="T:System.Collections.DictionaryBase" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-138">An <see cref="T:System.Collections.IDictionary" /> representing the <see cref="T:System.Collections.DictionaryBase" /> instance itself.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-139">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-139">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-140">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-140">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-141">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-141">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87c2b-142">返回循环访问 <see cref="T:System.Collections.IDictionaryEnumerator" /> 实例的 <see cref="T:System.Collections.DictionaryBase" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-142">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <returns><span data-ttu-id="87c2b-143">用于 <see cref="T:System.Collections.DictionaryBase" /> 实例的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-143">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-144">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-144">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="87c2b-145">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="87c2b-145">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="87c2b-146">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="87c2b-146">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="87c2b-147">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="87c2b-147">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="87c2b-148"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="87c2b-148"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="87c2b-149">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-149">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="87c2b-150">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-150">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="87c2b-151">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-151"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="87c2b-152"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-152"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="87c2b-153">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-153">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="87c2b-154">当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-154">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="87c2b-155">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="87c2b-155">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="87c2b-156">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-156">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="87c2b-157">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="87c2b-157">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="87c2b-158">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="87c2b-158">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="87c2b-159">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-159">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="87c2b-160">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="87c2b-160">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="87c2b-161">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="87c2b-161">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="87c2b-162">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="87c2b-162">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-163">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-163">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="InnerHashtable">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable InnerHashtable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable InnerHashtable" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.InnerHashtable" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property InnerHashtable As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ InnerHashtable { System::Collections::Hashtable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-164">获取包含在 <see cref="T:System.Collections.DictionaryBase" /> 实例中的元素的列表。</span><span class="sxs-lookup"><span data-stu-id="87c2b-164">Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="87c2b-165"><see cref="T:System.Collections.Hashtable" />，表示 <see cref="T:System.Collections.DictionaryBase" /> 实例本身。</span><span class="sxs-lookup"><span data-stu-id="87c2b-165">A <see cref="T:System.Collections.Hashtable" /> representing the <see cref="T:System.Collections.DictionaryBase" /> instance itself.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-166">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-166">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-167">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-167">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClear">
      <MemberSignature Language="C#" Value="protected virtual void OnClear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnClear" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClear ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87c2b-168">在清除 <see cref="T:System.Collections.DictionaryBase" /> 实例的内容之前执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-168">Performs additional custom processes before clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-169">此方法的默认实现需要通过执行一些操作之前清除集合的派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-169">The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</span></span>  
  
 <span data-ttu-id="87c2b-170">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-170">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-171">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-171">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-172">此方法允许实施者能定义从基础中删除所有元素之前必须执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-172">This method allows implementers to define processes that must be performed before deleting all the elements from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-173">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-173">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-174"><see cref="M:System.Collections.DictionaryBase.OnClear" /> 而在标准的清除行为之前调用<see cref="M:System.Collections.DictionaryBase.OnClearComplete" />标准清除行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-174"><see cref="M:System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span>  
  
 <span data-ttu-id="87c2b-175">例如，实施者可以免除中删除全局清除的某些元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-175">For example, implementers can exempt certain elements from deletion by a global Clear.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnClearComplete" />
        <altmember cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnClearComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnClearComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClearComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnClearComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClearComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClearComplete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87c2b-176">在清除 <see cref="T:System.Collections.DictionaryBase" /> 实例的内容之后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-176">Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-177">此方法的默认实现需要通过执行一些操作之后清除集合的派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-177">The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</span></span>  
  
 <span data-ttu-id="87c2b-178">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-178">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-179">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-179">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-180">此方法允许实施者能定义必须从基础删除所有元素后执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-180">This method allows implementers to define processes that must be performed after deleting all the elements from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-181">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-181">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-182"><see cref="M:System.Collections.DictionaryBase.OnClear" /> 而在标准的清除行为之前调用<see cref="M:System.Collections.DictionaryBase.OnClearComplete" />标准清除行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-182"><see cref="M:System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnClear" />
        <altmember cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnGet">
      <MemberSignature Language="C#" Value="protected virtual object OnGet (object key, object currentValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object OnGet(object key, object currentValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnGet (key As Object, currentValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ OnGet(System::Object ^ key, System::Object ^ currentValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="currentValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-183">要获取的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-183">The key of the element to get.</span></span></param>
        <param name="currentValue"><span data-ttu-id="87c2b-184">与 <c>key</c> 相关联的元素的当前值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-184">The current value of the element associated with <c>key</c>.</span></span></param>
        <summary><span data-ttu-id="87c2b-185">获取 <see cref="T:System.Collections.DictionaryBase" /> 实例中带有指定键和值的元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-185">Gets the element with the specified key and value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <returns><span data-ttu-id="87c2b-186">包含带有指定键和值的元素的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-186">An <see cref="T:System.Object" /> containing the element with the specified key and value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-187">此方法的默认实现返回`currentValue`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-187">The default implementation of this method returns `currentValue`.</span></span> <span data-ttu-id="87c2b-188">它旨在由派生类检索指定的元素时执行其他操作中被重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-188">It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.</span></span>  
  
 <span data-ttu-id="87c2b-189">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-189">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-190">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-190">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-191">此方法允许实施者能定义执行的基础的标准 Get 行为时必须执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-191">This method allows implementers to define processes that must be performed when executing the standard Get behavior of the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-192">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-192">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-193"><see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /> 可以用于指定进程可以在返回从基础检索到的值之前执行<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-193"><see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /> can be used to specify processes to perform before returning the value retrieved from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-194">例如，实施者可以值强制转换到另一个类型之前将其返回。</span><span class="sxs-lookup"><span data-stu-id="87c2b-194">For example, implementers can cast the value into another type before returning it.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInsert">
      <MemberSignature Language="C#" Value="protected virtual void OnInsert (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsert(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsert (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsert(System::Object ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-195">要插入的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-195">The key of the element to insert.</span></span></param>
        <param name="value"><span data-ttu-id="87c2b-196">要插入的元素的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-196">The value of the element to insert.</span></span></param>
        <summary><span data-ttu-id="87c2b-197">在向 <see cref="T:System.Collections.DictionaryBase" /> 实例中插入新元素之前执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-197">Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-198">此方法的默认实现需要通过执行一些操作，才能插入指定的元素的派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-198">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</span></span>  
  
 <span data-ttu-id="87c2b-199">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-199">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-200">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-200">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-201">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-201">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-202">此方法允许实施者能定义将元素插入到基础之前必须执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-202">This method allows implementers to define processes that must be performed before inserting the element into the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-203">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-203">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-204"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> 而在标准的插入行为之前, 调用<see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />标准插入行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-204"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> is invoked after the standard Insert behavior.</span></span>  
  
 <span data-ttu-id="87c2b-205">例如，实施者可以限制哪些类型的对象可以插入到<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-205">For example, implementers can restrict which types of objects can be inserted into the <see cref="T:System.Collections.Hashtable" />.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInsertComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnInsertComplete (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsertComplete(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsertComplete (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsertComplete(System::Object ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-206">要插入的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-206">The key of the element to insert.</span></span></param>
        <param name="value"><span data-ttu-id="87c2b-207">要插入的元素的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-207">The value of the element to insert.</span></span></param>
        <summary><span data-ttu-id="87c2b-208">在向 <see cref="T:System.Collections.DictionaryBase" /> 实例中插入新元素之后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-208">Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-209">此方法的默认实现需要通过之后插入指定的元素执行某些操作在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-209">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</span></span>  
  
 <span data-ttu-id="87c2b-210">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-210">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-211">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-211">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-212">此方法允许实施者能定义将元素插入到基础之后必须执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-212">This method allows implementers to define processes that must be performed after inserting the element into the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-213">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-213">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-214"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> 而在标准的插入行为之前, 调用<see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />标准插入行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-214"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> is invoked after the standard Insert behavior.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnRemove">
      <MemberSignature Language="C#" Value="protected virtual void OnRemove (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemove(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemove (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemove(System::Object ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-215">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-215">The key of the element to remove.</span></span></param>
        <param name="value"><span data-ttu-id="87c2b-216">要移除的元素的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-216">The value of the element to remove.</span></span></param>
        <summary><span data-ttu-id="87c2b-217">当从 <see cref="T:System.Collections.DictionaryBase" /> 实例移除元素时执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-217">Performs additional custom processes before removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-218">此方法的默认实现需要由派生类中移除指定的元素之前执行一些操作中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-218">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</span></span>  
  
 <span data-ttu-id="87c2b-219">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-219">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-220">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-220">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-221">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-221">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-222">此方法允许实施者能定义从基础删除元素之前必须执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-222">This method allows implementers to define processes that must be performed before removing the element from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-223">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-223">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-224"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> 而在标准的移除行为之前, 调用<see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />标准删除行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-224"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> is invoked after the standard Remove behavior.</span></span>  
  
 <span data-ttu-id="87c2b-225">例如，实施者可以阻止移除元素，通过始终引发异常<see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-225">For example, implementers can prevent removal of elements by always throwing an exception in <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnClear" />
      </Docs>
    </Member>
    <Member MemberName="OnRemoveComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveComplete (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveComplete(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveComplete (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveComplete(System::Object ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-226">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-226">The key of the element to remove.</span></span></param>
        <param name="value"><span data-ttu-id="87c2b-227">要移除的元素的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-227">The value of the element to remove.</span></span></param>
        <summary><span data-ttu-id="87c2b-228">在从 <see cref="T:System.Collections.DictionaryBase" /> 实例中移除元素之后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-228">Performs additional custom processes after removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-229">此方法的默认实现需要通过执行一些操作删除指定的元素之后的派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-229">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</span></span>  
  
 <span data-ttu-id="87c2b-230">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-230">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-231">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-231">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-232">此方法允许实施者能定义从基础删除元素后，必须执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-232">This method allows implementers to define processes that must be performed after removing the element from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-233">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-233">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-234"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> 而在标准的移除行为之前, 调用<see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />标准删除行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-234"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> is invoked after the standard Remove behavior.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnClearComplete" />
      </Docs>
    </Member>
    <Member MemberName="OnSet">
      <MemberSignature Language="C#" Value="protected virtual void OnSet (object key, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSet(object key, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSet (key As Object, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSet(System::Object ^ key, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-235">要定位的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-235">The key of the element to locate.</span></span></param>
        <param name="oldValue"><span data-ttu-id="87c2b-236">与 <c>key</c> 相关联的元素的旧值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-236">The old value of the element associated with <c>key</c>.</span></span></param>
        <param name="newValue"><span data-ttu-id="87c2b-237">与 <c>key</c> 相关联的元素的新值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-237">The new value of the element associated with <c>key</c>.</span></span></param>
        <summary><span data-ttu-id="87c2b-238">当在 <see cref="T:System.Collections.DictionaryBase" /> 实例中设置值之前执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-238">Performs additional custom processes before setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-239">此方法的默认实现需要的设置指定的元素之前执行一些操作派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-239">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</span></span>  
  
 <span data-ttu-id="87c2b-240">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-240">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-241">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-241">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-242">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-242">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-243">此方法允许实施者能定义必须在基础中设置指定的元素之前执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-243">This method allows implementers to define processes that must be performed before setting the specified element in the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-244">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-244">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-245"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> 而在标准的设置行为之前调用<see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />标准集行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-245"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span>  
  
 <span data-ttu-id="87c2b-246">例如，实施者可以限制哪些值可以通过执行检查内部覆盖<see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-246">For example, implementers can restrict which values can be overwritten by performing a check inside <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnSetComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnSetComplete (object key, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetComplete(object key, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSetComplete (key As Object, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSetComplete(System::Object ^ key, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-247">要定位的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-247">The key of the element to locate.</span></span></param>
        <param name="oldValue"><span data-ttu-id="87c2b-248">与 <c>key</c> 相关联的元素的旧值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-248">The old value of the element associated with <c>key</c>.</span></span></param>
        <param name="newValue"><span data-ttu-id="87c2b-249">与 <c>key</c> 相关联的元素的新值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-249">The new value of the element associated with <c>key</c>.</span></span></param>
        <summary><span data-ttu-id="87c2b-250">当在 <see cref="T:System.Collections.DictionaryBase" /> 实例中设置值后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-250">Performs additional custom processes after setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-251">此方法的默认实现需要的设置指定的元素后执行一些操作派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-251">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</span></span>  
  
 <span data-ttu-id="87c2b-252">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-252">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-253">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-253">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-254">此方法允许实施者能定义必须在基础中设置指定的元素之后执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-254">This method allows implementers to define processes that must be performed after setting the specified element in the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-255">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-255">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-256"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> 而在标准的设置行为之前调用<see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />标准集行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="87c2b-256"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnValidate">
      <MemberSignature Language="C#" Value="protected virtual void OnValidate (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidate(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidate (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidate(System::Object ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-257">要验证的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-257">The key of the element to validate.</span></span></param>
        <param name="value"><span data-ttu-id="87c2b-258">要验证的元素的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-258">The value of the element to validate.</span></span></param>
        <summary><span data-ttu-id="87c2b-259">在验证具有指定键和值的元素时执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-259">Performs additional custom processes when validating the element with the specified key and value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-260">此方法的默认实现需要由派生类时验证指定的元素执行某些操作中重写。</span><span class="sxs-lookup"><span data-stu-id="87c2b-260">The default implementation of this method is intended to be overridden by a derived class to perform some action when the specified element is validated.</span></span>  
  
 <span data-ttu-id="87c2b-261">仅在返回的实例上调用 On \* 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-261">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-262">此方法的默认实现是一个 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-262">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-263">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-263">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="87c2b-264">此方法允许实施者能定义执行的基础的标准行为时必须执行的过程<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-264">This method allows implementers to define processes that must be performed when executing the standard behavior of the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="87c2b-265">通过定义此方法，实施者可以对继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="87c2b-265">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="87c2b-266"><see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /> 可用来对加以限制的对象集合中可接受的类型。</span><span class="sxs-lookup"><span data-stu-id="87c2b-266"><see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /> can be used to impose restrictions on the type of objects that are accepted into the collection.</span></span> <span data-ttu-id="87c2b-267">默认实现可防止发生<see langword="null" />中添加或删除从基础<see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-267">The default implementation prevents <see langword="null" /> from being added to or removed from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span></para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-268">获取一个值，该值指示对 <see cref="T:System.Collections.DictionaryBase" /> 对象的访问是否同步（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="87c2b-268">Gets a value indicating whether access to a <see cref="T:System.Collections.DictionaryBase" /> object is synchronized (thread safe).</span></span></summary>
        <value>
          <span data-ttu-id="87c2b-269">如果对 <see cref="T:System.Collections.DictionaryBase" /> 对象的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-269"><see langword="true" /> if access to the <see cref="T:System.Collections.DictionaryBase" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="87c2b-270">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-270">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-271">A<xref:System.Collections.DictionaryBase>不同步对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-271">A <xref:System.Collections.DictionaryBase> object is not synchronized.</span></span> <span data-ttu-id="87c2b-272">派生的类可以提供的同步的版本<xref:System.Collections.DictionaryBase>类使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-272">Derived classes can provide a synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-273">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-273">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="87c2b-274">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-274">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="87c2b-275">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-275">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-276">下面的代码示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>属性在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="87c2b-276">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.DictionaryBase#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/source2.cs#3)]
 [!code-vb[System.Collections.DictionaryBase#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/source2.vb#3)]  
  
 <span data-ttu-id="87c2b-277">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-277">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-278">获取一个对象，该对象可用于同步对 <see cref="T:System.Collections.DictionaryBase" /> 对象的访问。</span><span class="sxs-lookup"><span data-stu-id="87c2b-278">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></summary>
        <value><span data-ttu-id="87c2b-279">一个对象，该对象可用于同步对 <see cref="T:System.Collections.DictionaryBase" /> 对象的访问。</span><span class="sxs-lookup"><span data-stu-id="87c2b-279">An object that can be used to synchronize access to the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-280">派生的类可以提供自己的同步的版本<xref:System.Collections.DictionaryBase>类使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-280">Derived classes can provide their own synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="87c2b-281">同步代码必须在执行操作<xref:System.Collections.ICollection.SyncRoot%2A>属性<xref:System.Collections.DictionaryBase>对象，不是直接对<xref:System.Collections.DictionaryBase>对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-281">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.DictionaryBase> object, not directly on the <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="87c2b-282">这样可确保对从其他对象派生的集合正确地执行操作。</span><span class="sxs-lookup"><span data-stu-id="87c2b-282">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="87c2b-283">具体地说，这样可保持正确的同步，与可能同时对修改其他线程<xref:System.Collections.DictionaryBase>对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-283">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.DictionaryBase> object.</span></span>  
  
 <span data-ttu-id="87c2b-284">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-284">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="87c2b-285">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-285">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="87c2b-286">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-286">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-287">下面的代码示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>属性在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="87c2b-287">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.DictionaryBase#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/source2.cs#3)]
 [!code-vb[System.Collections.DictionaryBase#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/source2.vb#3)]  
  
 <span data-ttu-id="87c2b-288">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-288">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As Object, value As Object) Implements IDictionary.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Add(System::Object ^ key, System::Object ^ value) = System::Collections::IDictionary::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-289">要添加的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-289">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="87c2b-290">要添加的元素的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-290">The value of the element to add.</span></span></param>
        <summary><span data-ttu-id="87c2b-291">将带有指定键和值的元素添加到 <see cref="T:System.Collections.DictionaryBase" /> 中。</span><span class="sxs-lookup"><span data-stu-id="87c2b-291">Adds an element with the specified key and value into the <see cref="T:System.Collections.DictionaryBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-292">具有其状态和其哈希代码值之间没有关联的对象通常不应作为键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-292">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="87c2b-293">例如，<xref:System.String>对象要优于<xref:System.Text.StringBuilder>作为键使用的对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-293">For example, <xref:System.String> objects are better than <xref:System.Text.StringBuilder> objects for use as keys.</span></span>  
  
 <span data-ttu-id="87c2b-294">你还可以使用<xref:System.Collections.IDictionary.Item%2A>中不存在要添加新元素的键的值设置属性<xref:System.Collections.DictionaryBase>; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-294">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="87c2b-295">但是，如果指定的键已存在于<xref:System.Collections.DictionaryBase>，则设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-295">However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="87c2b-296">与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-296">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="87c2b-297">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="87c2b-297">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-298">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-298">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87c2b-299"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-299"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87c2b-300"><see cref="T:System.Collections.DictionaryBase" /> 中已存在具有相同键的元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-300">An element with the same key already exists in the <see cref="T:System.Collections.DictionaryBase" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="87c2b-301"><see cref="T:System.Collections.DictionaryBase" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="87c2b-301">The <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span></span>  
  
 <span data-ttu-id="87c2b-302">或</span><span class="sxs-lookup"><span data-stu-id="87c2b-302">-or-</span></span>  
  
 <span data-ttu-id="87c2b-303"><see cref="T:System.Collections.DictionaryBase" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="87c2b-303">The <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As Object) As Boolean Implements IDictionary.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IDictionary.Contains(System::Object ^ key) = System::Collections::IDictionary::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-304">要在 <see cref="T:System.Collections.DictionaryBase" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-304">The key to locate in the <see cref="T:System.Collections.DictionaryBase" />.</span></span></param>
        <summary><span data-ttu-id="87c2b-305">确定 <see cref="T:System.Collections.DictionaryBase" /> 是否包含特定键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-305">Determines whether the <see cref="T:System.Collections.DictionaryBase" /> contains a specific key.</span></span></summary>
        <returns>
          <span data-ttu-id="87c2b-306">如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.DictionaryBase" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-306"><see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-307">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="87c2b-307">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="87c2b-308">从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`key`以确定是否`item`存在。</span><span class="sxs-lookup"><span data-stu-id="87c2b-308">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists.</span></span> <span data-ttu-id="87c2b-309">在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`key`参数的集合中的对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-309">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `key` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-310">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-310">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87c2b-311"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-311"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IDictionary.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IDictionary.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-312">获取一个值，该值指示 <see cref="T:System.Collections.DictionaryBase" /> 对象是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="87c2b-312">Gets a value indicating whether a <see cref="T:System.Collections.DictionaryBase" /> object has a fixed size.</span></span></summary>
        <value>
          <span data-ttu-id="87c2b-313">如果 <see cref="T:System.Collections.DictionaryBase" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-313"><see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> object has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="87c2b-314">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-314">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-315">具有固定大小的集合不允许添加或移除元素后集合创建后，但允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-315">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="87c2b-316">具有固定大小的集合是只是一个集合的包装器防止添加和移除元素;因此，如果对基础集合，包括添加或移除元素，进行更改的固定大小的集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="87c2b-316">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="87c2b-317">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-317">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IDictionary.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IDictionary.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-318">获取一个值，该值指示 <see cref="T:System.Collections.DictionaryBase" /> 对象是否为只读。</span><span class="sxs-lookup"><span data-stu-id="87c2b-318">Gets a value indicating whether a <see cref="T:System.Collections.DictionaryBase" /> object is read-only.</span></span></summary>
        <value>
          <span data-ttu-id="87c2b-319">如果 <see cref="T:System.Collections.DictionaryBase" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-319"><see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> object is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="87c2b-320">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-320">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-321">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-321">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="87c2b-322">集合是只读的是只是一个集合与防止集合; 进行修改的包装因此，如果对基础集合进行更改，只读集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="87c2b-322">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="87c2b-323">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-323">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(key As Object) As Object Implements IDictionary.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IDictionary.Item[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-324">要获取或设置其值的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-324">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="87c2b-325">获取或设置与指定的键关联的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-325">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="87c2b-326">与指定的键相关联的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-326">The value associated with the specified key.</span></span> <span data-ttu-id="87c2b-327">如果未找到指定的键，尝试获取它将返回 <see langword="null" />，尝试设置它将使用指定的键创建新元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-327">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new element using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-328">可以使用下面的语法通过此属性访问集合中的特定元素：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-328">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="87c2b-329">你还可以使用<xref:System.Collections.IDictionary.Item%2A>中不存在要添加新元素的键的值设置属性<xref:System.Collections.DictionaryBase>; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-329">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="87c2b-330">但是，如果指定的键已存在于<xref:System.Collections.DictionaryBase>，则设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-330">However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="87c2b-331">与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-331">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="87c2b-332">检索此属性的值的运算 o （1）;设置属性也是 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="87c2b-332">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-333">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-333">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87c2b-334"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-334"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="87c2b-335">设置了该属性，但 <see cref="T:System.Collections.DictionaryBase" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="87c2b-335">The property is set and the <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span></span>  
  
 <span data-ttu-id="87c2b-336">或</span><span class="sxs-lookup"><span data-stu-id="87c2b-336">-or-</span></span>  
  
 <span data-ttu-id="87c2b-337">设置该属性，集合中不存在 <paramref name="key" />，而且 <see cref="T:System.Collections.DictionaryBase" /> 具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="87c2b-337">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection Implements IDictionary.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System.Collections.IDictionary.Keys { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-338">获取包含 <see cref="T:System.Collections.ICollection" /> 对象中的键的 <see cref="T:System.Collections.DictionaryBase" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-338">Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></summary>
        <value><span data-ttu-id="87c2b-339">包含 <see cref="T:System.Collections.ICollection" /> 对象中的键的 <see cref="T:System.Collections.DictionaryBase" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-339">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-340">中的键的顺序<xref:System.Collections.ICollection>对象未指定，但它是中的关联值顺序相同<xref:System.Collections.ICollection>返回对象<xref:System.Collections.IDictionary.Values%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-340">The order of the keys in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated values in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Values%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-341">返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原始中的键<xref:System.Collections.DictionaryBase>对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-341">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="87c2b-342">因此，更改为<xref:System.Collections.DictionaryBase>继续才会反映在返回<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-342">Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="87c2b-343">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-343">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-344">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>属性小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-344">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.IDictionary.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (key As Object) Implements IDictionary.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Remove(System::Object ^ key) = System::Collections::IDictionary::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="87c2b-345">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="87c2b-345">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="87c2b-346">从 <see cref="T:System.Collections.DictionaryBase" /> 中移除带有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-346">Removes the element with the specified key from the <see cref="T:System.Collections.DictionaryBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-347">如果<xref:System.Collections.DictionaryBase>不具有指定键，包含的元素<xref:System.Collections.DictionaryBase>保持不变。</span><span class="sxs-lookup"><span data-stu-id="87c2b-347">If the <xref:System.Collections.DictionaryBase> does not contain an element with the specified key, the <xref:System.Collections.DictionaryBase> remains unchanged.</span></span> <span data-ttu-id="87c2b-348">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-348">No exception is thrown.</span></span>  
  
 <span data-ttu-id="87c2b-349">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="87c2b-349">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-350">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-350">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87c2b-351"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-351"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="87c2b-352"><see cref="T:System.Collections.DictionaryBase" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="87c2b-352">The <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span></span>  
  
 <span data-ttu-id="87c2b-353">或</span><span class="sxs-lookup"><span data-stu-id="87c2b-353">-or-</span></span>  
  
 <span data-ttu-id="87c2b-354"><see cref="T:System.Collections.DictionaryBase" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="87c2b-354">The <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection Implements IDictionary.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System.Collections.IDictionary.Values { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87c2b-355">获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.DictionaryBase" /> 对象中的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-355">Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></summary>
        <value><span data-ttu-id="87c2b-356"><see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.DictionaryBase" /> 对象中的值。</span><span class="sxs-lookup"><span data-stu-id="87c2b-356">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-357">中的值的顺序<xref:System.Collections.ICollection>对象未指定，但它是中的关联键顺序相同<xref:System.Collections.ICollection>返回对象<xref:System.Collections.IDictionary.Keys%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-357">The order of the values in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated keys in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="87c2b-358">返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原来的值<xref:System.Collections.DictionaryBase>对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-358">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="87c2b-359">因此，更改为<xref:System.Collections.DictionaryBase>继续才会反映在返回<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-359">Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="87c2b-360">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="87c2b-360">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c2b-361">下面的代码示例实现<xref:System.Collections.DictionaryBase>类并使用该实现创建的字典<xref:System.String>键和值的具有<xref:System.String.Length%2A>属性小于或等于的 5 个字符。</span><span class="sxs-lookup"><span data-stu-id="87c2b-361">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.IDictionary.Keys" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87c2b-362">返回循环访问 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.DictionaryBase" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-362">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.DictionaryBase" />.</span></span></summary>
        <returns><span data-ttu-id="87c2b-363"><see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Collections.DictionaryBase" />。</span><span class="sxs-lookup"><span data-stu-id="87c2b-363">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c2b-364">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="87c2b-364">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="87c2b-365">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="87c2b-365">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="87c2b-366">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="87c2b-366">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="87c2b-367">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="87c2b-367">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="87c2b-368"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="87c2b-368"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="87c2b-369">在此位置，调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-369">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="87c2b-370">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-370">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="87c2b-371">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="87c2b-371"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="87c2b-372"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="87c2b-372"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="87c2b-373">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-373">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="87c2b-374">当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="87c2b-374">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="87c2b-375">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-375">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="87c2b-376">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-376">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="87c2b-377">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="87c2b-377">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="87c2b-378">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="87c2b-378">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="87c2b-379">如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="87c2b-379">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="87c2b-380">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="87c2b-380">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="87c2b-381">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-381">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="87c2b-382">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="87c2b-382">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="87c2b-383">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="87c2b-383">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>