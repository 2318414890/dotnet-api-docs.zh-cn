<Type Name="Stack" FullName="System.Collections.Stack">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e52fd777b1e5cc88d2a91ddd6b9534b882b7d478" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48772357" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Stack : ICloneable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Stack" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack&#xA;Implements ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stack : ICloneable, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Stack = class&#xA;    interface ICollection&#xA;    interface ICloneable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Stack/StackDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="cbeb0-101">表示对象的简单后进先出 (LIFO) 非泛型集合。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbeb0-101">Represents a simple last-in-first-out (LIFO) non-generic collection of objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-102">此集合的泛型版本，请参阅<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-102">For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cbeb0-103">容量<xref:System.Collections.Stack>是元素数目<xref:System.Collections.Stack>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-103">The capacity of a <xref:System.Collections.Stack> is the number of elements the <xref:System.Collections.Stack> can hold.</span></span> <span data-ttu-id="cbeb0-104">元素添加到<xref:System.Collections.Stack>，自动增加容量通过重新分配所需的方式。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-104">As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required through reallocation.</span></span>  
  
 <span data-ttu-id="cbeb0-105">如果<xref:System.Collections.Stack.Count%2A>是在堆栈的容量小于<xref:System.Collections.Stack.Push%2A>是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-105">If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="cbeb0-106">如果需要增加以容纳新元素，容量<xref:System.Collections.Stack.Push%2A>会成为 O (`n`) 操作，其中`n`是<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-106">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.</span></span> <span data-ttu-id="cbeb0-107"><xref:System.Collections.Stack.Pop%2A> 是 o （1） 的操作。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-107"><xref:System.Collections.Stack.Pop%2A> is an O(1) operation.</span></span>  
  
 <span data-ttu-id="cbeb0-108"><xref:System.Collections.Stack> 接受`null`为有效的值，并允许重复元素。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-108"><xref:System.Collections.Stack> accepts `null` as a valid value and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-109">下面的示例演示如何创建并将值添加到<xref:System.Collections.Stack>以及如何显示它的值。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-109">The following example shows how to create and add values to a <xref:System.Collections.Stack> and how to display its values.</span></span>  
  
 [!code-cpp[Classic Stack Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack Example/CS/source.cs#1)]
 [!code-vb[Classic Stack Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="cbeb0-110">公共静态 (<see langword="Shared" />在 Visual Basic 中) 的此类型的成员是线程安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbeb0-110">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="cbeb0-111">但不保证所有实例成员都是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbeb0-111">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="cbeb0-112">若要保证的线程安全<see cref="T:System.Collections.Stack" />，必须通过返回的包装器完成所有操作<see cref="M:System.Collections.Stack.Synchronized(System.Collections.Stack)" />方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbeb0-112">To guarantee the thread safety of the <see cref="T:System.Collections.Stack" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.Stack.Synchronized(System.Collections.Stack)" /> method.</span>
      </span>
      <span data-ttu-id="cbeb0-113">枚举整个集合本质上不是一个线程安全的过程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbeb0-113">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="cbeb0-114">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbeb0-114">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="cbeb0-115">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbeb0-115">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.Generic.Stack`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-116">初始化 <see cref="T:System.Collections.Stack" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-116">Initializes a new instance of the <see cref="T:System.Collections.Stack" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-117">初始化 <see cref="T:System.Collections.Stack" /> 类的新实例，该实例为空并且具有默认初始容量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-117">Initializes a new instance of the <see cref="T:System.Collections.Stack" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-118">容量<xref:System.Collections.Stack>是元素数目的<xref:System.Collections.Stack>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-118">The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold.</span></span> <span data-ttu-id="cbeb0-119">元素添加到<xref:System.Collections.Stack>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-119">As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="cbeb0-120">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-120">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.</span></span>  
  
 <span data-ttu-id="cbeb0-121">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-121">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.ICollection col);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection col) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.#ctor(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (col As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::ICollection ^ col);" />
      <MemberSignature Language="F#" Value="new System.Collections.Stack : System.Collections.ICollection -&gt; System.Collections.Stack" Usage="new System.Collections.Stack col" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="col" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="col">
          <span data-ttu-id="cbeb0-122">
            <see cref="T:System.Collections.ICollection" />，从其中复制元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-122">The <see cref="T:System.Collections.ICollection" /> to copy elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbeb0-123">初始化 <see cref="T:System.Collections.Stack" /> 类的新实例，该实例包含从指定集合复制的元素并且具有与所复制的元素数相同的初始容量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-123">Initializes a new instance of the <see cref="T:System.Collections.Stack" /> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-124">容量<xref:System.Collections.Stack>是元素数目的<xref:System.Collections.Stack>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-124">The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold.</span></span> <span data-ttu-id="cbeb0-125">元素添加到<xref:System.Collections.Stack>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-125">As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="cbeb0-126">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-126">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.</span></span>  
  
 <span data-ttu-id="cbeb0-127">将元素复制到<xref:System.Collections.Stack>读取的相同顺序<xref:System.Collections.IEnumerator>的<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-127">The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="cbeb0-128">此构造函数是 O (`n`) 操作，其中`n`是中的元素数`col`。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-128">This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cbeb0-129">
            <paramref name="col" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-129">
              <paramref name="col" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int initialCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCapacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCapacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int initialCapacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Stack : int -&gt; System.Collections.Stack" Usage="new System.Collections.Stack initialCapacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCapacity">
          <span data-ttu-id="cbeb0-130">
            <see cref="T:System.Collections.Stack" /> 可包含的初始元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-130">The initial number of elements that the <see cref="T:System.Collections.Stack" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbeb0-131">初始化 <see cref="T:System.Collections.Stack" /> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-131">Initializes a new instance of the <see cref="T:System.Collections.Stack" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-132">容量<xref:System.Collections.Stack>是元素数目的<xref:System.Collections.Stack>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-132">The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold.</span></span> <span data-ttu-id="cbeb0-133">元素添加到<xref:System.Collections.Stack>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-133">As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="cbeb0-134">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-134">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.</span></span>  
  
 <span data-ttu-id="cbeb0-135">此构造函数是 O (`n`) 操作，其中`n`是`initialCapacity`。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-135">This constructor is an O(`n`) operation, where `n` is `initialCapacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cbeb0-136">
            <paramref name="initialCapacity" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-136">
              <paramref name="initialCapacity" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-137">从 <see cref="T:System.Collections.Stack" /> 中移除所有对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-137">Removes all objects from the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-138"><xref:System.Collections.Stack.Count%2A> 已设置为零，并且对其他对象的集合的元素也被释放。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-138"><xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="cbeb0-139">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-139">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-140">下面的示例演示如何清除的值<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-140">The following example shows how to clear the values of the <xref:System.Collections.Stack>.</span></span>  
  
 [!code-cpp[Classic Stack.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="stack.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-141">创建 <see cref="T:System.Collections.Stack" /> 的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-141">Creates a shallow copy of the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbeb0-142">
            <see cref="T:System.Collections.Stack" /> 的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-142">A shallow copy of the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-143">集合的浅表副本仅复制元素的集合，无论它们是引用类型还是值类型，但它不会复制所引用的对象。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-143">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="cbeb0-144">新集合中的引用都指向相同原始集合中的引用指向的对象。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-144">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="cbeb0-145">与此相反，集合的深层副本复制这些元素以及由这些元素直接或间接引用的所有内容。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-145">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="cbeb0-146">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-146">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="stack.Contains obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="cbeb0-147">要在 <see cref="T:System.Collections.Stack" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-147">The object to locate in the <see cref="T:System.Collections.Stack" />.</span>
          </span>
          <span data-ttu-id="cbeb0-148">该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-148">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbeb0-149">确定某元素是否在 <see cref="T:System.Collections.Stack" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-149">Determines whether an element is in the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbeb0-150">如果在 <see cref="T:System.Collections.Stack" /> 中找到 <paramref name="obj" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-150">
              <see langword="true" />, if <paramref name="obj" /> is found in the <see cref="T:System.Collections.Stack" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-151">此方法通过调用来确定相等性<xref:System.Object.Equals%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-151">This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cbeb0-152">此方法执行线性搜索;因此，此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-152">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.</span></span>  
  
 <span data-ttu-id="cbeb0-153">从.NET Framework 2.0 开始，此方法测试是否相等通过传递`obj`自变量<xref:System.Object.Equals%2A>集合中的单个对象的方法。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-153">Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection.</span></span> <span data-ttu-id="cbeb0-154">在.NET Framework 早期版本，通过将各个项传递到集合中进行此判断<xref:System.Object.Equals%2A>方法的`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-154">In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md">
          <span data-ttu-id="cbeb0-155">执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-155">Performing Culture-Insensitive String Operations</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="stack.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="cbeb0-156">作为从 <see cref="T:System.Array" /> 复制的元素的目标的一维 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-156">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Stack" />.</span>
          </span>
          <span data-ttu-id="cbeb0-157">
            <see cref="T:System.Array" /> 必须具有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-157">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="cbeb0-158">
            <c>array</c> 中从零开始的索引，在此处开始复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-158">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbeb0-159">从指定数组索引开始将 <see cref="T:System.Collections.Stack" /> 复制到现有一维 <see cref="T:System.Array" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-159">Copies the <see cref="T:System.Collections.Stack" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-160">将元素复制到数组中先出 (LIFO) 顺序，由一系列调用返回的元素的顺序类似<xref:System.Collections.Stack.Pop%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-160">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.</span></span>  
  
 <span data-ttu-id="cbeb0-161">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-161">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-162">下面的示例演示如何将复制<xref:System.Collections.Stack>到一维数组。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-162">The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Stack.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cbeb0-163">
            <paramref name="array" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-163">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cbeb0-164">
            <paramref name="index" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-164">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cbeb0-165">
            <paramref name="array" /> 是多维的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-165">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="cbeb0-166">- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-166">-or-</span>
          </span>
          <span data-ttu-id="cbeb0-167">源 <see cref="T:System.Collections.Stack" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-167">The number of elements in the source <see cref="T:System.Collections.Stack" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="cbeb0-168">源 <see cref="T:System.Collections.Stack" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-168">The type of the source <see cref="T:System.Collections.Stack" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Stack.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Stack.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Stack.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-169">获取 <see cref="T:System.Collections.Stack" /> 中包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-169">Gets the number of elements contained in the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cbeb0-170">
            <see cref="T:System.Collections.Stack" /> 中包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-170">The number of elements contained in the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-171">容量是元素数目的<xref:System.Collections.Stack>可以存储。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-171">The capacity is the number of elements that the <xref:System.Collections.Stack> can store.</span></span> <span data-ttu-id="cbeb0-172"><xref:System.Collections.Stack.Count%2A> 是中的实际的元素数目<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-172"><xref:System.Collections.Stack.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Stack>.</span></span>  
  
 <span data-ttu-id="cbeb0-173">容量始终是大于或等于<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-173">The capacity is always greater than or equal to <xref:System.Collections.Stack.Count%2A>.</span></span> <span data-ttu-id="cbeb0-174">如果<xref:System.Collections.Stack.Count%2A>添加元素时超过容量，通过将内部数组重新调整复制旧元素和添加新元素之前自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-174">If <xref:System.Collections.Stack.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="cbeb0-175">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-175">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-176">返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-176">Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbeb0-177">用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-177">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-178">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="cbeb0-178">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="cbeb0-179">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-179">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="cbeb0-180">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-180">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="cbeb0-181">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-181">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="cbeb0-182">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-182">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="cbeb0-183"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-183"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="cbeb0-184">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-184">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="cbeb0-185">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-185">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="cbeb0-186">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-186"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="cbeb0-187"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-187"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="cbeb0-188">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-188">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="cbeb0-189">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-189">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="cbeb0-190">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-190">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="cbeb0-191">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-191">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="cbeb0-192">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-192">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="cbeb0-193">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-193">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="cbeb0-194">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-194">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="cbeb0-195">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-195">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="cbeb0-196">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-196">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="cbeb0-197">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-197">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Stack.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Stack.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-198">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Stack" /> 的访问（线程安全）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-198">Gets a value indicating whether access to the <see cref="T:System.Collections.Stack" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cbeb0-199">
            <see langword="true" />如果访问<see cref="T:System.Collections.Stack" />是同步的 （线程安全）; 否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-199">
              <see langword="true" />, if access to the <see cref="T:System.Collections.Stack" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="cbeb0-200">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-200">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-201">若要保证的线程安全<xref:System.Collections.Stack>，必须通过返回的包装器完成所有操作<xref:System.Collections.Stack.Synchronized%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-201">To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="cbeb0-202">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-202">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="cbeb0-203">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-203">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="cbeb0-204">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-204">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="cbeb0-205">下面的代码示例演示如何锁定集合使用<xref:System.Collections.Stack.SyncRoot%2A>在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-205">The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="cbeb0-206">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-206">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-207">下面的示例演示如何同步<xref:System.Collections.Stack>，确定是否<xref:System.Collections.Stack>同步的以及如何使用同步<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-207">The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.</span></span>  
  
 [!code-cpp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public virtual object Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Peek () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Peek();" />
      <MemberSignature Language="F#" Value="abstract member Peek : unit -&gt; obj&#xA;override this.Peek : unit -&gt; obj" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-208">返回位于 <see cref="T:System.Collections.Stack" /> 顶部的对象但不将其移除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-208">Returns the object at the top of the <see cref="T:System.Collections.Stack" /> without removing it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbeb0-209">位于 <see cref="T:System.Object" /> 顶部的 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-209">The <see cref="T:System.Object" /> at the top of the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-210">此方法类似于 <xref:System.Collections.Stack.Pop%2A> 方法，但 <xref:System.Collections.Stack.Peek%2A> 不修改 <xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-210">This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.</span></span>  
  
 <span data-ttu-id="cbeb0-211">`null` 可以推送到<xref:System.Collections.Stack>作为占位符，如有需要。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-211">`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed.</span></span> <span data-ttu-id="cbeb0-212">若要区分 null 值和堆栈的末尾，检查<xref:System.Collections.Stack.Count%2A>属性或捕捉<xref:System.InvalidOperationException>，时引发<xref:System.Collections.Stack>为空。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-212">To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.</span></span>  
  
 <span data-ttu-id="cbeb0-213">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-213">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-214">下面的示例演示如何将元素添加到<xref:System.Collections.Stack>，删除中的元素<xref:System.Collections.Stack>，或查看该元素的顶部<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-214">The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
 [!code-cpp[Classic Stack.Peek Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.Peek Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.Peek Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Peek Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cbeb0-215">
            <see cref="T:System.Collections.Stack" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-215">The <see cref="T:System.Collections.Stack" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Stack.Pop" />
        <altmember cref="M:System.Collections.Stack.Push(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public virtual object Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Pop () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Pop();" />
      <MemberSignature Language="F#" Value="abstract member Pop : unit -&gt; obj&#xA;override this.Pop : unit -&gt; obj" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-216">移除并返回位于 <see cref="T:System.Collections.Stack" /> 顶部的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-216">Removes and returns the object at the top of the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbeb0-217">从 <see cref="T:System.Object" /> 的顶部移除的 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-217">The <see cref="T:System.Object" /> removed from the top of the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-218">此方法类似于 <xref:System.Collections.Stack.Peek%2A> 方法，但 <xref:System.Collections.Stack.Peek%2A> 不修改 <xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-218">This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.</span></span>  
  
 <span data-ttu-id="cbeb0-219">`null` 可以推送到<xref:System.Collections.Stack>作为占位符，如有需要。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-219">`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed.</span></span> <span data-ttu-id="cbeb0-220">若要区分 null 值和堆栈的末尾，检查<xref:System.Collections.Stack.Count%2A>属性或捕捉<xref:System.InvalidOperationException>，时引发<xref:System.Collections.Stack>为空。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-220">To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.</span></span>  
  
 <span data-ttu-id="cbeb0-221">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-221">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-222">下面的示例演示如何将元素添加到<xref:System.Collections.Stack>，删除中的元素<xref:System.Collections.Stack>，或查看该元素的顶部<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-222">The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
 [!code-cpp[Classic Stack.Peek Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.Peek Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.Peek Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Peek Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cbeb0-223">
            <see cref="T:System.Collections.Stack" /> 为空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-223">The <see cref="T:System.Collections.Stack" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Stack.Peek" />
        <altmember cref="M:System.Collections.Stack.Push(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public virtual void Push (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Push(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.Push(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Push (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Push(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Push : obj -&gt; unit&#xA;override this.Push : obj -&gt; unit" Usage="stack.Push obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="cbeb0-224">要推入到 <see cref="T:System.Object" /> 中的 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-224">The <see cref="T:System.Object" /> to push onto the <see cref="T:System.Collections.Stack" />.</span>
          </span>
          <span data-ttu-id="cbeb0-225">该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-225">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbeb0-226">将对象插入 <see cref="T:System.Collections.Stack" /> 的顶部。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-226">Inserts an object at the top of the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-227">如果<xref:System.Collections.Stack.Count%2A>已经等于容量的容量<xref:System.Collections.Stack>自动重新分配内部数组中，增加和现有元素之前添加新元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-227">If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="cbeb0-228">`null` 可以推送到<xref:System.Collections.Stack>作为占位符，如有需要。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-228">`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed.</span></span> <span data-ttu-id="cbeb0-229">它占用堆栈中的槽，并且都被视为任何对象。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-229">It occupies a slot in the stack and is treated like any object.</span></span>  
  
 <span data-ttu-id="cbeb0-230">如果<xref:System.Collections.Stack.Count%2A>是在堆栈的容量小于<xref:System.Collections.Stack.Push%2A>是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-230">If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="cbeb0-231">如果需要增加以容纳新元素，容量<xref:System.Collections.Stack.Push%2A>会成为 O (`n`) 操作，其中`n`是<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-231">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-232">下面的示例演示如何将元素添加到<xref:System.Collections.Stack>，删除中的元素<xref:System.Collections.Stack>，或查看该元素的顶部<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-232">The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
 [!code-cpp[Classic Stack.Peek Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.Peek Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.Peek Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Peek Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Stack.Peek" />
        <altmember cref="M:System.Collections.Stack.Pop" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.Stack Synchronized (System.Collections.Stack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Stack Synchronized(class System.Collections.Stack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.Synchronized(System.Collections.Stack)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Stack ^ Synchronized(System::Collections::Stack ^ stack);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.Stack -&gt; System.Collections.Stack" Usage="System.Collections.Stack.Synchronized stack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Stack</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="System.Collections.Stack" />
      </Parameters>
      <Docs>
        <param name="stack">
          <span data-ttu-id="cbeb0-233">要同步的 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-233">The <see cref="T:System.Collections.Stack" /> to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbeb0-234">返回 <see cref="T:System.Collections.Stack" /> 的同步（线程安全）包装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-234">Returns a synchronized (thread safe) wrapper for the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbeb0-235">
            <see cref="T:System.Collections.Stack" /> 周围的同步包装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-235">A synchronized wrapper around the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-236">若要保证的线程安全<xref:System.Collections.Stack>，必须通过此包装器完成所有操作。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-236">To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper.</span></span>  
  
 <span data-ttu-id="cbeb0-237">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-237">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="cbeb0-238">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-238">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="cbeb0-239">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-239">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="cbeb0-240">下面的代码示例演示如何锁定集合使用<xref:System.Collections.Stack.SyncRoot%2A>在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-240">The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="cbeb0-241">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-241">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-242">下面的示例演示如何同步<xref:System.Collections.Stack>，确定是否<xref:System.Collections.Stack>同步的以及如何使用同步<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-242">The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.</span></span>  
  
 [!code-cpp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cbeb0-243">
            <paramref name="stack" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-243">
              <paramref name="stack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Stack.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Stack.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-244">获取可用于同步对 <see cref="T:System.Collections.Stack" /> 的访问的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-244">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cbeb0-245">一个可用于同步对 <see cref="T:System.Object" /> 的访问的 <see cref="T:System.Collections.Stack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-245">An <see cref="T:System.Object" /> that can be used to synchronize access to the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-246">若要创建的同步的版本<xref:System.Collections.Stack>，使用<xref:System.Collections.Stack.Synchronized%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-246">To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method.</span></span> <span data-ttu-id="cbeb0-247">但是，派生的类可以提供其自己的同步的版本<xref:System.Collections.Stack>使用<xref:System.Collections.Stack.SyncRoot%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-247">However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the <xref:System.Collections.Stack.SyncRoot%2A> property.</span></span> <span data-ttu-id="cbeb0-248">同步代码必须在执行操作<xref:System.Collections.Stack.SyncRoot%2A>的<xref:System.Collections.Stack>，而不是直接在<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-248">The synchronizing code must perform operations on the <xref:System.Collections.Stack.SyncRoot%2A> of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>.</span></span> <span data-ttu-id="cbeb0-249">这样可确保对从其他对象派生的集合正确地执行操作。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-249">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="cbeb0-250">具体而言，它维护与其他线程可能同时对修改的正确同步<xref:System.Collections.Stack>对象。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-250">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object.</span></span>  
  
 <span data-ttu-id="cbeb0-251">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-251">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="cbeb0-252">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-252">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="cbeb0-253">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-253">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="cbeb0-254">下面的代码示例演示如何锁定集合使用<xref:System.Collections.Stack.SyncRoot%2A>在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-254">The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="cbeb0-255">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-255">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual object[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Stack.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToArray () As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="abstract member ToArray : unit -&gt; obj[]&#xA;override this.ToArray : unit -&gt; obj[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cbeb0-256">将 <see cref="T:System.Collections.Stack" /> 复制到新数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-256">Copies the <see cref="T:System.Collections.Stack" /> to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbeb0-257">新数组，包含 <see cref="T:System.Collections.Stack" /> 的元素的副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbeb0-257">A new array containing copies of the elements of the <see cref="T:System.Collections.Stack" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbeb0-258">将元素复制到数组中先出 (LIFO) 顺序，由一系列调用返回的元素的顺序类似<xref:System.Collections.Stack.Pop%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-258">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.</span></span>  
  
 <span data-ttu-id="cbeb0-259">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Stack.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-259">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbeb0-260">下面的示例演示如何将复制<xref:System.Collections.Stack>到一维数组。</span><span class="sxs-lookup"><span data-stu-id="cbeb0-260">The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Stack.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stack.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Stack.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)" />
        <altmember cref="M:System.Collections.Stack.Pop" />
      </Docs>
    </Member>
  </Members>
</Type>