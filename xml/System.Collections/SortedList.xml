<Type Name="SortedList" FullName="System.Collections.SortedList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9512aa383743642ea72c68cda07bcf3b09cf2e0" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48773306" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SortedList : ICloneable, System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.SortedList" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList&#xA;Implements ICloneable, IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortedList : ICloneable, System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type SortedList = class&#xA;    interface IDictionary&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8c8a3-101">表示键/值对的集合，这些键值对按键排序并可按照键和索引访问。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-101">Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-102">此集合的泛型版本，请参阅<xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-102">For the generic version of this collection, see <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8c8a3-103">一个<xref:System.Collections.SortedList>元素可以通过其密钥，像在任何元素访问<xref:System.Collections.IDictionary>实现中，或通过其索引，像在任何元素<xref:System.Collections.IList>实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-103">A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.</span></span>  
  
 <span data-ttu-id="8c8a3-104">一个<xref:System.Collections.SortedList>对象在内部维护两个数组来存储的列表; 即，键的一个数组元素和另一个数组中的关联值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-104">A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values.</span></span> <span data-ttu-id="8c8a3-105">每个元素都是可作为访问键/值对<xref:System.Collections.DictionaryEntry>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-105">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span> <span data-ttu-id="8c8a3-106">密钥不能为`null`，但可以是一个值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-106">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="8c8a3-107">容量<xref:System.Collections.SortedList>对象是元素数目<xref:System.Collections.SortedList>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-107">The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="8c8a3-108">元素添加到<xref:System.Collections.SortedList>，自动增加容量通过重新分配所需的方式。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-108">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation.</span></span> <span data-ttu-id="8c8a3-109">可以通过调用减少容量<xref:System.Collections.SortedList.TrimToSize%2A>或通过设置<xref:System.Collections.SortedList.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-109">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span>  
  
 <span data-ttu-id="8c8a3-110">对于非常大<xref:System.Collections.SortedList>对象，可以通过设置增加到 20 亿元素在 64 位系统上的最大容量`enabled`到的配置元素的特性`true`在运行时环境中。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-110">For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="8c8a3-111">元素<xref:System.Collections.SortedList>对象进行排序的键按照特定<xref:System.Collections.IComparer>时指定实现<xref:System.Collections.SortedList>是创建或根据<xref:System.IComparable>密钥本身提供实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-111">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span> <span data-ttu-id="8c8a3-112">在任一情况下，<xref:System.Collections.SortedList>不允许重复的键。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-112">In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.</span></span>  
  
 <span data-ttu-id="8c8a3-113">索引序列基于排序顺序。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-113">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="8c8a3-114">当添加一个元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和对索引进行相应调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-114">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-115">删除元素后，索引也相应地调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-115">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-116">因此，特定的键/值对的索引可能会更改元素在添加或删除从<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-116">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-117">上的操作<xref:System.Collections.SortedList>往往速度要慢于上的操作对象<xref:System.Collections.Hashtable>由于排序的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-117">Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting.</span></span> <span data-ttu-id="8c8a3-118">但是，<xref:System.Collections.SortedList>可通过在相关的键或索引，从而对值的访问提供更大灵活性。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-118">However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.</span></span>  
  
 <span data-ttu-id="8c8a3-119">可以使用整数索引访问此集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-119">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="8c8a3-120">在此集合中的索引都是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-120">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="8c8a3-121">`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 返回集合中的元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-121">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="8c8a3-122">由于每个元素的<xref:System.Collections.SortedList>对象是一个键/值对，元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-122">Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="8c8a3-123">相反，元素类型是<xref:System.Collections.DictionaryEntry>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-123">Rather, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="8c8a3-124">例如:</span><span class="sxs-lookup"><span data-stu-id="8c8a3-124">For example:</span></span>  
  
 [!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]
 [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]  
  
 <span data-ttu-id="8c8a3-125">`foreach`语句是允许仅读取，不写入集合的枚举器周围的包装。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-125">The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-126">下面的代码示例演示如何创建和初始化<xref:System.Collections.SortedList>对象以及如何打印出其键和值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-126">The following code example shows how to create and initialize a <xref:System.Collections.SortedList> object and how to print out its keys and values.</span></span>  
  
 [!code-cpp[Classic SortedList Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="8c8a3-127">公共静态 (<see langword="Shared" />在 Visual Basic 中) 的此类型的成员是线程安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="8c8a3-128">但不保证所有实例成员都是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-128">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="8c8a3-129">一个<see cref="T:System.Collections.SortedList" />对象都可以支持多个读取器并发，只要不修改该集合。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-129">A <see cref="T:System.Collections.SortedList" /> object can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="8c8a3-130">若要保证的线程安全<see cref="T:System.Collections.SortedList" />，必须通过返回的包装器完成所有操作<see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-130">To guarantee the thread safety of the <see cref="T:System.Collections.SortedList" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> method.</span>
      </span>
      <span data-ttu-id="8c8a3-131">枚举整个集合本质上不是一个线程安全的过程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-131">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="8c8a3-132">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-132">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="8c8a3-133">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-133">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IComparer" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.Generic.SortedList`2" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
      <span data-ttu-id="8c8a3-134">在集合中执行不区分区域性的字符串操作</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c8a3-134">Performing Culture-Insensitive String Operations in Collections</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-135">初始化 <see cref="T:System.Collections.SortedList" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-135">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-136">初始化 <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例为空、具有默认初始容量并根据 <see cref="T:System.IComparable" /> 接口（此接口由添加到 <see cref="T:System.Collections.SortedList" /> 对象中的每个键实现）进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-136">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-137">每个密钥必须实现<xref:System.IComparable>接口，才能使用中的所有其他密钥的比较的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-137">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="8c8a3-138">对元素进行排序依据<xref:System.IComparable>添加到每个键实现<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-138">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-139">容量<xref:System.Collections.SortedList>对象是元素数目的<xref:System.Collections.SortedList>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-139">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="8c8a3-140">元素添加到<xref:System.Collections.SortedList>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-140">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8c8a3-141">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-141">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-142">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-142">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-143">下面的代码示例创建使用集合不同<xref:System.Collections.SortedList>构造函数，并演示的集合的行为差异。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-143">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-144">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-144">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="8c8a3-145">在对键进行比较时使用的 <see cref="T:System.Collections.IComparer" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-145">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="8c8a3-146">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-146">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-147">
            <see langword="null" />，使用每一个键的 <see cref="T:System.IComparable" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-147">
              <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-148">初始化 <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例为空、具有默认初始容量并根据指定的 <see cref="T:System.Collections.IComparer" /> 接口进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-148">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-149">对元素进行排序按照指定<xref:System.Collections.IComparer>实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-149">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="8c8a3-150">如果`comparer`参数是`null`，则<xref:System.IComparable>使用的每个键实现; 因此，每个密钥必须实现<xref:System.IComparable>接口，才能使用中的所有其他密钥的比较的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-150">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-151">容量<xref:System.Collections.SortedList>对象是元素数目的<xref:System.Collections.SortedList>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-151">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="8c8a3-152">元素添加到<xref:System.Collections.SortedList>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-152">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8c8a3-153">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-153">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-154">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-154">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-155">下面的代码示例创建使用集合不同<xref:System.Collections.SortedList>构造函数，并演示的集合的行为差异。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-155">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-156">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-156">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList d" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="8c8a3-157">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.SortedList" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-157">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-158">初始化 <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例包含从指定字典复制的元素、具有与所复制的元素数相同的初始容量并根据由每个键实现的 <see cref="T:System.IComparable" /> 接口排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-158">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-159">每个密钥必须实现<xref:System.IComparable>接口，才能使用中的所有其他密钥的比较的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-159">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="8c8a3-160">对元素进行排序依据<xref:System.IComparable>添加到每个键实现<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-160">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-161">一个<xref:System.Collections.Hashtable>对象是一种<xref:System.Collections.IDictionary>可以传递给此构造函数的实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-161">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="8c8a3-162">新<xref:System.Collections.SortedList>对象包含的键和值存储在一份<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-162">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="8c8a3-163">容量<xref:System.Collections.SortedList>对象是元素数目的<xref:System.Collections.SortedList>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-163">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="8c8a3-164">元素添加到<xref:System.Collections.SortedList>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-164">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8c8a3-165">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-165">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-166">此构造函数是 O (`n`) 操作，其中`n`是中的元素数`d`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-166">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-167">下面的代码示例创建使用集合不同<xref:System.Collections.SortedList>构造函数，并演示的集合的行为差异。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-167">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-168">
            <paramref name="d" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-168">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="8c8a3-169">
            <paramref name="d" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-169">One or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-170">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-170">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int initialCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCapacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCapacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int initialCapacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList initialCapacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCapacity">
          <span data-ttu-id="8c8a3-171">
            <see cref="T:System.Collections.SortedList" /> 对象可包含的初始元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-171">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-172">初始化 <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例为空、具有指定的初始容量并且根据 <see cref="T:System.IComparable" /> 接口（此接口由添加到 <see cref="T:System.Collections.SortedList" /> 对象的每个键实现）进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-172">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-173">每个密钥必须实现<xref:System.IComparable>接口，才能使用中的所有其他密钥的比较的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-173">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="8c8a3-174">对元素进行排序依据<xref:System.IComparable>添加到每个键实现<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-174">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-175">容量<xref:System.Collections.SortedList>对象是元素数目的<xref:System.Collections.SortedList>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-175">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="8c8a3-176">元素添加到<xref:System.Collections.SortedList>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-176">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8c8a3-177">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-177">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-178">此构造函数是 O (`n`) 操作，其中`n`是`initialCapacity`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-178">This constructor is an O(`n`) operation, where `n` is `initialCapacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-179">下面的代码示例创建使用集合不同<xref:System.Collections.SortedList>构造函数，并演示的集合的行为差异。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-179">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-180">
            <paramref name="initialCapacity" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-180">
              <paramref name="initialCapacity" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="8c8a3-181">没有足够的可用内存来创建具有指定 <paramref name="initialCapacity" /> 的 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-181">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="initialCapacity" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-182">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-182">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer, capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer, int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer * int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (comparer, capacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="8c8a3-183">在对键进行比较时使用的 <see cref="T:System.Collections.IComparer" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-183">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="8c8a3-184">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-184">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-185">
            <see langword="null" />，使用每一个键的 <see cref="T:System.IComparable" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-185">
              <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <param name="capacity">
          <span data-ttu-id="8c8a3-186">
            <see cref="T:System.Collections.SortedList" /> 对象可包含的初始元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-186">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-187">初始化 <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例为空、具有指定的初始容量并根据指定的 <see cref="T:System.Collections.IComparer" /> 接口排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-187">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-188">对元素进行排序按照指定<xref:System.Collections.IComparer>实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-188">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="8c8a3-189">如果`comparer`参数是`null`，则<xref:System.IComparable>使用的每个键实现; 因此，每个密钥必须实现<xref:System.IComparable>接口，才能使用中的所有其他密钥的比较的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-189">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-190">容量<xref:System.Collections.SortedList>对象是元素数目的<xref:System.Collections.SortedList>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-190">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="8c8a3-191">元素添加到<xref:System.Collections.SortedList>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-191">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8c8a3-192">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-192">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-193">此构造函数是 O (`n`) 操作，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-193">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-194">下面的代码示例创建使用集合不同<xref:System.Collections.SortedList>构造函数，并演示的集合的行为差异。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-194">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-195">
            <paramref name="capacity" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-195">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="8c8a3-196">没有足够的可用内存来创建具有指定 <paramref name="capacity" /> 的 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-196">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="capacity" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-197">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-197">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary * System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (d, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="8c8a3-198">要复制到新 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.SortedList" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-198">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="8c8a3-199">在对键进行比较时使用的 <see cref="T:System.Collections.IComparer" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-199">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="8c8a3-200">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-200">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-201">
            <see langword="null" />，使用每一个键的 <see cref="T:System.IComparable" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-201">
              <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-202">初始化 <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例包含从指定字典复制的元素、具有与所复制的元素数相同的初始容量并根据指定的 <see cref="T:System.Collections.IComparer" /> 接口排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-202">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-203">对元素进行排序按照指定<xref:System.Collections.IComparer>实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-203">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="8c8a3-204">如果`comparer`参数是`null`，则<xref:System.IComparable>使用的每个键实现; 因此，每个密钥必须实现<xref:System.IComparable>接口，才能使用中的所有其他密钥的比较的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-204">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-205">一个<xref:System.Collections.Hashtable>对象是一种<xref:System.Collections.IDictionary>可以传递给此构造函数的实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-205">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="8c8a3-206">新<xref:System.Collections.SortedList>对象包含的键和值存储在一份<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-206">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="8c8a3-207">容量<xref:System.Collections.SortedList>对象是元素数目的<xref:System.Collections.SortedList>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-207">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="8c8a3-208">元素添加到<xref:System.Collections.SortedList>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-208">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8c8a3-209">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-209">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-210">此构造函数是 O (`n`) 操作，其中`n`是中的元素数`d`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-210">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-211">下面的代码示例创建使用集合不同<xref:System.Collections.SortedList>构造函数，并演示的集合的行为差异。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-211">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-212">
            <paramref name="d" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-212">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="8c8a3-213">
            <paramref name="comparer" /> 为 <see langword="null" />，<paramref name="d" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-213">
              <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-214">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-214">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="sortedList.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="8c8a3-215">要添加的元素的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-215">The key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8c8a3-216">要添加的元素的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-216">The value of the element to add.</span>
          </span>
          <span data-ttu-id="8c8a3-217">该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-217">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-218">将带有指定键和值的元素添加到 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-218">Adds an element with the specified key and value to a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-219">根据选择，显式或默认情况下，比较器确定插入点时<xref:System.Collections.SortedList>创建对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-219">The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.</span></span>  
  
 <span data-ttu-id="8c8a3-220">如果<xref:System.Collections.SortedList.Count%2A>已等于<xref:System.Collections.SortedList.Capacity%2A>，则容量的<xref:System.Collections.SortedList>自动重新分配内部数组中，可以增强对象和现有元素之前添加新元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-220">If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="8c8a3-221">此外可以使用<xref:System.Collections.SortedList.Item%2A>属性来添加新元素，通过设置密钥的值中不存在<xref:System.Collections.SortedList>对象 (例如， `myCollection["myNonexistentKey"] = myValue`)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-221">You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue`).</span></span> <span data-ttu-id="8c8a3-222">但是，如果中已存在指定的键<xref:System.Collections.SortedList>，并设置<xref:System.Collections.SortedList.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-222">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="8c8a3-223">与此相反，<xref:System.Collections.SortedList.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-223">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="8c8a3-224">元素<xref:System.Collections.SortedList>对象进行排序的键按照特定<xref:System.Collections.IComparer>时指定实现<xref:System.Collections.SortedList>是创建或根据<xref:System.IComparable>密钥本身提供实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-224">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="8c8a3-225">密钥不能为`null`，但可以是一个值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-225">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="8c8a3-226">此方法为 O (`n`) 操作对于未排序数据，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-226">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="8c8a3-227">它是 O (log `n`) 操作，如果在列表的末尾添加了新元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-227">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="8c8a3-228">如果插入导致大小调整，运算复杂度为 O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-228">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-229">下面的代码示例演示如何将元素添加到<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-229">The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-230">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-230">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c8a3-231">带有指定 <paramref name="key" /> 的元素已经存在于 <see cref="T:System.Collections.SortedList" /> 对象中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-231">An element with the specified <paramref name="key" /> already exists in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="8c8a3-232">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-232">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-233">
            <see cref="T:System.Collections.SortedList" /> 设置为使用 <see cref="T:System.IComparable" /> 接口，并且 <paramref name="key" /> 不实现 <see cref="T:System.IComparable" /> 接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-233">The <see cref="T:System.Collections.SortedList" /> is set to use the <see cref="T:System.IComparable" /> interface, and <paramref name="key" /> does not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8c8a3-234">
            <see cref="T:System.Collections.SortedList" /> 为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-234">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          </span>
          <span data-ttu-id="8c8a3-235">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-235">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-236">
            <see cref="T:System.Collections.SortedList" /> 具有固定的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-236">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="8c8a3-237">没有足够的可用内存来将元素添加到 <see cref="T:System.Collections.SortedList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-237">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8c8a3-238">比较器引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-238">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.SortedList.Item(System.Object)" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.SortedList.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-239">获取或设置 <see cref="T:System.Collections.SortedList" /> 对象的容量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-239">Gets or sets the capacity of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-240">
            <see cref="T:System.Collections.SortedList" /> 对象可包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-240">The number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-241"><xref:System.Collections.SortedList.Capacity%2A> 是的元素数的<xref:System.Collections.SortedList>对象可以存储。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-241"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="8c8a3-242"><xref:System.Collections.SortedList.Count%2A> 是中的实际的元素数目<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-242"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-243"><xref:System.Collections.SortedList.Capacity%2A> 始终是大于或等于<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-243"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="8c8a3-244">如果<xref:System.Collections.SortedList.Count%2A>超出了<xref:System.Collections.SortedList.Capacity%2A>时添加元素，则自动通过增大容量在复制旧元素和添加新元素之前重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-244">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="8c8a3-245">可以通过调用减少容量<xref:System.Collections.SortedList.TrimToSize%2A>或通过设置<xref:System.Collections.SortedList.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-245">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="8c8a3-246">时的值<xref:System.Collections.SortedList.Capacity%2A>设置了显式，内部数组还重新分配以适应指定的容量。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-246">When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="8c8a3-247">检索此属性的值是 o （1） 的操作;将属性设置为 O (`n`) 操作，其中`n`新容量。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-247">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-248">分配的值小于 <see cref="T:System.Collections.SortedList" /> 对象中的当前元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-248">The value assigned is less than the current number of elements in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="8c8a3-249">系统上没有足够的可用内存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-249">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="sortedList.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-250">从 <see cref="T:System.Collections.SortedList" /> 对象中移除所有元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-250">Removes all elements from a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-251"><xref:System.Collections.SortedList.Count%2A> 设置为零并且对其他对象的集合的元素也被释放。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-251"><xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="8c8a3-252"><xref:System.Collections.SortedList.Capacity%2A> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-252"><xref:System.Collections.SortedList.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="8c8a3-253">若要重置的容量<xref:System.Collections.SortedList>对象，请调用<xref:System.Collections.SortedList.TrimToSize%2A>，或者设置<xref:System.Collections.SortedList.Capacity%2A>直接属性。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-253">To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly.</span></span> <span data-ttu-id="8c8a3-254">截去空<xref:System.Collections.SortedList>的容量设置<xref:System.Collections.SortedList>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-254">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="8c8a3-255">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-255">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-256">下面的代码示例演示如何剪裁的未使用的部分<xref:System.Collections.SortedList>对象以及如何清除的值<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-256">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8c8a3-257">
            <see cref="T:System.Collections.SortedList" /> 对象是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-257">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="8c8a3-258">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-258">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-259">
            <see cref="T:System.Collections.SortedList" /> 具有固定的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-259">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="sortedList.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-260">创建 <see cref="T:System.Collections.SortedList" /> 对象的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-260">Creates a shallow copy of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-261">
            <see cref="T:System.Collections.SortedList" /> 对象的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-261">A shallow copy of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-262">集合的浅表副本仅复制元素的集合，无论它们是引用类型还是值类型，但不会复制所引用的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-262">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to.</span></span> <span data-ttu-id="8c8a3-263">新集合中的引用都指向相同原始集合中的引用指向的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-263">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="8c8a3-264">与此相反，集合的深层副本复制这些元素以及由这些元素直接或间接引用的所有内容。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-264">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="8c8a3-265">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-265">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="sortedList.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="8c8a3-266">要在 <see cref="T:System.Collections.SortedList" /> 对象中查找的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-266">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-267">确定 <see cref="T:System.Collections.SortedList" /> 对象是否包含特定键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-267">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-268">如果 <see cref="T:System.Collections.SortedList" /> 对象包含带有指定 <paramref name="key" /> 的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-268">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-269">元素<xref:System.Collections.SortedList>对象进行排序的键按照特定<xref:System.Collections.IComparer>时指定实现<xref:System.Collections.SortedList>是创建或根据<xref:System.IComparable>密钥本身提供实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-269">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="8c8a3-270"><xref:System.Collections.SortedList.Contains%2A> 可实现 <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-270"><xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8c8a3-271">它的行为完全相同<xref:System.Collections.SortedList.ContainsKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-271">It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-272">此方法使用二进制搜索算法;因此，此方法为 O (log `n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-272">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-273">从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>并<xref:System.IComparable.CompareTo%2A>上的方法`item`以确定是否存在项。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-273">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="8c8a3-274">在.NET Framework 的早期版本中，通过进行此判断<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法的`item`参数在集合中的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-274">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-275">下面的代码示例演示如何确定是否<xref:System.Collections.SortedList>对象包含特定元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-275">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-276">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-276">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8c8a3-277">比较器引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-277">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-278">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-278">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : obj -&gt; bool&#xA;override this.ContainsKey : obj -&gt; bool" Usage="sortedList.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="8c8a3-279">要在 <see cref="T:System.Collections.SortedList" /> 对象中查找的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-279">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-280">确定 <see cref="T:System.Collections.SortedList" /> 对象是否包含特定键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-280">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-281">如果 <see cref="T:System.Collections.SortedList" /> 对象包含带有指定 <paramref name="key" /> 的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-281">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-282">元素<xref:System.Collections.SortedList>对象进行排序的键按照特定<xref:System.Collections.IComparer>时指定实现<xref:System.Collections.SortedList>是创建或根据<xref:System.IComparable>密钥本身提供实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-282">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="8c8a3-283">此方法的行为完全相同<xref:System.Collections.SortedList.Contains%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-283">This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="8c8a3-284">此方法使用二进制搜索算法;因此，此方法为 O (log `n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-284">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-285">从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>并<xref:System.IComparable.CompareTo%2A>上的方法`item`以确定是否存在项。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-285">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="8c8a3-286">在.NET Framework 的早期版本中，通过进行此判断<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法的`item`参数在集合中的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-286">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-287">下面的代码示例演示如何确定是否<xref:System.Collections.SortedList>对象包含特定元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-287">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-288">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-288">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8c8a3-289">比较器引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-289">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-290">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-290">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public virtual bool ContainsValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ContainsValue : obj -&gt; bool&#xA;override this.ContainsValue : obj -&gt; bool" Usage="sortedList.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="8c8a3-291">要在 <see cref="T:System.Collections.SortedList" /> 对象中定位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-291">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="8c8a3-292">该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-292">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-293">确定 <see cref="T:System.Collections.SortedList" /> 对象是否包含特定值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-293">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-294">如果 <see cref="T:System.Collections.SortedList" /> 对象包含带有指定 <paramref name="value" /> 的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-294">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-295">元素的值<xref:System.Collections.SortedList>对象相比于指定的值使用<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-295">The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="8c8a3-296">此方法执行线性搜索;因此，平均执行时间是成比例<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-296">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="8c8a3-297">也就是说，此方法是 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-297">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-298">从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>并<xref:System.IComparable.CompareTo%2A>上的方法`item`以确定是否存在项。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-298">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="8c8a3-299">在.NET Framework 的早期版本中，通过进行此判断<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法的`item`参数在集合中的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-299">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-300">下面的代码示例演示如何确定是否<xref:System.Collections.SortedList>对象包含特定元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-300">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-301">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-301">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="sortedList.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="8c8a3-302">一维 <see cref="T:System.Array" /> 对象，它是从 <see cref="T:System.Collections.DictionaryEntry" /> 复制的 <see cref="T:System.Collections.SortedList" /> 对象的目标位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-302">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.SortedList" />.</span>
          </span>
          <span data-ttu-id="8c8a3-303">
            <see cref="T:System.Array" /> 必须具有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-303">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="8c8a3-304">
            <c>array</c> 中从零开始的索引，在此处开始复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-304">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-305">从指定数组索引开始将 <see cref="T:System.Collections.SortedList" /> 元素复制到一维 <see cref="T:System.Array" /> 对象中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-305">Copies <see cref="T:System.Collections.SortedList" /> elements to a one-dimensional <see cref="T:System.Array" /> object, starting at the specified index in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-306">键/值对复制到<xref:System.Array>对象的枚举器循环访问的相同顺序<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-306">The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-307">若要复制仅在密钥<xref:System.Collections.SortedList>，使用`SortedList.Keys.CopyTo`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-307">To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="8c8a3-308">若要仅中的值复制<xref:System.Collections.SortedList>，使用`SortedList.Values.CopyTo`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-308">To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="8c8a3-309">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-309">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-310">下面的代码示例演示如何将复制中的值<xref:System.Collections.SortedList>到一维对象<xref:System.Array>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-310">The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.</span></span>  
  
 [!code-cpp[Classic SortedList.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-311">
            <paramref name="array" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-311">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-312">
            <paramref name="arrayIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-312">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c8a3-313">
            <paramref name="array" /> 是多维的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-313">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="8c8a3-314">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-314">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-315">源 <see cref="T:System.Collections.SortedList" /> 对象中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-315">The number of elements in the source <see cref="T:System.Collections.SortedList" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="8c8a3-316">无法自动将源 <see cref="T:System.Collections.SortedList" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-316">The type of the source <see cref="T:System.Collections.SortedList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.SortedList.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.SortedList.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-317">获取 <see cref="T:System.Collections.SortedList" /> 对象中包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-317">Gets the number of elements contained in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-318">
            <see cref="T:System.Collections.SortedList" /> 对象中包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-318">The number of elements contained in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-319">每个元素都是可作为访问键/值对<xref:System.Collections.DictionaryEntry>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-319">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span>  
  
 <span data-ttu-id="8c8a3-320"><xref:System.Collections.SortedList.Capacity%2A> 是的元素数的<xref:System.Collections.SortedList>对象可以存储。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-320"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="8c8a3-321"><xref:System.Collections.SortedList.Count%2A> 是中的实际的元素数目<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-321"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-322"><xref:System.Collections.SortedList.Capacity%2A> 始终是大于或等于<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-322"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="8c8a3-323">如果<xref:System.Collections.SortedList.Count%2A>超出了<xref:System.Collections.SortedList.Capacity%2A>时添加元素，则自动通过增大容量在复制旧元素和添加新元素之前重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-323">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="8c8a3-324">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-324">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetByIndex">
      <MemberSignature Language="C#" Value="public virtual object GetByIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetByIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetByIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByIndex (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetByIndex(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetByIndex : int -&gt; obj&#xA;override this.GetByIndex : int -&gt; obj" Usage="sortedList.GetByIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="8c8a3-325">要获取的值的从零开始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-325">The zero-based index of the value to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-326">获取 <see cref="T:System.Collections.SortedList" /> 对象的指定索引处的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-326">Gets the value at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-327">位于 <see cref="T:System.Collections.SortedList" /> 对象的指定索引处的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-327">The value at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-328">索引序列基于排序顺序。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-328">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="8c8a3-329">当添加一个元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和对索引进行相应调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-329">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-330">删除元素后，索引也相应地调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-330">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-331">因此，特定的键/值对的索引可能会更改元素在添加或删除从<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-331">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-332">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-332">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-333">下面的代码示例演示如何获取一个或所有键或值中<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-333">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-334">
            <paramref name="index" /> 不在 <see cref="T:System.Collections.SortedList" /> 对象的有效索引范围内。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-334">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="sortedList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-335">返回一个循环访问 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-335">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object that iterates through a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-336">
            <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-336">An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-337">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-337">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="8c8a3-338">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-338">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8c8a3-339">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-339">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8c8a3-340">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-340">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8c8a3-341"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-341"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="8c8a3-342">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-342">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8c8a3-343">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-343">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-344">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-344"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="8c8a3-345"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-345"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8c8a3-346">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-346">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8c8a3-347">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-347">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8c8a3-348">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-348">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8c8a3-349">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-349">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-350">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-350">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8c8a3-351">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-351">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="8c8a3-352">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-352">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8c8a3-353">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-353">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8c8a3-354">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-354">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8c8a3-355">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-355">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public virtual object GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKey (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetKey(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetKey : int -&gt; obj&#xA;override this.GetKey : int -&gt; obj" Usage="sortedList.GetKey index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="8c8a3-356">要获取的键的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-356">The zero-based index of the key to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-357">获取 <see cref="T:System.Collections.SortedList" /> 对象的指定索引处的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-357">Gets the key at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-358">
            <see cref="T:System.Collections.SortedList" /> 对象的指定索引处的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-358">The key at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-359">索引序列基于排序顺序。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-359">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="8c8a3-360">当添加一个元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和对索引进行相应调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-360">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-361">删除元素后，索引也相应地调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-361">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-362">因此，特定的键/值对的索引可能会更改元素在添加或删除从<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-362">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-363">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-363">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-364">下面的代码示例演示如何获取一个或所有键或值中<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-364">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-365">
            <paramref name="index" /> 不在 <see cref="T:System.Collections.SortedList" /> 对象的有效索引范围内。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-365">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetKeyList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetKeyList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKeyList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeyList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetKeyList();" />
      <MemberSignature Language="F#" Value="abstract member GetKeyList : unit -&gt; System.Collections.IList&#xA;override this.GetKeyList : unit -&gt; System.Collections.IList" Usage="sortedList.GetKeyList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-366">获取 <see cref="T:System.Collections.SortedList" /> 对象中的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-366">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-367">包含 <see cref="T:System.Collections.IList" /> 对象中的键的 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-367">An <see cref="T:System.Collections.IList" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-368">返回<xref:System.Collections.IList>对象是只读的视图的键的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-368">The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="8c8a3-369">对基础所做的修改<xref:System.Collections.SortedList>会立即反映在<xref:System.Collections.IList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-369">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="8c8a3-370">所返回的元素<xref:System.Collections.IList>中的键的顺序相同的排序<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-370">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-371">此方法是类似于<xref:System.Collections.SortedList.Keys%2A>属性，但返回<xref:System.Collections.IList>对象而不是<xref:System.Collections.ICollection>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-371">This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="8c8a3-372">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-372">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-373">下面的代码示例演示如何获取一个或所有键或值中<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-373">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
      </Docs>
    </Member>
    <Member MemberName="GetValueList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetValueList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetValueList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetValueList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetValueList();" />
      <MemberSignature Language="F#" Value="abstract member GetValueList : unit -&gt; System.Collections.IList&#xA;override this.GetValueList : unit -&gt; System.Collections.IList" Usage="sortedList.GetValueList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-374">获取 <see cref="T:System.Collections.SortedList" /> 对象中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-374">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-375">
            <see cref="T:System.Collections.IList" /> 对象，它包含 <see cref="T:System.Collections.SortedList" /> 对象中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-375">An <see cref="T:System.Collections.IList" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-376">返回<xref:System.Collections.IList>对象是只读的值的视图<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-376">The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="8c8a3-377">对基础所做的修改<xref:System.Collections.SortedList>会立即反映在<xref:System.Collections.IList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-377">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="8c8a3-378">所返回的元素<xref:System.Collections.IList>中的值的顺序相同的排序<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-378">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-379">此方法是类似于<xref:System.Collections.SortedList.Values%2A>属性，但返回<xref:System.Collections.IList>对象而不是<xref:System.Collections.ICollection>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-379">This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="8c8a3-380">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-380">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-381">下面的代码示例演示如何获取一个或所有键或值中<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-381">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <altmember cref="P:System.Collections.SortedList.Values" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : obj -&gt; int&#xA;override this.IndexOfKey : obj -&gt; int" Usage="sortedList.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="8c8a3-382">要在 <see cref="T:System.Collections.SortedList" /> 对象中查找的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-382">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-383">返回 <see cref="T:System.Collections.SortedList" /> 对象中指定键的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-383">Returns the zero-based index of the specified key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-384">如果在 <see cref="T:System.Collections.SortedList" /> 对象中找到 <paramref name="key" />，则为 <paramref name="key" /> 参数的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-384">The zero-based index of the <paramref name="key" /> parameter, if <paramref name="key" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-385">元素<xref:System.Collections.SortedList>对象进行排序的键按照特定<xref:System.Collections.IComparer>时指定实现<xref:System.Collections.SortedList>创建，或按照<xref:System.IComparable>密钥本身提供实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-385">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="8c8a3-386">索引序列基于排序顺序。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-386">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="8c8a3-387">当添加一个元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和对索引进行相应调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-387">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-388">删除元素后，索引也相应地调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-388">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-389">因此，特定的键/值对的索引可能会更改元素在添加或删除从<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-389">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-390">此方法使用二进制搜索算法;因此，此方法为 O (log `n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-390">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-391">从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>并<xref:System.IComparable.CompareTo%2A>上的方法`item`以确定是否存在项。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-391">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="8c8a3-392">在.NET Framework 的早期版本中，通过进行此判断<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法的`item`参数在集合中的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-392">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-393">下面的代码示例演示如何确定键或中的值的索引<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-393">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-394">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-394">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8c8a3-395">比较器引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-395">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-396">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-396">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public virtual int IndexOfValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfValue (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfValue : obj -&gt; int&#xA;override this.IndexOfValue : obj -&gt; int" Usage="sortedList.IndexOfValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="8c8a3-397">要在 <see cref="T:System.Collections.SortedList" /> 对象中定位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-397">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="8c8a3-398">该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-398">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-399">返回指定的值在 <see cref="T:System.Collections.SortedList" /> 对象中第一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-399">Returns the zero-based index of the first occurrence of the specified value in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-400">如果在 <see cref="T:System.Collections.SortedList" /> 对象中找到 <paramref name="value" />，则为 <paramref name="value" /> 参数的第一个匹配项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-400">The zero-based index of the first occurrence of the <paramref name="value" /> parameter, if <paramref name="value" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-401">索引序列基于排序顺序。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-401">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="8c8a3-402">当添加一个元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和对索引进行相应调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-402">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-403">删除元素后，索引也相应地调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-403">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-404">因此，特定的键/值对的索引可能会更改元素在添加或删除从<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-404">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-405">元素的值<xref:System.Collections.SortedList>与指定的值使用相比<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-405">The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="8c8a3-406">此方法使用线性搜索;因此，此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-406">This method uses a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-407">从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>并<xref:System.IComparable.CompareTo%2A>上的方法`item`以确定是否存在项。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-407">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="8c8a3-408">在.NET Framework 的早期版本中，通过进行此判断<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法的`item`参数在集合中的对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-408">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-409">下面的代码示例演示如何确定键或中的值的索引<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-409">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-410">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-410">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.SortedList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-411">获取一个值，该值指示 <see cref="T:System.Collections.SortedList" /> 对象是否具有固定大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-411">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-412">如果 <see cref="T:System.Collections.SortedList" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-412">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8c8a3-413">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-413">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-414">具有固定大小的集合不允许添加或删除元素的集合创建，但允许修改现有元素后。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-414">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="8c8a3-415">具有固定大小的集合只是一个集合与防止添加和移除元素; 的包装器因此，如果在更改基础集合，包括添加或删除的元素，大小固定集合反映了这些更改。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-415">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="8c8a3-416">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-416">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.SortedList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-417">获取一个值，该值指示 <see cref="T:System.Collections.SortedList" /> 对象是否为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-417">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-418">如果 <see cref="T:System.Collections.SortedList" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-418">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8c8a3-419">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-419">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-420">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-420">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="8c8a3-421">集合是只读的只是一个集合与可防止修改集合; 的包装器因此，如果对基础集合进行更改，只读集合反映了这些更改。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-421">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="8c8a3-422">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-422">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.SortedList.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-423">获取一个值，该值指示对 <see cref="T:System.Collections.SortedList" /> 对象的访问是否同步（线程安全）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-423">Gets a value indicating whether access to a <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-424">如果对 <see cref="T:System.Collections.SortedList" /> 对象的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-424">
              <see langword="true" /> if access to the <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8c8a3-425">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-425">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-426">若要保证的线程安全<xref:System.Collections.SortedList>对象，必须通过返回的包装器完成所有操作<xref:System.Collections.SortedList.Synchronized%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-426">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="8c8a3-427">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-427">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8c8a3-428">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-428">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="8c8a3-429">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-429">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-430">下面的代码示例演示如何锁定集合使用<xref:System.Collections.SortedList.SyncRoot%2A>属性在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-430">The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="8c8a3-431">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-431">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 <span data-ttu-id="8c8a3-432">下面的代码示例显示了如何同步<xref:System.Collections.SortedList>对象，确定是否<xref:System.Collections.SortedList>同步的以及如何使用同步<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-432">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.SortedList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="8c8a3-433">与要获取或设置的值相关联的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-433">The key associated with the value to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-434">获取并设置与 <see cref="T:System.Collections.SortedList" /> 对象中的特定键相关联的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-434">Gets and sets the value associated with a specific key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-435">如果找到 <paramref name="key" />，则为与 <see cref="T:System.Collections.SortedList" /> 对象中的 <paramref name="key" /> 参数相关联的值；否则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-435">The value associated with the <paramref name="key" /> parameter in the <see cref="T:System.Collections.SortedList" /> object, if <paramref name="key" /> is found; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-436">可以使用<xref:System.Collections.SortedList.Item%2A>属性来访问集合中的特定元素通过指定以下语法： `myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-436">You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="8c8a3-437">此外可以使用此属性来添加新元素中不存在的键的值设置<xref:System.Collections.SortedList>对象 (例如， `myCollection["myNonexistentKey"] = myValue)`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-437">You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue)`.</span></span> <span data-ttu-id="8c8a3-438">但是，如果中已存在指定的键<xref:System.Collections.SortedList>，并设置<xref:System.Collections.SortedList.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-438">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="8c8a3-439">与此相反，<xref:System.Collections.SortedList.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-439">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="8c8a3-440">密钥不能为`null`，但可以是一个值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-440">A key cannot be `null`, but a value can be.</span></span> <span data-ttu-id="8c8a3-441">来区分`null`因为找不到指定的键返回并`null`返回指定键的值是因为`null`，使用<xref:System.Collections.SortedList.Contains%2A>方法或<xref:System.Collections.SortedList.ContainsKey%2A>方法以确定在列表中存在该密钥。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-441">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="8c8a3-442">元素<xref:System.Collections.SortedList>按照键排序按照特定<xref:System.Collections.IComparer>时指定实现<xref:System.Collections.SortedList>是创建或根据<xref:System.IComparable>密钥本身提供实现。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-442">The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="8c8a3-443">C# 语言使用关键字来定义而不是实现索引器<xref:System.Collections.SortedList.Keys%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-443">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A> property.</span></span> <span data-ttu-id="8c8a3-444">Visual Basic 将 <xref:System.Collections.SortedList.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-444">Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="8c8a3-445">检索此属性的值是 O (log `n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-445">Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="8c8a3-446">将属性设置为 O (log `n`) 操作，如果键已存在于<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-446">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="8c8a3-447">如果键不在列表中，将属性设置为 O (`n`) 操作的未排序的数据或 O (log `n`) 如果在列表的末尾添加了新元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-447">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="8c8a3-448">如果插入导致大小调整，运算复杂度为 O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-448">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-449">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-449">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8c8a3-450">设置该属性，而且 <see cref="T:System.Collections.SortedList" /> 对象为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-450">The property is set and the <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="8c8a3-451">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-451">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-452">设置该属性，集合中不存在 <paramref name="key" />，而且 <see cref="T:System.Collections.SortedList" /> 具有固定大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-452">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="8c8a3-453">没有足够的可用内存来将元素添加到 <see cref="T:System.Collections.SortedList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-453">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8c8a3-454">比较器引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-454">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-455">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-455">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.SortedList.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-456">获取 <see cref="T:System.Collections.SortedList" /> 对象中的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-456">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-457">包含 <see cref="T:System.Collections.ICollection" /> 对象中的键的 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-457">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-458"><xref:System.Collections.ICollection>对象是只读的视图的键的<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-458">The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="8c8a3-459">对基础所做的修改<xref:System.Collections.SortedList>会立即反映在<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-459">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="8c8a3-460">元素<xref:System.Collections.ICollection>中的键的顺序相同的排序<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-460">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-461">此属性是类似于<xref:System.Collections.SortedList.GetKeyList%2A>方法，但返回<xref:System.Collections.ICollection>对象而不是<xref:System.Collections.IList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-461">This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-462">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-462">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Values" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-463">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-463">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="sortedList.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="8c8a3-464">要移除的元素的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-464">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-465">从 <see cref="T:System.Collections.SortedList" /> 对象中移除带有指定键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-465">Removes the element with the specified key from a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-466">如果 <xref:System.Collections.SortedList> 对象不包含具有指定键的元素，则 <xref:System.Collections.SortedList> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-466">If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged.</span></span> <span data-ttu-id="8c8a3-467">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-467">No exception is thrown.</span></span>  
  
 <span data-ttu-id="8c8a3-468">在由连续的元素组成的集合（如列表）中，已移除元素下面的元素将上移以占据空出的位置。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-468">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="8c8a3-469">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-469">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="8c8a3-470">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-470">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="8c8a3-471">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-471">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-472">下面的代码示例演示如何从元素移除<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-472">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-473">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-473">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8c8a3-474">
            <see cref="T:System.Collections.SortedList" /> 对象是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-474">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="8c8a3-475">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-475">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-476">
            <see cref="T:System.Collections.SortedList" /> 具有固定的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-476">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-477">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-477">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="sortedList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="8c8a3-478">要移除的元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-478">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-479">移除 <see cref="T:System.Collections.SortedList" /> 对象的指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-479">Removes the element at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-480">索引序列基于排序顺序。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-480">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="8c8a3-481">当添加一个元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和对索引进行相应调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-481">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-482">删除元素后，索引也相应地调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-482">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-483">因此，特定的键/值对的索引可能会更改元素在添加或删除从<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-483">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-484">在由连续的元素组成的集合（如列表）中，已移除元素下面的元素将上移以占据空出的位置。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-484">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="8c8a3-485">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-485">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="8c8a3-486">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-486">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="8c8a3-487">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-487">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-488">下面的代码示例演示如何从元素移除<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-488">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-489">
            <paramref name="index" /> 不在 <see cref="T:System.Collections.SortedList" /> 对象的有效索引范围内。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-489">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8c8a3-490">
            <see cref="T:System.Collections.SortedList" /> 为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-490">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          </span>
          <span data-ttu-id="8c8a3-491">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-491">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-492">
            <see cref="T:System.Collections.SortedList" /> 具有固定的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-492">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetByIndex">
      <MemberSignature Language="C#" Value="public virtual void SetByIndex (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetByIndex(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetByIndex (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetByIndex(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetByIndex : int * obj -&gt; unit&#xA;override this.SetByIndex : int * obj -&gt; unit" Usage="sortedList.SetByIndex (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="8c8a3-493">从零开始的索引，在该位置保存 <c>value</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-493">The zero-based index at which to save <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8c8a3-494">要保存到 <see cref="T:System.Object" /> 对象中的 <see cref="T:System.Collections.SortedList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-494">The <see cref="T:System.Object" /> to save into the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="8c8a3-495">该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-495">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-496">替换 <see cref="T:System.Collections.SortedList" /> 对象中指定索引处的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-496">Replaces the value at a specific index in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-497">索引序列基于排序顺序。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-497">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="8c8a3-498">当添加一个元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和对索引进行相应调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-498">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-499">删除元素后，索引也相应地调整。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-499">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="8c8a3-500">因此，特定的键/值对的索引可能会更改元素在添加或删除从<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-500">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-501">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-501">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-502">下面的代码示例演示如何在现有元素的值替换为<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-502">The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.SetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8c8a3-503">
            <paramref name="index" /> 不在 <see cref="T:System.Collections.SortedList" /> 对象的有效索引范围内。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-503">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.SortedList Synchronized(class System.Collections.SortedList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (list As SortedList) As SortedList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::SortedList ^ Synchronized(System::Collections::SortedList ^ list);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.SortedList -&gt; System.Collections.SortedList" Usage="System.Collections.SortedList.Synchronized list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.SortedList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.SortedList" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="8c8a3-504">要同步的 <see cref="T:System.Collections.SortedList" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-504">The <see cref="T:System.Collections.SortedList" /> object to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c8a3-505">返回 <see cref="T:System.Collections.SortedList" /> 对象的同步（线程安全）包装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-505">Returns a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-506">
            <see cref="T:System.Collections.SortedList" /> 对象的同步（线程安全）包装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-506">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-507">若要保证的线程安全<xref:System.Collections.SortedList>对象，必须通过此包装器完成所有操作。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-507">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="8c8a3-508">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-508">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8c8a3-509">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-509">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="8c8a3-510">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-510">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-511">下面的代码示例演示如何锁定集合使用<xref:System.Collections.SortedList.SyncRoot%2A>属性在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-511">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="8c8a3-512">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-512">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="8c8a3-513">下面的代码示例显示了如何同步<xref:System.Collections.SortedList>对象，确定是否<xref:System.Collections.SortedList>同步的以及如何使用同步<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-513">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c8a3-514">
            <paramref name="list" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-514">
              <paramref name="list" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.SortedList.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-515">获取一个对象，该对象可用于同步对 <see cref="T:System.Collections.SortedList" /> 对象的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-515">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-516">一个对象，该对象可用于同步对 <see cref="T:System.Collections.SortedList" /> 对象的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-516">An object that can be used to synchronize access to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-517">若要创建的同步的版本<xref:System.Collections.SortedList>对象，请使用<xref:System.Collections.SortedList.Synchronized%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-517">To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span> <span data-ttu-id="8c8a3-518">但是，派生的类可以提供其自己的同步的版本<xref:System.Collections.SortedList>使用<xref:System.Collections.SortedList.SyncRoot%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-518">However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property.</span></span> <span data-ttu-id="8c8a3-519">同步代码必须在执行操作<xref:System.Collections.SortedList.SyncRoot%2A>的<xref:System.Collections.SortedList>，而不是直接在<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-519">The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="8c8a3-520">这样可确保对从其他对象派生的集合正确地执行操作。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-520">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="8c8a3-521">具体而言，它维护与其他线程可能同时对修改的正确同步<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-521">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-522">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-522">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8c8a3-523">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-523">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="8c8a3-524">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-524">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-525">下面的代码示例演示如何锁定集合使用<xref:System.Collections.SortedList.SyncRoot%2A>属性在整个枚举期间。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-525">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="8c8a3-526">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-526">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-527">返回循环访问 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.SortedList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-527">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c8a3-528">
            <see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Collections.SortedList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-528">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-529">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="8c8a3-529">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="8c8a3-530">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-530">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="8c8a3-531">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-531">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8c8a3-532">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-532">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8c8a3-533">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-533">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8c8a3-534"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-534"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="8c8a3-535">在此位置，调用<xref:System.Collections.IEnumerator.Current%2A>将引发异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-535">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="8c8a3-536">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-536">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-537">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-537"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="8c8a3-538"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-538"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8c8a3-539">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-539">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8c8a3-540">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-540">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8c8a3-541">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Collections.IEnumerator.Current%2A>将引发异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-541">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="8c8a3-542">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-542">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="8c8a3-543">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-543">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8c8a3-544">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-544">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="8c8a3-545">如果集合修改之间<xref:System.Collections.IEnumerator.MoveNext%2A>并<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回设置为时，该元素，即使该枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-545">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="8c8a3-546">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-546">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8c8a3-547">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-547">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="8c8a3-548">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-548">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="8c8a3-549">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-549">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberSignature Language="F#" Value="abstract member TrimToSize : unit -&gt; unit&#xA;override this.TrimToSize : unit -&gt; unit" Usage="sortedList.TrimToSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-550">将容量设置为 <see cref="T:System.Collections.SortedList" /> 对象中元素的实际数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-550">Sets the capacity to the actual number of elements in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-551">此方法可用于最小化集合的内存开销如果任何新元素将不添加到集合。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-551">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span>  
  
 <span data-ttu-id="8c8a3-552">若要重置<xref:System.Collections.SortedList>对象为其初始状态，调用<xref:System.Collections.SortedList.Clear%2A>方法之前调用<xref:System.Collections.SortedList.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-552">To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>.</span></span> <span data-ttu-id="8c8a3-553">截去空<xref:System.Collections.SortedList>的容量设置<xref:System.Collections.SortedList>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-553">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="8c8a3-554">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.SortedList.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-554">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c8a3-555">下面的代码示例演示如何剪裁的未使用的部分<xref:System.Collections.SortedList>对象以及如何清除它的值。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-555">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8c8a3-556">
            <see cref="T:System.Collections.SortedList" /> 对象是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-556">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="8c8a3-557">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-557">-or-</span>
          </span>
          <span data-ttu-id="8c8a3-558">
            <see cref="T:System.Collections.SortedList" /> 具有固定的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-558">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Clear" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.SortedList.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c8a3-559">获取 <see cref="T:System.Collections.SortedList" /> 对象中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-559">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c8a3-560">
            <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.SortedList" /> 对象中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-560">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c8a3-561"><xref:System.Collections.ICollection>对象是只读的值的视图<xref:System.Collections.SortedList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-561">The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="8c8a3-562">对基础所做的修改<xref:System.Collections.SortedList>会立即反映在<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-562">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="8c8a3-563">元素<xref:System.Collections.ICollection>中的值的顺序相同的排序<xref:System.Collections.SortedList>。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-563">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="8c8a3-564">此属性是类似于<xref:System.Collections.SortedList.GetValueList%2A>方法，但返回<xref:System.Collections.ICollection>对象而不是<xref:System.Collections.IList>对象。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-564">This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="8c8a3-565">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="8c8a3-565">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="8c8a3-566">在集合中执行不区分区域性的字符串操作</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c8a3-566">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>