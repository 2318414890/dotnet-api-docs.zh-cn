<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEnumerator.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f899d5b30819887e359cfccfb19a232983dfc83f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f899d5b30819887e359cfccfb19a232983dfc83f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.IEnumerator">
          <source>Supports a simple iteration over a non-generic collection.</source>
          <target state="translated">支持对非泛型集合的简单迭代。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> is the base interface for all non-generic enumerators.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> 是所有非泛型枚举器的基接口。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>For the generic version of this interface see <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.</source>
          <target state="translated">有关此接口的泛型版本，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">C# 语言的 <ph id="ph1">`foreach`</ph> 语句（在 Visual Basic 中为 <ph id="ph2">`for each`</ph>）隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，使用<ph id="ph1">`foreach`</ph>建议而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method is provided for COM interoperability and does not need to be fully implemented; instead, the implementer can throw a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>方法提供的 COM 互操作性和不需要完全实现; 相反，实施者可以引发<ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>You must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>; otherwise, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">必须调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法将枚举数前移到集合，然后再读取的值的第一个元素<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>; 否则为<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 之前，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 返回同一对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, calling <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，则调用<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>引发异常。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>, if it’s implemented, followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">若要设置<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>再次集合的第一个元素，可以调用<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>，如果它实现后, 跟<ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is not implemented, you must create a new enumerator instance to return to the first element of the collection.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>是未实现，你必须创建新的枚举器实例，以返回到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>引发<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>If the collection is modified between <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">如果之间修改集合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>返回到，设置的元素，即使枚举数已经无效。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>The following code example demonstrates the implementation of the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfaces for a custom collection.</source>
          <target state="translated">下面的代码示例演示如何实现<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph>为自定义集合的接口。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerator">
          <source>In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of <ph id="ph1">`foreach`</ph> (<ph id="ph2">`for each`</ph> in Visual Basic) to iterate through the collection.</source>
          <target state="translated">在此示例中，不显式调用这些接口的成员，但它们并实现以支持使用<ph id="ph1">`foreach`</ph>(<ph id="ph2">`for each`</ph>在 Visual Basic 中) 以循环访问集合。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Collections.IEnumerator.Current">
          <source>Gets the element in the collection at the current position of the enumerator.</source>
          <target state="translated">获取集合中位于枚举数当前位置的元素。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source>The element in the collection at the current position of the enumerator.</source>
          <target state="translated">集合中位于枚举数当前位置的元素。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined under any of the following conditions:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 未定义任何以下条件下：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source>The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.</source>
          <target state="translated">枚举器创建后立即，枚举数定位在集合中，第一个元素之前。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 必须调用来枚举器向前移动到集合，然后再读取的值的第一个元素<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source>The last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, which indicates the end of the collection.</source>
          <target state="translated">上次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，指示集合的末尾。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source>The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</source>
          <target state="translated">由于在集合中，如添加、 修改或删除元素所做的更改，枚举数将失效。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 之前，<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 返回相同的对象。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source>The following code example demonstrates the implementation of the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfaces for a custom collection.</source>
          <target state="translated">下面的代码示例演示如何实现<ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph>为自定义集合的接口。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source>In this example, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is not explicitly called, but it is implemented to support the use of <ph id="ph2">`foreach`</ph> (<ph id="ph3">`for each`</ph> in Visual Basic).</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>未显式调用，但其实现支持使用<ph id="ph2">`foreach`</ph>(<ph id="ph3">`for each`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IEnumerator.Current">
          <source>This code example is part of a larger example for the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">此代码示例是一个更大的示例的一部分<ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>Advances the enumerator to the next element of the collection.</source>
          <target state="translated">将枚举数推进到集合的下一个元素。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was successfully advanced to the next element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has passed the end of the collection.</source>
          <target state="translated">如果枚举数已成功地推进到下一个元素，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果枚举数传递到集合的末尾，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>After an enumerator is created or after the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method is called, an enumerator is positioned before the first element of the collection, and the first call to the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method moves the enumerator over the first element of the collection.</source>
          <target state="translated">创建一个枚举器或<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>方法被调用时，枚举数定位在集合中，并且首次调用的第一个元素之前<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法将枚举器移到集合的第一个元素上。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph> until <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>直到<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>引发<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>The following code example demonstrates the implementation of the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfaces for a custom collection.</source>
          <target state="translated">下面的代码示例演示如何实现<ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph>为自定义集合的接口。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>In this example, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is not explicitly called, but it is implemented to support the use of <ph id="ph2">`foreach`</ph> (<ph id="ph3">`for each`</ph> in Visual Basic).</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>未显式调用，但其实现支持使用<ph id="ph2">`foreach`</ph>(<ph id="ph3">`for each`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>This code example is part of a larger example for the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">此代码示例是一个更大的示例的一部分<ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerator.MoveNext">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">集合在枚举器创建后被修改。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerator.Reset">
          <source>Sets the enumerator to its initial position, which is before the first element in the collection.</source>
          <target state="translated">将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>方法抛出异常<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method is provided for COM interoperability.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>方法提供的 COM 互操作性。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>It does not necessarily need to be implemented; instead, the implementer can simply throw a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">它不一定需要实现;相反，实施者可以只引发<ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>The following code example demonstrates the implementation of the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfaces for a custom collection.</source>
          <target state="translated">下面的代码示例演示如何实现<ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph>为自定义集合的接口。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>In this example, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is not explicitly called, but it is implemented to support the use of <ph id="ph2">`foreach`</ph> (<ph id="ph3">`for each`</ph> in Visual Basic).</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>未显式调用，但其实现支持使用<ph id="ph2">`foreach`</ph>(<ph id="ph3">`for each`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>This code example is part of a larger example for the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">此代码示例是一个更大的示例的一部分<ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerator.Reset">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">集合在枚举器创建后被修改。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>All calls to <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerator.Reset" /&gt;</ph> must result in the same state for the enumerator.</source>
          <target state="translated">对所有调用<ph id="ph1">&lt;see cref="M:System.Collections.IEnumerator.Reset" /&gt;</ph>枚举器，必须将它们产生同样的状态。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.</source>
          <target state="translated">首选的实现是将枚举器移动到集合的第一个元素之前的开头。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerator.Reset">
          <source>This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerator.MoveNext" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</source>
          <target state="translated">这使枚举数，如果集合已修改，枚举数自创建以来，这是与一致<ph id="ph1">&lt;see cref="M:System.Collections.IEnumerator.MoveNext" /&gt;</ph>和<ph id="ph2">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>