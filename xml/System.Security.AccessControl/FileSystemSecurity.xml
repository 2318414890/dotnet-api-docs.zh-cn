<Type Name="FileSystemSecurity" FullName="System.Security.AccessControl.FileSystemSecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5ad7c36a80e44026b71817bfa78a8c6b89aeaf95" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30490821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FileSystemSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileSystemSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.FileSystemSecurity" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileSystemSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemSecurity abstract : System::Security::AccessControl::NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示文件或目录的访问控制和审核安全。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity>类是适用于基<xref:System.Security.AccessControl.FileSecurity>和<xref:System.Security.AccessControl.DirectorySecurity>类。  这些类表示所有的系统文件或目录的访问权限，并定义如何审核访问尝试。  
  
 <xref:System.Security.AccessControl.FileSystemSecurity>类访问和审核权限表示为一组规则。 每个规则都由<xref:System.Security.AccessControl.FileSystemAccessRule>对象，而每个审核规则由<xref:System.Security.AccessControl.FileSystemAuditRule>对象。  
  
 <xref:System.Security.AccessControl.FileSystemSecurity>类是基础的 Microsoft Windows 文件安全系统的抽象。 在此系统中，每个文件或目录具有自定义访问控制列表 (DACL)，它控制对文件或目录的访问和系统访问控制列表 (SACL)，指定进行审核的访问控制尝试。  <xref:System.Security.AccessControl.FileSystemAccessRule>和<xref:System.Security.AccessControl.FileSystemAuditRule>类是抽象的访问控制项 (Ace)，包括 Dacl 和 Sacl。  
  
 <xref:System.Security.AccessControl.FileSystemSecurity>类隐藏的许多详细信息的 Dacl 和 Sacl; 无需担心 ACE 排序或 null DACL。  
  
 若要保存到文件的新的或更改的访问控制列表 (ACL) 信息，请使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要保存新的或更改到目录的 ACL 信息，请使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要从文件检索 ACL 信息，请使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要从目录中检索 ACL 信息，请使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Security.AccessControl.FileSecurity>类来添加，然后移除对文件的访问控制列表 (ACL) 项。  你必须提供有效的用户或组帐户以运行此示例。  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.FileSystemSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> 类用于表示访问规则的枚举。</summary>
        <value>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.FileSystemRights" /> 枚举。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生自的类<xref:System.Security.AccessControl.FileSystemSecurity>类替代<xref:System.Security.AccessControl.FileSystemSecurity.AccessRightType%2A>属性，并返回它们用于表示的访问权限的类型。 当使用数组或包含多个类型的安全对象的集合时，使用此属性来确定要用于每个安全对象的正确的枚举类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override sealed System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">表示用户帐户的 <see cref="T:System.Security.Principal.IdentityReference" /> 对象。</param>
        <param name="accessMask">指定访问类型的整数。</param>
        <param name="isInherited">
          如果该访问规则是继承的，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="inheritanceFlags">
          <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值之一，指定如何将访问掩码传播到子对象。</param>
        <param name="propagationFlags">
          <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值之一，指定如何将访问控制项 (ACE) 传播到子对象。</param>
        <param name="type">
          <see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，指定允许还是拒绝访问。</param>
        <summary>使用指定的访问权限、访问控制和标志初始化 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 类的新实例，该实例表示指定用户的新的访问控制规则。</summary>
        <returns>表示指定用户的新访问控制规则的新的 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 对象，具有指定的访问权限、访问控制和标志。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建访问控制规则的推荐的方式是使用的构造函数<xref:System.Security.AccessControl.FileSystemAccessRule>类。  
  
 返回类型<xref:System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory%2A>方法是基的类， <xref:System.Security.AccessControl.AccessRule>，但返回的值可以安全地强制转换到派生的类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="type" /> 参数指定了无效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> 参数为 <see langword="null" />。  
  
 或  
  
 <paramref name="accessMask" /> 参数为零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，也不是可转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.FileSystemSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> 类用于表示访问规则的枚举。</summary>
        <value>一个表示 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 类的 <see cref="T:System.Type" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生自的类<xref:System.Security.AccessControl.FileSystemSecurity>类替代<xref:System.Security.AccessControl.FileSystemSecurity.AccessRuleType%2A>属性，并返回它们用于表示访问规则的类型。 当使用数组或包含多个类型的安全对象的集合时，使用此属性来确定要使用每个安全对象的正确的访问规则类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 对象，表示要添加到文件或目录的访问控制列表 (ACL) 权限。</param>
        <summary>将指定的访问控制列表 (ACL) 权限添加到当前文件或目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A>方法中包含的规则列表中添加新规则<xref:System.Security.AccessControl.FileSystemSecurity>对象。  
  
 如果访问控制列表 (ACL) 已存在指定的规则，<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A>方法仍将添加该规则，有一个例外：<xref:System.Security.AccessControl.FileSystemAccessRule>对象创建使用<xref:System.Security.AccessControl.AccessControlType.Deny>枚举值会取代使用创建的对象<xref:System.Security.AccessControl.AccessControlType.Allow>枚举值。  
  
 若要保存到文件的新的或更改 ACL 信息，请使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要保存新的或更改到目录的 ACL 信息，请使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要从文件检索 ACL 信息，请使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要从目录中检索 ACL 信息，请使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 当你添加没有设置访问规则<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志将自动添加到你的规则。  如果你删除规则更高版本而无需指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，该标志将自动删除。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Security.AccessControl.FileSecurity>类来添加，然后移除对文件的访问控制列表 (ACL) 项。  你必须提供有效的用户或组帐户以运行此示例。  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 对象，表示要添加到文件或目录的审核规则。</param>
        <summary>将指定的审核规则添加到当前文件或目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法中包含的规则列表中添加新的审核规则<xref:System.Security.AccessControl.FileSystemSecurity>对象。  
  
 如果审核规则已存在指定的规则，<xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法仍将添加该规则。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法将审核规则添加到文件，然后使用<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法来删除文件中的审核规则。  你必须提供有效的用户或组帐户以运行此示例。  
  
 [!code-csharp[AccessControl.FileSystemAuditRule#1](~/samples/snippets/csharp/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/cs/sample.cs#1)]
 [!code-vb[AccessControl.FileSystemAuditRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override sealed System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">表示用户帐户的 <see cref="T:System.Security.Principal.IdentityReference" /> 对象。</param>
        <param name="accessMask">指定访问类型的整数。</param>
        <param name="isInherited">
          如果该访问规则是继承的，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="inheritanceFlags">
          <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值之一，指定如何将访问掩码传播到子对象。</param>
        <param name="propagationFlags">
          <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值之一，指定如何将访问控制项 (ACE) 传播到子对象。</param>
        <param name="flags">
          <see cref="T:System.Security.AccessControl.AuditFlags" /> 值之一，指定要执行的审核的类型。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 类的新实例，它表示指定用户的指定审核规则。</summary>
        <returns>新的 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 对象，表示指定用户的指定审核规则。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建审核规则的建议的方法是使用的构造函数<xref:System.Security.AccessControl.FileSystemAuditRule>类。  
  
 返回类型<xref:System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory%2A>方法是基的类， <xref:System.Security.AccessControl.AuditRule>，但返回的值可以安全地强制转换到派生的类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="flags" /> 属性指定了无效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> 属性为 <see langword="null" />。  
  
 或  
  
 <paramref name="accessMask" /> 属性为零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 属性既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，也不是可转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.FileSystemSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> 类用于表示审核规则的类型。</summary>
        <value>一个表示 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 类的 <see cref="T:System.Type" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生自的类<xref:System.Security.AccessControl.FileSystemSecurity>类替代<xref:System.Security.AccessControl.FileSystemSecurity.AuditRuleType%2A>属性，并返回它们用于表示审核权限的类型。 当使用数组或包含多个类型的安全对象的集合时，使用此属性来确定要用于每个安全对象的正确的审核规则类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As FileSystemAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 对象，表示要从文件或目录中移除的访问控制列表 (ACL) 权限。</param>
        <summary>从当前文件或目录移除所有匹配的允许或拒绝访问控制列表 (ACL) 权限。</summary>
        <returns>
          如果访问规则已移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>方法移除所有匹配<xref:System.Security.AccessControl.AccessControlType.Deny>访问规则或所有匹配<xref:System.Security.AccessControl.AccessControlType.Allow>从当前访问规则<xref:System.Security.AccessControl.FileSystemSecurity>对象。  例如，你可以使用此方法删除所有<xref:System.Security.AccessControl.AccessControlType.Deny>通过访问用户的规则<xref:System.Security.AccessControl.FileSystemAccessRule>对象创建使用<xref:System.Security.AccessControl.AccessControlType.Deny>值，<xref:System.Security.AccessControl.FileSystemRights.Read>值和用户帐户。  当你执行此操作，<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>方法中删除任何指定的拒绝规则<xref:System.Security.AccessControl.FileSystemRights.Read>值或<xref:System.Security.AccessControl.FileSystemRights.Write>值。  
  
 若要保存到文件的新的或更改的访问控制列表 (ACL) 信息，请使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要保存新的或更改到目录的 ACL 信息，请使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要从文件检索 ACL 信息，请使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要从目录中检索 ACL 信息，请使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 当你添加没有设置访问规则<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志将自动添加到你的规则。  如果你删除规则更高版本而无需指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，该标志将自动删除。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Security.AccessControl.FileSecurity>类来添加，然后移除对文件的访问控制列表 (ACL) 项。  你必须提供有效的用户或组帐户以运行此示例。  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 对象，该对象指定应该从文件或目录移除其访问控制列表 (ACL) 权限的用户。</param>
        <summary>从当前文件或目录移除指定用户的所有访问控制列表 (ACL) 权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll%2A>方法中删除指定的用户的所有访问控制列表 (ACL) 权限。  该方法将忽略中的所有值<xref:System.Security.AccessControl.FileSystemAccessRule>除外的用户帐户的对象。  
  
 若要保存到文件的新的或更改 ACL 信息，请使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要保存新的或更改到目录的 ACL 信息，请使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要从文件检索 ACL 信息，请使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要从目录中检索 ACL 信息，请使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 当你添加没有设置访问规则<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志将自动添加到你的规则。  如果你删除规则更高版本而无需指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，该标志将自动删除。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 对象，该对象指定应该从文件或目录移除其访问控制列表 (ACL) 权限的用户。</param>
        <summary>从当前文件或目录移除单个匹配的允许或拒绝访问控制列表 (ACL) 权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific%2A>方法中移除指定<xref:System.Security.AccessControl.AccessControlType.Deny>访问规则或指定的匹配<xref:System.Security.AccessControl.AccessControlType.Allow>从当前的访问规则<xref:System.Security.AccessControl.FileSystemSecurity>对象。  例如，你可以使用此方法删除指定<xref:System.Security.AccessControl.AccessControlType.Deny>通过将传递用户的访问规则<xref:System.Security.AccessControl.FileSystemAccessRule>对象创建使用<xref:System.Security.AccessControl.AccessControlType.Deny>值，<xref:System.Security.AccessControl.FileSystemRights.Read>值和用户帐户。  当你执行此操作，<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific%2A>方法中删除指定的拒绝规则<xref:System.Security.AccessControl.FileSystemRights.Read>值。  它不会删除任何指定的拒绝规则<xref:System.Security.AccessControl.FileSystemRights.Write>值。  
  
 若要保存到文件的新的或更改的访问控制列表 (ACL) 信息，请使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要保存新的或更改到目录的 ACL 信息，请使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要从文件检索 ACL 信息，请使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要从目录中检索 ACL 信息，请使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 当你添加没有设置访问规则<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志将自动添加到你的规则。  如果你删除规则更高版本而无需指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>标志，该标志将自动删除。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As FileSystemAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 对象，表示要从文件或目录移除的审核规则。</param>
        <summary>从当前文件或目录移除所有匹配的允许或拒绝审核规则。</summary>
        <returns>
          如果审核规则已移除，则为 <see langword="true" />；否则为 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法移除所有匹配<xref:System.Security.AccessControl.AccessControlType.Deny>审核规则或所有匹配<xref:System.Security.AccessControl.AccessControlType.Allow>审核从当前规则<xref:System.Security.AccessControl.FileSystemSecurity>对象。  例如，你可以使用此方法删除所有<xref:System.Security.AccessControl.AccessControlType.Deny>审核规则的用户通过将传递<xref:System.Security.AccessControl.FileSystemAuditRule>对象创建使用<xref:System.Security.AccessControl.AccessControlType.Deny>值，<xref:System.Security.AccessControl.AuditFlags.Failure>值和用户帐户。  当你执行此操作，<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法中删除任何指定的拒绝规则<xref:System.Security.AccessControl.AuditFlags.Failure>值或<xref:System.Security.AccessControl.AuditFlags.Success>值。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法将审核规则添加到文件，然后使用<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法来删除文件中的审核规则。  你必须提供有效的用户或组帐户以运行此示例。  
  
 [!code-csharp[AccessControl.FileSystemAuditRule#1](~/samples/snippets/csharp/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/cs/sample.cs#1)]
 [!code-vb[AccessControl.FileSystemAuditRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 对象，该对象指定应该从文件或目录删除其审核规则的用户。</param>
        <summary>从当前文件或目录移除指定用户的所有审核规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll%2A>方法中删除指定的用户的所有审核规则。  它会忽略中的所有值<xref:System.Security.AccessControl.FileSystemAuditRule>除外的用户帐户的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 对象，表示要从文件或目录移除的审核规则。</param>
        <summary>从当前文件或目录移除单个匹配的允许或拒绝审核规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific%2A>方法中删除指定的匹配<xref:System.Security.AccessControl.AccessControlType.Deny>审核规则或指定的匹配<xref:System.Security.AccessControl.AccessControlType.Allow>从当前的审核规则<xref:System.Security.AccessControl.FileSystemSecurity>对象。  例如，你可以使用此方法删除指定<xref:System.Security.AccessControl.AccessControlType.Deny>通过将传递用户的审核规则<xref:System.Security.AccessControl.FileSystemAuditRule>对象创建使用<xref:System.Security.AccessControl.AccessControlType.Deny>值，<xref:System.Security.AccessControl.AuditFlags.Failure>值和用户帐户。  当你执行此操作，<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific%2A>方法中删除指定的拒绝规则<xref:System.Security.AccessControl.AuditFlags.Failure>值。  它不会删除任何指定的拒绝规则<xref:System.Security.AccessControl.AuditFlags.Success>值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 对象，表示要添加到文件或目录的访问控制列表 (ACL) 权限。</param>
        <summary>将指定的访问控制列表 (ACL) 权限添加到当前文件或目录，并移除所有匹配的 ACL 权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule%2A>方法将添加指定的访问控制列表 (ACL) 规则或覆盖匹配任何相同 ACL 规则`rule`参数。  例如，如果`rule`参数指定<xref:System.Security.AccessControl.FileSystemRights.Read>值和<xref:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule%2A>方法找到指定的相同 ACL 规则<xref:System.Security.AccessControl.FileSystemRights.Read>值，则相同的规则将被覆盖。  如果<xref:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule%2A>方法找到指定的相同 ACL 规则<xref:System.Security.AccessControl.FileSystemRights.Write>值，则相同的规则也将被覆盖。  
  
 若要保存到文件的新的或更改 ACL 信息，请使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要保存新的或更改到目录的 ACL 信息，请使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要从文件检索 ACL 信息，请使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要从目录中检索 ACL 信息，请使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 对象，表示要为文件或目录设置的访问控制列表 (ACL) 权限。</param>
        <summary>设置当前文件或目录的指定访问控制列表 (ACL) 权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.SetAccessRule%2A>方法将添加指定的访问控制列表 (ACL) 规则或覆盖匹配任何相同 ACL 规则<xref:System.Security.AccessControl.FileSystemRights>值`rule`参数。  例如，如果`rule`参数指定<xref:System.Security.AccessControl.FileSystemRights.Read>值和<xref:System.Security.AccessControl.FileSystemSecurity.SetAccessRule%2A>方法找到指定的相同 ACL 规则<xref:System.Security.AccessControl.FileSystemRights.Read>值，则相同的规则将被覆盖。  如果<xref:System.Security.AccessControl.FileSystemSecurity.SetAccessRule%2A>方法找到指定的相同 ACL 规则<xref:System.Security.AccessControl.FileSystemRights.Write>值，相同的规则不会被覆盖。  
  
 若要保存到文件的新的或更改 ACL 信息，请使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要保存新的或更改到目录的 ACL 信息，请使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要从文件检索 ACL 信息，请使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要从目录中检索 ACL 信息，请使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 对象，表示要为文件或目录设置的审核规则。</param>
        <summary>设置当前文件或目录的指定审核规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.SetAuditRule%2A>方法将添加指定的审核规则或覆盖匹配任何相同的审核规则<xref:System.Security.AccessControl.FileSystemRights>值`rule`参数。  例如，如果`rule`参数指定<xref:System.Security.AccessControl.FileSystemRights.Read>值和<xref:System.Security.AccessControl.FileSystemSecurity.SetAuditRule%2A>方法找到指定的相同的审核规则<xref:System.Security.AccessControl.FileSystemRights.Read>值，则相同的规则将被覆盖。  如果<xref:System.Security.AccessControl.FileSystemSecurity.SetAuditRule%2A>方法找到指定的相同的审核规则<xref:System.Security.AccessControl.FileSystemRights.Write>值，相同的规则不会被覆盖。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>