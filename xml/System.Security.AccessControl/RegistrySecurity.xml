<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RegistrySecurity.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e52f3b248c05ba047d59c24d923733a12bfa7839.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e52f3b248c05ba047d59c24d923733a12bfa7839</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Represents the Windows access control security for a registry key.</source>
          <target state="translated">表示注册表项的 Windows 访问控制安全性。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object specifies access rights for a registry key, and also specifies how access attempts are audited.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象指定访问权限的某个注册表项，并且还指定如何审核访问尝试。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Access rights to the registry key are expressed as rules, with each access rule represented by a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> object.</source>
          <target state="translated">对注册表项的访问权限表示为规则，由表示每个访问规则<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Each auditing rule is represented by a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> object.</source>
          <target state="translated">每个审核规则由<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</source>
          <target state="translated">这反映了基础的 Windows 安全系统，其中每个安全对象具有最多有一个自定义访问控制列表 (DACL) 控制对受保护的对象，且最多指定的访问权限的系统访问控制列表 (SACL) 访问尝试进行审核。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</source>
          <target state="translated">DACL 和 SACL 进行排序的指定访问和审核用户和组的访问控制项 (ACE) 的列表。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> object might represent more than one ACE.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>或<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>对象可以表示多个 ACE。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Windows access control security can only be applied to registry keys.</source>
          <target state="translated">Windows 访问控制安全性仅可以应用于注册表项中。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>It cannot be applied to individual key/value pairs stored in a key.</source>
          <target state="translated">它不能应用于单个键/值对存储在注册表项。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>, and <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> classes hide the implementation details of ACLs and ACEs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>，和<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>类隐藏 Acl 和 Ace 的实现详细信息。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</source>
          <target state="translated">这使你忽略十七不同的 ACE 类型和正确维护继承和访问权限的传播的复杂性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>These objects are also designed to prevent the following common access control errors:</source>
          <target state="translated">这些对象还旨在防止以下常见的访问控制错误：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Creating a security descriptor with a null DACL.</source>
          <target state="translated">使用 null DACL 创建安全描述符。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</source>
          <target state="translated">对 DACL 的 null 引用允许任何用户将访问规则添加到一个对象，该对象可能创建的拒绝服务攻击。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A new <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object always starts with an empty DACL, which denies all access for all users.</source>
          <target state="translated">一个新<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象开始时始终具有一个空元素，此操作会拒绝所有用户的所有访问权限的 DACL。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Violating the canonical ordering of ACEs.</source>
          <target state="translated">违反 Ace 的规范顺序。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</source>
          <target state="translated">如果 DACL 中的 ACE 列表不保存在规范顺序，用户可能会无意中被赋予访问受保护的对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>For example, denied access rights must always appear before allowed access rights.</source>
          <target state="translated">例如，被拒绝的访问权限必须始终出现在允许的访问权限之前。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> objects maintain the correct order internally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 对象内部维护正确的顺序。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Manipulating security descriptor flags, which should be under resource manager control only.</source>
          <target state="translated">操作安全描述符标志，它应在资源管理器控件。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Creating invalid combinations of ACE flags.</source>
          <target state="translated">创建 ACE 标志的无效的组合。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Manipulating inherited ACEs.</source>
          <target state="translated">操纵继承的 Ace。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</source>
          <target state="translated">继承和传播由资源管理器，以响应对访问和审核规则所做的更改处理。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Inserting meaningless ACEs into ACLs.</source>
          <target state="translated">将无意义的 Ace 插入到 Acl。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</source>
          <target state="translated">不支持的.NET 安全对象的唯一功能是应当避免由应用程序开发人员，如下所示的大部分的危险活动：</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Low-level tasks that are normally performed by the resource manager.</source>
          <target state="translated">低级通常由资源管理器执行的任务。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Adding or removing access control entries in ways that do not maintain the canonical ordering.</source>
          <target state="translated">添加或移除访问控制项的不维护规范排序的方式。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>To modify Windows access control security for a registry key, use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">若要修改的注册表项的 Windows 访问控制安全性，请使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法以获取<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Modify the security object by adding and removing rules, and then use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to reattach it.</source>
          <target state="translated">通过添加和删除规则，修改安全对象，然后使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法以将其重新附加。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Changes you make to a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object do not affect the access levels of the registry key until you call the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to assign the altered security object to the registry key.</source>
          <target state="translated">对所做的更改<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象并不会影响注册表项的访问级别，直到你调用<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法以将修改过的安全对象分配给注册表项。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>To copy access control security from one registry key to another, use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object representing the access and audit rules for the first registry key, and then use the <ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to assign those rules to the second registry key.</source>
          <target state="translated">若要将访问控制安全性复制到另一个注册表项，使用<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法以获取<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象表示第一个注册表项的访问和审核规则，然后使用<ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>用于将分配到这些规则方法第二个注册表项。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>You can also assign the rules to a second registry key with an <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType&gt;</ph> method that takes a <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object parameter.</source>
          <target state="translated">此外可以将这些规则分配到的第二个注册表项<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType&gt;</ph>采用的方法<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象参数。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Users with an investment in the security descriptor definition language (SDDL) can use the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph> method to set access rules for a registry key, and the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph> method to obtain a string that represents the access rules in SDDL format.</source>
          <target state="translated">以安全描述符定义语言 (SDDL) 中的投资的用户可以使用<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph>方法以设置的注册表项，访问规则和<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph>方法来获取表示访问规则的 SDDL 格式的字符串。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This is not recommended for new development.</source>
          <target state="translated">这不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This section contains two code examples.</source>
          <target state="translated">本部分包含两个代码示例。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.</source>
          <target state="translated">第一个示例显示如何兼容规则合并时添加和删除和第二个显示继承和传播标志的添加和删除的规则的影响。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Example 1</source>
          <target state="translated">示例 1</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method removes rights from a compatible rule, and how the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method merges rights with compatible rules.</source>
          <target state="translated">下面的代码示例演示如何<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>兼容的规则，从方法中删除的权限和如何<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>方法将合并的权限具有兼容的规则。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds a rule that allows the current user <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph> rights.</source>
          <target state="translated">该示例创建<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象并将添加一个规则： 允许当前用户<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph>权限。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example then creates a rule that grants the user <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>, with the same inheritance and propagation rights as the first rule, and uses the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to remove this new rule from the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">然后，示例创建一个规则，授予用户<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>、 具有相同的继承和传播权限在第一个规则，并使用<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>方法以删除从此新规则<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> is a constituent of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>, so it is removed from the compatible rule.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> 是的构成<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>，因此它将删除从兼容的规则。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object are displayed, showing the remaining constituents of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>.</source>
          <target state="translated">中的规则<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>显示对象，显示的剩余构成部分<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example code then calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method to merge the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> right back into the rule in the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">然后，示例代码调用<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>方法合并<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph>右键回中的规则<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">此示例不会附加到的安全对象<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The second example in this section attaches a security object, and so do the examples in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">本部分中的第二个示例将附加的安全对象，也是如此示例<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Example 2</source>
          <target state="translated">示例 2</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The following code example demonstrates access rules with inheritance and propagation.</source>
          <target state="translated">下面的代码示例演示使用继承和传播访问规则。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, then creates and adds two rules that have the <ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag.</source>
          <target state="translated">该示例创建<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象，然后创建并添加了具有两个规则<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The first rule has no propagation flags, while the second has <ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>.</source>
          <target state="translated">第一条规则都具有任何传播标志，而第二个<ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The program displays the rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, and then uses the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object to create a subkey.</source>
          <target state="translated">该程序显示中的规则<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象，然后使用<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象以创建一个子项。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The program creates a child subkey and a grandchild subkey, then displays the security for each subkey.</source>
          <target state="translated">程序创建子项和一个三级子项，则将显示每个子项的安全性。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Finally, the program deletes the test keys.</source>
          <target state="translated">最后，程序将删除测试密钥。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class with default values.</source>
          <target state="translated">使用默认值初始化 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.#ctor">
          <source>A new <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</source>
          <target state="translated">一个新<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象开始时始终具有空的自由访问控制列表 (DACL)，此操作会拒绝所有用户的所有访问权限。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>Gets the enumeration type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class uses to represent access rights.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> 类用于表示访问权限的枚举类型。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> enumeration.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，表示 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 枚举。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph> property and return the type they use to represent access rights.</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>类替代<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph>属性，并返回它们用于表示的访问权限的类型。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</source>
          <target state="translated">当使用数组或包含多个类型的安全对象的集合时，使用此属性来确定要用于每个安全对象的正确的枚举类型。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph> that identifies the user or group the rule applies to.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph>，用于标识此规则应用到的用户或组。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values specifying the access rights to allow or deny, cast to an integer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 值的按位组合，用于指定允许或拒绝的访问权限，该组合将被强制转换为整数。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A Boolean value specifying whether the rule is inherited.</source>
          <target state="translated">一个布尔值，指定规则是否为继承的规则。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> values specifying how the rule is inherited by subkeys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> 值的按位组合，指定子项如何继承规则。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> values that modify the way the rule is inherited by subkeys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> 值的按位组合，用于修改子项继承规则的方式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Meaningless if the value of <bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph>.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> 的值为 <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph>，则是无意义的。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> values specifying whether the rights are allowed or denied.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 值之一，用于指定是允许还是拒绝相应权限。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</source>
          <target state="translated">使用指定的访问权限、访问控制和标志为指定用户创建新的访问控制规则。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> object representing the specified rights for the specified user.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 对象，表示指定用户的指定权限。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The recommended way to create access control rules is to use the constructors of the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> class.</source>
          <target state="translated">创建访问控制规则的推荐的方式是使用的构造函数<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Although you can specify the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> flag, there is no point in doing so.</source>
          <target state="translated">虽然可以指定<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph>标志，则没有必要这样做。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>For the purposes of access control, the name/value pairs in a subkey are not separate objects.</source>
          <target state="translated">对于访问控制，子项中的名称/值对不是单独的对象。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The access rights to name/value pairs are controlled by the rights of the subkey.</source>
          <target state="translated">名称/值对的访问权限由该子项的权限控制。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.</source>
          <target state="translated">此外，由于所有子项都是容器 （即，它们可以包含其他子项），它们不受<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Finally, specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</source>
          <target state="translated">最后，指定<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>标志不必要地增加复杂性进行维护的规则，因为它干扰兼容的规则的正常组合。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>, <ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="type" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>、<ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph> 或 <ph id="ph4">&lt;paramref name="type" /&gt;</ph> 指定了一个无效值。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> 为零。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>, nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 既不属于类型 <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>，也不属于可以转换为 <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> 类型的类型（如 <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>）。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>Gets the type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class uses to represent access rules.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> 类用于表示访问规则的类型。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> class.</source>
          <target state="translated">一个表示 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 类的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph> property and return the type they use to represent access rules.</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>类替代<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph>属性，并返回它们用于表示访问规则的类型。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</source>
          <target state="translated">当使用数组或包含多个类型的安全对象的集合时，使用此属性来确定要使用每个安全对象的正确的访问规则类型。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The access control rule to add.</source>
          <target state="translated">要添加的访问控制规则。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for a matching access control with which the new rule can be merged.</source>
          <target state="translated">搜索匹配的访问控制，新规则将与之进行合并。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If none are found, adds the new rule.</source>
          <target state="translated">如果未找到符合条件的规则，则添加新规则。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method searches for rules with the same user or group and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>方法搜索与同一用户或组，以及相同的规则<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>作为<ph id="ph3">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If none are found, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果找不到之后，<ph id="ph1">`rule`</ph>添加。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If a matching rule is found, the rights in <ph id="ph1">`rule`</ph> are merged with the existing rule.</source>
          <target state="translated">如果找到匹配规则是中的权限<ph id="ph1">`rule`</ph>合并与现有规则。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Rules cannot be merged if they have different inheritance flags.</source>
          <target state="translated">如果它们具有不同的继承标志，则不能合并规则。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>For example, if a user is allowed read access with no inheritance flags, and <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> is used to add a rule giving the user write access with inheritance for subkeys (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>), the two rules cannot be merged.</source>
          <target state="translated">例如，如果用户允许读访问，任何继承标志，和<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>用于添加一个规则，授予用户写访问，子项的继承 (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>)，不能合并两个规则。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Rules with different <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> values are never merged.</source>
          <target state="translated">具有不同的规则<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>永远不会合并值。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Rules express rights in the most economical way.</source>
          <target state="translated">规则 express 最经济的方法中的权限。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>For example, if a user has <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.QueryValues&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.Notify&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryRights.ReadPermissions&gt;</ph> rights, and you add a rule allowing <ph id="ph4">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph> rights, the user has all the constituent parts of <ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights.</source>
          <target state="translated">例如，如果用户具有<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.QueryValues&gt;</ph>，<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.Notify&gt;</ph>和<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryRights.ReadPermissions&gt;</ph>权限，而您添加规则允许<ph id="ph4">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph>权限，用户拥有的所有组成部分<ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>权限。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If you query the user's rights, you will see a rule containing <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights.</source>
          <target state="translated">如果你查询用户的权限，你将看到一个规则，其中包含<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>权限。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Similarly, if you remove <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph> rights, the other constituents of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights will reappear.</source>
          <target state="translated">同样，如果你删除<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph>权限外，其他构成<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>权限将重新出现。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example creates registry access rules and adds them to a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</source>
          <target state="translated">下面的代码示例创建注册表访问规则，并将它们添加到<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>合并对象，显示如何允许和拒绝权限的规则都保持独立，时的相同的兼容规则类型。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">此示例不会附加到的安全对象<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">附加安全对象的示例可在<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>A code example that demonstrates inheritance and propagation flags can be found in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> class.</source>
          <target state="translated">在找不到的代码示例，演示继承和传播标志<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The audit rule to add.</source>
          <target state="translated">要添加的审核规则。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The user specified by this rule determines the search.</source>
          <target state="translated">由此规则指定的用户来确定搜索。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for an audit rule with which the new rule can be merged.</source>
          <target state="translated">搜索可以将新规则与之合并的审核规则。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If none are found, adds the new rule.</source>
          <target state="translated">如果未找到符合条件的规则，则添加新规则。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph> method searches for rules with the same user or group as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph>规则具有相同的用户或组作为方法搜索<ph id="ph2">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If none are found, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果找不到之后，<ph id="ph1">`rule`</ph>添加。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If a matching rule is found, the flags in <ph id="ph1">`rule`</ph> are merged into the existing rule.</source>
          <target state="translated">如果找到匹配规则是中的标志<ph id="ph1">`rule`</ph>合并到现有规则。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Rules cannot be merged if they have different inheritance flags.</source>
          <target state="translated">如果它们具有不同的继承标志，则不能合并规则。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>), the two rules cannot be merged.</source>
          <target state="translated">例如，如果尝试写入注册表项失败进行特定的用户，没有任何继承标志，审核和<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph>用于添加一个规则，指定是否要为同一用户，但使用的继承审核更改权限的尝试失败子项 (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>)，不能合并两个规则。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph> that identifies the user or group the rule applies to.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph>，用于标识此规则应用到的用户或组。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values specifying the access rights to audit, cast to an integer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 值的按位组合，用于指定要审核的访问权限，该组合将被强制转换为整数。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A Boolean value specifying whether the rule is inherited.</source>
          <target state="translated">一个布尔值，指定规则是否为继承的规则。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> values specifying how the rule is inherited by subkeys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> 值的按位组合，指定子项如何继承规则。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> values that modify the way the rule is inherited by subkeys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> 值的按位组合，用于修改子项继承规则的方式。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Meaningless if the value of <bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph>.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> 的值为 <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph>，则是无意义的。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> values specifying whether to audit successful access, failed access, or both.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> 值的按位组合，它指定是审核成功的访问、失败的访问还是对这两种情况都进行审核。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</source>
          <target state="translated">新建审核规则，指定此规则应用到的用户、要审核的访问权限、规则的继承和传播以及触发此规则的结果。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> object representing the specified audit rule for the specified user, with the specified flags.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> 对象，表示指定用户的指定审核规则，带有指定标志。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The return type of the method is the base class, <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditRule" /&gt;</ph>, but the return value can be cast safely to the derived class.</source>
          <target state="translated">该方法的返回类型是基类 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditRule" /&gt;</ph>，但可以安全地将返回值强制转换为派生类。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The recommended way to create audit rules is to use the constructors of the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> class.</source>
          <target state="translated">创建审核规则的建议的方法是使用的构造函数<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Although you can specify the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> flag, there is no point in doing so.</source>
          <target state="translated">虽然可以指定<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph>标志，则没有必要这样做。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>For the purposes of audit control, the name/value pairs in a subkey are not separate objects.</source>
          <target state="translated">对于审核控制，子项中的名称/值对不是单独的对象。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The audit rights to name/value pairs are controlled by the rights of the subkey.</source>
          <target state="translated">名称/值对的审核权限由该子项的权限控制。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.</source>
          <target state="translated">此外，由于所有子项都是容器 （即，它们可以包含其他子项），它们不受<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Finally, specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</source>
          <target state="translated">最后，指定<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>标志不必要地增加复杂性进行维护的规则，因为它干扰兼容的规则的正常组合。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>, <ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="flags" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>、<ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph> 或 <ph id="ph4">&lt;paramref name="flags" /&gt;</ph> 指定了一个无效值。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> 为零。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>, nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 既不属于类型 <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>，也不属于可以转换为 <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> 类型的类型（如 <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>）。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>Gets the type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class uses to represent audit rules.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> 类用于表示审核规则的类型。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> class.</source>
          <target state="translated">一个表示 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> 类的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph> property and return the type they use to represent audit rights.</source>
          <target state="translated">派生自的类<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>类替代<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph>属性，并返回它们用于表示审核权限的类型。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</source>
          <target state="translated">当使用数组或包含多个类型的安全对象的集合时，使用此属性来确定要用于每个安全对象的正确的审核规则类型。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> that specifies the user and <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</source>
          <target state="translated">指定要搜索的用户和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>，以及匹配规则（如果找到）必须兼容的一组继承和传播标志。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Specifies the rights to remove from the compatible rule, if found.</source>
          <target state="translated">指定要从兼容规则移除的权限（如果找到）。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for an access control rule with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</source>
          <target state="translated">搜索如下的访问控制规则：与指定的访问规则具有相同的用户和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>（允许或拒绝），并具有兼容的继承和传播标志；如果找到，则从中移除指定访问规则中包含的权限。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a compatible rule is found; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果找到一个兼容规则，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for a rule that has the same user and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated">当前<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>具有相同的用户和相同的规则，将会搜索<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>值作为<ph id="ph3">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If no such rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到任何此类规则，不执行任何操作，并且该方法返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id="ph1">`rule`</ph>.</source>
          <target state="translated">如果找到匹配的规则，它们继承和兼容性标志将检查与中指定的标志的兼容性<ph id="ph1">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If no compatible rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到任何兼容的规则，不执行任何操作，并且该方法返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If a rule with compatible flags is found, the rights specified in <ph id="ph1">`rule`</ph> are removed from the compatible rule, and the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果找到具有兼容的标志的规则，则在指定的权限<ph id="ph1">`rule`</ph>会从兼容的规则，并且该方法返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If <ph id="ph1">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</source>
          <target state="translated">如果<ph id="ph1">`rule`</ph>指定不兼容的规则中包含的权限，根据这些权限不执行任何操作。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">如果从兼容的规则中移除所有权限，将整个规则都删除从当前<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method removes rights from a compatible rule, and how the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method merges rights with compatible rules.</source>
          <target state="translated">下面的代码示例演示如何<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>兼容的规则，从方法中删除的权限和如何<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>方法将合并的权限具有兼容的规则。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds a rule that allows the current user <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph> rights.</source>
          <target state="translated">该示例创建<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象并将添加一个规则： 允许当前用户<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph>权限。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a rule that grants the user <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>, with the same inheritance and propagation rights as the first rule, and uses the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to remove this new rule from the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">然后，示例创建一个规则，授予用户<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>、 具有相同的继承和传播权限在第一个规则，并使用<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>方法以删除从此新规则<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> is a constituent of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>, so it is removed from the compatible rule.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> 是的构成<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>，因此它将删除从兼容的规则。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object are displayed, showing the remaining constituents of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>.</source>
          <target state="translated">中的规则<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>显示对象，显示的剩余构成部分<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example code then calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to merge the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> right back into the rule in the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">然后，示例代码调用<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>方法合并<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph>右键回中的规则<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">此示例不会附加到的安全对象<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The second example in this section attaches a security object, and so do the examples in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph><ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">本部分中的第二个示例将附加的安全对象，也是如此示例<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> that specifies the user and <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> to search for.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>，指定要搜索的用户和 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</source>
          <target state="translated">忽略此规则指定的任何权限、继承标志或传播标志。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for all access control rules with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified rule and, if found, removes them.</source>
          <target state="translated">搜索与指定的规则具有相同用户和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>（允许或拒绝）的所有访问控制规则，如果找到则将其移除。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for rules that have the same user and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated">当前<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>具有相同的用户和相同的规则，将会搜索<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>值作为<ph id="ph3">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by <ph id="ph1">`rule`</ph> are ignored when performing this search.</source>
          <target state="translated">任何权限、 继承标志或由指定的传播标志<ph id="ph1">`rule`</ph>时执行此搜索将忽略。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>If no matching rules are found, no action is taken.</source>
          <target state="translated">如果不找到任何匹配的规则，不执行任何操作。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> object that specifies the user and <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType&gt;</ph>, with any arbitrary rights and flags, and passing that rule to the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph> method.</source>
          <target state="translated">例如，如果用户具有允许具有不同的继承和传播标志的各种权限的多个规则，则可以删除所有这些规则通过创建<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>对象，它指定用户和<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType&gt;</ph>、 标志，任何任意权限与并将传递到该规则<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph> method removes all rules that match user and <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>, ignoring rights and flags.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph>方法中删除与用户匹配的所有规则和<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>，忽略权限和标志。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</source>
          <target state="translated">该示例创建<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象并将添加规则，允许和拒绝具有各种权限的当前用户，具有不同的继承和传播标志。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a new rule that allows the current user to take ownership, and passes that rule to the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph> method to remove the two rules that allow access.</source>
          <target state="translated">然后，示例创建一个新规则，允许当前用户接管所有权，并将传递到该规则<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph>方法移除允许访问的两个规则。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">此示例不会附加到的安全对象<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> to remove.</source>
          <target state="translated">要移除的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</source>
          <target state="translated">搜索与指定的规则完全匹配的访问控制规则，如果找到则将其移除。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rule is removed only if it exactly matches <ph id="ph1">`rule`</ph> in all details, including flags.</source>
          <target state="translated">仅当完全匹配时，才移除规则<ph id="ph1">`rule`</ph>中的所有详细信息，包括标志。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>Other rules with the same user and <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> are not affected.</source>
          <target state="translated">具有相同的用户的其他规则和<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>不会受到影响。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</source>
          <target state="translated">一个规则表示一个或多个基础访问控制项 (ACE)，这些条目拆分或组合根据需要，修改用户的访问安全性规则时。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method cannot remove it.</source>
          <target state="translated">因此，一个规则可能特定的格式时已添加，而这种情况下不再存在<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法不能删除它。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method removes a rule only if it matches exactly.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法删除规则，仅当它与完全匹配。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates two rules that allow different rights.</source>
          <target state="translated">该示例创建两个规则，允许不同的权限。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first.</source>
          <target state="translated">规则具有兼容的继承和传播标志，因此添加第二条规则时合并与第一个。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method, specifying the first rule, but because the rules are merged there is no rule that matches.</source>
          <target state="translated">该示例通过调用<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法，指定第一个规则，但由于合并规则不存在规则相匹配。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to the remove the second rule from the merged rule, and finally calls the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method to remove the first rule.</source>
          <target state="translated">该示例然后调用<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>方法删除第二条规则从合并的规则，并最后调用<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法删除第一个规则。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">此示例不会附加到的安全对象<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>，指定要搜索的用户以及匹配规则（如果找到）必须兼容的一组继承和传播标志。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Specifies the rights to remove from the compatible rule, if found.</source>
          <target state="translated">指定要从兼容规则移除的权限（如果找到）。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</source>
          <target state="translated">搜索以下的审核控制规则：与指定的规则具有相同的用户，并具有兼容的继承和传播标志；如果找到兼容规则，则从中移除指定的规则中包含的权限。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a compatible rule is found; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果找到一个兼容规则，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for an audit rule that has the same user as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated">当前<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>搜索已为同一用户的审核规则<ph id="ph2">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If no such rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到任何此类规则，不执行任何操作，并且该方法返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id="ph1">`rule`</ph>.</source>
          <target state="translated">如果找到匹配的规则，它们继承和兼容性标志将检查与中指定的标志的兼容性<ph id="ph1">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If no compatible rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到任何兼容的规则，不执行任何操作，并且该方法返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If a rule with compatible flags is found, the rights specified in <ph id="ph1">`rule`</ph> are removed from the compatible rule, and the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果找到具有兼容的标志的规则，则在指定的权限<ph id="ph1">`rule`</ph>会从兼容的规则，并且该方法返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If <ph id="ph1">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</source>
          <target state="translated">如果<ph id="ph1">`rule`</ph>指定不兼容的规则中包含的权限，根据这些权限不执行任何操作。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">如果从兼容的规则中移除所有权限，将整个规则都删除从当前<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> that specifies the user to search for.</source>
          <target state="translated">指定要搜索的用户的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</source>
          <target state="translated">忽略此规则指定的任何权限、继承标志或传播标志。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</source>
          <target state="translated">搜索所有使用相同用户作为指定规则的审核规则，如果找到符合条件的规则，则移除它们。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for audit rules that have the same user as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated">当前<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>会为使用相同用户作为的审核规则搜索<ph id="ph2">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by <ph id="ph1">`rule`</ph> are ignored when performing this search.</source>
          <target state="translated">任何权限、 继承标志或由指定的传播标志<ph id="ph1">`rule`</ph>时执行此搜索将忽略。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>If no matching rules are found, no action is taken.</source>
          <target state="translated">如果不找到任何匹配的规则，不执行任何操作。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> to be removed.</source>
          <target state="translated">要移除的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</source>
          <target state="translated">搜索与指定的规则完全匹配的审核规则；如果找到，则移除这些规则。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>The rule is removed only if it exactly matches <ph id="ph1">`rule`</ph> in all details, including flags.</source>
          <target state="translated">仅当完全匹配时，才移除规则<ph id="ph1">`rule`</ph>中的所有详细信息，包括标志。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>Other audit rules for the same user are not affected.</source>
          <target state="translated">不会影响同一用户其他审核规则。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</source>
          <target state="translated">一个规则表示一个或多个基础访问控制项 (ACE)，这些条目拆分或组合根据需要，修改用户的审核安全规则时。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A&gt;</ph> method cannot remove it.</source>
          <target state="translated">因此，一个规则可能特定的格式时已添加，而这种情况下不再存在<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A&gt;</ph>方法不能删除它。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> to add.</source>
          <target state="translated">要添加的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The user specified by this rule determines the rules to remove before this rule is added.</source>
          <target state="translated">由此规则指定的用户确定在添加此规则之前要移除的规则。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Removes all access control rules with the same user as the specified rule, regardless of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>, and then adds the specified rule.</source>
          <target state="translated">不论 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 如何，移除与指定的规则具有相同用户的所有访问控制规则，然后添加指定的规则。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If there are no access rules whose user matches the specified rule, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果没有指定的规则，与匹配的用户的访问规则<ph id="ph1">`rule`</ph>添加。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph> method replaces all rules for the matching user with the rule specified for the match.</source>
          <target state="translated">下面的代码示例演示如何<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph>方法会替换为指定匹配的规则匹配的用户的所有规则。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</source>
          <target state="translated">该示例创建<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象并将添加规则，允许和拒绝具有各种权限的当前用户，具有不同的继承和传播标志。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a new rule that allows the current user only to read the key, and uses the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph> method to remove the all rules for the user and replace them with the new rule.</source>
          <target state="translated">然后，示例创建一个新规则，允许当前用户只能读取注册表项，并使用<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph>方法移除用户的所有规则并将其替换为新规则。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">此示例不会附加到的安全对象<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> to add.</source>
          <target state="translated">要添加的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> of this rule determine the rules to remove before this rule is added.</source>
          <target state="translated">由此规则的用户和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 确定在添加此规则之前要移除的规则。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Removes all access control rules with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified rule, and then adds the specified rule.</source>
          <target state="translated">移除与指定的规则具有相同用户和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>（允许或拒绝）的所有控制规则，然后添加指定的规则。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If the specified rule has <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>, the effect of this method is to remove all <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rules for the specified user, replacing them with the specified rule.</source>
          <target state="translated">如果指定的规则具有<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>，此方法的效果是移除所有<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>对于指定的用户，并将它们替换为指定的规则的规则。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If the specified rule has <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>, all <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> rules for the specified user are replaced with the specified rule.</source>
          <target state="translated">如果指定的规则具有<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>，所有<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>规则指定的用户替换与指定的规则。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If there are no rules whose user and <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> match the specified rule, <ph id="ph2">`rule`</ph> is added.</source>
          <target state="translated">如果没有规则的用户和<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>匹配指定的规则，<ph id="ph2">`rule`</ph>添加。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph> method removes all rules that match both the user and the <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> of <ph id="ph3">`rule`</ph>, ignoring rights and flags, and replaces them with <ph id="ph4">`rule`</ph>.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph>方法中删除与这两个用户匹配的所有规则和<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>的<ph id="ph3">`rule`</ph>、 忽略权限和标志，并将它们替换为<ph id="ph4">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</source>
          <target state="translated">该示例创建<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>对象并将添加规则，允许和拒绝具有各种权限的当前用户，具有不同的继承和传播标志。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a new rule that allows the current user only to read the key, and uses the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph> method to remove the two rules that allow access and to replace them with the new rule.</source>
          <target state="translated">然后，示例创建一个新规则，允许当前用户只能读取注册表项，并使用<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph>方法，以删除允许访问的两个规则，并将它们替换为新规则。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rule that denies access is not affected.</source>
          <target state="translated">拒绝访问的规则不受影响。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">此示例不会附加到的安全对象<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">请参阅<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> to add.</source>
          <target state="translated">要添加的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The user specified by this rule determines the rules to remove before this rule is added.</source>
          <target state="translated">由此规则指定的用户确定在添加此规则之前要移除的规则。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Removes all audit rules with the same user as the specified rule, regardless of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> value, and then adds the specified rule.</source>
          <target state="translated">不论 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> 的值如何，移除与指定的规则具有相同用户的所有审核规则，然后添加指定的规则。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If there are no audit rules whose user matches the specified rule, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果没有指定的规则，与匹配的用户的审核规则<ph id="ph1">`rule`</ph>添加。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>