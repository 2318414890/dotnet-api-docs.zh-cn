<Type Name="RegistryAuditRule" FullName="System.Security.AccessControl.RegistryAuditRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="83f022566eb2692070dab906815550254b94613f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30490141" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistryAuditRule : System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAuditRule extends System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAuditRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAuditRule&#xA;Inherits AuditRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAuditRule sealed : System::Security::AccessControl::AuditRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AuditRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示要为用户或组审核的一组访问权限。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule>类是一套.NET Framework 提供了用于管理 Windows 注册表项的访问控制安全性的类之一。 有关这些类和二者关系的基础 Windows 访问控制结构的概述，请参阅<xref:System.Security.AccessControl.RegistrySecurity>。  
  
> [!NOTE]
>  Windows 访问控制安全性仅可以应用于注册表项中。 它不能应用于单个键/值对存储在注册表项。  
  
 若要获取当前应用于注册表项的审核规则的列表，请使用<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.RegistrySecurity>对象，，然后使用其<xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A>方法来获取的集合<xref:System.Security.AccessControl.RegistryAuditRule>对象。  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> 对象不映射一对一与基础的自由访问控制列表 (DACL) 中的访问控制项。 当您获取组的所有审核规则的注册表项，该集合包含的最小当前表示所有访问控制项所需要的规则数。  
  
> [!NOTE]
>  基础的访问控制项更改，因为将应用并删除规则。 如果可能，合并规则中的信息来维护最少数量的访问控制项。 因此，当读取的规则的当前列表，它可能不完全一样已添加的所有规则的列表。  
  
 使用<xref:System.Security.AccessControl.RegistryAuditRule>对象来指定审核的用户或组的访问权限。 若要将规则应用于注册表项，使用<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.RegistrySecurity>对象。 修改<xref:System.Security.AccessControl.RegistrySecurity>对象通过使用其方法来添加规则，然后使用<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法重新附加安全对象。  
  
> [!IMPORTANT]
>  对所做的更改<xref:System.Security.AccessControl.RegistrySecurity>对象并不会影响注册表项的访问级别，直到你调用<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法以将修改过的安全对象分配给注册表项。  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> 对象是不可变。 使用的方法修改注册表项安全性<xref:System.Security.AccessControl.RegistrySecurity>类来添加或删除规则; 执行此操作时，修改的基础的访问控制项。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">此规则应用到的用户或组。 必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="registryRights">
          <see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指定要审核的访问类型。</param>
        <param name="inheritanceFlags">
          <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值的按位组合，它指定审核规则是否应用于当前注册表项的子项。</param>
        <param name="propagationFlags">
          <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值的按位组合，它将影响将继承的审核规则传播到当前注册表项的子项的方式。</param>
        <param name="flags">
          <see cref="T:System.Security.AccessControl.AuditFlags" /> 值的按位组合，它指定审核是成功、失败还是包括这两种情况。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 类的新实例，指定要审核的用户或组，要审核的权限，是否考虑继承以及是否审核成功和（或）失败。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有注册表项都是容器，因此对注册表项有意义的唯一继承标志是<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>标志。 如果未指定此标志，则忽略传播标志，并仅即时项会受到影响。 如果存在标志，则规则会传播下表中所示。 表假定没有子项 S 具有子项 CS 和孙级子项 GS。 也就是说，孙级子项的路径是 S\CS\GS。  
  
|传播标志|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 三级子项的模式控制三级子项中包含的所有子项。  
  
 例如，如果<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>标志已指定给`inheritanceFlags`和<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>的指定传播标志`propagationFlags`，此规则不适用于直接子项，但未应用于其所有直接子子项及其所有子项它们包含。  
  
> [!NOTE]
>  虽然可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>标志`inheritanceFlags`，在此过程中没有点。 对于访问控制，子项中的名称/值对不是单独的对象。 名称/值对的访问权限由该子项的权限控制。 此外，由于所有子项都是容器 （即，它们可以包含其他子项），它们不受<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志。 最后，指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志不必要地增加复杂性进行维护的规则，因为它干扰兼容的规则的正常组合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> 指定了一个无效值。  
  
 或  
  
 <paramref name="flags" /> 指定了一个无效值。  
  
 或  
  
 <paramref name="inheritanceFlags" /> 指定了一个无效值。  
  
 或  
  
 <paramref name="propagationFlags" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="registryRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">应用此规则的用户或组的名称。</param>
        <param name="registryRights">
          <see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指定要审核的访问类型。</param>
        <param name="inheritanceFlags">
          <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 标志的按位组合，它指定审核规则是否应用于当前注册表项的子项。</param>
        <param name="propagationFlags">
          <see cref="T:System.Security.AccessControl.PropagationFlags" /> 标志的按位组合，它将影响将继承的审核规则传播到当前注册表项的子项的方式。</param>
        <param name="flags">
          <see cref="T:System.Security.AccessControl.AuditFlags" /> 值的按位组合，它指定审核是成功、失败还是包括这两种情况。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 类的新实例，指定要审核的用户或组的名称，要审核的权限，是否考虑继承以及是否审核成功和（或）失败。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有注册表项都是容器，因此对注册表项有意义的唯一继承标志是<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>标志。 如果未指定此标志，则忽略传播标志，并仅即时项会受到影响。 如果存在标志，则规则会传播下表中所示。 表假定没有子项 S 具有子项 CS 和孙级子项 GS。 也就是说，孙级子项的路径是 S\CS\GS。  
  
|传播标志|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 三级子项的模式控制三级子项中包含的所有子项。  
  
 例如，如果<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>标志已指定给`inheritanceFlags`和<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>的指定传播标志`propagationFlags`，此规则不适用于直接子项，但未应用于其所有直接子子项及其所有子项它们包含。  
  
> [!NOTE]
>  虽然可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>标志`inheritanceFlags`，在此过程中没有点。 对于访问控制，子项中的名称/值对不是单独的对象。 名称/值对的访问权限由该子项的权限控制。 此外，由于所有子项都是容器 （即，它们可以包含其他子项），它们不受<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志。 最后，指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志不必要地增加复杂性进行维护的规则，因为它干扰兼容的规则的正常组合。  
  
 此构造函数等效于创建<xref:System.Security.Principal.NTAccount>对象，通过传递`identity`到<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType>构造函数，并传递新创建<xref:System.Security.Principal.NTAccount>对象传递给<xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29>构造函数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> 指定了一个无效值。  
  
 或  
  
 <paramref name="flags" /> 指定了一个无效值。  
  
 或  
  
 <paramref name="inheritanceFlags" /> 指定了一个无效值。  
  
 或  
  
 <paramref name="propagationFlags" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="registryRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="identity" /> 是一个长度为零的字符串。  
  
 或  
  
 <paramref name="identity" /> 的长度超过 512 个字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取受此审核规则影响的访问权限。</summary>
        <value>
          <see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示受此审核规则影响的权限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule> 对象是不可变。 你可以创建新的审核规则，以表示不同的用户、 不同的权限或不同的组合<xref:System.Security.AccessControl.AuditFlags>标志，但你无法修改现有的审核规则。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>