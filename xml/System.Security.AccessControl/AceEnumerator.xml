<Type Name="AceEnumerator" FullName="System.Security.AccessControl.AceEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ab9cc472d49c9586ac7a09bacdf3c0817c9658c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37633111" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AceEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AceEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.AceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AceEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class AceEnumerator sealed : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type AceEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供遍历访问控制列表 (ACL) 中的访问控制项 (ACE) 的能力。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.AccessControl.GenericAce Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As GenericAce" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::GenericAce ^ Current { System::Security::AccessControl::GenericAce ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Security.AccessControl.GenericAce" Usage="System.Security.AccessControl.AceEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的当前元素。 此属性获取对象的类型易于转换的版本。</summary>
        <value>
          <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的当前元素。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="aceEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举器前进到 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合的下一个元素。</summary>
        <returns>如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建一个枚举器后，或调用<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法，一个枚举器定位在集合中，并在首次调用的第一个元素之前<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法移到第一个元素的集合的枚举器。  
  
 集合的末尾是传递，因为在后续调用后<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>返回`false`直到<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>调用。  
  
 只要集合保持不变，枚举数就保持有效。 如果，例如添加、 修改或删除元素，更改到集合中，该枚举数将失效且不可恢复，并且下次调用到<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="aceEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举数设置为其初始位置，该位置位于 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中第一个元素之前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只要集合保持不变，枚举数就保持有效。 如果如添加、 修改或删除元素，对集合进行，该枚举数将失效且不可恢复，并且下次调用到<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法会引发 <xref:System.InvalidOperationException>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
        <block subset="none" type="overrides">
          <para>对所有调用<see cref="M:System.Security.AccessControl.AceEnumerator.Reset" />必须生成相同的状态的枚举器。首选的实现是集合的将枚举数移到第一个元素之前的元素的开头。这使枚举器，如果集合已被修改，枚举器自创建以来，这是与一致<see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" />和<see cref="P:System.Security.AccessControl.AceEnumerator.Current" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取集合中的当前元素。</summary>
        <value>返回集合中的当前元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建一个枚举器后，或调用<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法时，必须调用<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>; 否则为<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>未定义.  
  
 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 此外会引发异常，如果最后一次调用到<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>返回`false`，指示集合的末尾。  
  
 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 不会移动位置的枚举器，并对连续调用<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>直到返回同一对象<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>调用。  
  
 只要集合保持不变，枚举数就保持有效。 如果，例如添加、 修改或删除元素，更改到集合中，枚举数将失效且不可恢复，并且下次调用<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。 如果集合修改之间<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>并<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>，<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>返回设置为时，该元素，即使该枚举数已经无效。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
      </Docs>
    </Member>
  </Members>
</Type>