<Type Name="MutexSecurity" FullName="System.Security.AccessControl.MutexSecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8fca401f2cdcab98d79adc82ef9792e4adc6d88f" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49142283" /></Metadata><TypeSignature Language="C#" Value="public sealed class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MutexSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.MutexSecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MutexSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class MutexSecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type MutexSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示命名的 mutex 的 Windows 访问控制安全性。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Security.AccessControl.MutexSecurity>对象指定的命名的系统 mutex 的访问权限以及如何审核访问尝试。 互斥体的访问权限表示为规则，由表示每个访问规则<xref:System.Security.AccessControl.MutexAccessRule>对象。 每个审核规则由<xref:System.Security.AccessControl.MutexAuditRule>对象。  
  
 这反映了基础的 Windows 安全系统，其中每个安全对象具有最多有一个自定义访问控制列表 (DACL) 控制对受保护的对象，并最多指定的访问权限的一个系统访问控制列表 (SACL) 访问尝试进行审核。 DACL 和 SACL 进行排序的访问控制项 (ACE) 指定的访问和审核用户和组的列表。 一个<xref:System.Security.AccessControl.MutexAccessRule>或<xref:System.Security.AccessControl.MutexAuditRule>对象可以表示多个 ACE。  
  
> [!NOTE]
>  一个<xref:System.Threading.Mutex>对象可以表示了局部互斥体或命名的系统互斥体。 Windows 访问控制安全性是仅对已命名的系统互斥体，有意义。  
  
 <xref:System.Security.AccessControl.MutexSecurity>， <xref:System.Security.AccessControl.MutexAccessRule>，和<xref:System.Security.AccessControl.MutexAuditRule>类隐藏的 Acl 和 Ace 的实现详细信息。 它们允许您忽略十七个不同的 ACE 类型和继承和传播的访问权限进行正确维护的复杂性。 这些对象还旨在阻止以下常见的访问控制错误：  
  
-   创建具有 null DACL 的安全描述符。 对 DACL 的 null 引用允许任何用户将访问规则添加到一个对象，可能会创建拒绝服务攻击。 一个新<xref:System.Security.AccessControl.MutexSecurity>对象开始时始终使用空的 DACL，此操作会拒绝所有用户的所有访问权限。  
  
-   违反 Ace 的规范顺序。 如果 DACL 中的 ACE 列表不会保存在规范顺序，用户可能会无意中被赋予访问受保护的对象。 例如，被拒绝的访问权限必须始终出现在允许的访问权限之前。 <xref:System.Security.AccessControl.MutexSecurity> 对象在内部维护正确的顺序。  
  
-   操作应仅资源管理器控制下的安全描述符标志。  
  
-   正在创建无效的 ACE 标志组合。  
  
-   处理继承的 Ace。 继承和传播由资源管理器，以响应对访问和审核规则所做的更改处理。  
  
-   将无意义的 Ace 插入到 Acl。  
  
 不支持的.NET 安全对象的唯一功能是危险的活动，应避免使用由大多数应用程序开发人员，如下所示：  
  
-   通常由资源管理器执行的低级别任务。  
  
-   添加或删除访问控制项中不维护规范排序的方式。  
  
 若要修改某个命名的 mutex 的 Windows 访问控制安全性，请使用<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.MutexSecurity>对象。 通过添加和删除规则，修改安全对象，然后使用<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>方法以将其重新附加。  
  
> [!IMPORTANT]
>  对所做的更改<xref:System.Security.AccessControl.MutexSecurity>对象并不会影响已命名的 mutex 的访问级别，直到你调用<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>方法以将修改过的安全对象分配到命名互斥体。  
  
 若要将访问控制安全性复制到另一个互斥锁，请使用<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.MutexSecurity>表示第一个互斥体的访问和审核规则的对象，然后使用<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>方法或构造函数接受<xref:System.Security.AccessControl.MutexSecurity>对象，将这些规则分配给第二个互斥体。  
  
 安全描述符定义语言 (SDDL) 投资的用户可以使用<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>方法来设置命名的 mutex 的访问规则和<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>方法来获取一个字符串，表示访问规则的 SDDL 格式。 这不被建议用于新开发。  
  
> [!NOTE]
>  Windows 98 或 Windows Millennium Edition 不支持同步对象的安全性。  
  
   
  
## Examples  
 下面的代码示例演示了之间的分离<xref:System.Security.AccessControl.AccessControlType.Allow>规则和<xref:System.Security.AccessControl.AccessControlType.Deny>规则，并在兼容的规则中显示的权限的组合。 此示例将创建<xref:System.Security.AccessControl.MutexSecurity>对象，添加规则，允许和拒绝具有各种权限的当前用户，并显示最终的规则对。 然后可对当前用户的新权限，并显示结果，显示新权限将与现有合并<xref:System.Security.AccessControl.AccessControlType.Allow>规则。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.Mutex>对象。 附加安全对象的示例可在<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.MutexAccessRule" />
    <altmember cref="T:System.Security.AccessControl.MutexAuditRule" />
    <altmember cref="T:System.Security.AccessControl.MutexRights" />
    <altmember cref="M:System.Threading.Mutex.GetAccessControl" />
    <altmember cref="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>使用默认值初始化 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个新<xref:System.Security.AccessControl.MutexSecurity>对象开始时始终具有空的自由访问控制列表 (DACL)，此操作会拒绝所有用户的所有访问权限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Windows 98 或 Windows Millennium Edition 不支持此类。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexSecurity(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexSecurity : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.MutexSecurity" Usage="new System.Security.AccessControl.MutexSecurity (name, includeSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">要检索其访问控制安全性规则的系统 mutex 的名称。</param>
        <param name="includeSections">指定要检索的部分的 <see cref="T:System.Security.AccessControl.AccessControlSections" /> 标志的组合。</param>
        <summary>使用来自具有指定名称的系统 mutex 的访问控制安全性规则的指定部分初始化 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数，可获得的命名的系统互斥体的访问控制安全性，而不必先创建<xref:System.Threading.Mutex>对象。  
  
 使用已命名的系统对象时必须谨慎。 如果没有名为系统对象`name`的不是互斥体，可能会检索其访问控制安全性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">没有具有指定名称的系统对象。</exception>
        <exception cref="T:System.NotSupportedException">Windows 98 或 Windows Millennium Edition 不支持此类。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.MutexSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 类用于表示访问规则的枚举。</summary>
        <value>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.MutexRights" /> 枚举。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生的类<xref:System.Security.AccessControl.ObjectSecurity>类重写<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>属性，并返回它们用于表示访问权限的类型。 数组或包含多个类型的安全对象的集合时，使用此属性来确定要使用每个安全对象的正确的枚举类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="mutexSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">一个 <see cref="T:System.Security.Principal.IdentityReference" />，用于标识此规则应用到的用户或组。</param>
        <param name="accessMask"><see cref="T:System.Security.AccessControl.MutexRights" /> 值的按位组合，用于指定允许或拒绝的访问权限，该组合将被强制转换为整数。</param>
        <param name="isInherited">这对于命名的 mutex 没有意义，因为这些 mutex 没有层次结构。</param>
        <param name="inheritanceFlags">这对于命名的 mutex 没有意义，因为这些 mutex 没有层次结构。</param>
        <param name="propagationFlags">这对于命名的 mutex 没有意义，因为这些 mutex 没有层次结构。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>使用指定的访问权限、访问控制和标志为指定用户创建新的访问控制规则。</summary>
        <returns>一个 <see cref="T:System.Security.AccessControl.MutexAccessRule" /> 对象，表示指定用户的指定权限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建访问控制规则的建议的方法是使用的构造函数<xref:System.Security.AccessControl.MutexAccessRule>类。  
  
> [!NOTE]
>  尽管继承和传播标志这对于命名的 mutex 没有意义，但就仍然可以指定它们。 这不是建议，因为它不必要地增加复杂性维护的规则，例如通过干扰本来可以兼容的规则组合起来。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> 为 <see langword="null" />。  
  
或 
 <paramref name="accessMask" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.MutexSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 类用于表示访问规则的类型。</summary>
        <value>一个表示 <see cref="T:System.Security.AccessControl.MutexAccessRule" /> 类的 <see cref="T:System.Type" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生的类<xref:System.Security.AccessControl.ObjectSecurity>类重写<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>属性，并返回它们用于表示访问规则的类型。 数组或包含多个类型的安全对象的集合时，使用此属性来确定要使用每个安全对象的正确的访问规则类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">要添加的访问控制规则。</param>
        <summary>搜索可以将新规则与之合并的匹配访问控制规则。 如果未找到符合条件的规则，则添加新规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexSecurity.AddAccessRule%2A>方法搜索与同一用户或组和相同的规则<xref:System.Security.AccessControl.AccessControlType>作为`rule`。 如果找不到，`rule`添加。 如果找到匹配规则是中的权限`rule`与现有规则合并。  
  
   
  
## Examples  
 下面的代码示例演示了之间的分离<xref:System.Security.AccessControl.AccessControlType.Allow>规则和<xref:System.Security.AccessControl.AccessControlType.Deny>规则，并在兼容的规则中显示的权限的组合。 此示例将创建<xref:System.Security.AccessControl.MutexSecurity>对象，添加规则，允许和拒绝具有各种权限的当前用户，并显示最终的规则对。 然后可对当前用户的新权限，并显示结果，显示新权限将与现有合并<xref:System.Security.AccessControl.AccessControlType.Allow>规则。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.Mutex>对象。 附加安全对象的示例可在<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Principal.IdentityNotMappedException"><paramref name="rule" /> 无法映射到已知标识。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">要添加的审核规则。 由此规则指定的用户来确定搜索。</param>
        <summary>搜索可以将新规则与之合并的审核规则。 如果未找到符合条件的规则，则添加新规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexSecurity.AddAuditRule%2A>方法搜索的规则具有相同的用户或组作为`rule`。 如果找不到，`rule`添加。 如果找到匹配规则是中的标志`rule`合并到现有规则。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="mutexSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">一个 <see cref="T:System.Security.Principal.IdentityReference" />，用于标识此规则应用到的用户或组。</param>
        <param name="accessMask"><see cref="T:System.Security.AccessControl.MutexRights" /> 值的按位组合，用于指定要审核的访问权限，该组合将被强制转换为整数。</param>
        <param name="isInherited">这对于命名的等待句柄没有意义，因为这些句柄没有层次结构。</param>
        <param name="inheritanceFlags">这对于命名的等待句柄没有意义，因为这些句柄没有层次结构。</param>
        <param name="propagationFlags">这对于命名的等待句柄没有意义，因为这些句柄没有层次结构。</param>
        <param name="flags"><see cref="T:System.Security.AccessControl.AuditFlags" /> 值的按位组合，它指定审核成功的访问、失败的访问还是对这两种情况都进行审核。</param>
        <summary>新建审核规则，指定规则应用到的用户、要审核的访问权限以及触发审核规则的结果。</summary>
        <returns>一个 <see cref="T:System.Security.AccessControl.MutexAuditRule" /> 对象，表示指定用户的指定审核规则。 该方法的返回类型是基类 <see cref="T:System.Security.AccessControl.AuditRule" />，但可以安全地将返回值强制转换为派生类。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要创建的审核规则的建议的方法是使用的构造函数<xref:System.Security.AccessControl.MutexAuditRule>类。  
  
> [!NOTE]
>  尽管继承和传播标志这对于命名的 mutex 没有意义，但就仍然可以指定它们。 这不是建议，因为它不必要地增加复杂性维护的规则，例如通过干扰本来可以兼容的规则组合起来。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="flags" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> 为 <see langword="null" />。  
  
或 
 <paramref name="accessMask" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.MutexSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 类用于表示审核规则的类型。</summary>
        <value>一个表示 <see cref="T:System.Security.AccessControl.MutexAuditRule" /> 类的 <see cref="T:System.Type" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生的类<xref:System.Security.AccessControl.ObjectSecurity>类重写<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>属性，并返回它们用于表示审核权限的类型。 数组或包含多个类型的安全对象的集合时，使用此属性来确定要使用每个安全对象的正确的审核规则类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As MutexAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; bool" Usage="mutexSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">指定要搜索的用户和 <see cref="T:System.Security.AccessControl.MutexAccessRule" /> 的 <see cref="T:System.Security.AccessControl.AccessControlType" />，以及匹配规则（如果找到）必须兼容的一组继承和传播标志。 指定要从兼容规则移除的权限（如果找到）。</param>
        <summary>搜索如下的访问控制规则：与指定的访问规则具有相同的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝），并具有兼容的继承和传播标志；如果找到，则从中移除指定访问规则中包含的权限。</summary>
        <returns>如果找到一个兼容规则，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前<xref:System.Security.AccessControl.MutexSecurity>具有相同的用户以及相同的规则中搜索<xref:System.Security.AccessControl.AccessControlType>值作为`rule`。 如果找到任何此类规则，不执行任何操作，并且该方法返回`false`。 如果找到匹配规则，将检查其继承和兼容性标志是否与中指定的标志的兼容性`rule`。 如果找到不兼容的规则，不执行任何操作，并且该方法返回`false`。 如果找到具有兼容的标志的规则，则在指定的权限`rule`删除从兼容规则，并且该方法返回`true`。 如果`rule`指定不兼容的规则中包含的权限，根据这些权限不执行任何操作。 如果从兼容规则移除的所有权限，整个规则都已从当前<xref:System.Security.AccessControl.MutexSecurity>对象。  
  
> [!IMPORTANT]
>  虽然可以通过创建使用指定的互斥体的访问规则的继承和传播标志<xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>，这不推荐使用方法。 继承和传播对命名的 mutex 没有意义并且它们使得访问规则的维护更复杂。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRule%2A>方法删除的权限<xref:System.Security.AccessControl.AccessControlType.Allow>中的规则<xref:System.Security.AccessControl.MutexSecurity>对象。 它还演示了中的其他权限`rule`将被忽略。  
  
 此示例将创建<xref:System.Security.AccessControl.MutexSecurity>对象，并添加允许和拒绝为当前用户的各种权限的规则。 允许的权限包括<xref:System.Security.AccessControl.MutexRights.Modify>， <xref:System.Security.AccessControl.MutexRights.ReadPermissions>，和<xref:System.Security.AccessControl.MutexRights.Synchronize>。 然后，示例创建的新规则的当前用户，包括<xref:System.Security.AccessControl.MutexRights.ReadPermissions>并<xref:System.Security.AccessControl.MutexRights.TakeOwnership>权限，并将该规则用于<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRule%2A>方法来删除<xref:System.Security.AccessControl.MutexRights.ReadPermissions>从<xref:System.Security.AccessControl.AccessControlType.Allow>中的规则<xref:System.Security.AccessControl.MutexSecurity>对象。 无关<xref:System.Security.AccessControl.MutexRights.TakeOwnership>在中直接`rule`将被忽略。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.Mutex>对象。 附加安全对象的示例可在<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.MutexAccessRule" />，指定要搜索的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />。 此规则指定的任何权限都被忽略。</param>
        <summary>搜索与指定的规则具有相同用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝）的所有访问控制规则，如果找到则将其移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前<xref:System.Security.AccessControl.MutexSecurity>对象中搜索具有相同的用户以及相同的规则<xref:System.Security.AccessControl.AccessControlType>值作为`rule`。 指定的任何权限`rule`时执行此搜索，将忽略。 如果不找到任何匹配的规则，不执行任何操作。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll%2A>方法中删除所有与用户匹配的规则和<xref:System.Security.AccessControl.AccessControlType>，忽略权限。  
  
 此示例将创建<xref:System.Security.AccessControl.MutexSecurity>对象，添加规则，允许和拒绝具有各种权限的当前用户，然后将合并到更多权限<xref:System.Security.AccessControl.AccessControlType.Allow>规则。 该示例然后创建新的规则，允许当前用户取得所有权，并使用该规则来删除<xref:System.Security.AccessControl.AccessControlType.Allow>规则从<xref:System.Security.AccessControl.MutexSecurity>对象。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.Mutex>对象。 附加安全对象的示例可在<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">要移除的 <see cref="T:System.Security.AccessControl.MutexAccessRule" />。</param>
        <summary>搜索与指定的规则完全匹配的访问控制规则，如果找到则将其移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当完全匹配时移除规则`rule`中的所有详细信息，包括标志。 其他规则具有相同的用户和<xref:System.Security.AccessControl.AccessControlType>不会受到影响。  
  
> [!IMPORTANT]
>  一个规则表示一个或多个基础访问控制项 (ACE)，这些条目拆分或组合根据需要修改用户的访问安全性规则时。 因此，存在的规则可能无法再在特定窗体时添加，并在这种情况下<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>方法不能删除它。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>方法需要完全匹配才能删除的规则和规则来允许和拒绝权限是相互独立。  
  
 此示例将创建<xref:System.Security.AccessControl.MutexSecurity>对象，添加规则，允许和拒绝具有各种权限的当前用户，然后将合并到更多权限<xref:System.Security.AccessControl.AccessControlType.Allow>访问规则。 该示例然后将原始<xref:System.Security.AccessControl.AccessControlType.Allow>规则<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>方法，并显示结果，其中显示任何内容，并被删除。 然后，该示例将构造匹配的规则<xref:System.Security.AccessControl.AccessControlType.Allow>中的规则<xref:System.Security.AccessControl.MutexSecurity>对象，并已成功使用<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>方法来删除该规则。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.Mutex>对象。 附加安全对象的示例可在<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As MutexAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; bool" Usage="mutexSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">一个 <see cref="T:System.Security.AccessControl.MutexAuditRule" />，指定要搜索的用户以及匹配规则（如果找到）必须兼容的一组继承和传播标志。 指定要从兼容规则移除的权限（如果找到）。</param>
        <summary>搜索以下的审核控制规则：与指定的规则具有相同的用户，并具有兼容的继承和传播标志；如果找到兼容规则，则从中移除指定的规则中包含的权限。</summary>
        <returns>如果找到一个兼容规则，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前<xref:System.Security.AccessControl.MutexSecurity>搜索的审核规则具有相同用户作为`rule`。 如果找到任何此类规则，不执行任何操作，并且该方法返回`false`。 如果找到匹配规则，将检查其继承和兼容性标志是否与中指定的标志的兼容性`rule`。 如果找到不兼容的规则，不执行任何操作，并且该方法返回`false`。 如果找到具有兼容的标志的规则，则在指定的权限`rule`删除从兼容规则，并且该方法返回`true`。 如果`rule`指定不兼容的规则中包含的权限，根据这些权限不执行任何操作。 如果从兼容规则移除的所有权限，整个规则都已从当前<xref:System.Security.AccessControl.MutexSecurity>对象。  
  
> [!IMPORTANT]
>  虽然可以通过创建与指定互斥体的审核规则的继承和传播标志<xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>，这不推荐使用方法。 继承和传播对命名的 mutex 没有意义并且它们使得审核规则的维护更复杂。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">指定要搜索的用户的 <see cref="T:System.Security.AccessControl.MutexAuditRule" />。 此规则指定的任何权限都被忽略。</param>
        <summary>搜索所有使用相同用户作为指定规则的审核规则，如果找到符合条件的规则，则移除它们。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前<xref:System.Security.AccessControl.MutexSecurity>搜索的审核规则具有相同用户作为`rule`。 指定的任何权限`rule`时执行此搜索，将忽略。 删除所有匹配规则。 如果不找到任何匹配的规则，不执行任何操作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">要移除的 <see cref="T:System.Security.AccessControl.MutexAuditRule" />。</param>
        <summary>搜索与指定的规则完全匹配的审核规则；如果找到，则移除这些规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当完全匹配时移除规则`rule`中的所有详细信息，包括标志。 不会影响同一个用户的其他审核规则。  
  
> [!IMPORTANT]
>  一个规则表示一个或多个基础访问控制项 (ACE)，这些条目拆分或组合根据需要修改用户的审核安全规则时。 因此，存在的规则可能无法再在特定窗体时添加，并在这种情况下<xref:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific%2A>方法不能删除它。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.MutexAccessRule" />。 由此规则指定的用户确定在添加此规则之前要移除的规则。</param>
        <summary>不论 <see cref="T:System.Security.AccessControl.AccessControlType" /> 如何，移除与指定的规则具有相同用户的所有访问控制规则，然后添加指定的规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有与指定的规则匹配的用户的访问规则`rule`添加。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Security.AccessControl.MutexSecurity.ResetAccessRule%2A>方法会替换为匹配指定的规则匹配的用户的所有规则。  
  
 此示例将创建<xref:System.Security.AccessControl.MutexSecurity>对象，并添加允许和拒绝为当前用户的各种权限的规则。 该示例然后创建新的规则，允许当前的用户完全控制，并使用<xref:System.Security.AccessControl.MutexSecurity.ResetAccessRule%2A>方法将这两个现有规则替换为新的规则。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.Mutex>对象。 附加安全对象的示例可在<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.MutexAccessRule" />。 由此规则的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 确定在添加此规则之前要移除的规则。</param>
        <summary>移除与指定的规则具有相同用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝）的所有控制规则，然后添加指定的规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的规则具有<xref:System.Security.AccessControl.AccessControlType.Allow>，此方法的效果是删除所有<xref:System.Security.AccessControl.AccessControlType.Allow>为指定的用户，它们替换为指定的规则的规则。 如果指定的规则具有<xref:System.Security.AccessControl.AccessControlType.Deny>，则所有<xref:System.Security.AccessControl.AccessControlType.Deny>规则指定的用户将替换为指定的规则。  
  
 如果没有规则的用户和<xref:System.Security.AccessControl.AccessControlType>匹配指定的规则`rule`添加。  
  
   
  
## Examples  
 下面的代码示例演示如何<xref:System.Security.AccessControl.MutexSecurity.SetAccessRule%2A>方法移除匹配这两个用户的所有规则和<xref:System.Security.AccessControl.AccessControlType>的`rule`，将它们替换为`rule`。  
  
 此示例将创建<xref:System.Security.AccessControl.MutexSecurity>对象，并添加允许和拒绝为当前用户的各种权限的规则。 该示例然后创建新的规则，允许当前的用户完全控制，并使用<xref:System.Security.AccessControl.MutexSecurity.SetAccessRule%2A>替换现有的方法允许使用新规则的规则。 拒绝访问的规则不受影响。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.Mutex>对象。 附加安全对象的示例可在<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.MutexAuditRule" />。 由此规则指定的用户确定在添加此规则之前要移除的规则。</param>
        <summary>不论 <see cref="T:System.Security.AccessControl.AuditFlags" /> 的值如何，移除与指定的规则具有相同用户的所有审核规则，然后添加指定的规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有与指定的规则匹配的用户的审核规则`rule`添加。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>