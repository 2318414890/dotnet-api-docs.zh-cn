<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fdf66ef2b7d0263ff0d55b59d333dd71cd0ba275" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49150109" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一组允许或拒绝用户或组进行访问的权限。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule>类是一组.NET Framework 提供了用于管理 Windows 上的注册表项的访问控制安全性的类之一。 有关这些类和它们与基础 Windows 访问控制结构的关系的概述，请参阅<xref:System.Security.AccessControl.RegistrySecurity>。  
  
> [!NOTE]
>  Windows 访问控制安全性只能应用到注册表项。 它不能应用于单个键/值对存储在的密钥。  
  
 若要获取当前应用于注册表项的规则的列表，请使用<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.RegistrySecurity>对象，以及如何将其<xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>方法来获取一系列<xref:System.Security.AccessControl.RegistryAccessRule>对象。  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> 对象不会映射一对一的基础的自由控制访问列表 (DACL) 中的访问控制项。 在注册表项获得的所有访问规则集，集合将包含的最小数量的当前表示的访问控制项所需要的规则。  
  
> [!NOTE]
>  基础的访问控制项更改，在应用和删除规则。 如果可能，合并中规则的信息保持最少数量的访问控制项。 因此，当读取规则的当前列表，它可能不完全一样已添加的所有规则的列表。  
  
 使用<xref:System.Security.AccessControl.RegistryAccessRule>对象来指定要允许或拒绝对用户或组访问权限。 一个<xref:System.Security.AccessControl.RegistryAccessRule>对象始终表示允许访问还是拒绝访问，但永远不会同时。  
  
 若要将规则应用于注册表项，请使用<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.RegistrySecurity>对象。 修改<xref:System.Security.AccessControl.RegistrySecurity>对象使用其方法来添加规则，以及如何将<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法重新附加的安全对象。  
  
> [!IMPORTANT]
>  对所做的更改<xref:System.Security.AccessControl.RegistrySecurity>对象并不会影响注册表项的访问级别，直到你调用<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法以将修改过的安全对象分配到注册表项。  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> 对象是不可变。 使用的方法修改注册表项安全性<xref:System.Security.AccessControl.RegistrySecurity>类来添加或删除规则; 执行此操作时，修改基础的访问控制项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用继承和传播访问规则。 此示例将创建<xref:System.Security.AccessControl.RegistrySecurity>对象，然后创建并添加了具有两个规则<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>标志。 第一条规则有任何传播标志，而第二个<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>和<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>。  
  
 该程序显示中的规则<xref:System.Security.AccessControl.RegistrySecurity>对象，并使用该对象创建一个子项。 该程序创建子项和孙级子项，，然后显示每个子项的安全性。 最后，程序会删除测试密钥。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">此规则应用到的用户或组。 必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指示是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数指定默认传播和继承。 即<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType>和<xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">应用此规则的用户或组的名称。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指示是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数指定默认传播和继承。 即<xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType>和<xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>。  
  
 此构造函数相当于创建<xref:System.Security.Principal.NTAccount>对象，通过传递`identity`到<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType>构造函数，并传递新建<xref:System.Security.Principal.NTAccount>对象传递给<xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29>构造函数。  
  
   
  
## Examples  
 下面的代码示例创建注册表访问规则，并将它们添加到<xref:System.Security.AccessControl.RegistrySecurity>合并对象，其中显示如何允许和拒绝权限的规则都保持独立，而兼容的相同规则类型。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="registryRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="identity" /> 是一个长度为零的字符串。  
  
或 
 <paramref name="identity" /> 的长度超过 512 个字符。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">此规则应用到的用户或组。 必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
        <param name="inheritanceFlags"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 标志的按位组合，指定如何从其他对象继承访问权限。</param>
        <param name="propagationFlags"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 标志的按位组合，指定如何将访问权限传播到其他对象。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限、传播标志以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有注册表项都是容器，因此对注册表项有意义的唯一继承标志是<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>标志。 如果未指定此标志，则忽略传播标志，并仅即时项会受到影响。 如果存在此标志，则规则会传播下表中所示。 表假定子项 S 具有子项 CS 和孙级子项 GS。 也就是说，三级子项的路径是 S\CS\GS。  
  
|传播标志|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>， <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 三级子项的模式控制所包含的三级子项的所有子项。  
  
 例如，如果<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>对于指定标志`inheritanceFlags`并<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>传播标志为指定`propagationFlags`，此规则不适用于直接子项，但不适用于所有直接子子项和所有子项它们包含。  
  
> [!NOTE]
>  虽然可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>标记为可`inheritanceFlags`，没有在此过程中点。 用于访问控制的目的，在一个子项的名称/值对不是单独的对象。 名称/值对的访问权限会受该子项的权限。 此外，由于所有子项的容器 （即，它们可以包含其他子项），它们不受<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志。 最后，指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志不必要地复杂化维护的规则，因为它会影响否则为兼容规则组合起来。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。  
  
或 
 <paramref name="inheritanceFlags" /> 指定了一个无效值。  
  
或 
 <paramref name="propagationFlags" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="registryRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">应用此规则的用户或组的名称。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</param>
        <param name="inheritanceFlags"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 标志的按位组合，指定如何从其他对象继承访问权限。</param>
        <param name="propagationFlags"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 标志的按位组合，指定如何将访问权限传播到其他对象。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限、传播标志以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有注册表项都是容器，因此对注册表项有意义的唯一继承标志是<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>标志。 如果未指定此标志，则忽略传播标志，并仅即时项会受到影响。 如果存在此标志，则规则会传播下表中所示。 表假定子项 S 具有子项 CS 和孙级子项 GS。 也就是说，三级子项的路径是 S\CS\GS。  
  
|传播标志|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>， <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 三级子项的模式控制所包含的三级子项的所有子项。  
  
 例如，如果<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>对于指定标志`inheritanceFlags`并<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>传播标志为指定`propagationFlags`，此规则不适用于直接子项，但不适用于所有直接子子项和所有子项它们包含。  
  
> [!NOTE]
>  虽然可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>标记为可`inheritanceFlags`，没有在此过程中点。 用于访问控制的目的，在一个子项的名称/值对不是单独的对象。 名称/值对的访问权限会受该子项的权限。 此外，由于所有子项的容器 （即，它们可以包含其他子项），它们不受<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志。 最后，指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志不必要地复杂化维护的规则，因为它会影响否则为兼容规则组合起来。  
  
 此构造函数相当于创建<xref:System.Security.Principal.NTAccount>对象，通过传递`identity`到<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType>构造函数，并传递新建<xref:System.Security.Principal.NTAccount>对象传递给<xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29>构造函数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用继承和传播访问规则。 此示例将创建<xref:System.Security.AccessControl.RegistrySecurity>对象，然后创建并添加了具有两个规则<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>标志。 第一条规则有任何传播标志，而第二个<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>和<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>。  
  
 该程序显示中的规则<xref:System.Security.AccessControl.RegistrySecurity>对象，然后使用<xref:System.Security.AccessControl.RegistrySecurity>对象来创建一个子项。 该程序创建子项和孙级子项，，然后显示每个子项的规则。 最后，程序会删除测试密钥。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。  
  
或 
 <paramref name="inheritanceFlags" /> 指定了一个无效值。  
  
或 
 <paramref name="propagationFlags" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="identity" /> 是一个长度为零的字符串。  
  
或 
 <paramref name="identity" /> 的长度超过 512 个字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取访问规则允许或拒绝的权限。</summary>
        <value><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示访问规则允许或拒绝的权限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> 对象是不可变。 可以创建新的访问规则表示不同的用户、 不同的权限，或者其他<xref:System.Security.AccessControl.AccessControlType>，但不能修改现有的访问规则。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>