<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68e20d57a73a7a237932bce0695c5b3f87974ecb" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49145598" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type EventWaitHandleAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一组允许或拒绝用户或组进行访问的权限。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>类是一组.NET Framework 提供了用于管理 Windows 访问控制安全性的命名的系统事件的类之一。 有关这些类和它们与基础 Windows 访问控制结构的关系的概述，请参阅<xref:System.Security.AccessControl.EventWaitHandleSecurity>。  
  
> [!NOTE]
>  Windows 访问控制安全性是仅对已命名的系统事件有意义。 如果<xref:System.Threading.EventWaitHandle>对象表示的本地事件、 访问控制不起作用。  
  
 若要获取当前应用于命名的事件的规则的列表，请使用<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象，以及如何将其<xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>方法来获取一系列<xref:System.Security.AccessControl.EventWaitHandleAccessRule>对象。  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象不会映射一对一的基础的自由访问控制列表 (DACL) 中的访问控制项。 在事件中获得的所有访问规则集，集合将包含的最小数量的当前表示的访问控制项所需要的规则。  
  
> [!NOTE]
>  基础的访问控制项更改，在应用和删除规则。 如果可能，合并中规则的信息保持最少数量的访问控制项。 因此，当您回到当前的规则列表，它可能不完全一样已添加的所有规则的列表。  
  
 使用<xref:System.Security.AccessControl.EventWaitHandleAccessRule>对象来指定要允许或拒绝对用户或组的访问权限。 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>对象始终表示允许访问还是拒绝访问，但永远不会同时。  
  
 若要将规则应用于已命名的系统事件，请使用<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象。 修改<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象使用其方法来添加规则，以及如何将<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>方法重新附加的安全对象。  
  
> [!IMPORTANT]
>  对所做的更改<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象不会影响在您调用之前指定的事件的访问级别<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>方法以将修改过的安全对象分配给指定的事件。  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象是不可变。 使用的方法修改事件的安全性<xref:System.Security.AccessControl.EventWaitHandleSecurity>类来添加或删除规则; 执行此操作时，修改基础的访问控制项。  
  
> [!NOTE]
>  Windows 98 或 Windows Millennium Edition 不支持同步对象的安全性。  
  
   
  
## Examples  
 下面的代码示例演示如何创建和使用<xref:System.Security.AccessControl.EventWaitHandleAccessRule>对象。 此示例将创建<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象，添加规则，允许和拒绝具有各种权限的当前用户，并显示最终的规则对。 然后可对当前用户的新权限，并显示结果，显示新权限将与现有合并<xref:System.Security.AccessControl.AccessControlType.Allow>规则。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.EventWaitHandle>对象。 附加安全对象的示例可在<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">此规则应用到的用户或组。 必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="eventRights"><see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要等待<xref:System.Threading.EventWaitHandle>(通过调用<xref:System.Threading.WaitHandle.WaitOne%2A>，<xref:System.Threading.WaitHandle.WaitAny%2A>或<xref:System.Threading.WaitHandle.WaitAll%2A>方法)，用户必须具有<xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType>访问。 若要使事件终止通过调用<xref:System.Threading.EventWaitHandle.Set%2A>方法，或重置为未终止的状态通过调用<xref:System.Threading.EventWaitHandle.Reset%2A>方法，用户必须具有<xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType>访问。 若要发出信号<xref:System.Threading.EventWaitHandle>对象，然后在其上等待通过调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，用户必须拥有<xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize>和<xref:System.Security.AccessControl.EventWaitHandleRights.Modify>访问。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : string * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">应用此规则的用户或组的名称。</param>
        <param name="eventRights"><see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要等待<xref:System.Threading.EventWaitHandle>(通过调用<xref:System.Threading.WaitHandle.WaitOne%2A>，<xref:System.Threading.WaitHandle.WaitAny%2A>或<xref:System.Threading.WaitHandle.WaitAll%2A>方法)，用户必须具有<xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType>访问。 若要使事件终止通过调用<xref:System.Threading.EventWaitHandle.Set%2A>方法，或重置为未终止的状态通过调用<xref:System.Threading.EventWaitHandle.Reset%2A>方法，用户必须具有<xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType>访问。 若要发出信号<xref:System.Threading.EventWaitHandle>对象，然后在其上等待通过调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，用户必须拥有<xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize>和<xref:System.Security.AccessControl.EventWaitHandleRights.Modify>访问。  
  
 此构造函数相当于创建<xref:System.Security.Principal.NTAccount>对象，通过传递`identity`到<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType>构造函数，并传递新建<xref:System.Security.Principal.NTAccount>对象传递给<xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29>构造函数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数创建<xref:System.Security.AccessControl.EventWaitHandleAccessRule>对象。 此示例将创建<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象，添加规则，允许和拒绝具有各种权限的当前用户，并显示最终的规则对。 然后可对当前用户的新权限，并显示结果，显示新权限将与现有合并<xref:System.Security.AccessControl.AccessControlType.Allow>规则。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.EventWaitHandle>对象。 附加安全对象的示例可在<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> 指定了一个无效值。  
  
或 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 为 <see langword="null" />。  
  
或 
 <paramref name="identity" /> 是一个长度为零的字符串。  
  
或 
 <paramref name="identity" /> 的长度超过 512 个字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberSignature Language="F#" Value="member this.EventWaitHandleRights : System.Security.AccessControl.EventWaitHandleRights" Usage="System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取访问规则允许或拒绝的权限。</summary>
        <value><see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 值的按位组合，它指示访问规则允许或拒绝的权限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象是不可变。 可以创建新的访问规则表示不同的用户、 不同的权限，或者其他<xref:System.Security.AccessControl.AccessControlType>，但不能修改现有的访问规则。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A>属性中包含的规则集中显示权限<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象。 此示例将创建<xref:System.Security.AccessControl.EventWaitHandleSecurity>对象，添加规则，允许和拒绝具有各种权限的当前用户，并显示最终的规则对。 然后可对当前用户的新权限，并显示结果，显示新权限将与现有合并<xref:System.Security.AccessControl.AccessControlType.Allow>规则。  
  
> [!NOTE]
>  此示例不会附加到的安全对象<xref:System.Threading.EventWaitHandle>对象。 附加安全对象的示例可在<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>