<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36555643" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4ab13-101">提供用于访问多个树节点（DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 InexExpression）的参数的内部接口。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</span>
      </span>
      <span data-ttu-id="4ab13-102">不应使用此 API。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-102">You should not use this API.</span>
      </span>
      <span data-ttu-id="4ab13-103">它只会由于 DLL 重构而公开并仅用于内部性能优化。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span>
      </span>
      <span data-ttu-id="4ab13-104">这能够实现两次优化，从而减少了表达式树的大小。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-104">This enables two optimizations which reduce the size of expression trees.</span>
      </span>
      <span data-ttu-id="4ab13-105">第一次优化可以使树节点保留在 IList &lt;T&gt; 上而不是 ReadOnlyCollection 上。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4ab13-106">IList &lt;T&gt; 可节省为每个节点分配 ReadOnlyCollection 的成本。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span>
      </span>
      <span data-ttu-id="4ab13-107">第二次优化能够创建专用的子类，可保留特定数量的自变量（例如，Block2、Block3、Block4）。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span>
      </span>
      <span data-ttu-id="4ab13-108">因此，这些节点避免了分配用于存储其元素的 ReadOnlyCollection 和数组，从而为每个节点节省了 32 个字节。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span>
      </span>
      <span data-ttu-id="4ab13-109">表达式树节点继续公开 ReadOnlyCollections 的原始 LINQ 属性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span>
      </span>
      <span data-ttu-id="4ab13-110">这些节点通过重复使用用于存储数组或元素（通常存储在数组中）的字段来执行此操作。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span>
      </span>
      <span data-ttu-id="4ab13-111">对于数组用例，集合将类型化为 IList &lt;T&gt;，而不是 ReadOnlyCollection &lt;T&gt;。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span>
      </span>
      <span data-ttu-id="4ab13-112">当节点在最初构造时它是一个数组。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-112">When the node is initially constructed it is an array.</span>
      </span>
      <span data-ttu-id="4ab13-113">当编译器访问成员时它会使用此接口。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-113">When the compiler accesses the members it uses this interface.</span>
      </span>
      <span data-ttu-id="4ab13-114">访问数组元素可以将数组升级到 ReadOnlyCollection。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4ab13-115">对于对象用例，我们会存储类型化为对象的字段中的第一个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-115">For the object case we store the first argument in a field typed to object.</span>
      </span>
      <span data-ttu-id="4ab13-116">当最初构造该节点时，该字段将持有该表达式。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-116">When the node is initially constructed, the field holds the Expression.</span>
      </span>
      <span data-ttu-id="4ab13-117">编译器通过此接口访问参数，第一个参数的访问器使用 Expression.ReturnObject 返回用于处理表达式或 ReadOnlyCollection 用例的对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span>
      </span>
      <span data-ttu-id="4ab13-118">当用户访问 ReadOnlyCollection 时，将更新对象字段以直接保留 ReadOnlyCollection。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4ab13-119">表达式始终返回相同的 ReadOnlyCollection，这一点很重要。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4ab13-120">否则，将中断重写树查看器。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-120">Otherwise, the re-writer tree walker will break.</span>
      </span>
      <span data-ttu-id="4ab13-121">从 LINQ v1 返回不同的 ReadOnlyCollections 形成相同的表达式节点，这是一个重大突破。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span>
      </span>
      <span data-ttu-id="4ab13-122">当前用户可以依赖对象标识来区分该节点是否已更改。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-122">Currently users can rely on object identity to tell if the node has changed.</span>
      </span>
      <span data-ttu-id="4ab13-123">在重载字段中存储 ReadOnlyCollection 既可减少内存使用量，又可保持公共 API 兼容性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ab13-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ab13-124">返回表达式树节点的参数数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-124">Returns the number of arguments to the expression tree node.</span>
          </span>
          <span data-ttu-id="4ab13-125">不应使用此类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-125">You should not use this type.</span>
          </span>
          <span data-ttu-id="4ab13-126">仅在程序集重构时公开，并且仅用于内部性能优化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ab13-127">作为 <see cref="T:System.Int32" /> 的表达式树节点的参数数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4ab13-128">自变量的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-128">The index of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ab13-129">索引时返回自变量，当索引超出界限时引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-129">Returns the argument at index, throwing if index is out of bounds.</span>
          </span>
          <span data-ttu-id="4ab13-130">不应使用此类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-130">You should not use this type.</span>
          </span>
          <span data-ttu-id="4ab13-131">由于程序集重构，只能为公共的；并且在内部用于性能优化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ab13-132">索引处作为 <see cref="T:System.Linq.Expressions.Expression" /> 的自变量，索引超出界限时引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ab13-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>