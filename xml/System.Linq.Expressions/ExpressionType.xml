<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExpressionType.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac597b00cdbc05b371d9b513979ff3d9cc101c14345.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97b00cdbc05b371d9b513979ff3d9cc101c14345</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.ExpressionType">
          <source>Describes the node types for the nodes of an expression tree.</source>
          <target state="translated">介绍表达式树节点的节点类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ExpressionType">
          <source>For more information about each enumeration value of this type, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>.</source>
          <target state="translated">此类型的每个枚举值的详细信息，请参阅<bpt id="p1">[</bpt>动态语言运行时概述<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Add">
          <source>An addition operation, such as <bpt id="p1">&lt;c&gt;</bpt>a + b<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">加法运算，如 <bpt id="p1">&lt;c&gt;</bpt>a + b<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，不进行溢出检查。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AddAssign">
          <source>An addition compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">加法复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，不进行溢出检查。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
          <source>An addition compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>, with overflow checking, for numeric operands.</source>
          <target state="translated">加法复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a += b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，并进行溢出检查。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AddChecked">
          <source>An addition operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a + b)<ept id="p1">&lt;/c&gt;</ept>, with overflow checking, for numeric operands.</source>
          <target state="translated">加法运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a + b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，进行溢出检查。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.And">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> in C# and <bpt id="p2">&lt;c&gt;</bpt>(a And b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">按位或逻辑 <ph id="ph1">&lt;see langword="AND" /&gt;</ph> 运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> 和 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a And b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AndAlso">
          <source>A conditional <ph id="ph1">&lt;see langword="AND" /&gt;</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">条件 <ph id="ph1">&lt;see langword="AND" /&gt;</ph> 运算，它仅在第一个操作数的计算结果为 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 时才计算第二个操作数。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AndAlso">
          <source>It corresponds to <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;amp;</ph><ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> in C# and <bpt id="p2">&lt;c&gt;</bpt>(a AndAlso b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">它对应于 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;amp;</ph><ph id="ph2">&amp;amp;</ph> b)<ept id="p1">&lt;/c&gt;</ept> 和 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a AndAlso b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.AndAssign">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="AND" /&gt;</ph> compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph>= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">按位或逻辑 <ph id="ph1">&lt;see langword="AND" /&gt;</ph> 复合赋值运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph2">&amp;amp;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
          <source>An indexing operation in a one-dimensional array, such as <bpt id="p1">&lt;c&gt;</bpt>array[index]<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>array(index)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">一维数组中的索引运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>array[index]<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>array(index)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ArrayLength">
          <source>An operation that obtains the length of a one-dimensional array, such as <bpt id="p1">&lt;c&gt;</bpt>array.Length<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">获取一维数组长长度的运算，如 <bpt id="p1">&lt;c&gt;</bpt>array.Length<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Assign">
          <source>An assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a = b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a = b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Block">
          <source>A block of expressions.</source>
          <target state="translated">表达式块。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Call">
          <source>A method call, such as in the <bpt id="p1">&lt;c&gt;</bpt>obj.sampleMethod()<ept id="p1">&lt;/c&gt;</ept> expression.</source>
          <target state="translated">方法调用，如在 <bpt id="p1">&lt;c&gt;</bpt>obj.sampleMethod()<ept id="p1">&lt;/c&gt;</ept> 表达式中。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Coalesce">
          <source>A node that represents a null coalescing operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a ?? b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>If(a, b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">表示 null 合并运算的节点，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a ?? b)<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>If(a, b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Conditional">
          <source>A conditional operation, such as <bpt id="p1">&lt;c&gt;</bpt>a <ph id="ph1">&amp;gt;</ph> b ? a : b<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>If(a <ph id="ph2">&amp;gt;</ph> b, a, b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">条件运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>a <ph id="ph1">&amp;gt;</ph> b ? a : b<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>If(a <ph id="ph2">&amp;gt;</ph> b, a, b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Constant">
          <source>A constant value.</source>
          <target state="translated">一个常量值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Convert">
          <source>A cast or conversion operation, such as <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> in C#or <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">强制转换或转换操作，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Convert">
          <source>For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</source>
          <target state="translated">对于数值转换，如果转换后的值对于目标类型来说太大，这不会引发异常。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
          <source>A cast or conversion operation, such as <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> in C#or <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">强制转换或转换操作，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(SampleType)obj<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>CType(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
          <source>For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</source>
          <target state="translated">对于数值转换，如果转换后的值与目标类型大小不符，则引发异常。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.DebugInfo">
          <source>Debugging information.</source>
          <target state="translated">调试信息。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Decrement">
          <source>A unary decrement operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a - 1)<ept id="p1">&lt;/c&gt;</ept> in C# and Visual Basic.</source>
          <target state="translated">一元递减运算，如 C# 和 Visual Basic 中的 <bpt id="p1">&lt;c&gt;</bpt>(a - 1)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Decrement">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">不应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Default">
          <source>A default value.</source>
          <target state="translated">默认值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Divide">
          <source>A division operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a / b)<ept id="p1">&lt;/c&gt;</ept>, for numeric operands.</source>
          <target state="translated">除法运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a / b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.DivideAssign">
          <source>An division compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a /= b)<ept id="p1">&lt;/c&gt;</ept>, for numeric operands.</source>
          <target state="translated">除法复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a /= b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Dynamic">
          <source>A dynamic operation.</source>
          <target state="translated">动态操作。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Equal">
          <source>A node that represents an equality comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a == b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a = b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">表示相等比较的节点，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a == b)<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a = b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a Xor b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">按位或逻辑 <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> 运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> 和 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a Xor b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">按位或逻辑 <ph id="ph1">&lt;see langword="XOR" /&gt;</ph> 复合赋值运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Extension">
          <source>An extension expression.</source>
          <target state="translated">扩展表达式。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Goto">
          <source>A "go to" expression, such as <bpt id="p1">&lt;c&gt;</bpt>goto Label<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>GoTo Label<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">“转到”表达式，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>goto Label<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>GoTo Label<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.GreaterThan">
          <source>A "greater than" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">“大于”比较，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
          <source>A "greater than or equal to" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">“大于或等于”比较，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Increment">
          <source>A unary increment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a + 1)<ept id="p1">&lt;/c&gt;</ept> in C# and Visual Basic.</source>
          <target state="translated">一元递增运算，如 C# 和 Visual Basic 中的 <bpt id="p1">&lt;c&gt;</bpt>(a + 1)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Increment">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">不应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Index">
          <source>An index operation or an operation that accesses a property that takes arguments.</source>
          <target state="translated">索引运算或访问使用参数的属性的运算。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Invoke">
          <source>An operation that invokes a delegate or lambda expression, such as <bpt id="p1">&lt;c&gt;</bpt>sampleDelegate.Invoke()<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">调用委托或 lambda 表达式的运算，如 <bpt id="p1">&lt;c&gt;</bpt>sampleDelegate.Invoke()<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.IsFalse">
          <source>A <ph id="ph1">&lt;see langword="false" /&gt;</ph> condition value.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> 条件值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.IsTrue">
          <source>A <ph id="ph1">&lt;see langword="true" /&gt;</ph> condition value.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 条件值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Label">
          <source>A label.</source>
          <target state="translated">标签。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Lambda">
          <source>A lambda expression, such as <bpt id="p1">&lt;c&gt;</bpt>a =<ph id="ph1">&amp;gt;</ph> a + a<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Function(a) a + a<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">lambda 表达式，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>a =<ph id="ph1">&amp;gt;</ph> a + a<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>Function(a) a + a<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LeftShift">
          <source>A bitwise left-shift operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">按位左移运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
          <source>A bitwise left-shift compound assignment, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">按位左移复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LessThan">
          <source>A "less than" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">“小于”比较，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
          <source>A "less than or equal to" comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">“小于或等于”比较，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ListInit">
          <source>An operation that creates a new <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> object and initializes it from a list of elements, such as <bpt id="p1">&lt;c&gt;</bpt>new List<ph id="ph2">&amp;lt;</ph>SampleType<ph id="ph3">&amp;gt;</ph>(){ a, b, c }<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Dim sampleList = { a, b, c }<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">创建新的 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> 对象并从元素列表中初始化该对象的运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>new List<ph id="ph2">&amp;lt;</ph>SampleType<ph id="ph3">&amp;gt;</ph>(){ a, b, c }<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>Dim sampleList = { a, b, c }<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Loop">
          <source>A loop, such as <bpt id="p1">&lt;c&gt;</bpt>for<ept id="p1">&lt;/c&gt;</ept> or <bpt id="p2">&lt;c&gt;</bpt>while<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">一个循环，例如 <bpt id="p1">&lt;c&gt;</bpt>for<ept id="p1">&lt;/c&gt;</ept> 或 <bpt id="p2">&lt;c&gt;</bpt>while<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MemberAccess">
          <source>An operation that reads from a field or property, such as <bpt id="p1">&lt;c&gt;</bpt>obj.SampleProperty<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">从字段或属性进行读取的运算，如 <bpt id="p1">&lt;c&gt;</bpt>obj.SampleProperty<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MemberInit">
          <source>An operation that creates a new object and initializes one or more of its members, such as <bpt id="p1">&lt;c&gt;</bpt>new Point { X = 1, Y = 2 }<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>New Point With {.X = 1, .Y = 2}<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">创建新的对象并初始化其一个或多个成员的运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>new Point { X = 1, Y = 2 }<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>New Point With {.X = 1, .Y = 2}<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Modulo">
          <source>An arithmetic remainder operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a % b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a Mod b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">算术余数运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a % b)<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a Mod b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
          <source>An arithmetic remainder compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a %= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">算术余数复合赋值运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a %= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Multiply">
          <source>A multiplication operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">乘法运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，不进行溢出检查。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
          <source>A multiplication compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">乘法复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，不进行溢出检查。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
          <source>A multiplication compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">乘法复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a *= b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，进行溢出检查。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
          <source>An multiplication operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">乘法运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a * b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，进行溢出检查。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Negate">
          <source>An arithmetic negation operation, such as <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">算术求反运算，如 <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Negate">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">不应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NegateChecked">
          <source>An arithmetic negation operation, such as <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking.</source>
          <target state="translated">算术求反运算，如 <bpt id="p1">&lt;c&gt;</bpt>(-a)<ept id="p1">&lt;/c&gt;</ept>，进行溢出检查。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NegateChecked">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">不应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.New">
          <source>An operation that calls a constructor to create a new object, such as <bpt id="p1">&lt;c&gt;</bpt>new SampleType()<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">调用构造函数创建新对象的运算，如 <bpt id="p1">&lt;c&gt;</bpt>new SampleType()<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
          <source>An operation that creates a new array, in which the bounds for each dimension are specified, such as <bpt id="p1">&lt;c&gt;</bpt>new SampleType[dim1, dim2]<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>New SampleType(dim1, dim2)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">创建新数组（其中每个维度的界限均已指定）的运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>new SampleType[dim1, dim2]<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>New SampleType(dim1, dim2)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
          <source>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as <bpt id="p1">&lt;c&gt;</bpt>new SampleType[]{a, b, c}<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>New SampleType(){a, b, c}<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">创建新的一维数组并从元素列表中初始化该数组的运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>new SampleType[]{a, b, c}<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>New SampleType(){a, b, c}<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>A bitwise complement or logical negation operation.</source>
          <target state="translated">按位求补运算或逻辑求反运算。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>In C#, it is equivalent to <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept> for integral types and to <bpt id="p2">&lt;c&gt;</bpt>(!a)<ept id="p2">&lt;/c&gt;</ept> for Boolean values.</source>
          <target state="translated">在 C# 中，它与整型的 <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept> 和布尔值的 <bpt id="p2">&lt;c&gt;</bpt>(!a)<ept id="p2">&lt;/c&gt;</ept> 等效。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>In Visual Basic, it is equivalent to <bpt id="p1">&lt;c&gt;</bpt>(Not a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">在 Visual Basic 中，它与 <bpt id="p1">&lt;c&gt;</bpt>(Not a)<ept id="p1">&lt;/c&gt;</ept> 等效。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Not">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should not be modified in place.</source>
          <target state="translated">不应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.NotEqual">
          <source>An inequality comparison, such as <bpt id="p1">&lt;c&gt;</bpt>(a != b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">不相等比较，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a != b)<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.OnesComplement">
          <source>A ones complement operation, such as <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">二进制反码运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(~a)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Or">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a | b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a Or b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">按位或逻辑 <ph id="ph1">&lt;see langword="OR" /&gt;</ph> 运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a | b)<ept id="p1">&lt;/c&gt;</ept> 和 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a Or b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.OrAssign">
          <source>A bitwise or logical <ph id="ph1">&lt;see langword="OR" /&gt;</ph> compound assignment, such as <bpt id="p1">&lt;c&gt;</bpt>(a |= b)<ept id="p1">&lt;/c&gt;</ept> in C#.</source>
          <target state="translated">按位或逻辑 <ph id="ph1">&lt;see langword="OR" /&gt;</ph> 复合赋值运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a |= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.OrElse">
          <source>A short-circuiting conditional <ph id="ph1">&lt;see langword="OR" /&gt;</ph> operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a || b)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>(a OrElse b)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">短路条件 <ph id="ph1">&lt;see langword="OR" /&gt;</ph> 运算，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(a || b)<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>(a OrElse b)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Parameter">
          <source>A reference to a parameter or variable that is defined in the context of the expression.</source>
          <target state="translated">对在表达式上下文中定义的参数或变量的引用。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Parameter">
          <source>For more information, see <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
          <source>A unary postfix decrement, such as <bpt id="p1">&lt;c&gt;</bpt>(a--)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">一元后缀递减，如 <bpt id="p1">&lt;c&gt;</bpt>(a--)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
          <source>A unary postfix increment, such as <bpt id="p1">&lt;c&gt;</bpt>(a++)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">一元后缀递增，如 <bpt id="p1">&lt;c&gt;</bpt>(a++)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Power">
          <source>A mathematical operation that raises a number to a power, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">对某个数字进行幂运算的数学运算，如 Visual Basic 中的 <bpt id="p1">&lt;c&gt;</bpt>(a ^ b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PowerAssign">
          <source>A compound assignment operation that raises a number to a power, such as <bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">对某个数字进行幂运算的复合赋值运算，如 Visual Basic 中的<bpt id="p1">&lt;c&gt;</bpt>(a ^= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
          <source>A unary prefix decrement, such as <bpt id="p1">&lt;c&gt;</bpt>(--a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">一元前缀递减，如 <bpt id="p1">&lt;c&gt;</bpt>(--a)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
          <source>A unary prefix increment, such as <bpt id="p1">&lt;c&gt;</bpt>(++a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">一元前缀递增，如 <bpt id="p1">&lt;c&gt;</bpt>(++a)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
          <source>The object <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> should be modified in place.</source>
          <target state="translated">应就地修改 <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> 对象。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Quote">
          <source>An expression that has a constant value of type <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">具有类型为 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> 的常量值的表达式。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Quote">
          <source>A <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Quote" /&gt;</ph> node can contain references to parameters that are defined in the context of the expression it represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Quote" /&gt;</ph> 节点可包含对参数的引用，这些参数在该节点表示的表达式的上下文中定义。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RightShift">
          <source>A bitwise right-shift operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">按位右移运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph> b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
          <source>A bitwise right-shift compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">按位右移复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a <ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph>= b)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
          <source>A list of run-time variables.</source>
          <target state="translated">运行时变量的列表。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
          <source>For more information, see <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Subtract">
          <source>A subtraction operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a - b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">减法运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a - b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，不进行溢出检查。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
          <source>A subtraction compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>, without overflow checking, for numeric operands.</source>
          <target state="translated">减法复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，不进行溢出检查。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
          <source>A subtraction compound assignment operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">减法复合赋值运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a -= b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，进行溢出检查。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
          <source>An arithmetic subtraction operation, such as <bpt id="p1">&lt;c&gt;</bpt>(a - b)<ept id="p1">&lt;/c&gt;</ept>, that has overflow checking, for numeric operands.</source>
          <target state="translated">算术减法运算，如 <bpt id="p1">&lt;c&gt;</bpt>(a - b)<ept id="p1">&lt;/c&gt;</ept>，针对数值操作数，进行溢出检查。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Switch">
          <source>A switch operation, such as <ph id="ph1">&lt;see langword="switch" /&gt;</ph> in C# or <ph id="ph2">&lt;see langword="Select Case" /&gt;</ph> in Visual Basic.</source>
          <target state="translated">多分支选择运算，如 C# 中的 <ph id="ph1">&lt;see langword="switch" /&gt;</ph> 或 Visual Basic 中的 <ph id="ph2">&lt;see langword="Select Case" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Throw">
          <source>An operation that throws an exception, such as <bpt id="p1">&lt;c&gt;</bpt>throw new Exception()<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">引发异常的运算，如<bpt id="p1">&lt;c&gt;</bpt>引发新异常()<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Try">
          <source>A <ph id="ph1">&lt;see langword="try-catch" /&gt;</ph> expression.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="try-catch" /&gt;</ph> 表达式。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.TypeAs">
          <source>An explicit reference or boxing conversion in which <ph id="ph1">&lt;see langword="null" /&gt;</ph> is supplied if the conversion fails, such as <bpt id="p1">&lt;c&gt;</bpt>(obj as SampleType)<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>TryCast(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">显式引用或装箱转换，其中如果转换失败则提供 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(obj as SampleType)<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>TryCast(obj, SampleType)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.TypeEqual">
          <source>An exact type test.</source>
          <target state="translated">确切类型测试。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.TypeIs">
          <source>A type test, such as <bpt id="p1">&lt;c&gt;</bpt>obj is SampleType<ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>TypeOf obj is SampleType<ept id="p2">&lt;/c&gt;</ept> in Visual Basic.</source>
          <target state="translated">类型测试，如 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>obj is SampleType<ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>TypeOf obj is SampleType<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
          <source>A unary plus operation, such as <bpt id="p1">&lt;c&gt;</bpt>(+a)<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">一元加法运算，如 <bpt id="p1">&lt;c&gt;</bpt>(+a)<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
          <source>The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</source>
          <target state="translated">预定义的一元加法运算的结果是操作数的值，但用户定义的实现可以产生特殊结果。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Linq.Expressions.ExpressionType.Unbox">
          <source>An unbox value type operation, such as <ph id="ph1">&lt;see langword="unbox" /&gt;</ph> and <ph id="ph2">&lt;see langword="unbox.any" /&gt;</ph> instructions in MSIL.</source>
          <target state="translated">取消装箱值类型运算，如 MSIL 中的 <ph id="ph1">&lt;see langword="unbox" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="unbox.any" /&gt;</ph> 指令。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>