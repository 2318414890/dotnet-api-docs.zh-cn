<Type Name="ProjectProperty" FullName="Microsoft.Build.Evaluation.ProjectProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3611c6692fe92cd495f351810892f64c91382709" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ProjectProperty : IEquatable&lt;Microsoft.Build.Evaluation.ProjectProperty&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProjectProperty extends System.Object implements class System.IEquatable`1&lt;class Microsoft.Build.Evaluation.ProjectProperty&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Evaluation.ProjectProperty" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ProjectProperty&#xA;Implements IEquatable(Of ProjectProperty)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProjectProperty abstract : IEquatable&lt;Microsoft::Build::Evaluation::ProjectProperty ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.Build.Evaluation.ProjectProperty&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Name}={EvaluatedValue} [{UnevaluatedValue}]")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1d160-101">表示计算的设计时属性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1d160-101">Represents an evaluated design-time property.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EvaluatedValue">
      <MemberSignature Language="C#" Value="public string EvaluatedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EvaluatedValue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.EvaluatedValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EvaluatedValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EvaluatedValue { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Evaluation.IProperty.EvaluatedValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-102">获取计算的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-102">Gets the evaluated property value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-103">返回计算的属性值，该值决不会为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-103">Returns the evaluated property value, which is never null.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d160-104">不能直接; 设置可以设置未计算的值。</span><span class="sxs-lookup"><span data-stu-id="1d160-104">Cannot be set directly; only the unevaluated value can be set.</span></span> <span data-ttu-id="1d160-105">计算所得的值包含任何字符转义序列。</span><span class="sxs-lookup"><span data-stu-id="1d160-105">The evaluated value contains no character escape sequences.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnvironmentProperty">
      <MemberSignature Language="C#" Value="public abstract bool IsEnvironmentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnvironmentProperty" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.IsEnvironmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEnvironmentProperty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEnvironmentProperty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-106">确定该属性是否源自于环境变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-106">Determines whether the property originated from the environment variables.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-107">如果该属性源自于一个环境变量，则返回 true；否则返回 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-107">True if the property originated from an environment variable; false otherwise.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGlobalProperty">
      <MemberSignature Language="C#" Value="public abstract bool IsGlobalProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGlobalProperty" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.IsGlobalProperty" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsGlobalProperty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsGlobalProperty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-108">确定该属性是否为全局属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-108">Determines whether the property is a global property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-109">如果该属性为全局属性，则返回 true；否则返回 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-109">True if the property is a global property; false otherwise.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImported">
      <MemberSignature Language="C#" Value="public abstract bool IsImported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImported" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.IsImported" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsImported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsImported { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-110">确定该属性是否源自于一个导入的文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-110">Determines whether the property originates from an imported file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-111">如果该属性源自于一个导入的文件，而不是源自于一个环境变量、全局属性或保留属性，则返回 true；</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-111">Returns true if the property originates from an imported file and not from an environment variable, a global property, or a reserved property.</span>
          </span>
          <span data-ttu-id="1d160-112">否则，返回 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-112">Returns false otherwise.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReservedProperty">
      <MemberSignature Language="C#" Value="public abstract bool IsReservedProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReservedProperty" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.IsReservedProperty" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsReservedProperty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsReservedProperty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-113">确定该属性是否为保留属性（例如“MSBuildProjectFile”）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-113">Determines whether the property is a reserved property, for example 'MSBuildProjectFile'.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-114">如果该属性为保留属性，则返回 true；否则返回 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-114">Returns true if the property is a reserved property; false otherwise.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Evaluation.IProperty.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-115">获取属性的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-115">Gets the name of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-116">返回属性名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-116">Returns the name of the property.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predecessor">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Build.Evaluation.ProjectProperty Predecessor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Build.Evaluation.ProjectProperty Predecessor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.Predecessor" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Predecessor As ProjectProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::Build::Evaluation::ProjectProperty ^ Predecessor { Microsoft::Build::Evaluation::ProjectProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Evaluation.ProjectProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-117">获取在计算期间由此属性重写的最后一个属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-117">Gets the last property that was overridden by this property during evaluation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-118">返回其值在计算期间由此属性重写的最后一个属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-118">Returns the last property whose value was overridden by this property during evaluation.</span>
          </span>
          <span data-ttu-id="1d160-119">如果未重写此属性，则返回 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-119">Returns null if the property has not been overridden.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d160-120">位于逻辑项目文件中中的和其条件的计算结果为 true，则此方法搜索的具有相同名称的所有属性。</span><span class="sxs-lookup"><span data-stu-id="1d160-120">This method searches for all properties with the same name that lie above in the logical project file, and whose conditions evaluate to true.</span></span>  
  
 <span data-ttu-id="1d160-121">如果项目不已重新计算最后一个修改后，此值可能不正确。</span><span class="sxs-lookup"><span data-stu-id="1d160-121">If the project has not been reevaluated since the last modification, this value may be incorrect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Project">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Evaluation.Project Project { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Build.Evaluation.Project Project" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.Project" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Project As Project" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Build::Evaluation::Project ^ Project { Microsoft::Build::Evaluation::Project ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Evaluation.Project</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-122">获取包含此属性的项目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-122">Gets the project that contains this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-123">返回包含此属性的项目，返回值决不会为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-123">Returns the project that contains this property, which is never null.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;Microsoft.Build.Evaluation.ProjectProperty&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;ProjectProperty&gt;.Equals (Microsoft.Build.Evaluation.ProjectProperty other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;Microsoft.Build.Evaluation.ProjectProperty&gt;.Equals(class Microsoft.Build.Evaluation.ProjectProperty other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Evaluation.ProjectProperty.System#IEquatable&lt;Microsoft#Build#Evaluation#ProjectProperty&gt;#Equals(Microsoft.Build.Evaluation.ProjectProperty)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As ProjectProperty) As Boolean Implements IEquatable(Of ProjectProperty).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;Microsoft.Build.Evaluation.ProjectProperty&gt;.Equals(Microsoft::Build::Evaluation::ProjectProperty ^ other) = IEquatable&lt;Microsoft::Build::Evaluation::ProjectProperty ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.Build.Evaluation.ProjectProperty" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="1d160-124">要进行比较的项目属性</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-124">The project property to be compared to</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d160-125">比较此项目属性与给定项目属性是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-125">Compares this project property with the given project property for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d160-126">如果项目属性相等，则返回 true；否则返回 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-126">Returns true if the project properties are equal; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnevaluatedValue">
      <MemberSignature Language="C#" Value="public abstract string UnevaluatedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UnevaluatedValue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.UnevaluatedValue" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property UnevaluatedValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UnevaluatedValue { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-127">获取或设置未计算的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-127">Gets or sets the unevaluated property value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-128">返回未计算的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-128">Returns the unevaluated property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d160-129">Setter 方法更新而言未计算的值和计算的值，但不重新计算之后才影响项目中的其他任何内容。</span><span class="sxs-lookup"><span data-stu-id="1d160-129">The setter method updates both the unevaluated value and the evaluated value, but does not affect anything else in the project until reevaluation.</span></span>  
  
 <span data-ttu-id="1d160-130">包含项目标记为已修改。</span><span class="sxs-lookup"><span data-stu-id="1d160-130">The containing project is marked as modified.</span></span> <span data-ttu-id="1d160-131">未计算的值被视为以包含转义字符序列根据需要。</span><span class="sxs-lookup"><span data-stu-id="1d160-131">Unevaluated values are assumed to contain escaped character sequences as needed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Build.Construction.ProjectPropertyElement Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Build.Construction.ProjectPropertyElement Xml" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Evaluation.ProjectProperty.Xml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Xml As ProjectPropertyElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::Build::Construction::ProjectPropertyElement ^ Xml { Microsoft::Build::Construction::ProjectPropertyElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Construction.ProjectPropertyElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d160-132">获取相关的属性元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-132">Gets the associated property element.</span>
          </span>
          <span data-ttu-id="1d160-133">支持 XML 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-133">Backing XML property.</span>
          </span>
          <span data-ttu-id="1d160-134">只有在此属性为全局属性、环境属性或内置属性时，才为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-134">Null only if this is a global, environment, or built-in property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d160-135">返回相关的属性元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-135">Returns the associated property element.</span>
          </span>
          <span data-ttu-id="1d160-136">如果此属性是一个全局属性或保留属性，或者源自于一个环境变量，则返回 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d160-136">Return null if this is a global or reserved property, or originates from an environment variable.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>