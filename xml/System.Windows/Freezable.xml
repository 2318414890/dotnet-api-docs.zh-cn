<Type Name="Freezable" FullName="System.Windows.Freezable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c125d54ad21fa44be59bb03c1e4d67d257a48fed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680381" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Freezable : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Freezable extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Freezable" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Freezable&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class Freezable abstract : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义具有可修改状态和只读（冻结）状态的对象。 派生自 <see cref="T:System.Windows.Freezable" /> 的类提供详细的更改通知，可以是不可变的，并且可以进行自我克隆。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Freezable>类提供特殊功能，可帮助提高应用程序性能，使用非常昂贵修改或复制的对象时。 示例<xref:System.Windows.Freezable>对象包括以下：  
  
-   <xref:System.Windows.Media.Brush>  
  
-   <xref:System.Windows.Media.Pen>  
  
-   <xref:System.Windows.Media.Geometry>  
  
-   <xref:System.Windows.Media.Transform>  
  
-   <xref:System.Windows.Media.Animation.AnimationTimeline>  
  
## <a name="deriving-from-freezable"></a>派生自可冻结  
 派生自的类<xref:System.Windows.Freezable>可以获得以下功能：  
  
-   特殊的状态： 只读 （冻结） 状态和可写状态。  
  
-   线程安全： 冻结<xref:System.Windows.Freezable>可以跨线程共享对象。  
  
-   详细的更改通知： 与其他不同<xref:System.Windows.DependencyObject>对象，<xref:System.Windows.Freezable>对子属性值更改时，对象提供更改通知。  
  
-   轻松克隆： 可冻结类已实现生成深层克隆的几种方法。  
  
 有关如何使用和创建你自己<xref:System.Windows.Freezable>对象，请参阅[可冻结对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。  
  
 ]]></format>
    </remarks>
    <threadsafe>任何公共<see langword="static" />此类型的成员都是线程安全。 但不保证所有实例成员都是线程安全的。  
  
 当<see cref="P:System.Windows.Freezable.IsFrozen" />属性是<see langword="false" />、<see cref="T:System.Windows.Freezable" />可以仅从在其创建的线程访问对象。 尝试访问从另一个线程引发<see cref="T:System.InvalidOperationException" />。 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" />和<see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />方法封送处理到正确的线程提供支持。  
  
 当其<see cref="P:System.Windows.Freezable.IsFrozen" />属性是<see langword="true" />，<see cref="T:System.Windows.Freezable" />对象是自由线程。  有关详细信息，请参阅 [Freezable 对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Freezable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Freezable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个抽象类的受保护的可访问性构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFreeze">
      <MemberSignature Language="C#" Value="public bool CanFreeze { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFreeze" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Freezable.CanFreeze" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFreeze As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFreeze { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否可将对象变为不可修改。</summary>
        <value>
          如果当前对象可以变为不可修改，或者已经不可修改，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>此方法实现使用<see cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />方法替换<paramref name="isChecking" />设置为<see langword="true" />以确定是否<see cref="T:System.Windows.Freezable" />可变为不可修改。 若要修改此属性在派生类中的行为的方式，重写<see cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Freezable.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Changed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在修改 <see cref="T:System.Windows.Freezable" /> 或其包含的对象时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你尝试添加或移除事件处理程序时的当前对象不是可修改 (时<xref:System.Windows.Freezable.IsFrozen%2A>属性是`true`)，将引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Freezable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Freezable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Freezable ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Windows.Freezable" /> 的一个可修改复本，从而制作该对象的值的深层副本。 在复制此对象的依赖属性时，此方法会复制表达式（可能不再解析），但不复制动画或其当前值。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true." />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Freezable.Clone%2A>和<xref:System.Windows.Freezable.CloneCurrentValue%2A>方法生成的可修改克隆冻结<xref:System.Windows.Freezable>对象 (方法还可用于克隆<xref:System.Windows.Freezable>未冻结的对象)。 复本实际上是当前对象的深层副本。  
  
 下表总结了之间的差异<xref:System.Windows.Freezable.Clone%2A>和<xref:System.Windows.Freezable.CloneCurrentValue%2A>方法。  
  
|操作|克隆方法行为|CloneCurrentValue 方法行为|  
|------------|---------------------------|---------------------------------------|  
|复制一个依赖项属性，包含的表达式|该表达式被复制，但可能不再解析。 有关详细信息，请参阅 [Freezable 对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。|复制该表达式的当前值，但不是表达式本身。|  
|复制一个动画的依赖项属性|该属性的基 （非经过动画处理的） 该值被复制。 不复制动画。|该属性的当前动画的该值被复制。 不复制动画。|  
  
 请注意，将不会复制取消设置的属性。 如果未设置的属性具有默认值为冻结<xref:System.Windows.Freezable>，属性的值保持在否则为可修改复本冻结。  
  
## <a name="move-a-freezable-between-threads"></a>线程之间移动可冻结  
 此方法可用于移动<xref:System.Windows.Freezable>线程之间。 首先，请<xref:System.Windows.Freezable>不可修改通过调用其<xref:System.Windows.Freezable.Freeze%2A>方法。 现在，可以访问另一个线程<xref:System.Windows.Freezable>和使本地<xref:System.Windows.Freezable.Clone%2A>，它可以访问。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此方法使用<see cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />生成克隆。 若要修改此方法在派生类中的行为，请重写<see cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />方法。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CloneCurrentValue" />
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected virtual void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要克隆的对象。</param>
        <summary>使用基（未经过动画处理的）属性值使该实例成为指定 <see cref="T:System.Windows.Freezable" /> 的克隆（深层复制）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法<xref:System.Windows.Freezable.Clone%2A>方法应不直接从代码中，除非调用时调用时重写此方法的基实现。 若要创建当前对象的可修改副本，请调用<xref:System.Windows.Freezable.Clone%2A>而不是直接调用此方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果派生自<see cref="T:System.Windows.Freezable" />，你可能需要重写此方法。 重写的原因包括：  
  
-   在派生的类具有未通过依赖项属性公开的数据。  
  
-   在派生的类必须执行额外的初始化工作不能通过只需重写来完成<see cref="M:System.Windows.Freezable.CreateInstanceCore" />。 例如，这一点适用如果派生的类实现<see cref="T:System.ComponentModel.ISupportInitialize" />。  
  
 依赖项属性中存储所有数据且，不需要执行额外的初始化工作的类无需重写<see cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />。  
  
 这一点至关重要所有实现都调用此方法的基实现。 实现才应执行的默认实现不执行工作。 默认实现制作所有可写入的本地设置的属性，包括内部的表达式的深层的副本。  
  
 如果对象具有数据绑定依赖项属性，表达式将被复制，但可能不再解析。 有关克隆绑定到数据的对象的详细信息，请参阅[可冻结对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。 如果该对象具有动画的依赖属性，这些属性的基 （非经过动画处理的） 值将复制。 不复制动画。  
  
 请注意，取消设置的属性将不会复制，也不是只读的属性。 如果此属性具有默认值为冻结<see cref="T:System.Windows.Freezable" />，属性的值保持在否则为可修改复本冻结。  
  
 以下列表总结了此方法的预期的行为：  
  
-   生成的副本包含的所有副本<see cref="T:System.Windows.Freezable" />子对象。  
  
-   取消设置和只读属性不会复制。  
  
-   复制表达式。  
  
-   这些子对象的任何已冻结上创建。  
  
-   未冻结本身的副本。  
  
-   不复制动画。  
  
-   属性基值是复制、 没有最新的动画的值。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Freezable CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Freezable CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Freezable ^ CloneCurrentValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="T:System.Windows.Freezable" /> 的当前值创建其可修改复本（深层副本）。</summary>
        <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true." />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Freezable.Clone%2A>和<xref:System.Windows.Freezable.CloneCurrentValue%2A>方法生成的可修改克隆冻结<xref:System.Windows.Freezable>对象 (方法还可用于克隆<xref:System.Windows.Freezable>未冻结的对象)。 复本实际上是当前对象的深层副本。  
  
 下表总结了之间的差异<xref:System.Windows.Freezable.Clone%2A>和<xref:System.Windows.Freezable.CloneCurrentValue%2A>方法。  
  
|操作|克隆方法行为|CloneCurrentValue 方法行为|  
|------------|---------------------------|---------------------------------------|  
|复制一个依赖项属性，包含的表达式|该表达式被复制，但可能不再解析。 有关详细信息，请参阅 [Freezable 对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。|复制该表达式的当前值，但不是表达式本身。|  
|复制一个动画的依赖项属性|该属性的基 （非经过动画处理的） 该值被复制。 不复制动画。|该属性的当前动画的该值被复制。 不复制动画。|  
  
 请注意，将不会复制取消设置的属性。 如果未设置的属性具有默认值为冻结<xref:System.Windows.Freezable>，属性的值保持在否则为可修改复本冻结。  
  
## <a name="move-a-freezable-between-threads"></a>线程之间移动可冻结  
 此方法可用于移动<xref:System.Windows.Freezable>线程之间。 首先，请<xref:System.Windows.Freezable>不可通过使用修改其<xref:System.Windows.Freezable.Freeze%2A>方法。 现在，可以访问另一个线程<xref:System.Windows.Freezable>并使它可以访问的本地克隆。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此方法使用<see cref="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)" />方法来生成克隆;<see cref="T:System.Windows.Freezable" />实施者，他们重写<see cref="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)" />必须确保副本未冻结上创建。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected virtual void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Freezable" />。</param>
        <summary>使用当前属性值使该实例成为指定 <see cref="T:System.Windows.Freezable" /> 的可修改克隆（深层复制）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法<xref:System.Windows.Freezable.CloneCurrentValue%2A>方法应不直接从代码中，除非调用时调用时重写此方法的基实现。 若要创建当前对象的可修改副本，请调用<xref:System.Windows.Freezable.CloneCurrentValue%2A>而不是直接调用此方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果派生自<see cref="T:System.Windows.Freezable" />，你可能需要重写此方法。 重写的原因包括：  
  
-   在派生的类具有未通过依赖项属性公开的数据。  
  
-   在派生的类必须执行额外的初始化工作不能通过只需重写来完成<see cref="M:System.Windows.Freezable.CreateInstanceCore" />。 例如，这一点适用如果派生的类实现<see cref="T:System.ComponentModel.ISupportInitialize" />。  
  
 依赖项属性中存储所有数据且，不需要执行额外的初始化工作的类无需重写<see cref="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)" />。  
  
 这一点至关重要所有实现都调用此方法的基实现。 实现才应执行的默认实现不执行工作。 默认实现使所有可写入的本地设置属性的深层副本。 如果对象包含与表达式 （例如数据绑定） 的依赖项属性，但不是表达式本身复制该表达式的当前值。  
  
 如果对象具有动画依赖项属性，这些属性的当前的动画的该值被复制，但动画不。  
  
 请注意，取消设置的属性将不会复制，也不是只读的属性。 如果此属性具有默认值为冻结<see cref="T:System.Windows.Freezable" />，属性的值保持在否则为可修改复本冻结。  
  
 以下列表总结了此方法的预期的行为。  
  
-   生成的副本包含的所有副本<see cref="T:System.Windows.Freezable" />子对象。  
  
-   取消设置和只读属性不会复制。  
  
-   如果一个属性进行动画处理，复制其当前值，但动画本身不是。  
  
-   这些子对象的任何已冻结上创建。  
  
-   未冻结本身的副本。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CloneCurrentValue" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected System.Windows.Freezable CreateInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Windows.Freezable CreateInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.CreateInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateInstance () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Freezable ^ CreateInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Freezable" /> 类的新实例。</summary>
        <returns>新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是受保护的方法，并且行为的实际特定于对象的实现依赖于重写实现<xref:System.Windows.Freezable.CreateInstanceCore%2A>方法，此方法在内部调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Freezable.CreateInstanceCore" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected abstract System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中实现时，创建 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。</summary>
        <returns>新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请勿调用此方法，直接 （但调用基实现中）。 内部调用此方法<xref:System.Windows.Freezable.CreateInstance%2A>方法时的新实例<xref:System.Windows.Freezable>创建。  
  
   
  
## Examples  
 下面的示例演示的典型实现<xref:System.Windows.Freezable.CreateInstanceCore%2A>。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>每个<see cref="T:System.Windows.Freezable" />派生的类必须实现此方法。 典型的实现是只需调用默认构造函数并返回结果。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CreateInstance" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Freeze">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使 <see cref="T:System.Windows.Freezable" /> 对象变为不可修改并将其 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />，或测试是否可将 <see cref="T:System.Windows.Freezable" /> 对象变为不可修改。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Freeze">
      <MemberSignature Language="C#" Value="public void Freeze ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Freeze() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.Freeze" />
      <MemberSignature Language="VB.NET" Value="Public Sub Freeze ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Freeze();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使当前对象变为不可修改并将其 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要避免错误的可能性<xref:System.InvalidOperationException>调用此方法时，检查<xref:System.Windows.Freezable.CanFreeze%2A>属性来确定是否<xref:System.Windows.Freezable>可以变为不可修改之前调用此方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">无法使 <see cref="T:System.Windows.Freezable" /> 变为不可修改。</exception>
        <block subset="none" type="overrides">
          <para>此方法使用<see cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />方法来执行<see cref="T:System.Windows.Freezable" />不可修改。 若要修改冻结行为，请重写<see cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />方法。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Freeze">
      <MemberSignature Language="C#" Value="protected internal static bool Freeze (System.Windows.Freezable freezable, bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool Freeze(class System.Windows.Freezable freezable, bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool Freeze(System::Windows::Freezable ^ freezable, bool isChecking);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="freezable" Type="System.Windows.Freezable" />
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="freezable">要检查或要变为不可修改的对象。 如果 <c>isChecking</c> 为 <see langword="true" />，则检查此对象，以确定是否可将其变为不可修改。 如果 <c>isChecking</c> 为 <see langword="false" />，则在可能的情况下将此对象变为不可修改。</param>
        <param name="isChecking">
          若为 <see langword="true" />，则返回是否可冻结对象的指示（不实际冻结对象）；若为 <see langword="false" />，则实际冻结对象。</param>
        <summary>如果 <paramref name="isChecking" /> 参数为 <see langword="true" />，则此方法指示是否可将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改。 如果 <paramref name="isChecking" /> 参数为 <see langword="false" />，则此方法尝试将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改，并指示操作是否成功。</summary>
        <returns>当 <paramref name="isChecking" /> 为 <see langword="true" /> 时，如果可以将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改，则此方法返回 <see langword="true" />；如果无法将其变为不可修改，则返回 <see langword="false" />。 当 <paramref name="isChecking" /> 为 <see langword="false" /> 时，如果指定的 <see cref="T:System.Windows.Freezable" /> 目前已经不可修改，则此方法返回 <see langword="true" />；如果无法将其变为不可修改，则返回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请勿调用此方法，除非派生自<xref:System.Windows.Freezable>和重写<xref:System.Windows.Freezable.FreezeCore%2A>方法。  此方法可能会使用在<xref:System.Windows.Freezable.FreezeCore%2A>方法冻结类数据成员本身是<xref:System.Windows.Freezable>对象。  
  
 它为保险上再次调用此方法<xref:System.Windows.Freezable>已冻结 （不可修改） 的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">如果 <paramref name="isChecking" /> 为 <see langword="false" />，则表明将 <paramref name="freezable" /> 变为不可修改的尝试已失败；对象目前处于未知状态（可能已将其部分冻结）。</exception>
        <block subset="none" type="overrides">
          <para>此方法使用<see cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />方法来执行<see cref="T:System.Windows.Freezable" />不可修改。 若要修改冻结行为，请重写<see cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />方法。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected virtual bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.FreezeCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FreezeCore (isChecking As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool FreezeCore(bool isChecking);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking">
          若为 <see langword="true" />，则返回是否可冻结对象的指示（不实际冻结对象）；若为 <see langword="false" />，则实际冻结对象。</param>
        <summary>使 <see cref="T:System.Windows.Freezable" /> 对象变为不可修改或测试是否可将其变为不可修改。</summary>
        <returns>当 <paramref name="isChecking" /> 为 <see langword="true" /> 时，如果可以将 <see cref="T:System.Windows.Freezable" /> 变为不可修改，则此方法返回 <see langword="true" />；如果无法将其变为不可修改，则返回 <see langword="false" />。 当 <paramref name="isChecking" /> 为 <see langword="false" /> 时，如果指定的 <see cref="T:System.Windows.Freezable" /> 目前已经不可修改，则此方法返回 <see langword="true" />，如果无法将其变为不可修改，则返回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请勿调用此方法，直接 （但调用基实现中）。 内部调用此方法<xref:System.Windows.Freezable.CanFreeze%2A>属性 (与`isChecking`等于`true`) 和<xref:System.Windows.Freezable.Freeze%2A>方法 (与`isChecking`等于`false`)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Windows.Freezable" /> 当类包含不存储使用依赖项属性的数据时，实施者必须重写此方法。  
  
 典型实现应调用基类，然后调用静态<see cref="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)" />方法对所有<see cref="T:System.Windows.Freezable" />类型的类包含，返回的属性<see langword="true" />仅当所有属性都被冻结 （或可能已被冻结，在指定的情况下<see langword="true" />为<paramref name="isChecking" />)。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.Freeze" />
        <altmember cref="P:System.Windows.Freezable.CanFreeze" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozen">
      <MemberSignature Language="C#" Value="public System.Windows.Freezable GetAsFrozen ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Freezable GetAsFrozen() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.GetAsFrozen" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsFrozen () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Freezable ^ GetAsFrozen();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用基（未经过动画处理的）属性值创建 <see cref="T:System.Windows.Freezable" /> 的冻结副本。 由于副本已冻结，因此将通过引用复制任何冻结的子对象。</summary>
        <returns>
          <see cref="T:System.Windows.Freezable" /> 的冻结副本。 副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应检查<xref:System.Windows.Freezable.CanFreeze%2A>属性在调用此方法以验证之前<xref:System.Windows.Freezable>可以冻结。 使用此方法是类似于创建副本都使用<xref:System.Windows.Freezable.Clone%2A>，然后冻结其与<xref:System.Windows.Freezable.Freeze%2A>方法。  
  
 <xref:System.Windows.Freezable.GetAsFrozen%2A>和<xref:System.Windows.Freezable.GetCurrentValueAsFrozen%2A>方法可以提高复制性能，因为它们不会克隆<xref:System.Windows.Freezable>子对象的已冻结; 它们仅将其复制通过引用。  
  
 下表总结了之间的差异<xref:System.Windows.Freezable.GetAsFrozen%2A>和<xref:System.Windows.Freezable.GetCurrentValueAsFrozen%2A>方法。  
  
|操作|GetAsFrozen 方法行为|GetCurrentValueAsFrozen 方法行为|  
|------------|---------------------------------|---------------------------------------------|  
|复制一个依赖项属性，包含的表达式|该方法将引发<xref:System.InvalidOperationException>因为它不能<xref:System.Windows.Freezable.Freeze%2A>属性。|复制该表达式的当前值，但不是表达式本身。|  
|复制一个动画的依赖项属性|该属性的基 （非经过动画处理的） 该值被复制。 不复制动画。|该属性的当前动画的该值被复制。 不复制动画。|  
  
 请注意，取消设置的属性将不会复制，也不是只读的属性。  
  
 若要创建一份<xref:System.Windows.Freezable>，它是未被冻结，使用<xref:System.Windows.Freezable.Clone%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">无法冻结此 <see cref="T:System.Windows.Freezable" />，因为它包含表达式或经过动画处理的属性。</exception>
        <block subset="none" type="overrides">
          <para>此方法使用的虚拟<see cref="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)" />方法来生成克隆。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected virtual void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要复制的实例。</param>
        <summary>使用基（未经过动画处理的）属性值使该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法<xref:System.Windows.Freezable.GetAsFrozen%2A>方法应不直接从代码中，除非调用时调用时重写此方法的基实现。 若要创建当前对象的冻结的副本，请调用<xref:System.Windows.Freezable.GetAsFrozen%2A>而不是直接调用此方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果派生自<see cref="T:System.Windows.Freezable" />可能需要重写此方法。 重写的原因包括：  
  
-   在派生的类具有未通过依赖项属性公开的数据。  
  
-   在派生的类必须执行额外的初始化工作不能通过只需重写来完成<see cref="M:System.Windows.Freezable.CreateInstanceCore" />。 例如，这一点适用如果派生的类实现<see cref="T:System.ComponentModel.ISupportInitialize" />。  
  
 依赖项属性中存储所有数据且，不需要执行额外的初始化工作的类无需重写<see cref="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)" />。  
  
 这一点至关重要所有实现都调用此方法的基实现。 实现才应执行的默认实现不执行工作。 默认实现制作任何可冻结的对象和的所有其他可写的浅表副本、 本地设置属性，它包含的深层的副本。 如果对象具有数据绑定依赖项属性，表达式将被复制，但可能不再解析;有关克隆绑定到数据的对象的详细信息，请参阅[可冻结对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。 如果对象具有动画的依赖属性，将复制这些属性的基 （非经过动画处理的） 值。 不复制动画。  
  
 请注意，取消设置的属性将不会复制，也不是只读的属性。  
  
 如果你重写此方法，必须调用基实现。  
  
 不需要<see cref="M:System.Windows.Freezable.Freeze" />值的复制。  结果冻结<see cref="M:System.Windows.Freezable.GetAsFrozen" />之前返回。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.GetAsFrozen" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozen">
      <MemberSignature Language="C#" Value="public System.Windows.Freezable GetCurrentValueAsFrozen ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Freezable GetCurrentValueAsFrozen() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.GetCurrentValueAsFrozen" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentValueAsFrozen () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Freezable ^ GetCurrentValueAsFrozen();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用当前属性值创建 <see cref="T:System.Windows.Freezable" /> 的冻结副本。 由于副本已冻结，因此将通过引用复制任何冻结的子对象。</summary>
        <returns>
          <see cref="T:System.Windows.Freezable" /> 的冻结副本。 副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法是类似于创建副本都使用<xref:System.Windows.Freezable.CloneCurrentValue%2A>，然后冻结其与<xref:System.Windows.Freezable.Freeze%2A>方法。  
  
 <xref:System.Windows.Freezable.GetAsFrozen%2A>和<xref:System.Windows.Freezable.GetCurrentValueAsFrozen%2A>方法可以提高复制性能，因为它们不会克隆<xref:System.Windows.Freezable>子对象的已冻结; 它们仅将其复制通过引用。  
  
 下表总结了之间的差异<xref:System.Windows.Freezable.GetAsFrozen%2A>和<xref:System.Windows.Freezable.GetCurrentValueAsFrozen%2A>方法。  
  
|操作|GetAsFrozen 方法行为|GetCurrentValueAsFrozen 方法行为|  
|------------|---------------------------------|---------------------------------------------|  
|复制一个依赖项属性，包含的表达式|该方法将引发<xref:System.InvalidOperationException>因为它不能<xref:System.Windows.Freezable.Freeze%2A>属性。|复制该表达式的当前值，但不是表达式本身。|  
|复制一个动画的依赖项属性|该属性的基 （非经过动画处理的） 该值被复制。 不复制动画。|该属性的当前动画的该值被复制。 不复制动画。|  
  
 请注意，取消设置的属性将不会复制，也不是只读的属性。  
  
 若要创建一份<xref:System.Windows.Freezable>，它是未被冻结，使用<xref:System.Windows.Freezable.CloneCurrentValue%2A>方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此方法使用的虚拟<see cref="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />方法来生成克隆。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
        <altmember cref="M:System.Windows.Freezable.CloneCurrentValue" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected virtual void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">要复制和冻结的 <see cref="T:System.Windows.Freezable" />。</param>
        <summary>使当前实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。 如果对象具有动画依赖属性，则复制其当前的动画值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法<xref:System.Windows.Freezable.GetCurrentValueAsFrozen%2A>方法应不直接从代码中，除非调用时调用时重写此方法的基实现。 若要创建当前对象的冻结的副本，请调用<xref:System.Windows.Freezable.GetCurrentValueAsFrozen%2A>而不是直接调用此方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果派生自<see cref="T:System.Windows.Freezable" />，你可能需要重写此方法。 重写的原因包括：  
  
-   在派生的类具有未通过依赖项属性公开的数据。  
  
-   在派生的类必须执行额外的初始化工作不能通过只需重写来完成<see cref="M:System.Windows.Freezable.CreateInstanceCore" />。 例如，这一点适用如果派生的类实现<see cref="T:System.ComponentModel.ISupportInitialize" />。  
  
 依赖项属性中存储所有数据且，不需要执行额外的初始化工作的类无需重写<see cref="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />。  
  
 这一点至关重要所有实现都调用此方法的基实现。 实现才应执行的默认实现不执行工作。 默认实现将创建一个新<see cref="T:System.Windows.Freezable" />使用<see cref="M:System.Windows.Freezable.CreateInstance" />方法和使的深层副本，可冻结对象的浅表副本的所有其他可写本地设置和它包含的属性。 如果该对象具有数据绑定依赖项属性，将复制的数据绑定，但是可能不再解析;有关克隆绑定到数据的对象的详细信息，请参阅[可冻结对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。 如果对象具有动画依赖项属性，这些属性的当前的动画的该值被复制，但动画不。  
  
 中的只读依赖属性<see cref="T:System.Windows.Freezable" />不复制此默认实现。  
  
 如果你重写此方法，必须调用基实现。  
  
 不需要<see cref="M:System.Windows.Freezable.Freeze" />值的复制。  结果冻结<see cref="M:System.Windows.Freezable.GetAsFrozen" />之前返回。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="IsFrozen">
      <MemberSignature Language="C#" Value="public bool IsFrozen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFrozen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Freezable.IsFrozen" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFrozen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFrozen { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示对象当前是否可修改。</summary>
        <value>
          如果对象已被冻结且不可修改，则为 <see langword="true" />；如果对象可修改，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尝试修改的对象时其<xref:System.Windows.Freezable.IsFrozen%2A>属性是`true`引发<xref:System.InvalidOperationException>。  
  
 此属性是只读从对象模型透视。 有关文档的某些<xref:System.Windows.Freezable>行为可能涉及"设置<xref:System.Windows.Freezable.IsFrozen%2A>到`true`"或类似的语言时讨论的其他方法的行为<xref:System.Windows.Freezable>，但此行为中发生的情况内部类的实例，当该实例的方法操作的抽象类中存在的私有变量。 若要设置此属性的值，应调用<xref:System.Windows.Freezable.Freeze%2A>。 这实际上是一次性的操作，以更改<xref:System.Windows.Freezable.IsFrozen%2A>属性从默认的初始`false`状态`true`状态。 没有可用的方法来设置的值返回到`false`。 相反，你无法更改与原始制作的深层副本 (请参阅<xref:System.Windows.Freezable.Clone%2A>方法)。 这是设计使然，任何派生的类的行为方式时应用于事例其中<xref:System.Windows.Freezable>模式会很有用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.OnChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChanged();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>修改当前 <see cref="T:System.Windows.Freezable" /> 对象时调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法时<xref:System.Windows.Freezable.Changed>事件发生。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>当你实现派生自的类<see cref="T:System.Windows.Freezable" />，你可以重写此方法以执行任务。</para>
        </block>
        <altmember cref="E:System.Windows.Freezable.Changed" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OnFreezablePropertyChanged">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确保为刚刚修改的类型 <see cref="T:System.Windows.DependencyObject" /> 的数据成员建立适当的上下文指针。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnFreezablePropertyChanged">
      <MemberSignature Language="C#" Value="protected void OnFreezablePropertyChanged (System.Windows.DependencyObject oldValue, System.Windows.DependencyObject newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFreezablePropertyChanged(class System.Windows.DependencyObject oldValue, class System.Windows.DependencyObject newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFreezablePropertyChanged (oldValue As DependencyObject, newValue As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFreezablePropertyChanged(System::Windows::DependencyObject ^ oldValue, System::Windows::DependencyObject ^ newValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.Windows.DependencyObject" />
        <Parameter Name="newValue" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldValue">数据成员以前的值。</param>
        <param name="newValue">数据成员当前的值。</param>
        <summary>确保为刚刚设置的 <see cref="T:System.Windows.DependencyObjectType" /> 数据成员建立适当的上下文指针。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法应由调用<xref:System.Windows.Freezable>继承者每次<xref:System.Windows.DependencyObject>不作为存储的数据成员<xref:System.Windows.DependencyProperty>设置。  
  
 此方法不需要为调用<xref:System.Windows.DependencyObject>使用存储的数据成员<xref:System.Windows.DependencyProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFreezablePropertyChanged">
      <MemberSignature Language="C#" Value="protected void OnFreezablePropertyChanged (System.Windows.DependencyObject oldValue, System.Windows.DependencyObject newValue, System.Windows.DependencyProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFreezablePropertyChanged(class System.Windows.DependencyObject oldValue, class System.Windows.DependencyObject newValue, class System.Windows.DependencyProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFreezablePropertyChanged (oldValue As DependencyObject, newValue As DependencyObject, property As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFreezablePropertyChanged(System::Windows::DependencyObject ^ oldValue, System::Windows::DependencyObject ^ newValue, System::Windows::DependencyProperty ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.Windows.DependencyObject" />
        <Parameter Name="newValue" Type="System.Windows.DependencyObject" />
        <Parameter Name="property" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="oldValue">数据成员以前的值。</param>
        <param name="newValue">数据成员当前的值。</param>
        <param name="property">已更改的属性。</param>
        <summary>此成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，但不能在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含有关已更改的属性的信息及其旧值和新值的事件数据。</param>
        <summary>重写 <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> 的 <see cref="T:System.Windows.DependencyObject" /> 实现，以同时调用任何响应类型 <see cref="T:System.Windows.Freezable" /> 不断变化的依赖属性的 <see cref="E:System.Windows.Freezable.Changed" /> 处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件数据包含以下信息仅<xref:System.Windows.Freezable>本身。 必须通过获取子属性的任何信息<xref:System.Windows.Freezable.Changed>处理程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadPreamble">
      <MemberSignature Language="C#" Value="protected void ReadPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ReadPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.ReadPreamble" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ReadPreamble ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ReadPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确保正在从有效的线程访问 <see cref="T:System.Windows.Freezable" />。 <see cref="T:System.Windows.Freezable" /> 的继承者必须在任何 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 一开始读取不属于依赖项对象的数据成员时调用此方法。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>派生自的类<see cref="T:System.Windows.Freezable" />应调用<see cref="M:System.Windows.Freezable.ReadPreamble" />方法之前尝试访问不是依赖项属性的任意成员。 <see cref="M:System.Windows.Freezable.WritePreamble" />在任何此类成员写入到之前应该调用方法。  
  
 此方法有效地不执行任何操作多个调用<see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.WritePreamble" />
      </Docs>
    </Member>
    <Member MemberName="WritePostscript">
      <MemberSignature Language="C#" Value="protected void WritePostscript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WritePostscript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.WritePostscript" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WritePostscript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WritePostscript();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="E:System.Windows.Freezable.Changed" /> 引发 <see cref="T:System.Windows.Freezable" /> 事件并调用其 <see cref="M:System.Windows.Freezable.OnChanged" /> 方法。 从 <see cref="T:System.Windows.Freezable" /> 派生的类应在修改的类成员不存储为依赖属性的任何 API 的末尾调用此方法。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>派生自的类<see cref="T:System.Windows.Freezable" />应调用此方法在修改类成员不存储为任何 API 的末尾<see cref="T:System.Windows.DependencyProperty" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WritePreamble">
      <MemberSignature Language="C#" Value="protected void WritePreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WritePreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Freezable.WritePreamble" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WritePreamble ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WritePreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>验证 <see cref="T:System.Windows.Freezable" /> 是否未被冻结，并且是否正在从有效的线程上下文中访问它。 <see cref="T:System.Windows.Freezable" /> 的继承项应当在任何 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 一开始写入不属于依赖项属性的数据成员时调用此方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法调用<xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>若要验证的线程上下文可访问，并且如果引发了异常<xref:System.Windows.Freezable>已冻结实例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Freezable" /> 实例已冻结，并且无法写入其成员。</exception>
        <block subset="none" type="overrides">
          <para>派生自的类<see cref="T:System.Windows.Freezable" />应调用<see cref="M:System.Windows.Freezable.WritePreamble" />之前尝试写入不是依赖项属性的任意成员。 如果调用<see cref="M:System.Windows.Freezable.WritePreamble" />中[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]，则可以省略调用<see cref="M:System.Windows.Freezable.ReadPreamble" />。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.ReadPreamble" />
      </Docs>
    </Member>
  </Members>
</Type>