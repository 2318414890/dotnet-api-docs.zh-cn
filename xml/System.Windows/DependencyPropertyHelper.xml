<Type Name="DependencyPropertyHelper" FullName="System.Windows.DependencyPropertyHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c73b6283444b4ebfb43805764cd805e9ed62516a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30675311" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DependencyPropertyHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DependencyPropertyHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyPropertyHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyHelper abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个帮助器方法 (<see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />)，用于报告依赖属性的有效值的属性系统源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统是相当复杂，并依赖于合理化可能来自各种输入，基于建立的值确定优先级的值。 因为这些源可能来自运行时代码，从已编译标记，或甚至从运行时用户设置，它可以是一种有助于你了解依赖项属性值系统中的哪个参与者完全建立的值时调用获取<xref:System.Windows.DependencyObject.GetValue%2A>在运行时该属性。 如果不是你预期值来自不同源，你可能需要调整你的应用程序的某些方面。 值来源可能是一种样式、 主题、 本地值、 动画、 绑定或如通过主题或系统资源的系统设置的基于的运行时值。 有关详细信息，请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。  
  
 报告的属性并且一般情况下，而不是属性的对某个对象的特定实例的另一种机制是属性的属性元数据。 属性元数据是可查找通过调用<xref:System.Windows.DependencyProperty.GetMetadata%2A>并检查返回<xref:System.Windows.PropertyMetadata>（或返回的属性元数据可强制转换成的几个可能的派生类之一）。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetValueSource">
      <MemberSignature Language="C#" Value="public static System.Windows.ValueSource GetValueSource (System.Windows.DependencyObject dependencyObject, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.ValueSource GetValueSource(class System.Windows.DependencyObject dependencyObject, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::ValueSource GetValueSource(System::Windows::DependencyObject ^ dependencyObject, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValueSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">包含要报告其信息的 <c>dependencyProperty</c> 的元素。</param>
        <param name="dependencyProperty">要报告其相关信息的依赖项属性的标识符。</param>
        <summary>返回一种结构，该结构报告特定 <see cref="T:System.Windows.DependencyObject" /> 上指定依赖属性的各种元数据和属性系统特征。</summary>
        <returns>报告特定信息的 <see cref="T:System.Windows.ValueSource" /> 结构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应在某个上下文中调用此方法，从而使中属性值确定的后期参与者都可以作用于属性。 例如，绑定可能不是活动的属性上除非加载元素树中的所有参与者元素和传播异步绑定，并且已连接的绑定源对象。 同样，资源包括所有必要主题词典应可用。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsTemplatedValueDynamic">
      <MemberSignature Language="C#" Value="public static bool IsTemplatedValueDynamic (System.Windows.DependencyObject elementInTemplate, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTemplatedValueDynamic(class System.Windows.DependencyObject elementInTemplate, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTemplatedValueDynamic(System::Windows::DependencyObject ^ elementInTemplate, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementInTemplate" Type="System.Windows.DependencyObject" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="elementInTemplate">一个属于模板实例的元素。</param>
        <param name="dependencyProperty">一个依赖属性。 </param>
        <summary>指示指定元素是否属于某个模板的实例，该实例定义可在运行时根据其他位置的更改而更改的指定属性的值。</summary>
        <returns>
          如果 <paramref name="elementInTemplate" /> 属于某个模板的实例（该实例定义可在运行时根据其他位置的更改而更改的指定属性的值），则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
在运行时基于在其他位置的更改可能会更改的值的示例是设置的值<xref:System.Windows.Data.Binding>，<xref:System.Windows.TemplateBindingExtension>和<xref:System.Windows.DynamicResourceExtension>对象。

此方法提供更多详细信息在情况下其中的值<xref:System.Windows.ValueSource.BaseValueSource?displayProperty=nameWithType>属性是<xref:System.Windows.BaseValueSource.ParentTemplate?displayProperty=nameWithType>。
信息是使用的主要的诊断工具。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>