<Type Name="RoutedEventArgs" FullName="System.Windows.RoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="708a1ffe3e315f5d8bcff28cce08c73843f9f63b" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56346221" /></Metadata><TypeSignature Language="C#" Value="public class RoutedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type RoutedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含与路由事件相关联的状态信息和事件数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同<xref:System.Windows.RoutedEventArgs>可以在单个<xref:System.Windows.RoutedEventArgs.RoutedEvent%2A>。 此类负责打包的事件数据<xref:System.Windows.RoutedEventArgs.RoutedEvent%2A>、 提供额外的事件的状态信息，以及由事件系统用于调用处理程序与路由事件相关联。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />
    <altmember cref="T:System.Windows.EventManager" />
    <altmember cref="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedEventArgs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此无参数构造函数、 新的所有公共属性时<xref:System.Windows.RoutedEventArgs>实例假定有以下默认值：  
  
-   <xref:System.Windows.RoutedEventArgs.RoutedEvent%2A> 默认为`null`。  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 默认值为 `false`  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> 默认为`null`。  
  
-   <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 默认为`null`。  
  
 为空值<xref:System.Windows.RoutedEventArgs.Source%2A>并<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>只意味着<xref:System.Windows.RoutedEventArgs>数据不会尝试指定的源。 对的调用中使用此实例时<xref:System.Windows.UIElement.RaiseEvent%2A>，则<xref:System.Windows.RoutedEventArgs.Source%2A>和<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>基于元素引发该事件并将传递到侦听器通过路由填充值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedEventArgs (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedEventArgs(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberSignature Language="F#" Value="new System.Windows.RoutedEventArgs : System.Windows.RoutedEvent -&gt; System.Windows.RoutedEventArgs" Usage="new System.Windows.RoutedEventArgs routedEvent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><see cref="T:System.Windows.RoutedEventArgs" /> 类的此实例的路由事件标识符。</param>
        <summary>使用提供的路由事件标识符初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在使用此重载的构造函数时，未指定属性的新<xref:System.Windows.RoutedEventArgs>实例假定有以下默认值：  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 默认值为 `false`  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> 默认为`null`。  
  
-   <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 默认为`null`。  
  
 为空值<xref:System.Windows.RoutedEventArgs.Source%2A>并<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>只意味着此<xref:System.Windows.RoutedEventArgs>不会尝试指定的源。 对的调用中使用此实例时<xref:System.Windows.UIElement.RaiseEvent%2A>，则<xref:System.Windows.RoutedEventArgs.Source%2A>和<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>基于元素引发该事件并将传递到侦听器通过路由填充值。  
  
   
  
## Examples  
 下面的示例构造一个新<xref:System.Windows.RoutedEventArgs>以便在调用中使用<xref:System.Windows.UIElement.RaiseEvent%2A>。  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
        <altmember cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedEventArgs (System.Windows.RoutedEvent routedEvent, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedEventArgs(System::Windows::RoutedEvent ^ routedEvent, System::Object ^ source);" />
      <MemberSignature Language="F#" Value="new System.Windows.RoutedEventArgs : System.Windows.RoutedEvent * obj -&gt; System.Windows.RoutedEventArgs" Usage="new System.Windows.RoutedEventArgs (routedEvent, source)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><see cref="T:System.Windows.RoutedEventArgs" /> 类的此实例的路由事件标识符。</param>
        <param name="source">将在处理事件时报告的备用源。 这将预先填充 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 属性。</param>
        <summary>使用提供的路由事件标识符初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的一个新实例，同时提供为事件另外声明一个源的机会。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在使用此重载的构造函数时，未指定属性的新<xref:System.Windows.RoutedEventArgs>实例假定有以下默认值：  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 默认值为 `false`  
  
-   <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 默认为`null`。  
  
 为空值<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>的元素引发该事件并将其通过路由，将基于填充，但将读取`null`之前调用。  
  
 传递时使用此签名<xref:System.Windows.RoutedEventArgs>到虚方法，如<xref:System.Windows.Controls.Primitives.TextBoxBase.OnSelectionChanged%2A>，使用参数来调用<xref:System.Windows.UIElement.RaiseEvent%2A>在内部。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.RoutedEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示针对路由事件（在其经过路由时）的事件处理的当前状态。</summary>
        <value>如果设置，将设置为<see langword="true" />事件将标记为已处理; 否则为如果<see langword="false" />。 如果读取此值，<see langword="true" />指示的类处理程序或沿路由的某个实例处理程序具有已标记为处理此事件。 <see langword="false" />.指示没有这类处理程序将该事件标记为已处理。  
  
默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将标记为处理的事件将限制到侦听器为由事件路由的路由事件的可见性。 该事件仍经过路由的其余部分，但仅处理程序明确添加的其`HandledEventsToo``true`中<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>方法调用将调用以响应。 默认实例侦听器上的处理程序 (如那些表示[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]) 将不会调用。 处理标记为已处理的事件不是一种常见方案。  
  
 如果您是控件作者定义你自己的事件，所做的决策有关事件在类级别的处理会影响控件的用户以及派生控件的所有用户和可能是其他元素所包含的控件或包含您的控件。 有关详细信息，请参阅[将路由事件标记为“已处理”和类处理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
 在极少数情况下非常适合处理其中<xref:System.Windows.RoutedEventArgs.Handled%2A>标记`true`，并通过更改来修改事件参数<xref:System.Windows.RoutedEventArgs.Handled%2A>到`false`。 这可能是必需的输入事件的控件，如密钥处理的某些区域中<xref:System.Windows.UIElement.KeyDown>与<xref:System.Windows.UIElement.TextInput>，低级别和高级别输入的事件会争用处理，以及每个正在尝试使用不同的路由策略。  
  
   
  
## Examples  
 下面的示例实现事件处理程序中用于标记处理的事件。  
  
 [!code-csharp[ClassHandling#OnStarClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#onstarclasshandler)]
 [!code-vb[ClassHandling#OnStarClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#onstarclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected virtual void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="abstract member InvokeEventHandler : Delegate * obj -&gt; unit&#xA;override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="routedEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">要调用的泛型处理程序/委托实现。</param>
        <param name="genericTarget">应在其上调用所提供的处理程序的目标。</param>
        <summary>当在派生类中重写时，提供特定于类型的调用事件处理程序的方式，该方式与基实现相比可提高效率。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现合并了反射来确定正确的处理程序的任何情况下，该处理程序不是按字面意思<xref:System.Windows.RoutedEventHandler>，并且此反射步骤具有一些性能产生负面影响。 调用可以进行更高效通过不依赖于反射。 这是使得此方法可用于选择要将其重写任何路由的事件参数类的方案。 实现不应调用基针对此方法，因为您的实现应负责调用类型安全处理程序。  
  
   
  
## Examples  
 下面是伪代码说明了可用于实现的基本模式。 在这里，`MyRoutedEventHandler`是一个的子类<xref:System.Windows.RoutedEventHandler>。  
  
 [!code-csharp[CorePseudocode#RoutedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#routedeventargs)]
 [!code-vb[CorePseudocode#RoutedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#routedeventargs)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>此方法旨在由派生的事件数据类以提供更有效地调用其委托的重写。 实现应强制转换提供<paramref name="genericHandler" />到特定于类型的委托，，然后调用该处理程序。  
  
默认实现将尝试调用提供处理程序，尝试将其转换为<see cref="T:System.Windows.RoutedEventHandler" />。 如果任一<paramref name="genericHandler" />或<paramref name="genericTarget" />作为提供<see langword="null" />，将引发异常。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSetSource">
      <MemberSignature Language="C#" Value="protected virtual void OnSetSource (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetSource(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.OnSetSource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSetSource (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSetSource(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member OnSetSource : obj -&gt; unit&#xA;override this.OnSetSource : obj -&gt; unit" Usage="routedEventArgs.OnSetSource source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><see cref="P:System.Windows.RoutedEventArgs.Source" /> 所设置为的新值。</param>
        <summary>在派生类中重写时，每当实例的 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 属性的值发生更改，则提供一个通知回调入口点。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>以编程方式更改报告的事件源可能需要更新事件中的特定于类型的数据。 出于此原因，<see cref="M:System.Windows.RoutedEventArgs.OnSetSource(System.Object)" />方法受保护的虚拟，应由的子类中重写<see cref="T:System.Windows.RoutedEventArgs" />。  
  
此方法具有默认实现。</para></block>
        <altmember cref="P:System.Windows.RoutedEventArgs.Source" />
      </Docs>
    </Member>
    <Member MemberName="OriginalSource">
      <MemberSignature Language="C#" Value="public object OriginalSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.OriginalSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalSource : obj" Usage="System.Windows.RoutedEventArgs.OriginalSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在父类进行任何可能的 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 调整之前，获取由纯命中测试确定的原始报告源。</summary>
        <value>在类处理可能对展平复合元素树进行任何 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 调整之前的原始报告源。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之前类事件处理程序或任何实例处理程序调用，并永远不会调整忽略这一点后，将此属性获取其值。 原始的源信息是只读的类处理程序或类实现中，就像它在事件数据中报告。  
  
 常见的情况下可能会进行调整源，其中包含控件的内容模型内的内容元素 (的列表项，例如，内容将报告作为列表项元素<xref:System.Windows.RoutedEventArgs.Source%2A>和列表项中的实际元素将是<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>.  
  
 各种元素和内容模型的源调整各不相同类的。 调整事件源的每个类尝试预测哪个源是最有用报告为大多数输入的方案和类所针对的方案，然后将该源作为<xref:System.Windows.RoutedEventArgs.Source%2A>。 如果此源不是已处理事件的相关，请尝试检查<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>改为以确定它是否报告更适合的不同源。 输入事件的更多详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.Source" />
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RoutedEvent : System.Windows.RoutedEvent with get, set" Usage="System.Windows.RoutedEventArgs.RoutedEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此 <see cref="T:System.Windows.RoutedEventArgs" /> 实例关联的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />。</summary>
        <value>已调用的事件的标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能将此值设置上<xref:System.Windows.RoutedEventArgs>，已经传送 （例如，如果获得通过处理程序自变量）。 尝试执行此操作将生成一个异常。 你仅可以将其设置未尚未使用生成的事件调用的实例上。  
  
 值<xref:System.Windows.RoutedEventArgs.RoutedEvent%2A>不能为`null`在任何时间。  
  
   
  
## Examples  
 下面的示例使用一个初始的构造函数创建新的路由的事件数据，然后设置<xref:System.Windows.RoutedEventArgs.RoutedEvent%2A>属性用作后续操作。 您必须具有<xref:System.Windows.RoutedEventArgs.RoutedEvent%2A>引发路由的事件之前设置。  
  
 [!code-csharp[ColorPicker_v2#RoutedEventArgsRoutedEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ColorPicker_v2/CSharp/ColorPicker.cs#routedeventargsroutedevent)]
 [!code-vb[ColorPicker_v2#RoutedEventArgsRoutedEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ColorPicker_v2/visualbasic/colorpicker.vb#routedeventargsroutedevent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在路由事件时试图更改 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Source { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : obj with get, set" Usage="System.Windows.RoutedEventArgs.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对引发事件的对象的引用。</summary>
        <value>引发事件的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于任何浮升路由事件的实际经过引发，它的元素之外的路由，并为任何隧道路由事件不具有尚未挖掘引发它的值的元素到<xref:System.Windows.RoutedEventArgs.Source%2A>的值与不同`sender`参数的事件参数类。 这两个元素的事件中涉及到在任何给定的处理程序中最重要的是 (<xref:System.Windows.RoutedEventArgs.Source%2A>，引发它，该元素或`sender`，当前正在处理它的元素) 取决于您的处理程序的应用程序逻辑寻址。  
  
 设置此属性通常只是当重写或实现其他[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]调整事件源，例如类处理事件。 不建议重置从实例处理程序的明显的事件源，尤其是在处理程序不会不将事件标记为已处理时。  
  
 如果执行重置<xref:System.Windows.RoutedEventArgs.Source%2A>报告不同的事件源<xref:System.Windows.RoutedEventArgs.OriginalSource%2A>将继续的报告作为第一个源引发的起源<xref:System.Windows.UIElement.RaiseEvent%2A>调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.OriginalSource" />
      </Docs>
    </Member>
  </Members>
</Type>