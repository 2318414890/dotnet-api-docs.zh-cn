<Type Name="TextDecorations" FullName="System.Windows.TextDecorations">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d03a6446ee75d5f4b38fdac0113fd986ea474bb8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class TextDecorations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed TextDecorations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.TextDecorations" />
  <TypeSignature Language="VB.NET" Value="Public Class TextDecorations" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextDecorations abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一组静态预定义文本修饰。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本修饰的四种类型： 基线、 上划线、 带删除线和下划线。 下面的示例显示相对于文本的文本修饰的位置。  
  
 ![文本修饰位置示意图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
文本修饰类型的示例  
  
<a name="xamlAttributeUsage_FontFamily"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object textDecorationsProperty="textDecorationType[,textDecorationType]"/>  
```  
  
<a name="xamlValues_FontFamily"></a>   
## <a name="xaml-values"></a>XAML 值  
 `textDecorationType`  
 文本修饰的类型： <xref:System.Windows.TextDecorations.Baseline%2A>， <xref:System.Windows.TextDecorations.OverLine%2A>， <xref:System.Windows.TextDecorations.Strikethrough%2A>，或<xref:System.Windows.TextDecorations.Underline%2A>。 允许使用多个修饰，用逗号分隔的值。 你还可以指定"None"，以指示没有任何类型的文本修饰。  
  
   
  
## Examples  
 在以下示例中，带删除线的文本效果使用的默认字体值。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets1)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets1)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets1)]  
  
 你还可以指定多个为相同的文本的文本修饰。 在下面的示例、 下划线和上划线文本效果用于相同的文本。  
  
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets4](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets4)]  
  
 你可以使用字符串值"None"，以指示不是否在任何文本修饰<xref:System.Windows.TextDecorations>集合。 在下面的示例中，<xref:System.Windows.TextDecorations>集合设置为"None"。  
  
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets5](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets5)]  
  
 可以通过使用从文本中删除所有文本修饰<xref:System.Windows.TextDecorationCollection.Clear%2A>方法。 在下面的示例中，<xref:System.Windows.TextDecorations>清除集合。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets5a](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets5a)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets5a](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets5a)]  
  
 默认情况下，<xref:System.Windows.Documents.Hyperlink>使用<xref:System.Windows.TextDecoration>对象来显示下划线。 下面的标记示例演示<xref:System.Windows.Documents.Hyperlink>使用和未使用下划线定义：  
  
 [!code-xaml[Performance#PerformanceSnippet11](~/samples/snippets/csharp/VS_Snippets_Wpf/Performance/CSharp/Hyperlink.xaml#performancesnippet11)]  
  
 <xref:System.Windows.TextDecoration> 对象可以是实例化，大幅降低性能，特别是当你有许多<xref:System.Windows.Documents.Hyperlink>对象。 有关详细信息，请参阅[如何： 指定是否超链接是否有下划线](~/docs/framework/wpf/advanced/how-to-specify-whether-a-hyperlink-is-underlined.md)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Baseline">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection Baseline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection Baseline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.Baseline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Baseline As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ Baseline { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个基线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示基线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示基线文本修饰相对于文本的位置。  
  
 ![文本修饰位置示意图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
基线文本修饰的示例  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverLine">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection OverLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection OverLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.OverLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OverLine As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ OverLine { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个上划线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示上划线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示上划线文本修饰相对于文本的位置。  
  
 ![文本修饰位置示意图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
上划线文本效果的示例  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikethrough">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection Strikethrough { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection Strikethrough" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.Strikethrough" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Strikethrough As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ Strikethrough { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个删除线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示删除线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示相对于文本的带有删除线文本修饰的位置。  
  
 ![文本修饰位置示意图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
带删除线的文本修饰的示例  
  
   
  
## Examples  
 在以下示例中，通过为笔使用纯色画笔创建带删除线的文本修饰。 <xref:System.Windows.TextDecoration.Location%2A> 属性设置为 <xref:System.Windows.TextDecorationLocation.Strikethrough>。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets1)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets1)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection Underline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection Underline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.Underline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Underline As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ Underline { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个下划线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示下划线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示下划线文本修饰相对于文本的位置。  
  
 ![文本修饰位置示意图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
下划线文本修饰的示例  
  
 默认情况下，<xref:System.Windows.Documents.Hyperlink>使用<xref:System.Windows.TextDecoration>对象来显示下划线。 有关详细信息，请参阅[如何： 指定是否超链接是否有下划线](~/docs/framework/wpf/advanced/how-to-specify-whether-a-hyperlink-is-underlined.md)。  
  
   
  
## Examples  
 下图显示已风格用线性渐变画笔和虚线的钢笔的文本修饰。  
  
 ![采用线性渐变下划线的文本效果](~/add/media/textdecoration02.png "采用线性渐变下划线的文本效果")  
示例中的下划线的风格使用线性渐变画笔和虚线的钢笔  
  
 在下面的代码示例中，通过为虚线笔使用线性渐变画笔创建下划线文本修饰。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets3](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets3)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets3)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets3](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>