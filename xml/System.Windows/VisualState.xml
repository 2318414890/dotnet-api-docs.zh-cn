<Type Name="VisualState" FullName="System.Windows.VisualState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb39d86958aa250a4d7334e24544cce355d29b6f" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55341619" /></Metadata><TypeSignature Language="C#" Value="public class VisualState : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualState extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualState" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualState&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualState : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualState = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Storyboard")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示特定状态下控件的可视外观。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.VisualState>指定控件处于特定状态时的外观。 例如，当<xref:System.Windows.Controls.Button>是按下时，其边框可能会不同于普通的颜色。  <xref:System.Windows.VisualState>类具有<xref:System.Windows.VisualState.Storyboard%2A>属性，可更改控件的外观。 在控制进入由指定的状态<xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType>属性，<xref:System.Windows.VisualState.Storyboard%2A>开始。 当控件退出该状态，<xref:System.Windows.VisualState.Storyboard%2A>停止。  
  
 <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=nameWithType>属性包含<xref:System.Windows.VisualState>对象。 <xref:System.Windows.VisualStateGroup> 对象添加到<xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType>附加属性，用于在定义上<xref:System.Windows.FrameworkElement>。 您可以添加<xref:System.Windows.VisualState>到任何对象<xref:System.Windows.FrameworkElement>，但它们通常是在使用<xref:System.Windows.Controls.ControlTemplate>的<xref:System.Windows.Controls.Control>。 有关如何创建<xref:System.Windows.Controls.ControlTemplate>并<xref:System.Windows.VisualState>对象的现有控件，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。 有关使用的示例<xref:System.Windows.VisualState>外部的对象<xref:System.Windows.Controls.ControlTemplate>，请参阅<xref:System.Windows.VisualStateManager>类。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.VisualStateGroup>中<xref:System.Windows.Controls.ControlTemplate>的<xref:System.Windows.Controls.Button>调用`CommonStates`，并将添加<xref:System.Windows.VisualState>状态的对象`Normal`， `Pressed`，和`MouseOver`。 <xref:System.Windows.Controls.Button>还用于定义名为的状态`Disabled`所在的域`CommonStates` <xref:System.Windows.VisualStateGroup>，但为了简单起见的示例中省略它。 有关完整示例，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualState" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualState.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.VisualState" /> 的名称。</summary>
        <value><see cref="T:System.Windows.VisualState" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的元素的可视状态应输入通过传递<xref:System.Windows.VisualState.Name%2A>的<xref:System.Windows.VisualState>到<xref:System.Windows.VisualStateManager>。  
  
 时<xref:System.Windows.Controls.Control>使用<xref:System.Windows.VisualStateManager>中<xref:System.Windows.Controls.ControlTemplate>，控件作者应指定其<xref:System.Windows.VisualState>对象控件预期中找到其<xref:System.Windows.Controls.ControlTemplate>放置<xref:System.Windows.TemplateVisualStateAttribute>类签名。 <xref:System.Windows.Controls.ControlTemplate> 作者定义新<xref:System.Windows.VisualState>对象并设置<xref:System.Windows.VisualState.Name%2A>属性设置为指定的值<xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=nameWithType>属性。  
  
 若要查找附带的控件的可视状态名称[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，请参阅[Control 样式和模板](~/docs/framework/wpf/controls/control-styles-and-templates.md)。 有关如何创建<xref:System.Windows.Controls.ControlTemplate>并<xref:System.Windows.VisualState>对象的现有控件，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.VisualStateGroup>中<xref:System.Windows.Controls.ControlTemplate>的<xref:System.Windows.Controls.Button>调用`CommonStates`，并将添加<xref:System.Windows.VisualState>状态的对象`Normal`， `Pressed`，和`MouseOver`。 <xref:System.Windows.Controls.Button>还用于定义名为的状态`Disabled`所在的域`CommonStates` <xref:System.Windows.VisualStateGroup>，但为了简单起见的示例中省略它。 有关完整示例，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Storyboard : System.Windows.Media.Animation.Storyboard with get, set" Usage="System.Windows.VisualState.Storyboard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Windows.Media.Animation.Storyboard" />，它定义控件在 <see cref="T:System.Windows.VisualState" /> 所表示的状态下的外观。</summary>
        <value>一个演示图板，它定义控件在 <see cref="T:System.Windows.VisualState" /> 所表示的状态下的外观。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在控制进入由指定的状态<xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType>属性，<xref:System.Windows.VisualState.Storyboard%2A>开始。 当控件退出该状态，<xref:System.Windows.VisualState.Storyboard%2A>停止。  
  
   
  
## Examples  
 下面的示例创建一个简单<xref:System.Windows.Controls.ControlTemplate>有关<xref:System.Windows.Controls.Button>，其中包含一个<xref:System.Windows.Controls.Grid>。  <xref:System.Windows.VisualState>称为`MouseOver`已更改的颜色的情节提要<xref:System.Windows.Controls.Grid>从绿色到红色时，用户将鼠标放<xref:System.Windows.Controls.Button>。  <xref:System.Windows.VisualState>称为`Normal`是包含，以便在用户移动鼠标按钮，关闭<xref:System.Windows.Controls.Grid>恢复为绿色。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>