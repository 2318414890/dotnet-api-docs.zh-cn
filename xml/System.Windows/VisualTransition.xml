<Type Name="VisualTransition" FullName="System.Windows.VisualTransition">
  <Metadata><Meta Name="ms.openlocfilehash" Value="199554768291e48a2d9515e583ff0ed3d8ffe263" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55329581" /></Metadata><TypeSignature Language="C#" Value="public class VisualTransition : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualTransition extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualTransition" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualTransition&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualTransition : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualTransition = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Storyboard")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示当控件从一个状态转换到另一个状态时发生的可视行为。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过添加状态之间转换时，可以指定控件的可视行为<xref:System.Windows.VisualTransition>对象。 当你创建<xref:System.Windows.VisualTransition>，指定一个或多项操作：  
  
-   通过设置发生的状态之间的转换所需的时间<xref:System.Windows.VisualTransition.GeneratedDuration%2A>属性。  
  
-   控件的外观的设置在转换的时间发生的其他更改<xref:System.Windows.VisualTransition.Storyboard%2A>属性。  
  
-   当<xref:System.Windows.VisualTransition>应用设置<xref:System.Windows.VisualTransition.To%2A>和<xref:System.Windows.VisualTransition.From%2A>属性。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.VisualTransition>，它指定当用户移动鼠标离开控件，该控件的边框更改为蓝色，然后为黄色，，然后为黑色 1.5 秒。 有关完整示例，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#8](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualTransition.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualTransition();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualTransition" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public string From { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string From" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualTransition.From" />
      <MemberSignature Language="VB.NET" Value="Public Property From As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ From { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.From : string with get, set" Usage="System.Windows.VisualTransition.From" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要从其过渡的 <see cref="T:System.Windows.VisualState" /> 的名称。</summary>
        <value>要从其过渡的 <see cref="T:System.Windows.VisualState" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualTransition.From%2A>属性是可选的。 一个<xref:System.Windows.VisualTransition>可限制要应用于仅特定状态或可应用任何时候，只要状态之间的控制转换。 限制何时<xref:System.Windows.VisualTransition>应用设置<xref:System.Windows.VisualTransition.To%2A>和<xref:System.Windows.VisualTransition.From%2A>属性。 下表描述了从最严限制到最宽松限制的限制级别。  
  
|限制类型|起始值|目标值|  
|-------------------------|-------------------|-----------------|  
|从一个指定状态到另一个指定状态|名称 <xref:System.Windows.VisualState>|名称 <xref:System.Windows.VisualState>|  
|从任意状态到指定状态|未设置|名称 <xref:System.Windows.VisualState>|  
|从指定状态到任意状态|名称 <xref:System.Windows.VisualState>|未设置|  
|从任意状态到其他任意状态|未设置|未设置|  
  
 可以有多个<xref:System.Windows.VisualTransition>中的对象<xref:System.Windows.VisualStateGroup>的引用相同的状态，但它们将使用上一个表指定的顺序。  
  
 您可以更改此行为通过创建新类继承自<xref:System.Windows.VisualStateManager>并重写<xref:System.Windows.VisualStateManager.GoToStateCore%2A>方法。  
  
   
  
## Examples  
 下面的示例创建两个<xref:System.Windows.VisualTransition>对象。 该控件时从过渡`Pressed`状态变为`MouseOver`状态，<xref:System.Windows.VisualTransition>同时具有<xref:System.Windows.VisualTransition.From%2A>和<xref:System.Windows.VisualTransition.To%2A>使用集。 当控件从非 `Pressed` 的状态转换为 `MouseOver` 状态时，将使用另一种状态。  
  
 [!code-xaml[VSMButtonTemplate#7](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratedDuration">
      <MemberSignature Language="C#" Value="public System.Windows.Duration GeneratedDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Duration GeneratedDuration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualTransition.GeneratedDuration" />
      <MemberSignature Language="VB.NET" Value="Public Property GeneratedDuration As Duration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Duration GeneratedDuration { System::Windows::Duration get(); void set(System::Windows::Duration value); };" />
      <MemberSignature Language="F#" Value="member this.GeneratedDuration : System.Windows.Duration with get, set" Usage="System.Windows.VisualTransition.GeneratedDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DurationConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Duration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置从一个状态转为另一个状态所需的时间。</summary>
        <value>从一个状态转为另一个状态所需的时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定多长时间转换所需的设置<xref:System.Windows.VisualTransition.GeneratedDuration%2A>属性。 当您将设置<xref:System.Windows.VisualTransition.GeneratedDuration%2A>属性，指定所需的转换发生的时间。  
  
   
  
## Examples  
 下面的示例指定，该控件将在半秒进入`MouseOver`状态。 有关完整示例，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#MouseOverTransition](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#mouseovertransition)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratedEasingFunction">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.IEasingFunction GeneratedEasingFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.IEasingFunction GeneratedEasingFunction" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualTransition.GeneratedEasingFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property GeneratedEasingFunction As IEasingFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::IEasingFunction ^ GeneratedEasingFunction { System::Windows::Media::Animation::IEasingFunction ^ get(); void set(System::Windows::Media::Animation::IEasingFunction ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GeneratedEasingFunction : System.Windows.Media.Animation.IEasingFunction with get, set" Usage="System.Windows.VisualTransition.GeneratedEasingFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.IEasingFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在状态间转换的自定义数学公式。</summary>
        <value>用于在状态间转换的自定义数学公式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以设置<xref:System.Windows.VisualTransition.GeneratedEasingFunction%2A>属性来指定，将发生转换的方式。 例如，可以指定要加速或减速过渡的缓动函数。 有关详细信息，请参阅[缓动函数](~/docs/framework/wpf/graphics-multimedia/easing-functions.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.VisualTransition>，从而导致<xref:System.Windows.Shapes.Rectangle>垂直移动在用户通过按鼠标按钮时<xref:System.Windows.Controls.Canvas>。 该示例设置<xref:System.Windows.VisualTransition.GeneratedEasingFunction%2A>属性设置为<xref:System.Windows.Media.Animation.BounceEase>对象，从而导致<xref:System.Windows.Shapes.Rectangle>弹跳效果到达其目标时。 <xref:System.Windows.VisualTransition>当用户释放左键使用了另一个<xref:System.Windows.Media.Animation.BounceEase>对象，从而导致<xref:System.Windows.Shapes.Rectangle>反弹才会返回到其原始位置。  
  
 [!code-xaml[VSMCustomControl#VSMEasingFunction](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmeasingfunction)]  
  
 下面的示例演示的事件处理程序<xref:System.Windows.UIElement3D.MouseDown>和<xref:System.Windows.UIElement.MouseUp>事件。 此示例调用<xref:System.Windows.VisualStateManager.GoToElementState%2A>方法，以更改<xref:System.Windows.VisualState>的画布。  
  
 [!code-csharp[VSMCustomControl#VSMEasingFunctionLogic](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#vsmeasingfunctionlogic)]
 [!code-vb[VSMCustomControl#VSMEasingFunctionLogic](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#vsmeasingfunctionlogic)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualTransition.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Storyboard : System.Windows.Media.Animation.Storyboard with get, set" Usage="System.Windows.VisualTransition.Storyboard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置进行过渡时发生的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <value>进行过渡时发生的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.VisualTransition>包含<xref:System.Windows.Media.Animation.Storyboard>，则<xref:System.Windows.Media.Animation.Storyboard>在任何时间运行<xref:System.Windows.VisualTransition>应用。 例如，如果你想的边框<xref:System.Windows.Controls.Button>若要更改颜色，当用户移动鼠标离开它时，可以创建<xref:System.Windows.VisualTransition>具有<xref:System.Windows.Media.Animation.Storyboard>更改按钮的背景。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.VisualTransition>，它指定当用户移动鼠标离开控件，该控件的边框更改为蓝色，然后为黄色，，然后为黑色 1.5 秒。 有关完整示例，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#8](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public string To { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string To" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualTransition.To" />
      <MemberSignature Language="VB.NET" Value="Public Property To As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ To { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.To : string with get, set" Usage="System.Windows.VisualTransition.To" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要过渡到的 <see cref="T:System.Windows.VisualState" /> 的名称。</summary>
        <value>要转换到的 <see cref="T:System.Windows.VisualState" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualTransition.To%2A>属性是可选的。 一个<xref:System.Windows.VisualTransition>可限制要应用于仅特定状态或可应用任何时候，只要状态之间的控制转换。 限制何时<xref:System.Windows.VisualTransition>应用设置<xref:System.Windows.VisualTransition.To%2A>和<xref:System.Windows.VisualTransition.From%2A>属性。 下表描述了从最严限制到最宽松限制的限制级别。  
  
|限制类型|起始值|目标值|  
|-------------------------|-------------------|-----------------|  
|从一个指定状态到另一个指定状态|名称 <xref:System.Windows.VisualState>|名称 <xref:System.Windows.VisualState>|  
|从任意状态到指定状态|未设置|名称 <xref:System.Windows.VisualState>|  
|从指定状态到任意状态|名称 <xref:System.Windows.VisualState>|未设置|  
|从任意状态到其他任意状态|未设置|未设置|  
  
 可以有多个<xref:System.Windows.VisualTransition>中的对象<xref:System.Windows.VisualStateGroup>的引用相同的状态，但它们将使用上一个表指定的顺序。  
  
 您可以更改此行为通过创建新类继承自<xref:System.Windows.VisualStateManager>并重写<xref:System.Windows.VisualStateManager.GoToStateCore%2A>方法。  
  
   
  
## Examples  
 下面的示例创建两个<xref:System.Windows.VisualTransition>对象。 该控件时从过渡`Pressed`状态变为`MouseOver`状态，<xref:System.Windows.VisualTransition>同时具有<xref:System.Windows.VisualTransition.From%2A>和<xref:System.Windows.VisualTransition.To%2A>使用集。 当控件从非 `Pressed` 的状态转换为 `MouseOver` 状态时，将使用另一种状态。  
  
 [!code-xaml[VSMButtonTemplate#7](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>