<Type Name="DependencyPropertyChangedEventArgs" FullName="System.Windows.DependencyPropertyChangedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23860b8bc5e42d08fc2dc33cf7705b14d331248f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461029" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DependencyPropertyChangedEventArgs extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Structure DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public value class DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="F#" Value="type DependencyPropertyChangedEventArgs = struct" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a91e5-101">提供各种属性更改事件的数据。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a91e5-101">Provides data for various property changed events.</span>
      </span>
      <span data-ttu-id="a91e5-102">通常这些事件对只读依赖属性的值中的有效值更改进行报告。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a91e5-102">Typically these events report effective value changes in the value of a read-only dependency property.</span>
      </span>
      <span data-ttu-id="a91e5-103">另一个用法是用作 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现的一部分。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a91e5-103">Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-104">使用事件<xref:System.Windows.DependencyPropertyChangedEventArgs>事件数据的类和<xref:System.Windows.DependencyPropertyChangedEventHandler>方法实现作为处理程序，通常遵循命名模式`Is*Changed`，并作为通常实施[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件，而不<xref:System.Windows.RoutedEvent>（它们不是路由的事件） 的支持。</span><span class="sxs-lookup"><span data-stu-id="a91e5-104">The events that use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data, and the <xref:System.Windows.DependencyPropertyChangedEventHandler> method implementations for handlers, generally follow the naming pattern `Is*Changed`, and are generally implemented as [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events without <xref:System.Windows.RoutedEvent> backing (they are not routed events).</span></span> <span data-ttu-id="a91e5-105">某些类处理方法，用于"处理"，否则未公开如报告属性更改，通过状态更改的事件<xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>，还使用<xref:System.Windows.DependencyPropertyChangedEventArgs>事件数据的类。</span><span class="sxs-lookup"><span data-stu-id="a91e5-105">Some class handling methods that "handle" otherwise unexposed events that report a state change through a property change, such as <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>, also use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data.</span></span>  
  
 <span data-ttu-id="a91e5-106">方案<xref:System.Windows.PropertyChangedCallback>是使用来自该属性的属性系统计算的报表旧和新值的自变量。</span><span class="sxs-lookup"><span data-stu-id="a91e5-106">The scenario for <xref:System.Windows.PropertyChangedCallback> is to use the arguments to report old and new values that come from the property system evaluation of the property.</span></span> <span data-ttu-id="a91e5-107">处理新旧值的回调可能选择根据这些值，例如选择不响应被认为是无意义的值更改的特殊处理。</span><span class="sxs-lookup"><span data-stu-id="a91e5-107">A callback that processes old and new values might choose special handling depending on these values, such as choosing to not respond to value changes that are deemed insignificant.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a91e5-108">下面的示例使用<xref:System.Windows.DependencyPropertyChangedEventArgs>的上下文中的类<xref:System.Windows.PropertyChangedCallback>还定义了事件的自定义类的特定属性。</span><span class="sxs-lookup"><span data-stu-id="a91e5-108">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="a91e5-109">回调将的结果的旧和新值的属性系统中，通过传递作为<xref:System.Windows.DependencyPropertyChangedEventArgs>，和重新打包成不同的事件自变量类这些<xref:System.Windows.RoutedPropertyChangedEventArgs%601>。</span><span class="sxs-lookup"><span data-stu-id="a91e5-109">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="a91e5-110">新的自变量然后的数据用于定义和自定义的类引发的一个"ValueChanged"事件。</span><span class="sxs-lookup"><span data-stu-id="a91e5-110">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyChangedEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyPropertyChangedEventArgs (System.Windows.DependencyProperty property, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty property, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As DependencyProperty, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyPropertyChangedEventArgs(System::Windows::DependencyProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.DependencyPropertyChangedEventArgs : System.Windows.DependencyProperty * obj * obj -&gt; System.Windows.DependencyPropertyChangedEventArgs" Usage="new System.Windows.DependencyPropertyChangedEventArgs (property, oldValue, newValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.DependencyProperty" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">
          <span data-ttu-id="a91e5-111">更改的依赖项属性的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-111">The identifier for the dependency property that changed.</span>
          </span>
        </param>
        <param name="oldValue">
          <span data-ttu-id="a91e5-112">相关事件报告更改或状态更改之前的属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-112">The value of the property before the change reported by the relevant event or state change.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="a91e5-113">相关事件报告更改或状态更改之后的属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-113">The value of the property after the change reported by the relevant event or state change.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a91e5-114">初始化 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-114">Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-115">报告依赖项属性更改的自定义事件的实施者应使用此构造函数引发事件时将填充更改的具体情况的事件数据。</span><span class="sxs-lookup"><span data-stu-id="a91e5-115">Implementers of custom events that report dependency property changes should use this constructor for populating the event data with the specifics of the change when the event is raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a91e5-116">返回提供的对象是否与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-116">Returns whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyPropertyChangedEventArgs.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="a91e5-117">要与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-117">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a91e5-118">确定提供的对象是否与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-118">Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a91e5-119">如果提供的对象与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-119">
              <see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-120">此实现依赖于的所有属性，包括内部属性的值等效。</span><span class="sxs-lookup"><span data-stu-id="a91e5-120">This implementation relies on value equivalence of all properties, including internal properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.DependencyPropertyChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (args As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="dependencyPropertyChangedEventArgs.Equals args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="a91e5-121">要与当前的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 进行比较的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-121">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a91e5-122">确定提供的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 是否与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-122">Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a91e5-123">如果提供的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-123">
              <see langword="true" /> if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-124">此实现依赖于的所有属性，包括内部属性的值等效。</span><span class="sxs-lookup"><span data-stu-id="a91e5-124">This implementation relies on value equivalence of all properties, including internal properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyPropertyChangedEventArgs.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a91e5-125">获取此 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-125">Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a91e5-126">带符号 32 位整数哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-126">A signed 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewValue">
      <MemberSignature Language="C#" Value="public object NewValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewValue : obj" Usage="System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a91e5-127">获取发生更改之后的属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-127">Gets the value of the property after the change.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a91e5-128">发生更改之后的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-128">The property value after the change.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-129">提供的类型应始终是值的强制转换为正在报告的依赖项属性的类型。</span><span class="sxs-lookup"><span data-stu-id="a91e5-129">The type of the value provided should always be castable to the type of the dependency property being reported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a91e5-130">下面的示例使用<xref:System.Windows.DependencyPropertyChangedEventArgs>的上下文中的类<xref:System.Windows.PropertyChangedCallback>还定义了事件的自定义类的特定属性。</span><span class="sxs-lookup"><span data-stu-id="a91e5-130">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="a91e5-131">回调将的结果的旧和新值的属性系统中，通过传递作为<xref:System.Windows.DependencyPropertyChangedEventArgs>，和重新打包成不同的事件自变量类这些<xref:System.Windows.RoutedPropertyChangedEventArgs%601>。</span><span class="sxs-lookup"><span data-stu-id="a91e5-131">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="a91e5-132">新的自变量然后的数据用于定义和自定义的类引发的一个"ValueChanged"事件。</span><span class="sxs-lookup"><span data-stu-id="a91e5-132">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValue">
      <MemberSignature Language="C#" Value="public object OldValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OldValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OldValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OldValue : obj" Usage="System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a91e5-133">获取发生更改之前的属性的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-133">Gets the value of the property before the change.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a91e5-134">发生更改之前的属性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-134">The property value before the change.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-135">提供的类型应始终是值的强制转换为正在报告的依赖项属性的类型。</span><span class="sxs-lookup"><span data-stu-id="a91e5-135">The type of the value provided should always be castable to the type of the dependency property being reported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a91e5-136">下面的示例使用<xref:System.Windows.DependencyPropertyChangedEventArgs>的上下文中的类<xref:System.Windows.PropertyChangedCallback>还定义了事件的自定义类的特定属性。</span><span class="sxs-lookup"><span data-stu-id="a91e5-136">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="a91e5-137">回调将的结果的旧和新值的属性系统中，通过传递作为<xref:System.Windows.DependencyPropertyChangedEventArgs>，和重新打包成不同的事件自变量类这些<xref:System.Windows.RoutedPropertyChangedEventArgs%601>。</span><span class="sxs-lookup"><span data-stu-id="a91e5-137">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="a91e5-138">新的自变量然后的数据用于定义和自定义的类引发的一个"ValueChanged"事件。</span><span class="sxs-lookup"><span data-stu-id="a91e5-138">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.DependencyPropertyChangedEventArgs * System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="a91e5-139">要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-139">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="a91e5-140">要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-140">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a91e5-141">确定两个指定的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否具有相同的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-141">Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a91e5-142">如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例等效，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-142">
              <see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-143">实现使用相同逻辑<xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="a91e5-143">The implementation uses the same logic as <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.DependencyPropertyChangedEventArgs * System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="System.Windows.DependencyPropertyChangedEventArgs.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="a91e5-144">要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-144">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="a91e5-145">要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-145">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a91e5-146">确定两个指定的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-146">Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects are different.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a91e5-147">如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例不同，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-147">
              <see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are different; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-148">实现返回的相同逻辑求反运算<xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="a91e5-148">The implementation returns the negation of the same logic as <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a91e5-149">获取发生值更改的依赖项属性的标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-149">Gets the identifier for the dependency property where the value change occurred.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a91e5-150">发生值更改的依赖项属性的标识符字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a91e5-150">The identifier field of the dependency property where the value change occurred.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a91e5-151">此属性是如果在一组公共使用相关<xref:System.Windows.PropertyChangedCallback>注册多个属性，并且有必要消除歧义的属性更改调用回调。</span><span class="sxs-lookup"><span data-stu-id="a91e5-151">This property is relevant if used within a common <xref:System.Windows.PropertyChangedCallback> that is registered for several properties, and it is necessary to disambiguate which property change invoked the callback.</span></span> <span data-ttu-id="a91e5-152"><xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> 无关通常用于引发事件，因为没有通常属性和事件之间存在 1:1 的对应关系属性更改该报表。</span><span class="sxs-lookup"><span data-stu-id="a91e5-152"><xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> is not typically relevant for raising events, because there is usually a 1:1 correspondence between properties and events that report the property change.</span></span> <span data-ttu-id="a91e5-153">已引发的事件的本身就可的指示更改的属性。</span><span class="sxs-lookup"><span data-stu-id="a91e5-153">The event that was raised is itself the indication of which property changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>