<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LogicalTreeHelper.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f2fd27ad4c537a177069b372af2f1a949e102361.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2fd27ad4c537a177069b372af2f1a949e102361</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.LogicalTreeHelper">
          <source>Provides static helper methods for querying objects in the logical tree.</source>
          <target state="translated">提供用于查询逻辑树中的对象的静态帮助器方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>The <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph>类提供可用于返回子集合的对象，或从逻辑树的子节点内的特定对象的方法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
          <target state="translated">但是，你通常可以执行的对象树操作的大多数还公开的类似的方法或属性上<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>For example, try the following:</source>
          <target state="translated">例如，尝试以下操作：</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>Instead of calling the static <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;</ph> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object.</source>
          <target state="translated">而不是调用静态<ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;</ph>方法，返回一个枚举的逻辑子对象，该方法使用专用的集合公开为该对象的内容模型中。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.</source>
          <target state="translated">支持内容模型的几乎所有对象都公开某些属性，包含的子对象的集合，并对该集合提供集合接口直接支持。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>Instead of calling the static <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> method to obtain a child object by specifying its name, call the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph> method on specific objects.</source>
          <target state="translated">而不是调用静态<ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>方法来通过指定其名称，调用中获取子对象<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph>对特定对象的方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source><ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> 是最适用于分析方案其中向上或向下通过多个级别，则逻辑树以递归方式旅行并想要使用一致的方法检查各种父或子对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.</source>
          <target state="translated">在这种情况下，您可能会访问混合内容模型，并使用更多的内容模型特定的 Api 可能会太复杂。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>The UI element to bring into view.</source>
          <target state="translated">要使其可见的 UI 元素。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>Attempts to bring the requested UI element into view and raises the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> event on the target in order to report the results.</source>
          <target state="translated">尝试使所请求的 UI 元素可见，并在目标上引发 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> 事件以报告结果。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>It is typically more convenient to call the instance methods <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph> rather than this static utility method.</source>
          <target state="translated">通常调用实例方法更加方便<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph>而不是此静态实用工具方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>The behavior of the instance methods is equivalent to the behavior of the static method.</source>
          <target state="translated">实例方法的行为等效于静态方法的行为。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>Even if the <ph id="ph1">`current`</ph> UI element provided was a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, the resulting event is still the same <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType&gt;</ph> event, with the originating <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> identifiable by checking the event data of the event.</source>
          <target state="translated">即使<ph id="ph1">`current`</ph>提供的 UI 元素已<ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>，生成的事件都是一样的<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType&gt;</ph>事件，具有起源<ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>身份通过检查事件的事件数据。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The object to start searching from.</source>
          <target state="translated">从其开始搜索的对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>This object must be either a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> or a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>.</source>
          <target state="translated">此对象必须是 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The name of the object to find.</source>
          <target state="translated">要查找的对象的名称。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>Attempts to find and return an object that has the specified name.</source>
          <target state="translated">尝试查找并返回具有指定名称的对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The search starts from the specified object and continues into subnodes of the logical tree.</source>
          <target state="translated">搜索从指定对象开始，并持续到逻辑树的子节点中。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The object with the matching name, if one is found; returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching name was found in the logical tree.</source>
          <target state="translated">如果找到一个，则为具有匹配名称的元素；如果没有在逻辑树中找到匹配名称，则返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The methods <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> are superficially similar to <ph id="ph3">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>, but operate by different logic:</source>
          <target state="translated">方法<ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph>看起来类似于<ph id="ph3">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>，但由不同的逻辑运行：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The search direction for <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> is toward child objects (down the tree); the search direction for the <ph id="ph2">`FindName`</ph> methods is towards parent objects (up the tree).</source>
          <target state="translated">搜索方向<ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>将是朝向 （向下树）; 的子对象的搜索方向<ph id="ph2">`FindName`</ph>methods 是入 （向上树） 的父对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The <ph id="ph1">`FindName`</ph> methods are governed by the concept of a XAML namescope.</source>
          <target state="translated"><ph id="ph1">`FindName`</ph>方法均由 XAML 名称范围的概念。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>Using <ph id="ph1">`FindName`</ph> you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness.</source>
          <target state="translated">使用<ph id="ph1">`FindName`</ph>则可保证确定只有一个存在该名称的对象，因为 XAML 名称范围，强制实现唯一性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> ignores XAML namescope and might cross XAML namescope boundaries during the search.</source>
          <target state="translated">与此相反，<ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>在搜索过程中忽略 XAML 名称范围，并可能跨 XAML 名称范围边界。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>As such, there is no guarantee of uniqueness of the <ph id="ph1">`elementName`</ph> name once boundaries are crossed.</source>
          <target state="translated">在这种情况下，就不能保证唯一性的<ph id="ph1">`elementName`</ph>命名一旦跨越边界。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>For more information about XAML namescopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">有关 XAML 名称范围的详细信息，请参阅<bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Windows.LogicalTreeHelper">
          <source>Returns the collection of immediate child objects of the specified object by processing the logical tree.</source>
          <target state="translated">通过处理逻辑树，返回指定对象的直接子对象的集合。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">要从中开始处理逻辑树的对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>This is expected to be either a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>.</source>
          <target state="translated">此元素应为 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>Returns the collection of immediate child objects of the specified object, by processing the logical tree.</source>
          <target state="translated">通过处理逻辑树返回指定的对象的即时子对象集合。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>The enumerable collection of immediate child objects from the logical tree of the specified object.</source>
          <target state="translated">来自指定对象逻辑树的即时子对象的可枚举集合。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>Use this signature and helper method primarily when you are unsure whether <ph id="ph1">`current`</ph> is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> and are also unsure whether that object's class supports its own content model collection.</source>
          <target state="translated">使用此签名和帮助程序方法，您不确定时，主要是否<ph id="ph1">`current`</ph>是<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>，并且也不确定该对象的类是否支持其自己的内容模型的集合。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>If you can determine the type of the object you are querying, check the specific content property that you know exists on that type.</source>
          <target state="translated">如果可以确定正在查询的对象的类型，请检查你知道的特定内容属性存在于该类型上。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>For example, if you know that the object you are querying is an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.</source>
          <target state="translated">例如，如果你知道查询该对象是<ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>，检查<ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph>属性来获取强类型的集合，也不能具有集合接口支持可能比枚举更有用。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">要从中开始处理逻辑树的对象。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)">
          <source>Returns the collection of immediate child objects of the specified <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> by processing the logical tree.</source>
          <target state="translated">通过处理逻辑树，返回指定 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> 的直接子对象的集合。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)">
          <source>The enumerable collection of immediate child objects starting from <ph id="ph1">&lt;paramref name="current" /&gt;</ph> in the logical tree.</source>
          <target state="translated">逻辑树中从 <ph id="ph1">&lt;paramref name="current" /&gt;</ph> 开始的直接子对象的可枚举集合。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">要从中开始处理逻辑树的对象。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)">
          <source>Returns the collection of immediate child objects of the specified <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> by processing the logical tree.</source>
          <target state="translated">通过处理逻辑树，返回指定 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 的直接子对象的集合。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)">
          <source>The enumerable collection of immediate child objects starting from <ph id="ph1">&lt;paramref name="current" /&gt;</ph> in the logical tree.</source>
          <target state="translated">逻辑树中从 <ph id="ph1">&lt;paramref name="current" /&gt;</ph> 开始的直接子对象的可枚举集合。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>The object to find the parent object for.</source>
          <target state="translated">要查找其父对象的对象。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>This is expected to be either a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> or a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>.</source>
          <target state="translated">这应为 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>Returns the parent object of the specified object by processing the logical tree.</source>
          <target state="translated">通过处理逻辑树，返回指定对象的父对象。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>The requested parent object.</source>
          <target state="translated">所请求的父对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>This method is merely a wrapper that gets the appropriate type version (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>) of the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType&gt;</ph> property; so unless you are unable to determine the <ph id="ph5">`current`</ph> type, you might want to check the respective instance properties instead.</source>
          <target state="translated">此方法是仅获取适当的类型版本的包装器 (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>) 的<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType&gt;</ph>属性; 因此除非你不能确定<ph id="ph5">`current`</ph>类型，你可能想要检查各自而是实例属性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>