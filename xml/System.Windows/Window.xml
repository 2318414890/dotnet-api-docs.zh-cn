<Type Name="Window" FullName="System.Windows.Window">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="30e9c154175370c143890004c37ed150b5ecabbb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36456196" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Window = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ccb4c-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ccb4c-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-102">用户和独立的应用程序之间的点是交互的一个窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="ccb4c-103">A[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]窗口包含两个不同的区域：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="ccb4c-104">非工作区，其中承载 windows 修饰，其中包括图标、 标题、 系统菜单中，最小化按钮、 最大化按钮、 还原按钮、 关闭按钮和边框。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="ccb4c-105">工作区，其中承载应用程序特定的内容。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="ccb4c-106">标准窗口下图所示：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="ccb4c-107">![窗口元素](~/add/media/windowoverviewfigure1.PNG "窗口元素")</span><span class="sxs-lookup"><span data-stu-id="ccb4c-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="ccb4c-108"><xref:System.Windows.Window> 封装能够创建、 配置、 显示，和管理的生存期的窗口和对话框框中，并提供以下关键服务：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="ccb4c-109">**生存期管理**: <xref:System.Windows.Window.Activate%2A>， <xref:System.Windows.Window.Activated>， <xref:System.Windows.Window.Close%2A>， <xref:System.Windows.Window.Closed>， <xref:System.Windows.Window.Closing>， <xref:System.Windows.Window.Deactivated>， <xref:System.Windows.Window.Hide%2A>， <xref:System.Windows.Window.IsActive%2A>， <xref:System.Windows.Window.Show%2A>， <xref:System.Windows.Window.SourceInitialized>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="ccb4c-110">**窗口管理**: <xref:System.Windows.Window.GetWindow%2A>， <xref:System.Windows.Window.OwnedWindows%2A>， <xref:System.Windows.Window.Owner%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="ccb4c-111">**外观和行为**: <xref:System.Windows.Window.AllowsTransparency%2A>， <xref:System.Windows.Window.ContentRendered>， <xref:System.Windows.Window.DragMove%2A>， <xref:System.Windows.Window.Icon%2A>， <xref:System.Windows.Window.Left%2A>， <xref:System.Windows.Window.LocationChanged>， <xref:System.Windows.Window.ResizeMode%2A>， <xref:System.Windows.Window.RestoreBounds%2A>， <xref:System.Windows.Window.ShowActivated%2A>， <xref:System.Windows.Window.ShowInTaskbar%2A>， <xref:System.Windows.Window.SizeToContent%2A>，<xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="ccb4c-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="ccb4c-112">**对话框**: <xref:System.Windows.Window.DialogResult%2A>， <xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="ccb4c-113">此外，<xref:System.Windows.Application>公开对管理所有 windows 应用程序中的特殊支持：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="ccb4c-114">应用程序保留当前应用程序中实例化的所有窗口的列表。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="ccb4c-115">此列表由公开<xref:System.Windows.Application.Windows%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="ccb4c-116">默认情况下，<xref:System.Windows.Application.MainWindow%2A>自动设置到第一个引用<xref:System.Windows.Window>，在应用程序中实例化。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="ccb4c-117">这从而使应用程序主窗口的窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="ccb4c-118">A<xref:System.Windows.Window>可以使用标记、 标记和代码隐藏或代码来实现。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="ccb4c-119"><xref:System.Windows.Window> 主要用于显示窗口和独立应用程序的对话框。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="ccb4c-120">但是，需要在窗口级别，诸如向导，导航的应用程序可以使用<xref:System.Windows.Navigation.NavigationWindow>替换;<xref:System.Windows.Navigation.NavigationWindow>派生自<xref:System.Windows.Window>并使用浏览器样式导航支持对它进行扩展。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-121">可导航内容岛可以合并到使用其他内容和内容容器<xref:System.Windows.Controls.Frame>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="ccb4c-122"><xref:System.Windows.Window> 需要`UnmanagedCode`要实例化的安全权限。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="ccb4c-123">这具有以下结果：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="ccb4c-124">-您可以单独部署应用程序将请求权限提升时从 Internet 或本地 Intranet 区域中启动。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]<span data-ttu-id="ccb4c-125"> 所请求的任何内容小于完全权限将不能实例化窗口或对话框。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-125"> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="ccb4c-126">有关独立应用程序部署和安全注意事项的信息，请参阅[WPF 安全策略 — 平台安全性](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="ccb4c-127">A<xref:System.Windows.Window>是<xref:System.Windows.Controls.ContentControl>，这意味着，它可以包含任何类型 （如字符串、 一个映像或一个面板） 的单个对象。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="ccb4c-128">有关更多信息，请参见 <xref:System.Windows.Controls.ContentControl> 类。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="ccb4c-129">此外，<xref:System.Windows.Window>是根元素，因此，不能是另一个元素的内容的一部分。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-130"><xref:System.Windows.FrameworkElement.Height%2A>， <xref:System.Windows.FrameworkElement.Width%2A>， <xref:System.Windows.Window.Top%2A>，和<xref:System.Windows.Window.Left%2A>属性上设置<xref:System.Windows.Window>通过样式将不会应用在运行时。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="ccb4c-131">自定义窗口控件</span><span class="sxs-lookup"><span data-stu-id="ccb4c-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="ccb4c-132">若要将相同的属性设置应用于多个<xref:System.Windows.Window>控件，使用<xref:System.Windows.FrameworkElement.Style%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="ccb4c-133">你可以修改默认<xref:System.Windows.Controls.ControlTemplate>提供独特外观的控件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="ccb4c-134">有关创建<xref:System.Windows.Controls.ControlTemplate>，请参阅[通过创建 ControlTemplate 自定义现有的控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="ccb4c-135">若要查看的部件和特定于状态<xref:System.Windows.Window>，请参阅[窗口样式和模板](~/docs/framework/wpf/controls/window-styles-and-templates.md)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="ccb4c-136">对于此控件的依赖项属性可能由控件的默认样式设置。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-136">Dependency properties for this control might be set by the control’s default style.</span></span>  <span data-ttu-id="ccb4c-137">如果属性设置的默认样式，该属性可能会更改从其默认值，如果控件出现在应用程序中。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="ccb4c-138">桌面主题用应用程序运行时确定的默认样式。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="ccb4c-139">有关详细信息，请参阅[默认 WPF 主题](http://go.microsoft.com/fwlink/?LinkID=158252)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-139">For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-140">设置 visual 属性会仅造成影响该属性是否都存在于<xref:System.Windows.Window>控件的默认模板，并通过设置。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-140">Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a .</span></span> <span data-ttu-id="ccb4c-141">可以在的"更改 Visual 结构的控件"一节中找到的可视属性列表[通过创建 ControlTemplate 自定义现有的控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-141">You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-142">下面的示例演示如何标准窗口是使用仅标记来定义：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-142">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="ccb4c-143">下面的示例演示如何使用定义的标准窗口只代码：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-143">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="ccb4c-144">下面的示例演示如何标准窗口是使用标记和代码隐藏的组合来定义。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-144">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-145">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-145">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-146">构造函数初始化<xref:System.Windows.FrameworkElement.Width%2A>， <xref:System.Windows.FrameworkElement.Height%2A>， <xref:System.Windows.Window.Top%2A>，和<xref:System.Windows.Window.Left%2A>为其默认值的属性<xref:System.Windows.Window>值。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-146">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="ccb4c-147">如果在创建一个窗口<xref:System.AppDomain>具有<xref:System.Windows.Application>对象，构造函数将添加<xref:System.Windows.Window>对象的一套<xref:System.Windows.Application>-管理通过 windows<xref:System.Windows.Application.Windows%2A>属性<xref:System.Windows.Application>对象。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-147">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ccb4c-148">表示调用不安全的本机方法调用此对象的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-148">for permission for this object to call unsafe native methods.</span>
          </span>
          <span data-ttu-id="ccb4c-149">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-149">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; bool" Usage="window.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-150">Attempts to bring the window to the foreground and activates it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-150">Attempts to bring the window to the foreground and activates it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ccb4c-151">
            <see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-151">
              <see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-152">确定窗口是否已激活的规则都与使用的相同[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]`SetForegroundWindow`函数 (User32.dll)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-152">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="ccb4c-153">如果显示窗口激活的 Windows Presentation Foundation 应用程序不是用户的前景应用程序中,<xref:System.Windows.Application.Activated>引发事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-153">If the window is activated in a Windows Presentation Foundation application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-154">窗口承载在浏览器时，不能调用此方法。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-154">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="ccb4c-155">若要激活窗口的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-155">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="ccb4c-156">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-156">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberSignature Language="F#" Value="member this.Activated : EventHandler " Usage="member this.Activated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-157">Occurs when a window becomes the foreground window.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-157">Occurs when a window becomes the foreground window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-158">激活一个窗口 （变成前台窗口） 时：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-158">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="ccb4c-159">第一次打开该窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-159">The window is first opened.</span></span>  
  
-   <span data-ttu-id="ccb4c-160">用户通过使用鼠标，按 ALT + 选项卡上，或从任务管理器中选择它切换到该窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-160">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="ccb4c-161">用户单击窗口的任务栏按钮。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-161">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="ccb4c-162">需要检测何时变成活动的 Windows 可以处理<xref:System.Windows.Window.Activated>事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-162">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="ccb4c-163">第一次激活窗口之后，它可能会停用并且在其生存期内多次重新激活。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-163">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="ccb4c-164">如果应用程序的行为或状态取决于其激活状态，它可以检查<xref:System.Windows.Window.IsActive%2A>来确定在哪种激活状态。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-164">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="ccb4c-165">应用程序也可以是<xref:System.Windows.Application.Activated>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-165">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowsTransparency : bool with get, set" Usage="System.Windows.Window.AllowsTransparency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-166">Gets or sets a value that indicates whether a window's client area supports transparency.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-166">Gets or sets a value that indicates whether a window's client area supports transparency.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-167">
            <see langword="true" /> 如果窗口支持透明度;否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-167">
              <see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-168">当<xref:System.Windows.Controls.Control.Background%2A>窗口的属性设置为透明颜色、 使用<xref:System.Windows.Media.Brushes.Transparent%2A>例如，窗口将保持不透明。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-168">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="ccb4c-169">这意味着无法查看桌面和任何正在运行的应用程序"beneath"窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-169">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="ccb4c-170">若要启用此类型的透明度，<xref:System.Windows.Window.AllowsTransparency%2A>必须设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-170">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="ccb4c-171"><xref:System.Windows.Window.AllowsTransparency%2A> 存在来帮助创建非矩形窗口，并因此，当<xref:System.Windows.Window.AllowsTransparency%2A>设置为`true`，窗口<xref:System.Windows.Window.WindowStyle%2A>属性必须设置为<xref:System.Windows.WindowStyle.None>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-171"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-172">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-172">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-173">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-173">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="ccb4c-174">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-174">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-175">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-175">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-176">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-176">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowsTransparencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.AllowsTransparencyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-177">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-177">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberSignature Language="F#" Value="override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.ArrangeOverride arrangeBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds">
          <span data-ttu-id="ccb4c-178">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-178">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-179">Override this method to arrange and size a window and its child elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-179">Override this method to arrange and size a window and its child elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ccb4c-180">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-180">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-181"><xref:System.Windows.Window.ArrangeOverride%2A> 时，将不调用<xref:System.Windows.UIElement.Visibility%2A>属性具有的值<xref:System.Windows.Visibility.Collapsed>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-181"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="ccb4c-182">如果值<xref:System.Windows.UIElement.Visibility%2A>属性<xref:System.Windows.Visibility.Hidden>或<xref:System.Windows.Visibility.Visible>，<xref:System.Windows.Window.ArrangeOverride%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-182">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-183">时请<xref:System.Windows.Window.Show%2A>或<xref:System.Windows.Window.ShowDialog%2A>调用，<xref:System.Windows.UIElement.Visibility%2A>属性<xref:System.Windows.Window>设置为<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-183">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="window.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-184">Manually closes a <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-184">Manually closes a <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-185">A<xref:System.Windows.Window>可以使用几，之一关闭的已知、 系统提供的机制位于其标题栏中，包括：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-185">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="ccb4c-186">ALT + F4。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-186">ALT+F4.</span></span>  
  
-   <span data-ttu-id="ccb4c-187">系统菜单&#124;**关闭**。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-187">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="ccb4c-188">**关闭**按钮。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-188">**Close** button.</span></span>  
  
 <span data-ttu-id="ccb4c-189">A<xref:System.Windows.Window>也可以通过使用多个已知机制之一的客户端区域中提供的开发人员，包括关闭：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-189">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="ccb4c-190">**文件** &#124; **退出**主窗口上。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-190">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="ccb4c-191">**文件** &#124; **关闭**或**关闭**子窗口上的按钮。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-191">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-192">**确定**和**取消**出现在对话框中的按钮也是开发人员提供，尽管将可能集<xref:System.Windows.Window.DialogResult%2A>，这会自动关闭打开窗口中，已通过调用<xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-192">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="ccb4c-193">这些机制要求你显式调用<xref:System.Windows.Window.Close%2A>来关闭窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-193">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-194">如果一个窗口，打开通过调用<xref:System.Windows.Window.ShowDialog%2A>，且<xref:System.Windows.Controls.Button>与其<xref:System.Windows.Controls.Button.IsCancel%2A>属性设置为 true，将自动关闭，或者单击该按钮，或按下 esc 键时。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-194">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="ccb4c-195">如果使用打开窗口<xref:System.Windows.Window.Show%2A>，但<xref:System.Windows.Window.Close%2A>必须显式调用，例如从<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件处理程序<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-195">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="ccb4c-196">关闭窗口会导致<xref:System.Windows.Window.Closing>引发事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-196">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="ccb4c-197">如果<xref:System.Windows.Window.Closing>不取消事件，将发生以下情况：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-197">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="ccb4c-198"><xref:System.Windows.Window>从删除<xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType>(如果<xref:System.Windows.Application>对象存在)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-198">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="ccb4c-199"><xref:System.Windows.Window>从所有者删除<xref:System.Windows.Window>如果所有者/附属关系已建立之前拥有<xref:System.Windows.Window>所示和所有者之后<xref:System.Windows.Window>已打开。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-199">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="ccb4c-200">引发 <xref:System.Windows.Window.Closed> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-200">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="ccb4c-201">非托管资源创建的<xref:System.Windows.Window>释放。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-201">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="ccb4c-202">如果<xref:System.Windows.Window.ShowDialog%2A>调用以显示<xref:System.Windows.Window>，<xref:System.Windows.Window.ShowDialog%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-202">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="ccb4c-203">关闭<xref:System.Windows.Window>会导致它拥有即将关闭任何 windows。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-203">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="ccb4c-204">此外，关闭<xref:System.Windows.Window>可能会导致应用程序停止正在运行的具体取决于如何<xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType>属性设置。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-204">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-205">窗口承载在浏览器时，不能调用此方法。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-205">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-206">下面的示例演示**文件** &#124; **退出**菜单正在处理以显式调用<xref:System.Windows.Window.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-206">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="ccb4c-207">若要使用所有窗口和不受限制的用户输入的事件的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-207">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="ccb4c-208">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-208">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberSignature Language="F#" Value="member this.Closed : EventHandler " Usage="member this.Closed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-209">Occurs when the window is about to close.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-209">Occurs when the window is about to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-210">一旦将引发此事件，不能阻止结束指定窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-210">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-211">
            <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-211">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberSignature Language="F#" Value="member this.Closing : System.ComponentModel.CancelEventHandler " Usage="member this.Closing : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-212">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-212">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-213"><xref:System.Windows.Window.Closing> 可以处理以检测何时关闭窗口 (例如，当<xref:System.Windows.Window.Close%2A>称为)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-213"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="ccb4c-214">此外，<xref:System.Windows.Window.Closing>可用来阻止关闭窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-214">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="ccb4c-215">若要阻止关闭窗口，可以设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.ComponentModel.CancelEventArgs>参数`true`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-215">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="ccb4c-216"><xref:System.Windows.Window.Closing>引发事件时<xref:System.Windows.Window.Close%2A>调用时，如果单击窗口关闭按钮时，或者如果用户按 ALT + F4。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-216">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="ccb4c-217">如果拥有的窗口已打开由其所有者窗口中使用<xref:System.Windows.Window.Show%2A>，并且所有者窗口已关闭，拥有的窗口<xref:System.Windows.Window.Closing>不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-217">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="ccb4c-218">如果所有者窗口已关闭 (请参阅<xref:System.Windows.Window.Owner%2A>)，<xref:System.Windows.Window.Closing>上拥有窗口不引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-218">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="ccb4c-219">如果<xref:System.Windows.Application.Shutdown%2A>调用时，<xref:System.Windows.Window.Closing>引发的每个窗口的事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-219">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="ccb4c-220">但是，如果<xref:System.Windows.Window.Closing>是取消，会忽略取消操作。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-220">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="ccb4c-221">如果在会话结束，因为用户注销或关机，<xref:System.Windows.Window.Closing>则不会引发; 处理<xref:System.Windows.Application.SessionEnding>取消应用程序闭包的代码中实现。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-221">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="ccb4c-222">如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要包含重新实例化窗口每次则显示它，你可以处理<xref:System.Windows.Window.Closing>事件，取消它，并调用<xref:System.Windows.Window.Hide%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-222">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="ccb4c-223">然后，可以调用<xref:System.Windows.Window.Show%2A>可重新打开它的同一个实例。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-223">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-224">下面的示例演示<xref:System.Windows.Window>，它确定它是否需要用户干预来关闭。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-224">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-225">
            <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-225">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" />
      <MemberSignature Language="F#" Value="member this.ContentRendered : EventHandler " Usage="member this.ContentRendered : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-226">Occurs after a window's content has been rendered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-226">Occurs after a window's content has been rendered.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-227">如果窗口不具有任何内容，则不会引发此事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-227">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberSignature Language="F#" Value="member this.Deactivated : EventHandler " Usage="member this.Deactivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-228">Occurs when a window becomes a background window.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-228">Occurs when a window becomes a background window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-229">停用一个窗口 （变成后台窗口） 时：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-229">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="ccb4c-230">用户切换到当前应用程序中的另一个窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-230">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="ccb4c-231">用户在通过使用 ALT + TAB 或使用任务管理器切换到另一个应用程序中的窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-231">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="ccb4c-232">用户单击另一个应用程序中的窗口任务栏按钮。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-232">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="ccb4c-233">需要时变成停用处理进行检测的 Windows<xref:System.Windows.Window.Deactivated>事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-233">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="ccb4c-234">窗口首次停用后，它可能会重新激活并在其生存期内多次停用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-234">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="ccb4c-235">如果应用程序的行为或状态取决于其激活状态，它可以检查<xref:System.Windows.Window.IsActive%2A>来确定在哪种激活状态。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-235">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="ccb4c-236">应用程序也可以是<xref:System.Windows.Application.Deactivated>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-236">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.DialogResult : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Window.DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-237">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-237">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-238">A<see cref="T:System.Nullable`1" />类型的值<see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-238">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="ccb4c-239">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-239">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-240"><xref:System.Windows.Window.DialogResult%2A> 可以显示一个对话框，以确定用户是否接受代码中使用 (`true`) 或已取消 (`false`) 对话框。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-240"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="ccb4c-241">如果已接受对话框中，这表示打开对话框中检索用户收集的数据并将其处理的代码。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-241">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="ccb4c-242">如果已取消对话框中，但是，这表明调用的代码应停止任何进一步处理。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-242">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="ccb4c-243">默认情况下，当用户执行下列其中一项取消对话框中：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-243">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="ccb4c-244">PressesALT + F4。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-244">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="ccb4c-245">单击**关闭**按钮。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-245">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="ccb4c-246">选择**关闭**从系统菜单。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-246">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="ccb4c-247">在所有这些情况下，<xref:System.Windows.Window.DialogResult%2A>是`false`默认情况下。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-247">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="ccb4c-248">对话框中通常会提供一个用于取消一个对话框，为按钮的特殊按钮其<xref:System.Windows.Controls.Button.IsCancel%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-248">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="ccb4c-249">或者它按下时，或按下 ESC 键时，这种方式配置一个按钮将自动关闭窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-249">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="ccb4c-250">在这些情况下，任一<xref:System.Windows.Window.DialogResult%2A>保持`false`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-250">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="ccb4c-251">对话框中通常还提供一个接受按钮，这是按钮其<xref:System.Windows.Controls.Button.IsDefault%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-251">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="ccb4c-252">这种方式配置一个按钮将引发其<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件时按下它或 ENTER 键。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-252">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="ccb4c-253">但是，它不会自动关闭的对话框中，也不会将设置<xref:System.Windows.Window.DialogResult%2A>到`true`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-253">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="ccb4c-254">你需要手动编写此代码中，通常从<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件处理程序的默认按钮。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-254">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="ccb4c-255"><xref:System.Windows.Window.DialogResult%2A> 是`null`时显示的对话框但不接受或已取消。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-255"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="ccb4c-256">在对话框关闭后，你可以从返回的值获取的对话框结果<xref:System.Windows.Window.ShowDialog%2A>方法，或通过检查<xref:System.Windows.Window.DialogResult%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-256">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="ccb4c-257"><xref:System.Windows.Window.DialogResult%2A> 仅时可以设置<xref:System.Windows.Window>打开通过调用其<xref:System.Windows.Window.ShowDialog%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-257"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-258">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-258">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-259">下面的示例演示如何配置确定按钮和取消按钮以返回适当<xref:System.Windows.Window.DialogResult%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-259">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-260">
            <see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-260">
              <see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          </span>
          <span data-ttu-id="ccb4c-261">-or-  <see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-261">-or-  <see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberSignature Language="F#" Value="member this.DpiChanged : System.Windows.DpiChangedEventHandler " Usage="member this.DpiChanged : System.Windows.DpiChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-262">Occurs after the DPI of the screen on which the Window is displayed changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-262">Occurs after the DPI of the screen on which the Window is displayed changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DpiChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Window.DpiChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-263">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-263">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberSignature Language="F#" Value="member this.DragMove : unit -&gt; unit" Usage="window.DragMove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-264">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-264">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-265">鼠标左键时必须按下<xref:System.Windows.Window.DragMove%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-265">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="ccb4c-266">当按下鼠标左键时进行检测的一种方法是处理<xref:System.Windows.UIElement.MouseLeftButtonDown>事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-266">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="ccb4c-267">当<xref:System.Windows.Window.DragMove%2A>调用时，左侧必须窗口的工作区的暴露区域上方按下鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-267">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-268">窗口承载在浏览器时，不能调用此方法。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-268">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-269">下面的示例演示如何重写<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>调用<xref:System.Windows.Window.DragMove%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-269">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-270">The left mouse button is not down.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-270">The left mouse button is not down.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="ccb4c-271">若要将窗口拖动的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-271">for permission to drag a window.</span>
          </span>
          <span data-ttu-id="ccb4c-272">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-272">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="static member GetWindow : System.Windows.DependencyObject -&gt; System.Windows.Window" Usage="System.Windows.Window.GetWindow dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="ccb4c-273">The dependency object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-273">The dependency object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-274">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-274">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ccb4c-275">A <see cref="T:System.Windows.Window" /> reference to the host window.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-275">A <see cref="T:System.Windows.Window" /> reference to the host window.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ccb4c-276">
            <paramref name="dependencyObject" /> is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-276">
              <paramref name="dependencyObject" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="window.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-277">Makes a window invisible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-277">Makes a window invisible.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-278">当其处于隐藏状态，不关闭窗口并且不<xref:System.Windows.Window.Closing>也不<xref:System.Windows.Window.Closed>引发事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-278">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="ccb4c-279">相反，窗口的<xref:System.Windows.UIElement.Visibility%2A>属性设置为<xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-279">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ccb4c-280">如果一个窗口是应用程序的<xref:System.Windows.Application.MainWindow%2A>和应用程序的<xref:System.Windows.Application.ShutdownMode%2A>是<xref:System.Windows.ShutdownMode.OnMainWindowClose>，应用程序不会关闭。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-280">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="ccb4c-281">同样，应用程序不会关闭窗口是唯一的窗口，并且应用程序的关闭模式是如果<xref:System.Windows.ShutdownMode.OnLastWindowClose>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-281">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="ccb4c-282">如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要重新实例化窗口每次则显示它，你可以处理<xref:System.Windows.Window.Closing>事件，取消它，并调用<xref:System.Windows.Window.Hide%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-282">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="ccb4c-283">然后，可以调用<xref:System.Windows.Window.Show%2A>对同一个实例，重新打开它。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-283">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-284">
            <see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-284">
              <see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Icon : System.Windows.Media.ImageSource with get, set" Usage="System.Windows.Window.Icon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-285">Gets or sets a window's icon.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-285">Gets or sets a window's icon.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-286">
            <see cref="T:System.Windows.Media.ImageSource" />对象，表示图标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-286">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-287">Windows Presentation Foundation (WPF) 独立应用程序有两种类型的图标：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-287">Windows Presentation Foundation (WPF) standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="ccb4c-288">使用指定的一个程序集图标`<ApplicationIcon>`属性在应用程序的项目中生成文件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-288">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="ccb4c-289">此图标用作程序集桌面图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-289">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="ccb4c-290">在调试时 Visual Studio 中，您的图标不会由于宿主进程。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-290">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="ccb4c-291">如果你运行可执行文件，则将显示图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-291">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="ccb4c-292">有关详细信息，请参阅[托管进程 (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-292">For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="ccb4c-293">每个通过将设置指定的窗口的一个图标<xref:System.Windows.Window.Icon%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-293">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="ccb4c-294">对每个窗口中，在其标题栏中，其任务栏按钮，以及其 ALT TAB 应用程序选择列表项，则使用此图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-294">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="ccb4c-295">WPF 窗口始终显示的图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-295">A WPF window always displays an icon.</span></span> <span data-ttu-id="ccb4c-296">当未提供通过设置<xref:System.Windows.Window.Icon%2A>，WPF 选择要显示的图标根据以下规则：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-296">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, WPF chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="ccb4c-297">如果指定，请使用程序集图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-297">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="ccb4c-298">如果未指定的程序集图标，则使用默认 Microsoft Windows 图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-298">If the assembly icon is not specified, use the default Microsoft Windows icon.</span></span>  
  
 <span data-ttu-id="ccb4c-299">如果你使用<xref:System.Windows.Window.Icon%2A>若要指定自定义窗口图标，可以通过设置来还原默认应用程序图标<xref:System.Windows.Window.Icon%2A>到`null`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-299">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="ccb4c-300">一个图标可在有许多种情况下，在 Windows 中，包括标题栏的一个窗口，窗口中，ALT + TAB 文件选择列表的任务栏中显示。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-300">A single icon can be used in a variety of ways in Windows, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="ccb4c-301">其中每个演示使用不同的大小; 的图标ALT + TAB 文件选择列表中显示 32 x 32 像素的图标时，16 x 16 像素的图标被显示在窗口的标题栏和任务栏中。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-301">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="ccb4c-302">某些应用程序，如[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]，提供**视图**菜单，您可以选择你想要查看的图标的大小。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-302">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="ccb4c-303">若要适应不同的显示大小，图标文件由组成一个或多个实际图标其中每个表示面向特定的大小和颜色深度的图标版本。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-303">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="ccb4c-304">例如，一个图标可能只有单个 16 x 16 像素图标具有 16 种颜色，而另一个可能包含 16 x 16 像素和 32 x 32 像素图标具有 16 种颜色和 256 种颜色。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-304">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="ccb4c-305">如果在图标文件中，存在于所有可能的大小和颜色深度图标<xref:System.Windows.Window>将使用相应图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-305">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="ccb4c-306">如果图标文件包含所有可能的图标的一个子集<xref:System.Windows.Window>递减大小和颜色深度的顺序使用下一个最适当的图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-306">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="ccb4c-307">结果是一个图标将始终使用由<xref:System.Windows.Window>，尽管所用的图标不可能以目标所需的大小和颜色深度。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-307">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="ccb4c-308">例如，具有 16 种颜色 16 x 16 像素的图标还可能用于进行显示，作为具有 256 种颜色 32 x 32 像素的图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-308">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="ccb4c-309">这可能会导致意外的视觉效果，如像素化，但可避免通过创建的所有目标的大小和颜色深度图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-309">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-310">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-310">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-311">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-311">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-312">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-312">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="ccb4c-313">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-313">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-314">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-314">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-315">下面的示例演示如何以设置窗口图标。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-315">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="ccb4c-316">若要设置图标的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-316">for permission to set the icon.</span>
          </span>
          <span data-ttu-id="ccb4c-317">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-317">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IconProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IconProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-318">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-318">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Windows.Window.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-319">Gets a value that indicates whether the window is active.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-319">Gets a value that indicates whether the window is active.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-320">
            <see langword="true" /> 如果窗口处于活动状态;否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-320">
              <see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ccb4c-321">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-321">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-322">活动窗口是用户的当前前景色窗口，并具有焦点的标题栏活动外观由表示。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-322">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="ccb4c-323">活动窗口也将未显式设置的所有顶级窗口的顶级<xref:System.Windows.Window.Topmost%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-323">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-324">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-324">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-325">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-325">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="ccb4c-326">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-326">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-327">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-327">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsActiveProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IsActiveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-328">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-328">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Left : double with get, set" Usage="System.Windows.Window.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-329">Gets or sets the position of the window's left edge, in relation to the desktop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-329">Gets or sets the position of the window's left edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-330">窗口的位置的左边缘，逻辑单位 (1/96th 每英寸)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-330">The position of the window's left edge, in logical units (1/96th of an inch).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-331">当<xref:System.Windows.Window>最大化或最小化，左边的缘的还原点的此值表示<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-331">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="ccb4c-332">不能通过样式设置此属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-332">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="ccb4c-333">如果不指定一个值，<xref:System.Windows.Window.Left%2A>设置为系统默认值。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-333">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="ccb4c-334">此外可以通过设置指定的系统默认值<xref:System.Windows.Window.Left%2A>到<xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-334">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="ccb4c-335">既不<xref:System.Double.NegativeInfinity>也不<xref:System.Double.PositiveInfinity>是有效值<xref:System.Windows.Window.Left%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-335">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-336">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-336">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-337">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-337">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-338">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-338">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="ccb4c-339">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-339">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-340">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-340">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LeftProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.LeftProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-341">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-341">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-342">Occurs when the window's location changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-342">Occurs when the window's location changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-343">窗口的位置会发生更改时：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-343">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="ccb4c-344">用户将窗口移动通过拖动窗口的标题栏。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-344">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="ccb4c-345">一个窗口移动后<xref:System.Windows.Window.DragMove%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-345">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="ccb4c-346">请<xref:System.Windows.Window.Left%2A>或<xref:System.Windows.Window.Top%2A>以编程方式设置属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-346">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="ccb4c-347">**移动**选择窗口的系统菜单的菜单项。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-347">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="ccb4c-348"><xref:System.Windows.Window.WindowState%2A>属性更改。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-348">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.Window.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-349">Gets an enumerator for a window's logical child elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-349">Gets an enumerator for a window's logical child elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-350">
            <see cref="T:System.Collections.IEnumerator" />窗口的逻辑子元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-350">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="ccb4c-351">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-351">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span>
          </span>
          <span data-ttu-id="ccb4c-352">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-352">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-353">Override this method to measure the size of a window.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-353">Override this method to measure the size of a window.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ccb4c-354">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-354">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-355"><xref:System.Windows.Window.MeasureOverride%2A> 时，将不调用<xref:System.Windows.UIElement.Visibility%2A>属性具有的值<xref:System.Windows.Visibility.Collapsed>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-355"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="ccb4c-356">如果值<xref:System.Windows.UIElement.Visibility%2A>属性<xref:System.Windows.Visibility.Hidden>或<xref:System.Windows.Visibility.Visible>，<xref:System.Windows.Window.MeasureOverride%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-356">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-357">时请<xref:System.Windows.Window.Show%2A>或<xref:System.Windows.Window.ShowDialog%2A>调用，<xref:System.Windows.UIElement.Visibility%2A>属性<xref:System.Windows.Window>设置为<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-357">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnActivated : EventArgs -&gt; unit&#xA;override this.OnActivated : EventArgs -&gt; unit" Usage="window.OnActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-358">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-358">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-359">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-359">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-360"><xref:System.Windows.Window.OnActivated%2A> 引发 <xref:System.Windows.Window.Activated> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-360"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="ccb4c-361">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnActivated%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-361">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="ccb4c-362">重写的方法必须调用<xref:System.Windows.Window.OnActivated%2A>基本类如果<xref:System.Windows.Window.Activated>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-362">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosed : EventArgs -&gt; unit&#xA;override this.OnClosed : EventArgs -&gt; unit" Usage="window.OnClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-363">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-363">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-364">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-364">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-365"><xref:System.Windows.Window.OnClosed%2A> 引发 <xref:System.Windows.Window.Closed> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-365"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="ccb4c-366">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnClosed%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-366">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="ccb4c-367">重写的方法必须调用<xref:System.Windows.Window.OnClosed%2A>基本类如果<xref:System.Windows.Window.Closed>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-367">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="window.OnClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-368">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-368">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-369">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-369">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-370"><xref:System.Windows.Window.OnClosing%2A> 引发 <xref:System.Windows.Window.Closing> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-370"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="ccb4c-371">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnClosing%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-371">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="ccb4c-372">重写的方法必须调用<xref:System.Windows.Window.OnClosing%2A>基本类如果<xref:System.Windows.Window.Closing>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-372">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberSignature Language="F#" Value="override this.OnContentChanged : obj * obj -&gt; unit" Usage="window.OnContentChanged (oldContent, newContent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent">
          <span data-ttu-id="ccb4c-373">A reference to the root of the old content tree.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-373">A reference to the root of the old content tree.</span>
          </span>
        </param>
        <param name="newContent">
          <span data-ttu-id="ccb4c-374">A reference to the root of the new content tree.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-374">A reference to the root of the new content tree.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-375">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-375">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentRendered : EventArgs -&gt; unit&#xA;override this.OnContentRendered : EventArgs -&gt; unit" Usage="window.OnContentRendered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-376">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-376">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-377">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-377">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-378"><xref:System.Windows.Window.OnContentRendered%2A> 引发 <xref:System.Windows.Window.ContentRendered> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-378"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="ccb4c-379">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnContentRendered%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-379">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="ccb4c-380">重写的方法必须调用<xref:System.Windows.Window.OnContentRendered%2A>基本类如果<xref:System.Windows.Window.ContentRendered>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-380">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="window.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-381">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-381">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ccb4c-382">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-382">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-383">此方法将替代<xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-383">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeactivated : EventArgs -&gt; unit&#xA;override this.OnDeactivated : EventArgs -&gt; unit" Usage="window.OnDeactivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-384">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-384">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-385">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-385">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-386"><xref:System.Windows.Window.OnDeactivated%2A> 引发 <xref:System.Windows.Window.Deactivated> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-386"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="ccb4c-387">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnDeactivated%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-387">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="ccb4c-388">重写的方法必须调用<xref:System.Windows.Window.OnDeactivated%2A>基本类如果<xref:System.Windows.Window.Deactivated>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-388">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChanged : System.Windows.DpiScale * System.Windows.DpiScale -&gt; unit&#xA;override this.OnDpiChanged : System.Windows.DpiScale * System.Windows.DpiScale -&gt; unit" Usage="window.OnDpiChanged (oldDpi, newDpi)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" />
      </Parameters>
      <Docs>
        <param name="oldDpi">
          <span data-ttu-id="ccb4c-389">The previous DPI scale setting.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-389">The previous DPI scale setting.</span>
          </span>
        </param>
        <param name="newDpi">
          <span data-ttu-id="ccb4c-390">The new DPI scale setting.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-390">The new DPI scale setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-391">Called when the DPI at which this window is rendered changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-391">Called when the DPI at which this window is rendered changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="window.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-392">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-392">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-393">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-393">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-394"><xref:System.Windows.Window.OnLocationChanged%2A> 引发 <xref:System.Windows.Window.LocationChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-394"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="ccb4c-395">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnLocationChanged%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-395">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="ccb4c-396">重写的方法必须调用<xref:System.Windows.Window.OnLocationChanged%2A>基本类如果<xref:System.Windows.Window.LocationChanged>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-396">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="window.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-397">The data for the event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-397">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-398">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-398">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-399">此实现不会更改已处理的状态 (<xref:System.Windows.RoutedEventArgs.Handled%2A>属性) 的<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件数据。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-399">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="ccb4c-400">
            <para>如果你重写<see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />，始终调用基实现你<see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />实现。如果调用基实现会使从处理事件，这可能会改变最终类的运行时行为的基类，这些类。你可以调用基实现之前或之后你特殊的处理，具体取决于你的要求。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-400">
              <para>If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation. Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class. You can call the base implementation either before or after your special handling, depending on your requirements.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSourceInitialized : EventArgs -&gt; unit&#xA;override this.OnSourceInitialized : EventArgs -&gt; unit" Usage="window.OnSourceInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-401">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-401">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-402">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-402">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-403"><xref:System.Windows.Window.OnSourceInitialized%2A> 引发 <xref:System.Windows.Window.SourceInitialized> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-403"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="ccb4c-404">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnSourceInitialized%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-404">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="ccb4c-405">重写的方法必须调用<xref:System.Windows.Window.OnSourceInitialized%2A>基本类如果<xref:System.Windows.Window.SourceInitialized>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-405">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStateChanged : EventArgs -&gt; unit&#xA;override this.OnStateChanged : EventArgs -&gt; unit" Usage="window.OnStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ccb4c-406">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-406">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-407">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-407">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-408"><xref:System.Windows.Window.OnStateChanged%2A> 引发 <xref:System.Windows.Window.StateChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-408"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="ccb4c-409">派生自类型<xref:System.Windows.Window>可能会重写<xref:System.Windows.Window.OnStateChanged%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-409">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="ccb4c-410">重写的方法必须调用<xref:System.Windows.Window.OnStateChanged%2A>基本类如果<xref:System.Windows.Window.StateChanged>需要引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-410">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="ccb4c-411">The previous parent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-411">The previous parent.</span>
          </span>
          <span data-ttu-id="ccb4c-412">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-412">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ccb4c-413">Called when the parent of the window is changed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-413">Called when the parent of the window is changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnedWindows : System.Windows.WindowCollection" Usage="System.Windows.Window.OwnedWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-414">Gets a collection of windows for which this window is the owner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-414">Gets a collection of windows for which this window is the owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-415">A<see cref="T:System.Windows.WindowCollection" />包含对此窗口所有者的窗口为其的引用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-415">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-416">附属的窗口是一个其<xref:System.Windows.Window.Owner%2A>属性设置为另一个窗口，这被称为所有者窗口的引用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-416">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="ccb4c-417">若要查找所有者窗口拥有的所有窗口，可以枚举<xref:System.Windows.WindowCollection>返回<xref:System.Windows.Window.OwnedWindows%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-417">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-418">下面的示例演示如何枚举<xref:System.Windows.Window.OwnedWindows%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-418">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Windows.Window with get, set" Usage="System.Windows.Window.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-419">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-419">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-420">A<see cref="T:System.Windows.Window" />对象，表示此所有者<see cref="T:System.Windows.Window" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-420">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-421">通过调用由父窗口打开子窗口时<xref:System.Windows.Window.ShowDialog%2A>，父和子窗口之间建立的隐式关系。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-421">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="ccb4c-422">此关系强制执行某些行为，包括最小化、 最大化，和还原。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-422">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="ccb4c-423">通过调用由父窗口创建子窗口时<xref:System.Windows.Window.Show%2A>，但是，子窗口没有与父窗口的关系。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-423">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="ccb4c-424">这表示：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-424">This means that:</span></span>  
  
-   <span data-ttu-id="ccb4c-425">子窗口没有向父窗口的引用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-425">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="ccb4c-426">子窗口的行为不依赖于父窗口中; 的行为这两个窗口能够覆盖另一个，或最小化、 最大化，并还原相互独立。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-426">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="ccb4c-427">若要让你可以创建子窗口和父窗口，之间的关系<xref:System.Windows.Window>支持所有权的概念。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-427">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="ccb4c-428">建立所有权时<xref:System.Windows.Window.Owner%2A>一个窗口 （拥有窗口） 的属性设置为另一个窗口 （所有者窗口） 的引用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-428">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="ccb4c-429">一旦建立这种关系，则会展现的以下行为：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-429">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="ccb4c-430">最小化所有者窗口时，其拥有的所有 windows 最小都化以及。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-430">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="ccb4c-431">如果拥有的窗口最小化，其所有者不降至最低。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-431">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="ccb4c-432">如果所有者窗口最大化时，将还原所有者窗口和其拥有的 windows。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-432">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="ccb4c-433">所有者窗口绝不会覆盖拥有的窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-433">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="ccb4c-434">拥有不是使用的 windows<xref:System.Windows.Window.ShowDialog%2A>不是模式对话框。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-434">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="ccb4c-435">用户仍可以与所有者窗口交互。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-435">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="ccb4c-436">如果你关闭所有者窗口，其拥有的窗口也会关闭。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-436">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="ccb4c-437">如果拥有的窗口已打开由其所有者窗口中使用<xref:System.Windows.Window.Show%2A>，并且所有者窗口已关闭，拥有的窗口<xref:System.Windows.Window.Closing>不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-437">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="ccb4c-438">当通过调用打开子窗口<xref:System.Windows.Window.ShowDialog%2A>，还应设置<xref:System.Windows.Window.Owner%2A>子窗口的属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-438">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="ccb4c-439">如果没有，你的用户将无法还原按任务栏按钮的子窗口和父窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-439">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="ccb4c-440">相反，按任务栏按钮将生成 windows 中，包括子与父窗口中的，以帮助用户选择; 的列表将还原所选的窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-440">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ccb4c-441">此外应设置<xref:System.Windows.Window.Owner%2A>属性窗口，打开通过调用上的<xref:System.Windows.Window.ShowDialog%2A>以确保使用正确的行为。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-441">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-442">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-442">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-443">下面的示例演示如何建立/拥有所有者的关系。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-443">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ccb4c-444">A window tries to own itself  -or-  Two windows try to own each other.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-444">A window tries to own itself  -or-  Two windows try to own each other.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-445">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" />  -or-  The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-445">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" />  -or-  The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="ccb4c-446">若要使用所有窗口和不受限制的用户输入的事件的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-446">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="ccb4c-447">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-447">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeMode : System.Windows.ResizeMode with get, set" Usage="System.Windows.Window.ResizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-448">Gets or sets the resize mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-448">Gets or sets the resize mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-449">A<see cref="T:System.Windows.ResizeMode" />值，该值指定的大小调整模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-449">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-450">有四个选项：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-450">There are four options:</span></span>  
  
-   <span data-ttu-id="ccb4c-451">**NoResize**。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-451">**NoResize**.</span></span> <span data-ttu-id="ccb4c-452">用户不能调整窗口大小。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-452">The user cannot resize the window.</span></span> <span data-ttu-id="ccb4c-453">最大化和最小化框不会显示。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-453">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="ccb4c-454">**CanMinimize**。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-454">**CanMinimize**.</span></span> <span data-ttu-id="ccb4c-455">用户只能将窗口最小和从任务栏中还原它。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-455">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="ccb4c-456">同时会显示最小化和最大化框，但仅最小化框处于启用状态。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-456">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="ccb4c-457">**CanResize**。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-457">**CanResize**.</span></span> <span data-ttu-id="ccb4c-458">用户具有完全能够调整大小窗口中，在窗口中使用最小化和最大化框中，并可拖动大纲。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-458">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="ccb4c-459">显示最小化和最大化框并将其启用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-459">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="ccb4c-460">（默认值）。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-460">(Default).</span></span>  
  
-   <span data-ttu-id="ccb4c-461">**CanResizeWithGrip**。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-461">**CanResizeWithGrip**.</span></span> <span data-ttu-id="ccb4c-462">此选项具有与相同的功能<xref:System.Windows.ResizeMode.CanResize>，但将"大小调整手柄"添加到窗口右下角。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-462">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-463">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-463">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-464">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-464">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-465">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-465">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="ccb4c-466">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-466">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ResizeModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ResizeModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-467">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-467">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.RestoreBounds : System.Windows.Rect" Usage="System.Windows.Window.RestoreBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-468">Gets the size and location of a window before being either minimized or maximized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-468">Gets the size and location of a window before being either minimized or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-469">A <see cref="T:System.Windows.Rect" /> ，它指定的大小和窗口的位置在前最小化或最大化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-469">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-470">还原矩形是之前它是最小化或最大化窗口占用的区域。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-470">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="ccb4c-471">你可以使用<xref:System.Windows.Window.RestoreBounds%2A>之前关闭应用程序时，保存的最后一个大小和窗口的位置并在下次应用程序开始将窗口还原到其处于用户的方式检索这些值。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-471">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="ccb4c-472">如果你查询<xref:System.Windows.Window.RestoreBounds%2A>显示窗口之前或之后它已关闭，<xref:System.Windows.Rect.Empty%2A>返回。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-472">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-473">当一个窗口托管的浏览器中时，无法获取此属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-473">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-474">下面的示例使用<xref:System.Windows.Window.RestoreBounds%2A>和独立存储来确保的大小和窗口的位置的相同它们的显示窗口时在前一次。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-474">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="ccb4c-475">若要查询的大小和窗口的位置的权限边界矩形。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-475">for permission to query for the size and location of a window's bounding rectangle.</span>
          </span>
          <span data-ttu-id="ccb4c-476">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-476">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="window.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-477">Opens a window and returns without waiting for the newly opened window to close.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-477">Opens a window and returns without waiting for the newly opened window to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-478">当<xref:System.Windows.Window>实例化类时，它不是默认情况下可见。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-478">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="ccb4c-479"><xref:System.Windows.Window.Show%2A> 显示了一个窗口并立即返回，而不等待窗口即将关闭。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-479"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="ccb4c-480">因此，已打开的窗口不会阻止用户与其他 windows 应用程序中进行交互。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-480">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="ccb4c-481">此类型的窗口称为*无模式*窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-481">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="ccb4c-482">无模式窗口的常见示例包括属性窗口、 工具箱和调色板。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-482">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="ccb4c-483">若要限制用户交互与特定窗口，窗口必须通过调用打开<xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-483">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="ccb4c-484">通过调用打开一个窗口<xref:System.Windows.Window.Show%2A>未不自动具有与打开的窗口之间的关系; 具体而言，打开窗口不知道哪个窗口打开它。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-484">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="ccb4c-485">可以使用建立这种关系<xref:System.Windows.Window.Owner%2A>属性和托管使用<xref:System.Windows.Window.OwnedWindows%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-485">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="ccb4c-486">调用<xref:System.Windows.Window.Show%2A>实现相同的最终结果，作为设置<xref:System.Windows.UIElement.Visibility%2A>属性<xref:System.Windows.Window>对象传递给<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-486">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="ccb4c-487">但是，没有从计时角度来看这两者之间的区别。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-487">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="ccb4c-488">调用<xref:System.Windows.Window.Show%2A>是之后才会返回一个同步操作<xref:System.Windows.FrameworkElement.Loaded>引发子窗口上的事件：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-488">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="ccb4c-489">设置<xref:System.Windows.UIElement.Visibility%2A>，但是，将立即返回的异步操作：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-489">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="ccb4c-490">设置时<xref:System.Windows.UIElement.Visibility%2A>，注册之前设置任何窗口事件<xref:System.Windows.UIElement.Visibility%2A>不可能在其中你设置的方法后直到引发<xref:System.Windows.UIElement.Visibility%2A>执行完毕。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-490">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-491">下面的示例演示如何打开一个无模式窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-491">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-492">
            <see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-492">
              <see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowActivated : bool with get, set" Usage="System.Windows.Window.ShowActivated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-493">Gets or sets a value that indicates whether a window is activated when first shown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-493">Gets or sets a value that indicates whether a window is activated when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-494">
            <see langword="true" /> 如果首次显示; 时，将激活窗口否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-494">
              <see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ccb4c-495">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-495">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-496">当与窗口其<xref:System.Windows.Window.ShowActivated%2A>属性设置为`false`是打开，显示窗口不激活并将其<xref:System.Windows.Window.Activated>直到用户手动激活窗口通过选择它，则不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-496">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="ccb4c-497">窗口被选中之后，它激活，并且通常会停用。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-497">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="ccb4c-498">若要防止当它打开后，激活窗口<xref:System.Windows.Window.ShowActivated%2A>属性必须设置为`false`显示窗口之前 (通过调用<xref:System.Windows.Window.Show%2A>); 设置<xref:System.Windows.Window.ShowActivated%2A>到`false`窗口将显示不起作用后。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-498">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="ccb4c-499">设置<xref:System.Windows.Window.ShowActivated%2A>到`false`通过调用以模式方式打开的窗口上<xref:System.Windows.Window.ShowDialog%2A>，无任何实际影响。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-499">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="ccb4c-500">尽管未将激活模式窗口，模式窗口会阻止用户激活任何其他打开的应用程序窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-500">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-501">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-501">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-502">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-502">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="ccb4c-503">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-503">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-504">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-504">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-505">下面的示例演示如何使用标记来配置要打开，也不正在激活的窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-505">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="ccb4c-506">下面的示例演示如何使用代码来配置要打开，也不它正在激活的窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-506">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowActivatedProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowActivatedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-507">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-507">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : unit -&gt; Nullable&lt;bool&gt;" Usage="window.ShowDialog " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-508">Opens a window and returns only when the newly opened window is closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-508">Opens a window and returns only when the newly opened window is closed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ccb4c-509">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-509">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span>
          </span>
          <span data-ttu-id="ccb4c-510">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-510">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-511">当<xref:System.Windows.Window>实例化类时，它不是默认情况下可见。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-511">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="ccb4c-512"><xref:System.Windows.Window.ShowDialog%2A> 显示的窗口、 禁用应用程序中的所有其他窗口和窗口关闭时，才返回。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-512"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="ccb4c-513">这种类型的窗口称为*模式*窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-513">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="ccb4c-514">模式窗口主要用作对话框。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-514">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="ccb4c-515">对话框中是窗口的一种特殊类型的应用程序用于与用户来完成任务，例如打开文件或打印文档进行交互。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-515">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="ccb4c-516">对话框通常允许用户接受或取消它们已为其显示之前关闭对话框中的任务。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-516">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="ccb4c-517"><xref:System.Windows.Window.ShowDialog%2A> 返回<xref:System.Nullable%601><xref:System.Boolean>值，该值指定是否接受或取消活动。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-517"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="ccb4c-518">返回值的值<xref:System.Windows.Window.DialogResult%2A>窗口关闭之前的属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-518">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="ccb4c-519">有关详细信息，请参阅<xref:System.Windows.Window.DialogResult%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-519">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="ccb4c-520">通过调用打开一个窗口<xref:System.Windows.Window.ShowDialog%2A>方法不自动具有与打开的窗口之间的关系; 具体而言，打开窗口不知道哪个窗口打开它。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-520">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="ccb4c-521">可以使用建立这种关系<xref:System.Windows.Window.Owner%2A>属性和托管使用<xref:System.Windows.Window.OwnedWindows%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-521">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="ccb4c-522">若要支持[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]自动化 (请参阅[UI 自动化概述](~/docs/framework/ui-automation/ui-automation-overview.md))，<xref:System.Windows.Window.Owner%2A>必须通过调用打开的窗口为设置<xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-522">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="ccb4c-523">当模式[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]窗口 (通过调用打开一个窗口<xref:System.Windows.Window.ShowDialog%2A>) 已关闭，以前激活窗口重新激活。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-523">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="ccb4c-524">如果在安装结束时[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]窗口包含一个所有者窗口 (请参阅<xref:System.Windows.Window.Owner%2A>)，不是所有者窗口重新激活时模式[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]窗口已关闭，除非它是窗口以前已经激活。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-524">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-525">窗口承载在浏览器时，不能调用此方法。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-525">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-526">下面的示例演示如何打开一个模式窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-526">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccb4c-527">
            <see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-527">
              <see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="ccb4c-528">若要激活窗口的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-528">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="ccb4c-529">关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-529">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowInTaskbar : bool with get, set" Usage="System.Windows.Window.ShowInTaskbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-530">Gets or sets a value that indicates whether the window has a task bar button.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-530">Gets or sets a value that indicates whether the window has a task bar button.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-531">
            <see langword="true" /> 如果窗口具有任务栏按钮;否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-531">
              <see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ccb4c-532">窗口承载在浏览器时，不适用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-532">Does not apply when the window is hosted in a browser.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-533">如果<xref:System.Windows.Window.ShowInTaskbar%2A>设置为`true`，还将 ALT + TAB 应用程序选择列表中显示该窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-533">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="ccb4c-534">适用于任务栏按钮和 ALT + TAB 应用程序选择列表的图标是值的<xref:System.Windows.Window.Icon%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-534">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-535">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-535">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-536">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-536">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-537">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-537">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="ccb4c-538">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-538">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-539">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-539">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowInTaskbarProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowInTaskbarProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-540">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-540">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberSignature Language="F#" Value="member this.SizeToContent : System.Windows.SizeToContent with get, set" Usage="System.Windows.Window.SizeToContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-541">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-541">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-542">一个 <see cref="T:System.Windows.SizeToContent" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-542">A <see cref="T:System.Windows.SizeToContent" /> value.</span>
          </span>
          <span data-ttu-id="ccb4c-543">默认值为 <see cref="F:System.Windows.SizeToContent.Manual" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-543">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-544">当<xref:System.Windows.Window.SizeToContent%2A>设置为<xref:System.Windows.SizeToContent.WidthAndHeight>，设置<xref:System.Windows.FrameworkElement.Height%2A>或<xref:System.Windows.FrameworkElement.Width%2A>不起作用; 可以设置这两个属性，但使用设置的值不会应用到窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-544">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="ccb4c-545">当<xref:System.Windows.Window.SizeToContent%2A>设置为<xref:System.Windows.SizeToContent.Height>，则设置<xref:System.Windows.FrameworkElement.Height%2A>不会更改窗口的高度。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-545">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="ccb4c-546">当<xref:System.Windows.Window.SizeToContent%2A>设置为<xref:System.Windows.SizeToContent.Width>，则设置<xref:System.Windows.FrameworkElement.Width%2A>不会更改窗口的宽度。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-546">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="ccb4c-547">如果<xref:System.Windows.Window.SizeToContent%2A>以外具有值<xref:System.Windows.SizeToContent.Manual>:</span><span class="sxs-lookup"><span data-stu-id="ccb4c-547">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="ccb4c-548"><xref:System.Windows.Window.SizeToContent%2A> 将自动设置为<xref:System.Windows.SizeToContent.Manual>如果用户通过使用大小调整手柄或拖动边框来调整窗口大小时。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-548"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="ccb4c-549">如果内容的大小发生更改，则会自行调整大小，窗口的方式<xref:System.Windows.FrameworkElement.SizeChanged>引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-549">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="ccb4c-550">如果一个窗口是透明 (请参阅<xref:System.Windows.Window.AllowsTransparency%2A>)，您应该考虑设置<xref:System.Windows.Window.SizeToContent%2A>到<xref:System.Windows.SizeToContent.WidthAndHeight>以确保窗口是不大于其可见内容。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-550">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-551">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-551">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-552">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-552">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-553">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-553">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="ccb4c-554">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-554">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-555">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-555">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ccb4c-556">下面的示例演示如何设置<xref:System.Windows.Window.SizeToContent%2A>代码中用于指定如何调整窗口大小以适应其内容的属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-556">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeToContentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.SizeToContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-557">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-557">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberSignature Language="F#" Value="member this.SourceInitialized : EventHandler " Usage="member this.SourceInitialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-558">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-558">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span>
          </span>
          <span data-ttu-id="ccb4c-559">See <see cref="T:System.Windows.Interop.HwndSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-559">See <see cref="T:System.Windows.Interop.HwndSource" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler " Usage="member this.StateChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-560">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-560">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TaskbarItemInfo : System.Windows.Shell.TaskbarItemInfo with get, set" Usage="System.Windows.Window.TaskbarItemInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-561">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-561">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-562">[！INCLUDE[win7](~/includes/win7-md.md)] 任务栏缩略图<see cref="T:System.Windows.Window" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-562">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-563">有关如何使用[!INCLUDE[win7](~/includes/win7-md.md)]任务栏缩略图，请参阅<xref:System.Windows.Shell.TaskbarItemInfo>类。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-563">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TaskbarItemInfoProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-564">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-564">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Window.Title" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IWindowService.Title</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-565">Gets or sets a window's title.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-565">Gets or sets a window's title.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-566">A<see cref="T:System.String" />包含窗口的标题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-566">A <see cref="T:System.String" /> that contains the window's title.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-567">标题<xref:System.Windows.Window>， <xref:System.Windows.Navigation.NavigationWindow>，或[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]，还可以通过使用设置<xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-567">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-568">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-568">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-569">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-569">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="ccb4c-570">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-570">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-571">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-571">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TitleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TitleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-572">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-572">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Top : double with get, set" Usage="System.Windows.Window.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-573">Gets or sets the position of the window's top edge, in relation to the desktop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-573">Gets or sets the position of the window's top edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-574">窗口的顶部，逻辑单元 （1/96 英寸） 中的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-574">The position of the window's top, in logical units (1/96").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-575">当<xref:System.Windows.Window>最大化或最小化，此值表示的上边缘的还原点<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-575">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="ccb4c-576">不能通过样式设置此属性。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-576">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="ccb4c-577">如果不指定一个值，<xref:System.Windows.Window.Top%2A>设置为系统默认值。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-577">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="ccb4c-578">此外可以通过设置指定的系统默认值<xref:System.Windows.Window.Top%2A>到<xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-578">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="ccb4c-579">既不<xref:System.Double.NegativeInfinity>也不<xref:System.Double.PositiveInfinity>是有效值<xref:System.Windows.Window.Top%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-579">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-580">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-580">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-581">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-581">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-582">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-582">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="ccb4c-583">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-583">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-584">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-584">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Topmost : bool with get, set" Usage="System.Windows.Window.Topmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-585">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-585">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-586">
            <see langword="true" /> 如果该窗口为最顶层;否则为<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-586">
              <see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-587">窗口其<xref:System.Windows.Window.Topmost%2A>属性设置为`true`所有窗口的上面显示其<xref:System.Windows.Window.Topmost%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-587">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="ccb4c-588">组中的 windows 具有<xref:System.Windows.Window.Topmost%2A>属性设置为`true`，当前激活的窗口为最顶端窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-588">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="ccb4c-589">同样对于具有 windows 组<xref:System.Windows.Window.Topmost%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-589">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-590">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-590">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-591">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-591">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-592">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-592">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="ccb4c-593">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-593">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-594">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-594">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopmostProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopmostProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-595">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-595">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-596">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-596">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStartupLocation : System.Windows.WindowStartupLocation with get, set" Usage="System.Windows.Window.WindowStartupLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-597">Gets or sets the position of the window when first shown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-597">Gets or sets the position of the window when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-598">A<see cref="T:System.Windows.WindowStartupLocation" />值，该值指定当首次显示窗口的顶部/左侧位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-598">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span>
          </span>
          <span data-ttu-id="ccb4c-599">默认值为 <see cref="F:System.Windows.WindowStartupLocation.Manual" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-599">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-600">设置<xref:System.Windows.WindowStartupLocation>到<xref:System.Windows.WindowStartupLocation.Manual>会打开一个窗口来定位根据其<xref:System.Windows.Window.Left%2A>和<xref:System.Windows.Window.Top%2A>属性值。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-600">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="ccb4c-601">如果任一<xref:System.Windows.Window.Left%2A>或<xref:System.Windows.Window.Top%2A>属性均未指定，其值由 Windows。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-601">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by Windows.</span></span>  
  
 <span data-ttu-id="ccb4c-602">设置<xref:System.Windows.WindowStartupLocation.CenterScreen>导致窗口在屏幕，其中包含鼠标光标的中心定位。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-602">Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="ccb4c-603">设置<xref:System.Windows.WindowStartupLocation>到<xref:System.Windows.WindowStartupLocation.CenterOwner>导致窗口在其所有者窗口的中心来定位 (请参阅<xref:System.Windows.Window.Owner%2A>)，如果指定。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-603">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified.</span></span> <span data-ttu-id="ccb4c-604">另一个 WPF 窗口或非 WPF 窗口，可以是所有者窗口。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-604">The owner window can be either another WPF window or a non-WPF window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-605">有关与非 WPF 窗口的 WPF 窗口的详细信息，请参阅[WPF 和 Win32 间的互操作](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)和<xref:System.Windows.Interop.WindowInteropHelper>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-605">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span>  
  
 <span data-ttu-id="ccb4c-606">如果未指定所有者窗口，窗口的位置由相同的方式就像<xref:System.Windows.WindowStartupLocation>设置为<xref:System.Windows.WindowStartupLocation.Manual>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-606">If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-607">无法设置或获取此属性的值，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-607">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberSignature Language="F#" Value="member this.WindowState : System.Windows.WindowState with get, set" Usage="System.Windows.Window.WindowState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-608">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-608">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-609">A <see cref="T:System.Windows.WindowState" /> ，它确定窗口是否是还原、 最小化，或最大化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-609">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span>
          </span>
          <span data-ttu-id="ccb4c-610">默认值是<see cref="F:System.Windows.WindowState.Normal" />（还原）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-610">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-611">最小化或最大化窗口之前，则会将其大小和位置存储在<xref:System.Windows.Window.RestoreBounds%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-611">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="ccb4c-612">当随后还原窗口时，其大小和位置的值将还原中的值<xref:System.Windows.Window.RestoreBounds%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-612">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="ccb4c-613">当<xref:System.Windows.Window.WindowState%2A>属性更改，<xref:System.Windows.Window.StateChanged>引发。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-613">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-614">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-614">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-615">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-615">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-616">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-616">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="ccb4c-617">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-617">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStateProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-618">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-618">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStyle : System.Windows.WindowStyle with get, set" Usage="System.Windows.Window.WindowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-619">Gets or sets a window's border style.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-619">Gets or sets a window's border style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccb4c-620">A <see cref="T:System.Windows.WindowStyle" /> ，它指定窗口的边框样式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-620">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span>
          </span>
          <span data-ttu-id="ccb4c-621">默认值为 <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-621">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccb4c-622"><xref:System.Windows.Window.WindowStyle%2A> 可以是之一<xref:System.Windows.WindowStyle>枚举值，包括<xref:System.Windows.WindowStyle.None>， <xref:System.Windows.WindowStyle.ToolWindow>， <xref:System.Windows.WindowStyle.SingleBorderWindow> （默认值）、 和<xref:System.Windows.WindowStyle.ThreeDBorderWindow>。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-622"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="ccb4c-623">下图上显示的窗口样式[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]（透明玻璃启用与 Windows Vista Aero 主题）：</span><span class="sxs-lookup"><span data-stu-id="ccb4c-623">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="ccb4c-624">![窗口样式](~/add/media/windowoverviewfigure6.PNG "窗口样式")</span><span class="sxs-lookup"><span data-stu-id="ccb4c-624">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccb4c-625">无法设置或获取此属性，当一个窗口承载于浏览器。</span><span class="sxs-lookup"><span data-stu-id="ccb4c-625">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ccb4c-626">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="ccb4c-626">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ccb4c-627">标识符字段</span><span class="sxs-lookup"><span data-stu-id="ccb4c-627">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="ccb4c-628">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="ccb4c-628">Metadata properties set to `true`</span></span>|<span data-ttu-id="ccb4c-629">无</span><span class="sxs-lookup"><span data-stu-id="ccb4c-629">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccb4c-630">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccb4c-630">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>