<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Window.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d63614a-fd48-4a83-9dc4-ea1e401b6c15b75ef34931ff30c492ba4817794f0d744ae176f8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b75ef34931ff30c492ba4817794f0d744ae176f8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b4804968da1dfdf71c501075a5b66957b54f2e8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/27/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Window">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
          <target state="translated">提供创建、配置、显示和管理窗口和对话框的生存期的能力。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The point of interaction between a user and a standalone application is a window.</source>
          <target state="translated">用户和独立的应用程序之间的点是交互的一个窗口。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window consists of two distinct areas:</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>窗口包含两个不同的区域：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
          <target state="translated">非工作区，其中承载 windows 修饰，其中包括图标、 标题、 系统菜单中，最小化按钮、 最大化按钮、 还原按钮、 关闭按钮和边框。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A client area, which hosts application-specific content.</source>
          <target state="translated">工作区，其中承载应用程序特定的内容。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A standard window is shown in the following figure:</source>
          <target state="translated">标准窗口下图所示：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>窗口元素<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>窗口元素<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 封装能够创建、 配置、 显示，和管理的生存期的窗口和对话框框中，并提供以下关键服务：</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Lifetime Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>生存期管理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>， <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>， <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>， <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>， <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>， <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>， <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>窗口管理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></source>
          <target state="translated"><bpt id="p1">**</bpt>外观和行为<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>， <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>， <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>， <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>， <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>， <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>，<ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Dialog Boxes<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>对话框<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> exposes special support for managing all of the windows in an application:</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>公开对管理所有 windows 应用程序中的特殊支持：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Application maintains a list of all the windows that are currently instantiated in the application.</source>
          <target state="translated">应用程序保留当前应用程序中实例化的所有窗口的列表。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This list is exposed by the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property.</source>
          <target state="translated">此列表由公开<ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>By default, <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> that is instantiated in an application.</source>
          <target state="translated">默认情况下，<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>自动设置到第一个引用<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>，在应用程序中实例化。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This thereby making the window the main application window.</source>
          <target state="translated">这从而使应用程序主窗口的窗口。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be implemented using markup, markup and code-behind, or code.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可以使用标记、 标记和代码隐藏或代码来实现。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is primarily used to display windows and dialog boxes for standalone applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 主要用于显示窗口和独立应用程序的对话框。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> instead; <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> derives from <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> and extends it with browser-style navigation support.</source>
          <target state="translated">但是，需要在窗口级别，诸如向导，导航的应用程序可以使用<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>替换;<ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>派生自<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>并使用浏览器样式导航支持对它进行扩展。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Islands of navigable content can be incorporated into other content and content containers using <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">可导航内容岛可以合并到使用其他内容和内容容器<ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> needs <ph id="ph2">`UnmanagedCode`</ph> security permission to be instantiated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 需要<ph id="ph2">`UnmanagedCode`</ph>要实例化的安全权限。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This has the following consequences:</source>
          <target state="translated">这具有以下结果：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-您可以单独部署应用程序将请求权限提升时从 Internet 或本地 Intranet 区域中启动。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> 所请求的任何内容小于完全权限将不能实例化窗口或对话框。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>.</source>
          <target state="translated">有关独立应用程序部署和安全注意事项的信息，请参阅<bpt id="p1">[</bpt>WPF 安全策略 — 平台安全性<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>是<ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>，这意味着，它可以包含任何类型 （如字符串、 一个映像或一个面板） 的单个对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> class.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a root element and, therefore, cannot be part of another element's content.</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>是根元素，因此，不能是另一个元素的内容的一部分。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties set on a <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> through a style will not be applied at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>属性上设置<ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph>通过样式将不会应用在运行时。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Customizing the Window Control</source>
          <target state="translated">自定义窗口控件</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To apply the same property settings to multiple <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> controls, use the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
          <target state="translated">若要将相同的属性设置应用于多个<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>控件，使用<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can modify the default <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to give the control a unique appearance.</source>
          <target state="translated">你可以修改默认<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>提供独特外观的控件。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information about creating a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">有关创建<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>，请参阅<bpt id="p1">[</bpt>通过创建 ControlTemplate 自定义现有的控件的外观<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To see the parts and states that are specific to the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>.</source>
          <target state="translated">若要查看的部件和特定于状态<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，请参阅<bpt id="p1">[</bpt>窗口样式和模板<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
          <target state="translated">对于此控件的依赖项属性可能由控件的默认样式设置。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
          <target state="translated">如果属性设置的默认样式，该属性可能会更改从其默认值，如果控件出现在应用程序中。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
          <target state="translated">桌面主题用应用程序运行时确定的默认样式。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>默认 WPF 主题<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Setting a visual property will only have an effect if that property is both present in <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> control's default template and is set by using a .</source>
          <target state="translated">设置 visual 属性会仅造成影响该属性是否都存在于<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>控件的默认模板，并通过设置。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">可以在的"更改 Visual 结构的控件"一节中找到的可视属性列表<bpt id="p1">[</bpt>通过创建 ControlTemplate 自定义现有的控件的外观<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only markup:</source>
          <target state="translated">下面的示例演示如何标准窗口是使用仅标记来定义：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only code:</source>
          <target state="translated">下面的示例演示如何使用定义的标准窗口只代码：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using a combination of markup and code-behind.</source>
          <target state="translated">下面的示例演示如何标准窗口是使用标记和代码隐藏的组合来定义。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties to their default <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> values.</source>
          <target state="translated">构造函数初始化<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>为其默认值的属性<ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph>值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>If a window is created within an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that has an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object, the constructor adds the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to the set of <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-managed windows via the <ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">如果在创建一个窗口<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>具有<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>对象，构造函数将添加<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>对象的一套<ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-管理通过 windows<ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>属性<ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>for permission for this object to call unsafe native methods.</source>
          <target state="translated">表示调用不安全的本机方法调用此对象的权限。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source>Attempts to bring the window to the foreground and activates it.</source>
          <target state="translated">尝试将窗口置于前台并激活它。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> was successfully activated; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果成功激活了 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
          <target state="translated">确定窗口是否已激活的规则都与使用的相同<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph><ph id="ph2">`SetForegroundWindow`</ph>函数 (User32.dll)。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>If the window is activated in a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that is not the user's foreground application, <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> event is raised.</source>
          <target state="translated">如果显示窗口激活在<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>不是用户的前景应用程序，应用程序<ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph>引发事件。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>for permission to activate a window.</source>
          <target state="translated">若要激活窗口的权限。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Activated">
          <source>Occurs when a window becomes the foreground window.</source>
          <target state="translated">在窗口成为前台窗口时发生。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A window is activated (becomes the foreground window) when:</source>
          <target state="translated">激活一个窗口 （变成前台窗口） 时：</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>The window is first opened.</source>
          <target state="translated">第一次打开该窗口。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
          <target state="translated">用户通过使用鼠标，按 ALT + 选项卡上，或从任务管理器中选择它切换到该窗口。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user clicks the window's taskbar button.</source>
          <target state="translated">用户单击窗口的任务栏按钮。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>Windows that need to detect when they become activate can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated">需要检测何时变成活动的 Windows 可以处理<ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">第一次激活窗口之后，它可能会停用并且在其生存期内多次重新激活。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">如果应用程序的行为或状态取决于其激活状态，它可以检查<ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>来确定在哪种激活状态。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>.</source>
          <target state="translated">应用程序也可以是<ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
          <target state="translated">获取或设置一个值，该值指示窗口的工作区是否支持透明。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window supports transparency; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果窗口支持透明，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of a window is set to a transparent color, using <ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph> for example, the window remains opaque.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>窗口的属性设置为透明颜色、 使用<ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>例如，窗口将保持不透明。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
          <target state="translated">这意味着无法查看桌面和任何正在运行的应用程序"beneath"窗口。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>To enable this type of transparency, <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">若要启用此类型的透明度，<ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>必须设置为<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> exists to facilitate the creation of non-rectangular windows, and, consequently, when <ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> is set to <ph id="ph3">`true`</ph>, a window's <ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property must be set to <ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> 存在来帮助创建非矩形窗口，并因此，当<ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>设置为<ph id="ph3">`true`</ph>，窗口<ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph>属性必须设置为<ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>A window that has a <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> value of anything other than <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph>.</source>
          <target state="translated">一个具有除 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 以外的 <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph> 值的窗口。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.AllowsTransparencyProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the final size that the window should use to arrange itself and its children.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映窗口应该用来排列自身及其子元素的最终大小。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>Override this method to arrange and size a window and its child elements.</source>
          <target state="translated">重写此方法可对窗口及其子元素进行排列和大小调整。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the actual size that was used.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映所使用的实际大小。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> 时，将不调用<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性具有的值<ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is called.</source>
          <target state="translated">如果值<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>，<ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">时请<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>调用，<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>设置为<ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Close">
          <source>Manually closes a <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">手动关闭 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可以使用几，之一关闭的已知、 系统提供的机制位于其标题栏中，包括：</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>ALT+F4.</source>
          <target state="translated">ALT + F4。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
          <target state="translated">系统菜单&amp;#124;<bpt id="p1">**</bpt>关闭<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated"><bpt id="p1">**</bpt>关闭<ept id="p1">**</ept>按钮。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>也可以通过使用多个已知机制之一的客户端区域中提供的开发人员，包括关闭：</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
          <target state="translated"><bpt id="p1">**</bpt>文件<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>退出<ept id="p2">**</ept>主窗口上。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
          <target state="translated"><bpt id="p1">**</bpt>文件<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>关闭<ept id="p2">**</ept>或<bpt id="p3">**</bpt>关闭<ept id="p3">**</ept>子窗口上的按钮。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, which automatically closes a window that was opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>确定<ept id="p1">**</ept>和<bpt id="p2">**</bpt>取消<ept id="p2">**</ept>出现在对话框中的按钮也是开发人员提供，尽管将可能集<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>，这会自动关闭打开窗口中，已通过调用<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>These mechanisms require you to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> to close a window.</source>
          <target state="translated">这些机制要求你显式调用<ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>来关闭窗口。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If a window, opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, and with a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> with its <ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
          <target state="translated">如果一个窗口，打开通过调用<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，且<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>与其<ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph>属性设置为 true，将自动关闭，或者单击该按钮，或按下 esc 键时。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the window was opened using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> must be explicitly called, such as from <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">如果使用打开窗口<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，但<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>必须显式调用，例如从<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>事件处理程序<ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a window causes the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event to be raised.</source>
          <target state="translated">关闭窗口会导致<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>引发事件。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event isn't canceled, the following occurs:</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>不取消事件，将发生以下情况：</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph> (if an <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> object exists).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>从删除<ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph>(如果<ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph>对象存在)。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from the owner <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> if the owner/owned relationship was established before the owned <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> was shown and after the owner <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> was opened.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>从所有者删除<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>如果所有者/附属关系已建立之前拥有<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>所示和所有者之后<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>已打开。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated">引发 <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Unmanaged resources created by the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> are disposed.</source>
          <target state="translated">非托管资源创建的<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>释放。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> was called to show the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>调用以显示<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>，<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>返回。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> causes any windows that it owns to be closed.</source>
          <target state="translated">关闭<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>会导致它拥有即将关闭任何 windows。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Furthermore, closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may cause an application to stop running depending on how the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph> property is set.</source>
          <target state="translated">此外，关闭<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会导致应用程序停止正在运行的具体取决于如何<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph>属性设置。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The following example shows a <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> menu being handled to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>.</source>
          <target state="translated">下面的示例演示<bpt id="p1">**</bpt>文件<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>退出<ept id="p2">**</ept>菜单正在处理以显式调用<ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">若要使用所有窗口和不受限制的用户输入的事件的权限。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source>Occurs when the window is about to close.</source>
          <target state="translated">在窗口即将关闭时发生。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closed">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
          <target state="translated">一旦将引发此事件，不能阻止结束指定窗口。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated">当窗口正在关闭时，将设置 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph>，或者调用 <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source>Occurs directly after <ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called, and can be handled to cancel window closure.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> 之后立即发生，并且可进行处理以取消关闭窗口。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be handled to detect when a window is being closed (for example, when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 可以处理以检测何时关闭窗口 (例如，当<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>称为)。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Furthermore, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be used to prevent a window from closing.</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>可用来阻止关闭窗口。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>To prevent a window from closing, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">若要阻止关闭窗口，可以设置<ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph>参数<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is raised when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>引发事件时<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>调用时，如果单击窗口关闭按钮时，或者如果用户按 ALT + F4。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">如果拥有的窗口已打开由其所有者窗口中使用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，并且所有者窗口已关闭，拥有的窗口<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>不会引发事件。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If the owner of a window is closed (see <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised on the owned window.</source>
          <target state="translated">如果所有者窗口已关闭 (请参阅<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)，<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>上拥有窗口不引发。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event for each window is raised.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>调用时，<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>引发的每个窗口的事件。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>However, if <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is canceled, cancellation is ignored.</source>
          <target state="translated">但是，如果<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>是取消，会忽略取消操作。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If a session ends because a user logs off or shuts down, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised; handle <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> to implement code that cancels application closure.</source>
          <target state="translated">如果在会话结束，因为用户注销或关机，<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>则不会引发; 处理<ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>取消应用程序闭包的代码中实现。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要包含重新实例化窗口每次则显示它，你可以处理<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>事件，取消它，并调用<ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to reopen it.</source>
          <target state="translated">然后，可以调用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>可重新打开它的同一个实例。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The following example demonstrates a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> that determines whether it needs user intervention to close.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，它确定它是否需要用户干预来关闭。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated">当窗口正在关闭时，将设置 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph>，或者调用 <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.ContentRendered">
          <source>Occurs after a window's content has been rendered.</source>
          <target state="translated">在窗口的内容呈现完毕之后发生。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.ContentRendered">
          <source>If the window has no content, this event is not raised.</source>
          <target state="translated">如果窗口不具有任何内容，则不会引发此事件。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Deactivated">
          <source>Occurs when a window becomes a background window.</source>
          <target state="translated">在窗口成为后台窗口时发生。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A window is deactivated (becomes a background window) when:</source>
          <target state="translated">停用一个窗口 （变成后台窗口） 时：</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to another window in the current application.</source>
          <target state="translated">用户切换到当前应用程序中的另一个窗口。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">用户在通过使用 ALT + TAB 或使用任务管理器切换到另一个应用程序中的窗口。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user clicks the taskbar button for a window in another application.</source>
          <target state="translated">用户单击另一个应用程序中的窗口任务栏按钮。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>Windows that need to detect when they become deactivated by handling the <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated">需要时变成停用处理进行检测的 Windows<ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
          <target state="translated">窗口首次停用后，它可能会重新激活并在其生存期内多次停用。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">如果应用程序的行为或状态取决于其激活状态，它可以检查<ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>来确定在哪种激活状态。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>.</source>
          <target state="translated">应用程序也可以是<ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>Gets or sets the dialog result value, which is the value that is returned from the <ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> method.</source>
          <target state="translated">获取或设置对话框结果值，此值是从 <ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 方法返回的值。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 类型的 <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph2">`true`</ph>) or canceled (<ph id="ph3">`false`</ph>) the dialog box.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 可以显示一个对话框，以确定用户是否接受代码中使用 (<ph id="ph2">`true`</ph>) 或已取消 (<ph id="ph3">`false`</ph>) 对话框。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
          <target state="translated">如果已接受对话框中，这表示打开对话框中检索用户收集的数据并将其处理的代码。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
          <target state="translated">如果已取消对话框中，但是，这表明调用的代码应停止任何进一步处理。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>By default, a dialog box is canceled when a user does one of the following:</source>
          <target state="translated">默认情况下，当用户执行下列其中一项取消对话框中：</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>PressesALT+F4.</source>
          <target state="translated">PressesALT + F4。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">单击<bpt id="p1">**</bpt>关闭<ept id="p1">**</ept>按钮。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
          <target state="translated">选择<bpt id="p1">**</bpt>关闭<ept id="p1">**</ept>从系统菜单。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In all of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`false`</ph> by default.</source>
          <target state="translated">在所有这些情况下，<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>是<ph id="ph2">`false`</ph>默认情况下。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">对话框中通常会提供一个用于取消一个对话框，为按钮的特殊按钮其<ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph>属性设置为<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
          <target state="translated">或者它按下时，或按下 ESC 键时，这种方式配置一个按钮将自动关闭窗口。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In either of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> remains <ph id="ph2">`false`</ph>.</source>
          <target state="translated">在这些情况下，任一<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>保持<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box also typically provides an accept button, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">对话框中通常还提供一个接受按钮，这是按钮其<ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph>属性设置为<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will raise its <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when either it or the ENTER key is pressed.</source>
          <target state="translated">这种方式配置一个按钮将引发其<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>事件时按下它或 ENTER 键。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>However, it won't automatically close the dialog box, nor will it set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">但是，它不会自动关闭的对话框中，也不会将设置<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>到<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You need to manually write this code, usually from the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the default button.</source>
          <target state="translated">你需要手动编写此代码中，通常从<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>事件处理程序的默认按钮。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 是<ph id="ph2">`null`</ph>时显示的对话框但不接受或已取消。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>After a dialog box closes, you can get the dialog result from the value returned by <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method, or by inspecting the <ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property.</source>
          <target state="translated">在对话框关闭后，你可以从返回的值获取的对话框结果<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>方法，或通过检查<ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can only be set when a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> is opened by calling its <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 仅时可以设置<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>打开通过调用其<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The following example shows how to configure an OK button and a Cancel button to return the appropriate <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何配置确定按钮和取消按钮以返回适当<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set before a window is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>.</source>
          <target state="translated">设置<ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> 在通过调用 <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 打开窗口之前。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set on a window that is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>.</source>
          <target state="translated">通过调用 <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> 设置 <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> 至打开的窗口。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.DpiChanged">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
          <target state="translated">显示窗口的屏幕的 DPI 发生更改后出现。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.DpiChangedEvent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> for when the DPI of the screen the Window is on changes.</source>
          <target state="translated">显示该窗口的屏幕的 DPI 发生更改时使用的 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
          <target state="translated">允许使用在窗口工作区的暴露区域上方按下其鼠标左键的鼠标来拖动窗口。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button must be down when <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">鼠标左键时必须按下<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>One way to detect when the left mouse button is pressed is to handle the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event.</source>
          <target state="translated">当按下鼠标左键时进行检测的一种方法是处理<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>调用时，左侧必须窗口的工作区的暴露区域上方按下鼠标按钮。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The following example shows how to override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> to call <ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何重写<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>调用<ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button is not down.</source>
          <target state="translated">鼠标左键未按下。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>for permission to drag a window.</source>
          <target state="translated">若要将窗口拖动的权限。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>The dependency object.</source>
          <target state="translated">依赖项对象。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>Returns a reference to the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that hosts the content tree within which the dependency object is located.</source>
          <target state="translated">返回对 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 对象的引用，该对象承载依赖项对象所在的内容树。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> reference to the host window.</source>
          <target state="translated">对宿主窗口的 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 引用。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph> 为 null。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source>Makes a window invisible.</source>
          <target state="translated">使窗口不可见。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>A window is not closed when it is hidden, and neither the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> nor <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated">当其处于隐藏状态，不关闭窗口并且不<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>也不<ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph>引发事件。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Instead, the window's <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">相反，窗口的<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性设置为<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If a window is the application's <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> and the application's <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, the application does not shut down.</source>
          <target state="translated">如果一个窗口是应用程序的<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>和应用程序的<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>是<ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>，应用程序不会关闭。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.</source>
          <target state="translated">同样，应用程序不会关闭窗口是唯一的窗口，并且应用程序的关闭模式是如果<ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要重新实例化窗口每次则显示它，你可以处理<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>事件，取消它，并调用<ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to re-open it.</source>
          <target state="translated">然后，可以调用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>对同一个实例，重新打开它。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">对正在关闭 (<ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph>) 或已经关闭 (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) 的窗口调用 <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Icon">
          <source>Gets or sets a window's icon.</source>
          <target state="translated">获取或设置窗口的图标。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> object that represents the icon.</source>
          <target state="translated">一个表示图标的 <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> standalone applications have two types of icons:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> 独立应用程序有两种类型的图标：</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One assembly icon, which is specified by using the <ph id="ph1">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
          <target state="translated">使用指定的一个程序集图标<ph id="ph1">`&lt;ApplicationIcon&gt;`</ph>属性在应用程序的项目中生成文件。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This icon is used as the desktop icon for an assembly.</source>
          <target state="translated">此图标用作程序集桌面图标。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
          <target state="translated">在调试时 Visual Studio 中，您的图标不会由于宿主进程。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you run the executable, the icon will appear.</source>
          <target state="translated">如果你运行可执行文件，则将显示图标。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>托管进程 (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One icon per window that is specified by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>.</source>
          <target state="translated">每个通过将设置指定的窗口的一个图标<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
          <target state="translated">对每个窗口中，在其标题栏中，其任务栏按钮，以及其 ALT TAB 应用程序选择列表项，则使用此图标。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window always displays an icon.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>窗口始终显示一个图标。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When one is not provided by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> chooses an icon to display based on the following rules:</source>
          <target state="translated">当未提供通过设置<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>，<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>选择要显示的图标根据以下规则：</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Use the assembly icon, if specified.</source>
          <target state="translated">如果指定，请使用程序集图标。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If the assembly icon is not specified, use the default <ph id="ph1">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph> icon.</source>
          <target state="translated">如果未指定的程序集图标，则使用默认<ph id="ph1">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph>图标。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to specify a custom window icon, you can restore the default application icon by setting <ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果你使用<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>若要指定自定义窗口图标，可以通过设置来还原默认应用程序图标<ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>到<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A single icon can be used in a variety of ways in <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
          <target state="translated">一个图标可以采用多种方式在<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>，包括标题栏的一个窗口，一个窗口的任务栏中显示 ALT + TAB 文件选择列表。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
          <target state="translated">其中每个演示使用不同的大小; 的图标ALT + TAB 文件选择列表中显示 32 x 32 像素的图标时，16 x 16 像素的图标被显示在窗口的标题栏和任务栏中。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
          <target state="translated">某些应用程序，如<ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>，提供<bpt id="p1">**</bpt>视图<ept id="p1">**</ept>菜单，您可以选择你想要查看的图标的大小。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
          <target state="translated">若要适应不同的显示大小，图标文件由组成一个或多个实际图标其中每个表示面向特定的大小和颜色深度的图标版本。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
          <target state="translated">例如，一个图标可能只有单个 16 x 16 像素图标具有 16 种颜色，而另一个可能包含 16 x 16 像素和 32 x 32 像素图标具有 16 种颜色和 256 种颜色。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If icons for all possible sizes and color depths exist within an icon file, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> will use the appropriate icon.</source>
          <target state="translated">如果在图标文件中，存在于所有可能的大小和颜色深度图标<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>将使用相应图标。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If an icon file contains only a subset of all the possible icons, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
          <target state="translated">如果图标文件包含所有可能的图标的一个子集<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>递减大小和颜色深度的顺序使用下一个最适当的图标。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The result is that an icon will always be used by <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, although the icon used may not target the required size and color depth.</source>
          <target state="translated">结果是一个图标将始终使用由<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，尽管所用的图标不可能以目标所需的大小和颜色深度。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
          <target state="translated">例如，具有 16 种颜色 16 x 16 像素的图标还可能用于进行显示，作为具有 256 种颜色 32 x 32 像素的图标。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
          <target state="translated">这可能会导致意外的视觉效果，如像素化，但可避免通过创建的所有目标的大小和颜色深度图标。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The following example shows how to set a window icon.</source>
          <target state="translated">下面的示例演示如何以设置窗口图标。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>for permission to set the icon.</source>
          <target state="translated">若要设置图标的权限。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IconProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.IsActive">
          <source>Gets a value that indicates whether the window is active.</source>
          <target state="translated">获取一个值，该值指示窗口是否为活动窗口。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果窗口是活动的，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
          <target state="translated">活动窗口是用户的当前前景色窗口，并具有焦点的标题栏活动外观由表示。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property.</source>
          <target state="translated">活动窗口也将未显式设置的所有顶级窗口的顶级<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IsActiveProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Left">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
          <target state="translated">获取或设置窗口左边缘相对于桌面的位置。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
          <target state="translated">以逻辑单位（1/96 英寸）表示的窗口左边缘位置。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the left edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>最大化或最小化，左边的缘的还原点的此值表示<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>This property cannot be set through a style.</source>
          <target state="translated">不能通过样式设置此属性。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">如果不指定一个值，<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>设置为系统默认值。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">此外可以通过设置指定的系统默认值<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>到<ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>.</source>
          <target state="translated">既不<ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>也不<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>是有效值<ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.LeftProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.LocationChanged">
          <source>Occurs when the window's location changes.</source>
          <target state="translated">在窗口的位置改变时发生。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window's location changes when:</source>
          <target state="translated">窗口的位置会发生更改时：</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A user moves a window by dragging it with the window's title bar.</source>
          <target state="translated">用户将窗口移动通过拖动窗口的标题栏。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window is moved after <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">一个窗口移动后<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>Either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property is set programmatically.</source>
          <target state="translated">请<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>以编程方式设置属性。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
          <target state="translated"><bpt id="p1">**</bpt>移动<ept id="p1">**</ept>选择窗口的系统菜单的菜单项。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>属性更改。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.LogicalChildren">
          <source>Gets an enumerator for a window's logical child elements.</source>
          <target state="translated">获取窗口的逻辑子元素的一个枚举数。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.LogicalChildren">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> a window's logical child elements.</source>
          <target state="translated">窗口的逻辑子元素的一个 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the available size that this window can give to the child.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映此窗口可为子级提供的可用大小。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
          <target state="translated">可以提供无穷大值，以指示窗口大小可根据任何可用的内容进行调整。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Override this method to measure the size of a window.</source>
          <target state="translated">重写此方法可测量窗口的大小。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映此窗口所确定的在布局期间需要的大小（根据其子级大小的计算结果来确定）。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> 时，将不调用<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性具有的值<ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is called.</source>
          <target state="translated">如果值<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>，<ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph>调用。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">时请<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>调用，<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>设置为<ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the old content tree.</source>
          <target state="translated">对旧内容树的根的引用。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the new content tree.</source>
          <target state="translated">对新内容树的根的引用。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>Called when the <ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> property changes.</source>
          <target state="translated">当 <ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> 属性更改时调用。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>Creates and returns a <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">为此 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> 创建并返回一个 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>.</source>
          <target state="translated">此方法重写 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The previous DPI scale setting.</source>
          <target state="translated">上一 DPI 比例设置。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The new DPI scale setting.</source>
          <target state="translated">新 DPI 比例设置。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>Called when the DPI at which this window is rendered changes.</source>
          <target state="translated">呈现此窗口所使用的 DPI 发生变化时进行调用。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">事件的数据。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event occurs.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> 事件发生时调用。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>This implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event data.</source>
          <target state="translated">此实现不会更改已处理的状态 (<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph>属性) 的<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>事件数据。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>If you override <ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>, always call the base implementation in your <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph> implementation.</source>
          <target state="translated">如果你重写<ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>，始终调用基实现你<ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</source>
          <target state="translated">如果调用基实现会使从处理事件，这可能会改变最终类的运行时行为的基类，这些类。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>You can call the base implementation either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基实现之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> 引发 <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>.</source>
          <target state="translated">派生自类型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能会重写<ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">重写的方法必须调用<ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>基本类如果<ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>需要引发。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The previous parent.</source>
          <target state="translated">先前的父项。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Set to null if the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> did not have a previous parent.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> 没有先前的父项，则设置为 null。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Called when the parent of the window is changed.</source>
          <target state="translated">在窗口的父项更改时调用。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.OwnedWindows">
          <source>Gets a collection of windows for which this window is the owner.</source>
          <target state="translated">获取此窗口所拥有的窗口的集合。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph> that contains references to the windows for which this window is the owner.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph>，包含对此窗口所拥有的窗口的引用。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>An owned window is one whose <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property is set with a reference to another window, which is known as the owner window.</source>
          <target state="translated">附属的窗口是一个其<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>属性设置为另一个窗口，这被称为所有者窗口的引用。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>To find all the windows that an owner window owns, you can enumerate <ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">若要查找所有者窗口拥有的所有窗口，可以枚举<ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph>返回<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>The following example shows how to enumerate <ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>.</source>
          <target state="translated">下面的示例演示如何枚举<ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> that owns this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">获取或设置拥有此 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that represents the owner of this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 对象，表示此 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的所有者。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is opened by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, an implicit relationship is established between both parent and child window.</source>
          <target state="translated">通过调用由父窗口打开子窗口时<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，父和子窗口之间建立的隐式关系。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
          <target state="translated">此关系强制执行某些行为，包括最小化、 最大化，和还原。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is created by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, the child window does not have a relationship with the parent window.</source>
          <target state="translated">通过调用由父窗口创建子窗口时<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，但是，子窗口没有与父窗口的关系。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This means that:</source>
          <target state="translated">这表示：</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The child window does not have a reference to the parent window.</source>
          <target state="translated">子窗口没有向父窗口的引用。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
          <target state="translated">子窗口的行为不依赖于父窗口中; 的行为这两个窗口能够覆盖另一个，或最小化、 最大化，并还原相互独立。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>To allow you to create a relationship between a child window and a parent window, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> supports the notion of ownership.</source>
          <target state="translated">若要让你可以创建子窗口和父窗口，之间的关系<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>支持所有权的概念。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Ownership is established when the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of a window (the owned window) is set with a reference to another window (the owner window).</source>
          <target state="translated">建立所有权时<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>一个窗口 （拥有窗口） 的属性设置为另一个窗口 （所有者窗口） 的引用。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Once this relationship is established, the following behaviors are exhibited:</source>
          <target state="translated">一旦建立这种关系，则会展现的以下行为：</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is minimized, all its owned windows are minimized as well.</source>
          <target state="translated">最小化所有者窗口时，其拥有的所有 windows 最小都化以及。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window is minimized, its owner is not minimized.</source>
          <target state="translated">如果拥有的窗口最小化，其所有者不降至最低。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is maximized, both the owner window and its owned windows are restored.</source>
          <target state="translated">如果所有者窗口最大化时，将还原所有者窗口和其拥有的 windows。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>An owner window can never cover an owned window.</source>
          <target state="translated">所有者窗口绝不会覆盖拥有的窗口。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Owned windows that were not opened using <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are not modal.</source>
          <target state="translated">拥有不是使用的 windows<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>不是模式对话框。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The user can still interact with the owner window.</source>
          <target state="translated">用户仍可以与所有者窗口交互。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you close an owner window, its owned windows are also closed.</source>
          <target state="translated">如果你关闭所有者窗口，其拥有的窗口也会关闭。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">如果拥有的窗口已打开由其所有者窗口中使用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，并且所有者窗口已关闭，拥有的窗口<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>不会引发事件。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When you open a child window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, you should also set the <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of the child window.</source>
          <target state="translated">当通过调用打开子窗口<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，还应设置<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>子窗口的属性。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
          <target state="translated">如果没有，你的用户将无法还原按任务栏按钮的子窗口和父窗口。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
          <target state="translated">相反，按任务栏按钮将生成 windows 中，包括子与父窗口中的，以帮助用户选择; 的列表将还原所选的窗口。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You should also set the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property on a window that that is opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> to ensure correct behavior with .</source>
          <target state="translated">此外应设置<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>属性窗口，打开通过调用上的<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>以确保使用正确的行为。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The following example shows how to establish the owner/owned relationship.</source>
          <target state="translated">下面的示例演示如何建立/拥有所有者的关系。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>A window tries to own itself</source>
          <target state="translated">窗口尝试拥有自身</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Two windows try to own each other.</source>
          <target state="translated">两个窗口尝试相互拥有。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set on a visible window shown using <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph></source>
          <target state="translated">在使用 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> 显示的可见窗口上设置了 <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 属性</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set with a window that has not been previously shown.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> 属性设置为先前未曾显示的窗口。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">若要使用所有窗口和不受限制的用户输入的事件的权限。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ResizeMode">
          <source>Gets or sets the resize mode.</source>
          <target state="translated">获取或设置大小调整模式。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> value specifying the resize mode.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> 值，指定大小调整模式。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>There are four options:</source>
          <target state="translated">有四个选项：</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user cannot resize the window.</source>
          <target state="translated">用户不能调整窗口大小。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Maximize and Minimize boxes are not shown.</source>
          <target state="translated">最大化和最小化框不会显示。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
          <target state="translated">用户只能将窗口最小和从任务栏中还原它。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
          <target state="translated">同时会显示最小化和最大化框，但仅最小化框处于启用状态。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
          <target state="translated">用户具有完全能够调整大小窗口中，在窗口中使用最小化和最大化框中，并可拖动大纲。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
          <target state="translated">显示最小化和最大化框并将其启用。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>(Default).</source>
          <target state="translated">（默认值）。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>This option has the same functionality as <ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>, but adds a "resize grip" to the lower right corner of the window.</source>
          <target state="translated">此选项具有与相同的功能<ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>，但将"大小调整手柄"添加到窗口右下角。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ResizeModeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.RestoreBounds">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">获取窗口在最小化或最大化之前的大小和位置。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> that specifies the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph>，指定窗口在最小化或最大化之前的大小和位置。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
          <target state="translated">还原矩形是之前它是最小化或最大化窗口占用的区域。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>之前关闭应用程序时，保存的最后一个大小和窗口的位置并在下次应用程序开始将窗口还原到其处于用户的方式检索这些值。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>If you query <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> before the window has been shown or after it has been closed, <ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph> is returned.</source>
          <target state="translated">如果你查询<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>显示窗口之前或之后它已关闭，<ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph>返回。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You cannot get this property when a window is hosted in a browser.</source>
          <target state="translated">当一个窗口托管的浏览器中时，无法获取此属性。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>和独立存储来确保的大小和窗口的位置的相同它们的显示窗口时在前一次。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>for permission to query for the size and location of a window's bounding rectangle.</source>
          <target state="translated">若要查询的大小和窗口的位置的权限边界矩形。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
          <target state="translated">打开窗口并返回，而不等待新打开的窗口关闭。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>实例化类时，它不是默认情况下可见。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> shows a window and returns immediately, without waiting for the window to be closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 显示了一个窗口并立即返回，而不等待窗口即将关闭。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
          <target state="translated">因此，已打开的窗口不会阻止用户与其他 windows 应用程序中进行交互。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
          <target state="translated">此类型的窗口称为<bpt id="p1">*</bpt>无模式<ept id="p1">*</ept>窗口。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
          <target state="translated">无模式窗口的常见示例包括属性窗口、 工具箱和调色板。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">若要限制用户交互与特定窗口，窗口必须通过调用打开<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>A window that is opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">通过调用打开一个窗口<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>未不自动具有与打开的窗口之间的关系; 具体而言，打开窗口不知道哪个窗口打开它。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">可以使用建立这种关系<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>属性和托管使用<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> achieves the same end result as setting <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to <ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>实现相同的最终结果，作为设置<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>属性<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>对象传递给<ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>However, there is a difference between the two from a timing perspective.</source>
          <target state="translated">但是，没有从计时角度来看这两者之间的区别。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is a synchronous operation that returns only after the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event on the child window has been raised:</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>是之后才会返回一个同步操作<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>引发子窗口上的事件：</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, however, is an asynchronous operation that returns immediately:</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>，但是，将立即返回的异步操作：</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, any window events you register before you set <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> may not be raised until after the method in which you set <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> has completed execution.</source>
          <target state="translated">设置时<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>，注册之前设置任何窗口事件<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>不可能在其中你设置的方法后直到引发<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>执行完毕。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>The following sample demonstrates how to open a modeless window.</source>
          <target state="translated">下面的示例演示如何打开一个无模式窗口。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">对正在关闭 (<ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>) 或已经关闭 (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) 的窗口调用 <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowActivated">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
          <target state="translated">获取或设置一个值，该值指示在第一次显示窗口时，窗口是否处于激活状态。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a window is activated when first shown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果窗口第一次显示时即激活，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>When a window with its <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property set to <ph id="ph2">`false`</ph> is opened, the window is not activated and its <ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is not raised until a user manually activates the window by selecting it.</source>
          <target state="translated">当与窗口其<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>属性设置为<ph id="ph2">`false`</ph>是打开，显示窗口不激活并将其<ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph>直到用户手动激活窗口通过选择它，则不会引发事件。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>After the window is selected, it activates and deactivates normally.</source>
          <target state="translated">窗口被选中之后，它激活，并且通常会停用。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>To prevent a window from being activated when it opens, the <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property must be set to <ph id="ph2">`false`</ph> before the window is shown (by calling <ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); setting <ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph5">`false`</ph> after a window is shown has no effect.</source>
          <target state="translated">若要防止当它打开后，激活窗口<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>属性必须设置为<ph id="ph2">`false`</ph>显示窗口之前 (通过调用<ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); 设置<ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>到<ph id="ph5">`false`</ph>窗口将显示不起作用后。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph2">`false`</ph> on a window that is opened modally, by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, has no real impact.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>到<ph id="ph2">`false`</ph>通过调用以模式方式打开的窗口上<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，无任何实际影响。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
          <target state="translated">尽管未将激活模式窗口，模式窗口会阻止用户激活任何其他打开的应用程序窗口。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use markup to configure a window to be opened without being activated.</source>
          <target state="translated">下面的示例演示如何使用标记来配置要打开，也不正在激活的窗口。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use code to configure a window to be opened without it being activated.</source>
          <target state="translated">下面的示例演示如何使用代码来配置要打开，也不它正在激活的窗口。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowActivatedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
          <target state="translated">打开一个窗口，并且仅在新打开的窗口关闭后才返回。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> that specifies whether the activity was accepted (<ph id="ph3">&lt;see langword="true" /&gt;</ph>) or canceled (<ph id="ph4">&lt;see langword="false" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 类型的 <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 值，该值指定活动被接受 (<ph id="ph3">&lt;see langword="true" /&gt;</ph>) 还是被取消 (<ph id="ph4">&lt;see langword="false" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> property before a window closes.</source>
          <target state="translated">返回值是 <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> 属性在窗口关闭前具有的值。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>实例化类时，它不是默认情况下可见。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 显示的窗口、 禁用应用程序中的所有其他窗口和窗口关闭时，才返回。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
          <target state="translated">这种类型的窗口称为<bpt id="p1">*</bpt>模式<ept id="p1">*</ept>窗口。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Modal windows are primarily used as dialog boxes.</source>
          <target state="translated">模式窗口主要用作对话框。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
          <target state="translated">对话框中是窗口的一种特殊类型的应用程序用于与用户来完成任务，例如打开文件或打印文档进行交互。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
          <target state="translated">对话框通常允许用户接受或取消它们已为其显示之前关闭对话框中的任务。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value that specifies whether the activity was accepted or canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 返回<ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph>值，该值指定是否接受或取消活动。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property before a window closes.</source>
          <target state="translated">返回值是 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 属性在窗口关闭前具有的值。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A window that is opened by calling the <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">通过调用打开一个窗口<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>方法不自动具有与打开的窗口之间的关系; 具体而言，打开窗口不知道哪个窗口打开它。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">可以使用建立这种关系<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>属性和托管使用<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>), <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> must be set for a window opened by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">若要支持<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>自动化 (请参阅<bpt id="p1">[</bpt>UI 自动化概述<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>)，<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>必须通过调用打开的窗口为设置<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window (a window opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) is closed, the previously activated window is reactivated.</source>
          <target state="translated">当模式<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>窗口 (通过调用打开一个窗口<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) 已关闭，以前激活窗口重新激活。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window has an owner window (see <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), the owner window is not reactivated when the modal <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window is closed unless it was the previously activated window.</source>
          <target state="translated">如果在安装结束时<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>窗口包含一个所有者窗口 (请参阅<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)，不是所有者窗口重新激活时模式<ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>窗口已关闭，除非它是窗口以前已经激活。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The following sample demonstrates how to open a modal window.</source>
          <target state="translated">下面的示例演示如何打开一个模式窗口。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">对正在关闭 (<ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>) 或已经关闭 (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) 的窗口调用 <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>for permission to activate a window.</source>
          <target state="translated">若要激活窗口的权限。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
          <target state="translated">获取或设置一个指示窗口是否具有任务栏按钮的值。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window has a task bar button; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果窗口具有任务栏按钮，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Does not apply when the window is hosted in a browser.</source>
          <target state="translated">当窗口承载在浏览器中时，此属性不适用。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>设置为<ph id="ph2">`true`</ph>，还将 ALT + TAB 应用程序选择列表中显示该窗口。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> property.</source>
          <target state="translated">适用于任务栏按钮和 ALT + TAB 应用程序选择列表的图标是值的<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowInTaskbarProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.SizeToContent">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
          <target state="translated">获取或设置一个值，该值指示窗口是否自动调整自身大小以适应其内容大小。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> value.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>, setting either <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>设置为<ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>，设置<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>不起作用; 可以设置这两个属性，但使用设置的值不会应用到窗口。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> does not change the height of the window.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>设置为<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>，则设置<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>不会更改窗口的高度。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> does not change the width of the window.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>设置为<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>，则设置<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>不会更改窗口的宽度。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> has a value other than <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>以外具有值<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is automatically set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph> if a user resizes the window by using the resize grip or dragging the border.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 将自动设置为<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>如果用户通过使用大小调整手柄或拖动边框来调整窗口大小时。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If the size of the content changes in a way that causes the window to resize itself, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> is raised.</source>
          <target state="translated">如果内容的大小发生更改，则会自行调整大小，窗口的方式<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If a window is transparent (see <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>), you should consider setting <ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph> to ensure the window is no larger than its visible content.</source>
          <target state="translated">如果一个窗口是透明 (请参阅<ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>)，您应该考虑设置<ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>到<ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>以确保窗口是不大于其可见内容。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> property in code to specify how a window resizes to fit its content.</source>
          <target state="translated">下面的示例演示如何设置<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>代码中用于指定如何调整窗口大小以适应其内容的属性。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.SizeToContentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>.</source>
          <target state="translated">引发此事件是为了支持与 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 的互操作。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.StateChanged">
          <source>Occurs when the window's <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> property changes.</source>
          <target state="translated">在窗口的 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> 属性更改时发生。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">获取或设置 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 任务栏缩略图。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 任务栏缩略图。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail, see the <ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph> class.</source>
          <target state="translated">有关如何使用<ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph>任务栏缩略图，请参阅<ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TaskbarItemInfoProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Title">
          <source>Gets or sets a window's title.</source>
          <target state="translated">获取或设置窗口的标题。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the window's title.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>，包含窗口的标题。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>The title of a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, or <ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using <ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">标题<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>，或<ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>，还可以通过使用设置<ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TitleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Top">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
          <target state="translated">获取或设置窗口上边缘相对于桌面的位置。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>The position of the window's top, in logical units (1/96").</source>
          <target state="translated">以逻辑单位（1/96 英寸）表示的窗口上边缘位置。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the top edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>最大化或最小化，此值表示的上边缘的还原点<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>This property cannot be set through a style.</source>
          <target state="translated">不能通过样式设置此属性。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">如果不指定一个值，<ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>设置为系统默认值。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">此外可以通过设置指定的系统默认值<ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>到<ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>.</source>
          <target state="translated">既不<ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>也不<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>是有效值<ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Topmost">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
          <target state="translated">获取或设置一个值，该值指示窗口是否出现在 Z 顺序的最顶层。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is topmost; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果窗口是最顶层元素，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>A window whose <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> appears above all windows whose <ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> properties are set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">窗口其<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>属性设置为<ph id="ph2">`true`</ph>所有窗口的上面显示其<ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>属性设置为<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>In the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the window that is currently activated is the topmost window.</source>
          <target state="translated">组中的 windows 具有<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>属性设置为<ph id="ph2">`true`</ph>，当前激活的窗口为最顶端窗口。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Likewise for the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">同样对于具有 windows 组<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>属性设置为<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopmostProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Gets or sets the position of the window when first shown.</source>
          <target state="translated">获取或设置窗口首次显示时的位置。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> value that specifies the top/left position of a window when first shown.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> 值，指定窗口首次显示时的顶边/左边位置。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph> causes a window to be positioned according to its <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property values.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>到<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>会打开一个窗口来定位根据其<ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>属性值。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties aren't specified, their values are determined by Windows.</source>
          <target state="translated">如果任一<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>属性均未指定，其值由 Windows。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph> causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph>导致窗口在屏幕，其中包含鼠标光标的中心定位。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> causes a window to be positioned in the center of its owner window (see <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), if specified.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>到<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph>导致窗口在其所有者窗口的中心来定位 (请参阅<ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)，如果指定。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
          <target state="translated">另一个 WPF 窗口或非 WPF 窗口，可以是所有者窗口。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept> and <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>.</source>
          <target state="translated">有关与非 WPF 窗口的 WPF 窗口的详细信息，请参阅<bpt id="p1">[</bpt>WPF 和 Win32 间的互操作<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>和<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>.</source>
          <target state="translated">如果未指定所有者窗口，窗口的位置由相同的方式就像<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>设置为<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>You cannot set or get the value of this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性的值，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowState">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
          <target state="translated">获取或设置一个值，该值指示窗口是处于还原、最小化还是最大化状态。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph> that determines whether a window is restored, minimized, or maximized.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph>，确定窗口是处于还原、最小化还是最大化状态。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph> (restored).</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph>（还原）。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Before a window is minimized or maximized, its size and location are stored in <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">最小化或最大化窗口之前，则会将其大小和位置存储在<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When a window is subsequently restored, its size and location values are restored with the values from <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">当随后还原窗口时，其大小和位置的值将还原中的值<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed, <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> is raised.</source>
          <target state="translated">当<ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>属性更改，<ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStateProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStyle">
          <source>Gets or sets a window's border style.</source>
          <target state="translated">获取或设置窗口的边框样式。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph> that specifies a window's border style.</source>
          <target state="translated">一个指定窗口边框样式的 <ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> can be one of the <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph> enumeration values, including <ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (default), and <ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> 可以是之一<ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph>枚举值，包括<ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>， <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> （默认值）、 和<ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):</source>
          <target state="translated">下图上显示的窗口样式<ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph>（透明玻璃启用与 Windows Vista Aero 主题）：</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>窗口样式<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>窗口样式<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">无法设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Dependency Property Information</source>
          <target state="translated">依赖项属性信息</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Identifier field</source>
          <target state="translated">标识符字段</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">元数据属性设置为 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> dependency property.</source>
          <target state="translated">标识 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 依赖项属性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>