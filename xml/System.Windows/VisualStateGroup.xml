<Type Name="VisualStateGroup" FullName="System.Windows.VisualStateGroup">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d8ff30d0c1c81006eb2cceb0a23b7c5b2fffae7f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679371" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualStateGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateGroup : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("States")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含互斥的 <see cref="T:System.Windows.VisualState" /> 对象和用于从一种状态转移到另一种状态的 <see cref="T:System.Windows.VisualTransition" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个<xref:System.Windows.VisualStateGroup>包含一套<xref:System.Windows.VisualState>对象。 A<xref:System.Windows.VisualState>包含一套<xref:System.Windows.Media.Animation.Storyboard>指定控件的外观时该控件处于某个特定状态的更改的对象。 例如，<xref:System.Windows.Controls.Button>时按下比不按下时可能遇到略有不同的外观。 两个状态<xref:System.Windows.Controls.Button>定义对应于按下它时 (`"Pressed"`) 并且它不是 (`"Normal"`)。  
  
 你添加<xref:System.Windows.VisualState>到通过设置控件`VisualStateManager.VisualStateGroups`附加在控件上的属性。 是互斥彼此中相同的状态放<xref:System.Windows.VisualStateGroup>。 例如，<xref:System.Windows.Controls.CheckBox>具有两个<xref:System.Windows.VisualStateGroup>对象。 一个包含状态， `Normal`， `MouseOver`， `Pressed`，和`Disabled`。 另一个包含状态， `Checked`， `UnChecked`，和`Indeterminate`。 <xref:System.Windows.Controls.CheckBox>可能处于状态`MouseOver`和`UnChecked`在相同的时间，但不是能在`MouseOver`和`Pressed`在同一时间的状态。  
  
 尽管您可以添加<xref:System.Windows.VisualState>指向任何元素的对象，它们是特别有用的方式，以使其他进行重新定义的可视行为<xref:System.Windows.Controls.Control>。 如果你创建使用的自定义控件<xref:System.Windows.Controls.ControlTemplate>，你可以指定所处的状态控件，可通过添加具有<xref:System.Windows.TemplateVisualStateAttribute>上其类定义。 然后创建一个新的人<xref:System.Windows.Controls.ControlTemplate>为您的控件可以添加<xref:System.Windows.VisualState>到模板的对象。 <xref:System.Windows.TemplateVisualStateAttribute>使设计器工具，如 Expression Blend，公开控件的状态。 具有相同的状态<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType>属于同一个<xref:System.Windows.VisualStateGroup>。  
  
 有关如何使用<xref:System.Windows.VisualStateGroup>中的对象<xref:System.Windows.Controls.ControlTemplate>，请参阅[通过创建 ControlTemplate 自定义现有的控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。 对于详细了解如何创建控件使用<xref:System.Windows.VisualStateManager>，请参阅[创建控件，其可自定义外观](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。  
  
 <xref:System.Windows.VisualStateGroup.Transitions%2A>属性包含<xref:System.Windows.VisualTransition>中定义对象时控制转换的各状态之间应用<xref:System.Windows.VisualStateGroup>。  
  
   
  
## Examples  
 下面的示例创建一个简单<xref:System.Windows.Controls.ControlTemplate>为<xref:System.Windows.Controls.Button>，其中包含一个<xref:System.Windows.Controls.Grid>。 它还包含<xref:System.Windows.VisualStateGroup>名为`CommonStates`，后者定义了`MouseOver`和`Normal`状态。 <xref:System.Windows.VisualStateGroup>还有<xref:System.Windows.VisualTransition>，它指定它采用半秒<xref:System.Windows.Controls.Grid>更改从绿色到红色，当用户将鼠标指针移到<xref:System.Windows.Controls.Button>。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualStateGroup" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.VisualState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.VisualState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As VisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VisualState ^ CurrentState { System::Windows::VisualState ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前应用到该控件的 <see cref="T:System.Windows.VisualState" />。</summary>
        <value>当前应用到该控件的 <see cref="T:System.Windows.VisualState" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanged As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控件转换为其他状态后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在控件转换到新的状态后会发生此事件与<xref:System.Windows.VisualStateGroup.CurrentStateChanging>事件发生。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanging" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanging As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控件开始向其他状态转换时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当在控件开始转换状态，则事件发生。 如果<xref:System.Windows.VisualTransition>应用对状态更改，此事件转换开始时发生。 如果<xref:System.Windows.VisualTransition>未应用，会发生此事件后控件会转换为新的状态，但之前<xref:System.Windows.VisualStateGroup.CurrentStateChanged>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.VisualStateGroup" /> 的名称。</summary>
        <value>
          <see cref="T:System.Windows.VisualStateGroup" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件作者指定所处的状态控件可以通过添加在<xref:System.Windows.TemplateVisualStateAttribute>上其类定义。 具有相同的状态<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType>属于同一个<xref:System.Windows.VisualStateGroup>。 设置<xref:System.Windows.VisualStateGroup.Name%2A>的<xref:System.Windows.VisualStateGroup>为的值<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType>属性。  
  
   
  
## Examples  
 下面的示例创建两个<xref:System.Windows.VisualStateGroup>命名的对象`CommonStates`和`FocusStates`。 控件将处于从各个恰好一个状态<xref:System.Windows.VisualStateGroup>在所有时间。 有关完整示例，请参阅[通过创建 ControlTemplate 自定义现有的控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#5](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="States">
      <MemberSignature Language="C#" Value="public System.Collections.IList States { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList States" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.States" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property States As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ States { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取互斥 <see cref="T:System.Windows.VisualState" /> 对象的集合。</summary>
        <value>互斥 <see cref="T:System.Windows.VisualState" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建一个简单<xref:System.Windows.Controls.ControlTemplate>为<xref:System.Windows.Controls.Button>，其中包含一个<xref:System.Windows.Controls.Grid>。 它还包含<xref:System.Windows.VisualStateGroup>名为`CommonStates`，后者定义了`MouseOver`和`Normal`状态。 <xref:System.Windows.VisualStateGroup>还有<xref:System.Windows.VisualTransition>，它指定它采用半秒<xref:System.Windows.Controls.Grid>更改从绿色到红色，当用户将鼠标指针移到<xref:System.Windows.Controls.Button>。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitions">
      <MemberSignature Language="C#" Value="public System.Collections.IList Transitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Transitions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Transitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transitions As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Transitions { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.VisualTransition" /> 对象的集合。</summary>
        <value>
          <see cref="T:System.Windows.VisualTransition" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualTransition>中的对象<xref:System.Windows.VisualStateGroup.Transitions%2A>中定义的各状态间的控件转换时，将应用<xref:System.Windows.VisualStateGroup>。  
  
   
  
## Examples  
 下面的示例创建一个简单<xref:System.Windows.Controls.ControlTemplate>为<xref:System.Windows.Controls.Button>，其中包含一个<xref:System.Windows.Controls.Grid>。 它还包含<xref:System.Windows.VisualStateGroup>名为`CommonStates`，后者定义了`MouseOver`和`Normal`状态。 <xref:System.Windows.VisualStateGroup>还有<xref:System.Windows.VisualTransition>，它指定它采用半秒<xref:System.Windows.Controls.Grid>更改从绿色到红色，当用户将鼠标指针移到<xref:System.Windows.Controls.Button>。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>