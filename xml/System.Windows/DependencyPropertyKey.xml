<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a12e407bc5345e416145c390f8fcd6f8262c445" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676971" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a622b-101">提供依赖项对象标识符，以便对只读依赖项对象进行有限的写访问。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a622b-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a622b-102"><xref:System.Windows.DependencyPropertyKey> 实例作为依赖项属性注册调用使用方法的返回值中获得的<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>或<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>。</span><span class="sxs-lookup"><span data-stu-id="a622b-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="a622b-103">注册一个依赖项属性的类型可以使用<xref:System.Windows.DependencyPropertyKey>调用<xref:System.Windows.DependencyObject.SetValue%2A>和<xref:System.Windows.DependencyObject.ClearValue%2A>，调整属性的值作为类逻辑的一部分。</span><span class="sxs-lookup"><span data-stu-id="a622b-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="a622b-104">如果允许密钥的访问级别，相关的类也可以使用的密钥和依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a622b-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="a622b-105">例如，可以声明为内部，密钥，而同一程序集内的其他类型还可以设置该依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a622b-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="a622b-106"><xref:System.Windows.DependencyPropertyKey>返回的只读依赖属性注册不应成为公共的因为公开键将使该属性可设置，从而与将它注册为只读依赖属性的点。</span><span class="sxs-lookup"><span data-stu-id="a622b-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="a622b-107">此外，公开密钥还会使可用依赖项对象之间的不匹配属性行为并将其[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]属性包装实现，这是不好的类设计。</span><span class="sxs-lookup"><span data-stu-id="a622b-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="a622b-108">而不是公开密钥本身，而是应公开<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值<xref:System.Windows.DependencyPropertyKey>作为`public static readonly`<xref:System.Windows.DependencyProperty>上您的类。</span><span class="sxs-lookup"><span data-stu-id="a622b-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="a622b-109">这样，要返回一个有效的依赖属性标识符，对于某些属性系统操作，如枚举本地设置值的属性。</span><span class="sxs-lookup"><span data-stu-id="a622b-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="a622b-110">但是，从而获取的标识符不具有的全部功能<xref:System.Windows.DependencyProperty>对于许多属性系统操作。</span><span class="sxs-lookup"><span data-stu-id="a622b-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a622b-111">下面的示例来注册只读依赖属性，并还会将密钥用于在其他类成员的两个用途： 实现 get"包装"，并设置的值的受保护的确定操作的标识符作为基于计算其他属性值。</span><span class="sxs-lookup"><span data-stu-id="a622b-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a622b-112">获取与此专用只读依赖项对象标识符关联的依赖项对象标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a622b-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a622b-113">相关的依赖项对象标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a622b-113">The relevant dependency property identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a622b-114"><xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值，将启用要参与到公共使用的相同的接口部分所使用的读写依赖项属性的属性系统操作的只读属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="a622b-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="a622b-115">为了实现只读依赖属性的 get 属性访问器，你应创建和公开<xref:System.Windows.DependencyProperty>在类上的标识符。</span><span class="sxs-lookup"><span data-stu-id="a622b-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="a622b-116">这有两个用途：</span><span class="sxs-lookup"><span data-stu-id="a622b-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="a622b-117">你自己的类需要<xref:System.Windows.DependencyProperty>为了实现属性包装了 get 访问器的标识符。</span><span class="sxs-lookup"><span data-stu-id="a622b-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="a622b-118">你使用<xref:System.Windows.DependencyProperty>的参数<xref:System.Windows.DependencyObject.GetValue%2A>实现 get 访问器的调用。</span><span class="sxs-lookup"><span data-stu-id="a622b-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="a622b-119"><xref:System.Windows.DependencyProperty> 标识符公开到属性系统依赖项属性，以便其他依赖于元数据的方法可以在标准窗体中访问它。</span><span class="sxs-lookup"><span data-stu-id="a622b-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="a622b-120">例如，如果调用<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>上某些<xref:System.Windows.DependencyObject>和标识符获取本地设置的属性 （值和标识符） 的枚举为只读依赖属性将返回你<xref:System.Windows.DependencyProperty>值而不是键。</span><span class="sxs-lookup"><span data-stu-id="a622b-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="a622b-121">不公开<xref:System.Windows.DependencyProperty>标识符不会增加的安全性以任何方式你只读依赖属性，它只是使牵涉到属性更繁琐后续派生的类和类实例的操作。</span><span class="sxs-lookup"><span data-stu-id="a622b-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="a622b-122">若要公开<xref:System.Windows.DependencyProperty>调用您的类的标识符，<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>直接在你的密钥。</span><span class="sxs-lookup"><span data-stu-id="a622b-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="a622b-123">使用此值来创建`public static readonly`<xref:System.Windows.DependencyProperty>中指的类标识符<xref:System.Windows.DependencyPropertyKey>。</span><span class="sxs-lookup"><span data-stu-id="a622b-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a622b-124">下面的示例调用<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>公开<xref:System.Windows.DependencyProperty>标识符 (`AquariumGraphicProperty`) 为`AquariumGraphic`的类上的只读依赖属性。</span><span class="sxs-lookup"><span data-stu-id="a622b-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="a622b-125">该示例还演示<xref:System.Windows.DependencyPropertyKey>（作为内部的成员） 的创建和 get 访问器`AquariumGraphic`。</span><span class="sxs-lookup"><span data-stu-id="a622b-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="a622b-126">作为此依赖项对象存在基础以及应依据其重写元数据的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a622b-126">The type on which this dependency property exists and metadata should be overridden.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="a622b-127">为此类型提供的元数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a622b-127">Metadata supplied for this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a622b-128">重写由此依赖项对象标识符表示的只读依赖项对象的元数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a622b-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a622b-129">重写只读依赖属性上的元数据出于类似重写上读写依赖项属性的元数据的原因，因为元数据中指定的行为可能会更改的组行为 (仅限于密钥级别的访问权限默认值，例如）。</span><span class="sxs-lookup"><span data-stu-id="a622b-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="a622b-130">为具有读写依赖项属性重写只读依赖属性的元数据应仅在之前完成通过属性系统正在放入使用该属性 (这相当于时间注册的对象的该特定实例属性是实例化）。</span><span class="sxs-lookup"><span data-stu-id="a622b-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="a622b-131">调用<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>仅应在提供本身为的类型的静态构造函数中执行`forType`此方法或为该类的等效初始化参数。</span><span class="sxs-lookup"><span data-stu-id="a622b-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="a622b-132">此方法有效地将转发到<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法，并传递<xref:System.Windows.DependencyPropertyKey>作为按键参数的实例。</span><span class="sxs-lookup"><span data-stu-id="a622b-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a622b-133">下面的示例重写现有只读依赖属性的一个类继承的元数据。</span><span class="sxs-lookup"><span data-stu-id="a622b-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="a622b-134">在这种情况下，方案的目标是要添加的基属性元数据没有强制值回调。</span><span class="sxs-lookup"><span data-stu-id="a622b-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="a622b-135">任何其他原因，重写元数据通常是适当无法还重写元数据 (更改默认值、 添加<xref:System.Windows.FrameworkPropertyMetadataOptions>值，等等。)</span><span class="sxs-lookup"><span data-stu-id="a622b-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a622b-136">尝试在读写依赖项对象上进行元数据重写（无法使用此签名完成该操作）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a622b-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a622b-137">当属性存在于提供的类型上时，已为该属性建立元数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a622b-137">Metadata was already established for the property as it exists on the provided type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>