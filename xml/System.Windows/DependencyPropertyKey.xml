<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a12e407bc5345e416145c390f8fcd6f8262c445" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676971" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供依赖项对象标识符，以便对只读依赖项对象进行有限的写访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> 实例作为依赖项属性注册调用使用方法的返回值中获得的<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>或<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>。  
  
 注册一个依赖项属性的类型可以使用<xref:System.Windows.DependencyPropertyKey>调用<xref:System.Windows.DependencyObject.SetValue%2A>和<xref:System.Windows.DependencyObject.ClearValue%2A>，调整属性的值作为类逻辑的一部分。 如果允许密钥的访问级别，相关的类也可以使用的密钥和依赖项属性。 例如，可以声明为内部，密钥，而同一程序集内的其他类型还可以设置该依赖项属性。  
  
 <xref:System.Windows.DependencyPropertyKey>返回的只读依赖属性注册不应成为公共的因为公开键将使该属性可设置，从而与将它注册为只读依赖属性的点。 此外，公开密钥还会使可用依赖项对象之间的不匹配属性行为并将其[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]属性包装实现，这是不好的类设计。  
  
 而不是公开密钥本身，而是应公开<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值<xref:System.Windows.DependencyPropertyKey>作为`public static readonly`<xref:System.Windows.DependencyProperty>上您的类。 这样，要返回一个有效的依赖属性标识符，对于某些属性系统操作，如枚举本地设置值的属性。 但是，从而获取的标识符不具有的全部功能<xref:System.Windows.DependencyProperty>对于许多属性系统操作。  
  
   
  
## Examples  
 下面的示例来注册只读依赖属性，并还会将密钥用于在其他类成员的两个用途： 实现 get"包装"，并设置的值的受保护的确定操作的标识符作为基于计算其他属性值。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此专用只读依赖项对象标识符关联的依赖项对象标识符。</summary>
        <value>相关的依赖项对象标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值，将启用要参与到公共使用的相同的接口部分所使用的读写依赖项属性的属性系统操作的只读属性的标识符。  
  
 为了实现只读依赖属性的 get 属性访问器，你应创建和公开<xref:System.Windows.DependencyProperty>在类上的标识符。 这有两个用途：  
  
-   你自己的类需要<xref:System.Windows.DependencyProperty>为了实现属性包装了 get 访问器的标识符。 你使用<xref:System.Windows.DependencyProperty>的参数<xref:System.Windows.DependencyObject.GetValue%2A>实现 get 访问器的调用。  
  
-   <xref:System.Windows.DependencyProperty> 标识符公开到属性系统依赖项属性，以便其他依赖于元数据的方法可以在标准窗体中访问它。 例如，如果调用<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>上某些<xref:System.Windows.DependencyObject>和标识符获取本地设置的属性 （值和标识符） 的枚举为只读依赖属性将返回你<xref:System.Windows.DependencyProperty>值而不是键。 不公开<xref:System.Windows.DependencyProperty>标识符不会增加的安全性以任何方式你只读依赖属性，它只是使牵涉到属性更繁琐后续派生的类和类实例的操作。  
  
 若要公开<xref:System.Windows.DependencyProperty>调用您的类的标识符，<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>直接在你的密钥。 使用此值来创建`public static readonly`<xref:System.Windows.DependencyProperty>中指的类标识符<xref:System.Windows.DependencyPropertyKey>。  
  
   
  
## Examples  
 下面的示例调用<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>公开<xref:System.Windows.DependencyProperty>标识符 (`AquariumGraphicProperty`) 为`AquariumGraphic`的类上的只读依赖属性。 该示例还演示<xref:System.Windows.DependencyPropertyKey>（作为内部的成员） 的创建和 get 访问器`AquariumGraphic`。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">作为此依赖项对象存在基础以及应依据其重写元数据的类型。</param>
        <param name="typeMetadata">为此类型提供的元数据。</param>
        <summary>重写由此依赖项对象标识符表示的只读依赖项对象的元数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写只读依赖属性上的元数据出于类似重写上读写依赖项属性的元数据的原因，因为元数据中指定的行为可能会更改的组行为 (仅限于密钥级别的访问权限默认值，例如）。  
  
 为具有读写依赖项属性重写只读依赖属性的元数据应仅在之前完成通过属性系统正在放入使用该属性 (这相当于时间注册的对象的该特定实例属性是实例化）。 调用<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>仅应在提供本身为的类型的静态构造函数中执行`forType`此方法或为该类的等效初始化参数。  
  
 此方法有效地将转发到<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法，并传递<xref:System.Windows.DependencyPropertyKey>作为按键参数的实例。  
  
   
  
## Examples  
 下面的示例重写现有只读依赖属性的一个类继承的元数据。 在这种情况下，方案的目标是要添加的基属性元数据没有强制值回调。 任何其他原因，重写元数据通常是适当无法还重写元数据 (更改默认值、 添加<xref:System.Windows.FrameworkPropertyMetadataOptions>值，等等。)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尝试在读写依赖项对象上进行元数据重写（无法使用此签名完成该操作）。</exception>
        <exception cref="T:System.ArgumentException">当属性存在于提供的类型上时，已为该属性建立元数据。</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>