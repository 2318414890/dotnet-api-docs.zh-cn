<Type Name="TemplateBindingExtensionConverter" FullName="System.Windows.TemplateBindingExtensionConverter">
  <TypeSignature Language="C#" Value="public class TemplateBindingExtensionConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TemplateBindingExtensionConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.TemplateBindingExtensionConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class TemplateBindingExtensionConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TemplateBindingExtensionConverter : System::ComponentModel::TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ab158-101">一个类型转换器，用于在序列化过程中依据实例构造 <see cref="T:System.Windows.TemplateBindingExtension" />。</span><span class="sxs-lookup"><span data-stu-id="ab158-101">A type converter that is used to construct a <see cref="T:System.Windows.TemplateBindingExtension" /> from an instance during serialization.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemplateBindingExtensionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExtensionConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TemplateBindingExtensionConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab158-102">初始化 <see cref="T:System.Windows.TemplateBindingExtensionConverter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ab158-102">Initializes a new instance of the <see cref="T:System.Windows.TemplateBindingExtensionConverter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExtensionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="ab158-103">一个提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="ab158-103">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> implementation that provides a format context.</span></span></param>
        <param name="destinationType"><span data-ttu-id="ab158-104">转换输出的所需类型。</span><span class="sxs-lookup"><span data-stu-id="ab158-104">The desired type of the conversion's output.</span></span></param>
        <summary><span data-ttu-id="ab158-105">返回此转换器能否使用指定上下文将对象转换为指定类型。</span><span class="sxs-lookup"><span data-stu-id="ab158-105">Returns whether this converter can convert the object to the specified type, using the specified context.</span></span></summary>
        <returns>
          <span data-ttu-id="ab158-106">如果此转换器能够执行请求的转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ab158-106"><see langword="true" /> if this converter can perform the requested conversion; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ab158-107">只有 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的 <paramref name="destinationType" /> 才会返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="ab158-107">Only a <paramref name="destinationType" /> of <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> will return <see langword="true" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.TemplateBindingExtensionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="ab158-108">一个提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="ab158-108">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> implementation that provides a format context.</span></span></param>
        <param name="culture"><span data-ttu-id="ab158-109"><see cref="T:System.Globalization.CultureInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="ab158-109">A <see cref="T:System.Globalization.CultureInfo" /> object.</span></span> <span data-ttu-id="ab158-110">如果传递了 null 引用，则采用当前区域性。</span><span class="sxs-lookup"><span data-stu-id="ab158-110">If a null reference is passed, the current culture is assumed.</span></span></param>
        <param name="value"><span data-ttu-id="ab158-111">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="ab158-111">The value to convert.</span></span></param>
        <param name="destinationType"><span data-ttu-id="ab158-112">要转换为的所需类型。</span><span class="sxs-lookup"><span data-stu-id="ab158-112">The desired type to convert to.</span></span></param>
        <summary><span data-ttu-id="ab158-113">将给定值对象转换为指定的类型。</span><span class="sxs-lookup"><span data-stu-id="ab158-113">Converts the given value object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="ab158-114">转换后的值。</span><span class="sxs-lookup"><span data-stu-id="ab158-114">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab158-115">仅`destinationType`的<xref:System.ComponentModel.Design.Serialization.InstanceDescriptor>将返回源自此实现的值。</span><span class="sxs-lookup"><span data-stu-id="ab158-115">Only a `destinationType` of <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor> will return a value originating from this implementation.</span></span> <span data-ttu-id="ab158-116">为提供的任何其他类型`destinationType`会导致此方法调用基类，这样将导致没有可用的转换后的值，并且仅用于基本验证的剩余参数。</span><span class="sxs-lookup"><span data-stu-id="ab158-116">Any other type provided for `destinationType` will cause this method to call base, which will result in no usable converted value and only serves for basic validation of the remaining parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.TemplateBindingExtensionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      </Docs>
    </Member>
  </Members>
</Type>