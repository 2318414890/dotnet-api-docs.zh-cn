<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0ea78cb7b03c94b3d66ae42736ef1796f433d34a" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57926782" /></Metadata><TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>实现一个数据结构，用于将某个属性描述为另一个属性或所属类型下的路径。 属性路径用在对象的数据绑定中，并用在动画的演示图板和时间线中。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类包含一个字符串<xref:System.Windows.PropertyPath.Path%2A>，以及所依赖项属性的列表<xref:System.Windows.PropertyPath.PathParameters%2A>到字符串<xref:System.Windows.PropertyPath.Path%2A>。  
  
 <xref:System.Windows.PropertyPath> 支持两种模式的行为：  
  
 **源模式**描述用作源的某个其他操作的属性的路径。 通过使用此模式<xref:System.Windows.Data.Binding>类，以支持数据绑定。  
  
 **目标模式**描述将设置为目标属性的属性的路径。 此模式可供支持情节提要和时间线 setter 的动画。  
  
 例如，`Background.Opacity`是双重路径。 此路径意味着： 首先，查找`Background`对象的属性获取的值对象`Background`属性设置为，，然后获取的值`Opacity`对该对象的属性。  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a>XAML 值  
 *propertyPath*  
 计算结果为简单或复杂属性路径字符串。 设置的语法<xref:System.Windows.PropertyPath>中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]是通用的但复杂，并在单独主题中所述[PropertyPath XAML 语法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/056aee79-7cdd-434f-8174-dfc856cad343">x:Static 标记扩展</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.PropertyPath" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">一个属性路径，它描述[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 属性或单一依赖项属性的路径。</param>
        <summary>初始化 <see cref="T:System.Windows.PropertyPath" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数具有两个完全不同的用法，具体取决于是否正在使用的源模式属性路径的绑定或情节提要目标的目标模式单步执行属性路径。  
  
 如果使用此<xref:System.Windows.PropertyPath>在源模式中的绑定`parameter`是一个表示属性名称的字符串，也可以是一个字符串，描述中的属性的"单步执行"路径[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]用作源的对象的对象模型用于绑定。 绑定属性路径，请标识"步骤"的字符是一个点 （.）。 此外支持索引器引用 （包括多个索引器和类型区分）。 有关详细信息的明确地使用的字符串的语法<xref:System.Windows.Data.Binding>对象，请参阅<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>。 用作绑定源的属性不需要依赖项属性。 如果双向绑定，更新所引用的属性必须是读写。 另请注意，绑定目标必须是依赖项属性。 有关详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 如果使用此<xref:System.Windows.PropertyPath>在目标情节提要目标的单步执行路径的模式下`parameter`通常情况下提供作为类型<xref:System.Windows.DependencyProperty>。 此外可以指定一个字符串，它<xref:System.Windows.DependencyProperty.Name%2A>。 其中一种计算结果为相同的结果，因为它作为字符串在内部存储。 提供<xref:System.Windows.DependencyProperty>转换为一个字符串，通过<xref:System.Windows.Markup.DependencyPropertyConverter>。 <xref:System.Windows.Markup.DependencyPropertyConverter>依赖属性支持使用限定的命名格式，因此可以指定*typeName*。*propertyName*限定到的依赖项属性名称字符串<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>在代码中的构造函数。 依赖项属性标识符的限定的路径是不同的概念，而复杂的路径。 复杂路径<xref:System.Windows.PropertyPath>应改为创建使用<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>构造函数。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">一个以标记化格式指定 <see cref="P:System.Windows.PropertyPath.Path" /> 的字符串。</param>
        <param name="pathParameters">一个设置 <see cref="P:System.Windows.PropertyPath.PathParameters" /> 的对象数组。</param>
        <summary>使用提供的路径标记字符串和参数初始化 <see cref="T:System.Windows.PropertyPath" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此签名通常仅用于目标模式<xref:System.Windows.PropertyPath>复杂路径的用法。  
  
 此构造函数支持`params`为`pathParameters`构造函数参数。 因此，您可以指定的内容`pathParameters`作为一系列以逗号分隔的构造函数自变量填充数组，而不是无需划分数组维度，然后填充其与`pathParameters`项。 指定每个项必须是以下类型之一： <xref:System.Windows.DependencyProperty>， <xref:System.Reflection.PropertyInfo>， <xref:System.ComponentModel.PropertyDescriptor>。  
  
 有关参数的要求的详细信息，请参阅<xref:System.Windows.PropertyPath.Path%2A>和<xref:System.Windows.PropertyPath.PathParameters%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置描述路径的字符串。</summary>
        <value>描述路径的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性中包含的字符串具有三个完全不同的含义，具体取决于是否<xref:System.Windows.PropertyPath>用于一个情节提要目标、 目标模式单步执行属性路径的绑定，或一个复杂的源模式属性路径情节提要目标路径。  
  
 如果使用此<xref:System.Windows.PropertyPath>在源模式中的绑定<xref:System.Windows.PropertyPath.Path%2A>是一个表示属性名称的字符串，也可以是一个字符串，描述中的属性的"单步执行"路径[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]用作源的对象的对象模型用于绑定。 绑定属性路径，请标识"步骤"的字符是一个点 （.）。 此外支持索引器引用 （包括多个索引器和类型区分）。 有关详细信息的明确地使用的字符串的语法<xref:System.Windows.Data.Binding>对象，请参阅<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>。 用作绑定源的属性不需要依赖项属性。 如果双向绑定，更新的属性源必须是读写。 另请注意，绑定目标必须是依赖项属性。 有关详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 如果使用此<xref:System.Windows.PropertyPath>在目标情节提要目标的单步执行路径的模式下<xref:System.Windows.PropertyPath>是一个字符串，它*typeName*。*propertyName*限定依赖项属性名称字符串。  
  
 如果使用此<xref:System.Windows.PropertyPath>情节提要目标的复杂路径<xref:System.Windows.PropertyPath.Path%2A>是一种已标记化的字符串格式，描述中提供的各种对象的关系<xref:System.Windows.PropertyPath.PathParameters%2A>。  
  
-   括在括号中的项的数组索引的情况下，按以下格式指定数组中的每个项。 例如，若要指定数组中的第一项，字符串标记是`(0)`。  
  
-   由点 （.） 指定项 （如在路径中的"步骤"） 之间的关系。 前面的点属性是第一步在路径中之后, 的属性是第二个步骤中，依此类推 （您可以指定超过两个步骤）。 链中的最后一步始终表示正在进行动画处理的属性。  
  
-   通过索引器语法，在方括号内的索引访问集合属性中的项 （[和]）。 索引器是累加到标记表示的属性。 例如，下面是需要两个路径，指定从该属性的集合中的第二个项的第一步中标记的组合： `(0)[1].(1)` 。 链; 中的最后一个属性不能使用索引器不能实际集合位置进行动画处理，必须对该对象的属性进行动画处理。  
  
 路径字符串<xref:System.Windows.PropertyPath>通常通过构造函数建立：<xref:System.Windows.PropertyPath.%23ctor%28System.Object%29>绑定或单步情节提要目标签名<xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29>多步骤情节提要目标的签名。  
  
 **XAML:** 当你使用<xref:System.Windows.PropertyPath>来描述中的属性引用[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，如由类型转换器首先处理的属性值，指定的字符串 (<xref:System.Windows.PropertyPathConverter>)。 然后，此类型转换器处理字符串并基于其语法调用的其中一个<xref:System.Windows.PropertyPath>构造函数签名。 处理特性值的类型转换器通过这种间接方式通常是如何使用<xref:System.Windows.PropertyPath>中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，而不是声明<xref:System.Windows.PropertyPath>对象元素，然后应用到属性的特定值，如<xref:System.Windows.PropertyPath.Path%2A>和<xref:System.Windows.PropertyPath.PathParameters%2A>. 有关详细信息，请参阅[PropertyPath XAML 语法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a>XAML 文本使用情况  
 成员<xref:System.Windows.PropertyPath>类型通常未设置以直接[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法。 请参阅“备注”。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在路径引用索引参数时使用的参数列表。</summary>
        <value>参数列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关属性<xref:System.Windows.PropertyPath>通常是通过构造函数。 为设置<xref:System.Windows.PropertyPath.PathParameters%2A>，则<xref:System.Windows.PropertyPath.%23ctor%2A>构造函数功能特别便利因为`pathParameters`构造函数参数指定为`params`，这意味着，您不需要创建或维度构造一个数组。 您只需指定为一个附加参数的数组的每个成员。  
  
 如果最后一个属性的目标是<xref:System.Windows.Freezable>键入时，将克隆值。 有关详细信息，请参阅[情节提要概述](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。  
  
 情节提要动画机制执行属性链的实际计算。 在<xref:System.Windows.PropertyPath>级别，不执行任何验证，确保路径的步骤在所有连接。 例如，可以构造具有的属性路径<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>第一步，和<xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType>作为第二个步骤。 此类的属性路径将失败; 如果这实际应用为目标，因为画笔类型来填满<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>不具有<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType>属性。 无效的属性路径以静默方式失败。 有关详细信息，请参阅[情节提要概述](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。  
  
 **XAML:** 当你使用<xref:System.Windows.PropertyPath>来描述中的属性引用[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，如由类型转换器首先处理的属性值，指定的字符串 (<xref:System.Windows.PropertyPathConverter>)。 然后，此类型转换器处理字符串并基于其语法调用的其中一个<xref:System.Windows.PropertyPath>构造函数签名。 处理特性值的类型转换器通过这种间接方式通常是如何使用<xref:System.Windows.PropertyPath>中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，而不是声明<xref:System.Windows.PropertyPath>对象元素，然后应用到属性的特定值，如<xref:System.Windows.PropertyPath.Path%2A>和<xref:System.Windows.PropertyPath.PathParameters%2A>. 有关详细信息，请参阅[PropertyPath XAML 语法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a>XAML 文本使用情况  
 成员<xref:System.Windows.PropertyPath>类型通常未设置以直接[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法。 请参阅“备注”。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>