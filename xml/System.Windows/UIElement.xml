<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0ba1c74c19e4056d5f4638cd5f3b2bd1fd280ca0" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53517748" /></Metadata><TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6cffe-101"><see cref="T:System.Windows.UIElement" /> 是 WPF 核心级实现的基类，这些实现是在 Windows Presentation Foundation (WPF) 元素和基本表示特性上生成的。</span><span class="sxs-lookup"><span data-stu-id="6cffe-101"><see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-102"><xref:System.Windows.UIElement> 用于元素布局特征，还可以重写派生类的虚方法，这可能会影响呈现行为的元素及其子元素的布局的公开提供的起始点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-102"><xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</span></span>  
  
 <span data-ttu-id="6cffe-103">大部分的输入和焦点的元素的行为通常中也定义<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-103">Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="6cffe-104">这包括键盘、 鼠标和触笔输入和相关的状态属性的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-104">This includes the events for keyboard, mouse and stylus input, and related status properties.</span></span> <span data-ttu-id="6cffe-105">许多这些事件是路由的事件，并有许多与输入相关的事件的这两个浮升路由版本，以及事件的隧道版本。</span><span class="sxs-lookup"><span data-stu-id="6cffe-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="6cffe-106">这些配对的事件通常是控件作者最感兴趣的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="6cffe-107"><xref:System.Windows.UIElement> 此外包括[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]使与相关[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]事件模型，包括可以引发指定的方法路由源自元素实例的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-107"><xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="6cffe-108">在体系结构，方面<xref:System.Windows.UIElement>可被视为大致相当于的窗口句柄[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]编程中或在元素[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]编程。</span><span class="sxs-lookup"><span data-stu-id="6cffe-108">In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming.</span></span> <span data-ttu-id="6cffe-109"><xref:System.Windows.UIElement> 是 WPF 核心级的基本元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-109"><xref:System.Windows.UIElement> is a base element at the WPF core level.</span></span>  
  
 <span data-ttu-id="6cffe-110">一个<xref:System.Windows.UIElement>具有以下功能的具体定义<xref:System.Windows.UIElement>类：</span><span class="sxs-lookup"><span data-stu-id="6cffe-110">A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:</span></span>  
  
-   <span data-ttu-id="6cffe-111">可以呈现为子元素 (<xref:System.Windows.UIElement>派生自<xref:System.Windows.Media.Visual>，高级图形类)</span><span class="sxs-lookup"><span data-stu-id="6cffe-111">Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)</span></span>  
  
-   <span data-ttu-id="6cffe-112">包含用于调整大小和位置的可能的子元素的逻辑<xref:System.Windows.UIElement>（时由布局系统解释）</span><span class="sxs-lookup"><span data-stu-id="6cffe-112">Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)</span></span>  
  
-   <span data-ttu-id="6cffe-113">可以响应用户输入 （包括其中输入发送到通过其处理的事件路由或路由的命令的控件）</span><span class="sxs-lookup"><span data-stu-id="6cffe-113">Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</span></span>  
  
-   <span data-ttu-id="6cffe-114">可以引发逻辑元素树路由的路由的事件</span><span class="sxs-lookup"><span data-stu-id="6cffe-114">Can raise routed events that travel a route through the logical element tree</span></span>  
  
-   <span data-ttu-id="6cffe-115">支持动画系统的某些方面</span><span class="sxs-lookup"><span data-stu-id="6cffe-115">Supports some aspects of the animation system</span></span>  
  
 <span data-ttu-id="6cffe-116"><xref:System.Windows.FrameworkElement> 是基础构建的 WPF 框架级别实现类<xref:System.Windows.UIElement>，并将添加与 WPF 框架级别的特定交互。</span><span class="sxs-lookup"><span data-stu-id="6cffe-116"><xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level.</span></span> <span data-ttu-id="6cffe-117"><xref:System.Windows.FrameworkElement> 添加和定义了以下功能：</span><span class="sxs-lookup"><span data-stu-id="6cffe-117"><xref:System.Windows.FrameworkElement> adds and defines the following capabilities:</span></span>  
  
-   <span data-ttu-id="6cffe-118">其他特定于框架的布局特征</span><span class="sxs-lookup"><span data-stu-id="6cffe-118">Additional framework-specific layout characteristics</span></span>  
  
-   <span data-ttu-id="6cffe-119">更丰富的元数据报告属性的支持</span><span class="sxs-lookup"><span data-stu-id="6cffe-119">Support for richer metadata reporting on properties</span></span>  
  
-   <span data-ttu-id="6cffe-120">特定于类的实现的特定输入基类，这些类和其附加的属性或附加事件</span><span class="sxs-lookup"><span data-stu-id="6cffe-120">Class-specific implementation of certain input base classes and their attached properties or attached events</span></span>  
  
-   <span data-ttu-id="6cffe-121">样式支持</span><span class="sxs-lookup"><span data-stu-id="6cffe-121">Style support</span></span>  
  
-   <span data-ttu-id="6cffe-122">进一步的动画支持</span><span class="sxs-lookup"><span data-stu-id="6cffe-122">Further animation support</span></span>  
  
 <span data-ttu-id="6cffe-123">另一个相关的类是<xref:System.Windows.ContentElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-123">Another related class is <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="6cffe-124"><xref:System.Windows.ContentElement>类实现相同的成员执行的许多<xref:System.Windows.UIElement>; 这两个类之间的差异具有执行其预期与将放入的整体内容模型。</span><span class="sxs-lookup"><span data-stu-id="6cffe-124">The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model.</span></span> <span data-ttu-id="6cffe-125">一个<xref:System.Windows.UIElement>派生的类通常定义相对严格的内容模型中，这意味着有哪些元素可能是在标记中的子元素的限制。</span><span class="sxs-lookup"><span data-stu-id="6cffe-125">A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</span></span> <span data-ttu-id="6cffe-126">可能会花限制较少的子内容的容量<xref:System.Windows.UIElement>，但该功能通常集中在指定的内容属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-126">There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties.</span></span> <span data-ttu-id="6cffe-127">一个<xref:System.Windows.ContentElement>派生的类通常不是限制有关内容，以支持方案，例如流格式的文档。</span><span class="sxs-lookup"><span data-stu-id="6cffe-127">A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cffe-128"><xref:System.Windows.UIElement.Visibility%2A> 状态会影响该元素的所有输入处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-128"><xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="6cffe-129">不可见的元素不参与命中测试和不接收输入的事件，即使鼠标位于边界的元素将是如果可见。</span><span class="sxs-lookup"><span data-stu-id="6cffe-129">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-130">初始化 <see cref="T:System.Windows.UIElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-130">Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-131">创建一个新实例的类型实际上是<xref:System.Windows.UIElement>并不常见，在应用程序代码中，因为<xref:System.Windows.UIElement>是基本元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-131">Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element.</span></span> <span data-ttu-id="6cffe-132">请参阅[基元素概述](~/docs/framework/wpf/advanced/base-elements-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-132">See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cffe-133">为指定的路由事件添加路由事件处理程序，并将该处理程序添加到当前元素的处理程序集合中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-133">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="6cffe-134">要处理的路由事件的标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-134">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="6cffe-135">对处理程序实现的引用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-135">A reference to the handler implementation.</span></span></param>
        <summary><span data-ttu-id="6cffe-136">为指定的路由事件添加路由事件处理程序，并将该处理程序添加到当前元素的处理程序集合中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-136">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-137">可以将相同事件的同一处理程序添加多个时间并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="6cffe-137">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="6cffe-138">但是，实际调用处理程序处理该事件时的多个时间。</span><span class="sxs-lookup"><span data-stu-id="6cffe-138">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="6cffe-139">因此，请考虑此行为可能应该在处理程序实现中考虑的副作用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-139">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="6cffe-140">通常使用此方法提供的"添加"访问器实现[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自定义的路由事件的访问模式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-140">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="6cffe-141">要处理的路由事件的标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-141">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="6cffe-142">对处理程序实现的引用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-142">A reference to the handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="6cffe-143">如果为 <see langword="true" />，则将按以下方式注册处理程序：即使路由事件在其事件数据中标记为已处理，也会调用处理程序；如果为 <see langword="false" />，则使用默认条件注册处理程序，即当路由事件被标记为已处理时，将不调用处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-143"><see langword="true" /> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span></span>  
  
<span data-ttu-id="6cffe-144">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-144">The default is <see langword="false" />.</span></span>  
  
<span data-ttu-id="6cffe-145">请勿定期请求重新处理路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-145">Do not routinely ask to rehandle a routed event.</span></span></param>
        <summary><span data-ttu-id="6cffe-146">为指定的路由事件添加路由事件处理程序，并将该处理程序添加到当前元素的处理程序集合中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-146">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span> <span data-ttu-id="6cffe-147">将 <paramref name="handledEventsToo" /> 指定为 <see langword="true" />，可为已标记为由事件路由中的其他元素处理的路由事件调用所提供的处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-147">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-148">以实用方式处理低级别的输入的事件是一个复杂的任务。</span><span class="sxs-lookup"><span data-stu-id="6cffe-148">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="6cffe-149">许多控件实现其中某个事件被标记为已处理，并且另一个更直观的事件会被替换的行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-149">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="6cffe-150">通常情况下，控件将仅标记平台输入的事件，为已处理是否存在某个设计意图要求执行此操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-150">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="6cffe-151">在某些情况下，这些设计意图可能不是在特定输入事件的处理要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-151">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="6cffe-152">它对于这种情况是该注册处理程序替换`handledEventsToo`作为`true`适用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-152">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="6cffe-153">但不是应定期执行此。</span><span class="sxs-lookup"><span data-stu-id="6cffe-153">But you should not do this routinely.</span></span> <span data-ttu-id="6cffe-154">调用以响应所有事件处理程序，即使处理将增加你自己的应用程序事件处理逻辑的复杂性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-154">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="6cffe-155">如果是巨大的处理程序逻辑，可能会降低性能。</span><span class="sxs-lookup"><span data-stu-id="6cffe-155">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="6cffe-156">你应保留附加的已处理事件的情况下，您已经发现在开发过程中的某些控件正在处理你仍想要使用的应用程序逻辑来处理的事件处理程序的使用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-156">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="6cffe-157">避免处理的某些事件控件组合的行为的类的另一种方法是使用该事件的预览替代方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-157">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="6cffe-158">例如，如果<xref:System.Windows.UIElement.MouseLeftButtonDown>标记为已处理类处理，您可以为添加处理程序<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>相反。</span><span class="sxs-lookup"><span data-stu-id="6cffe-158">For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="6cffe-159">可以将相同事件的同一处理程序添加多个时间并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="6cffe-159">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="6cffe-160">但是，实际调用处理程序处理该事件时的多个时间。</span><span class="sxs-lookup"><span data-stu-id="6cffe-160">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="6cffe-161">因此，请考虑此行为可能应该在处理程序实现中考虑的副作用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-161">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="6cffe-162">通常使用此方法提供的"添加"访问器实现[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自定义的路由事件的访问模式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-162">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-163">下面的示例实现一个处理程序上调用<xref:System.Windows.FrameworkElement.Initialized>将定义处理程序附加到一个页面使用的命名元素的页面上的事件`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-163">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="6cffe-164">将调用此处理程序，即使路由中的另一个元素标记为已处理到达路由中的处理元素之前的共享的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-164">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route"><span data-ttu-id="6cffe-165">要向其添加处理程序的事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-165">The event route that handlers are added to.</span></span></param>
        <param name="e"><span data-ttu-id="6cffe-166">用于添加处理程序的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-166">The event data that is used to add the handlers.</span></span> <span data-ttu-id="6cffe-167">此方法使用事件数据的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 属性创建处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-167">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span></span></param>
        <summary><span data-ttu-id="6cffe-168">将处理程序添加到当前 <see cref="T:System.Windows.EventRoute" /> 事件处理程序集合的指定 <see cref="T:System.Windows.UIElement" /> 中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-168">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-169">此方法可以由内容宿主元素 (实现<xref:System.Windows.IContentHost>或不匹配的) 若要添加到的子元素的处理程序<xref:System.Windows.EventRoute>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-169">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span> <span data-ttu-id="6cffe-170">通常，这不是必需的<xref:System.Windows.UIElement>，这是因为处理程序会自动添加在已完成的逻辑树中找到的所有元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-170">Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree.</span></span> <span data-ttu-id="6cffe-171">但是，在某些情况下，<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>混合在模板化树中，中间是来自要添加到路由模板需要的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-171">However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</span></span> <span data-ttu-id="6cffe-172">这两<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>支持此方法的版本。</span><span class="sxs-lookup"><span data-stu-id="6cffe-172">Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-173">获取或设置一个值，该值指示此元素能否用作拖放操作的目标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-173">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span></span>  <span data-ttu-id="6cffe-174">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-174">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-175">如果此元素可用作拖放操作的目标，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-175"><see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-176">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-176">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-177">拖放操作默认情况下，不启用，必须通过设置有意启用<xref:System.Windows.UIElement.AllowDrop%2A>到`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-177">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="6cffe-178">除了此基本设置，拖放行为则完全是特定于实现的并且不由<xref:System.Windows.UIElement>或任何其他基元素类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-178">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class.</span></span> <span data-ttu-id="6cffe-179">例如，某些控件<xref:System.Windows.Controls.RichTextBox>，是否有默认行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-179">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="6cffe-180">拖放功能的详细信息，请参阅[拖放概述](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-180">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="6cffe-181"><xref:System.Windows.FrameworkElement> 重写此依赖关系属性在其实现中的元数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-181"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="6cffe-182">具体而言，<xref:System.Windows.FrameworkElement>指定此属性以允许属性值继承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`元数据中)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-182">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="6cffe-183">在此上下文中的属性值继承意味着，如果有与任何其他值的子元素<xref:System.Windows.UIElement.AllowDrop%2A>通过本地值或样式，分配 （也是在样式中，默认情况下此值与最接近的父元素的值分配值或本地值），则从父元素的值将由属性系统分配给所有以前未分配的子元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-183">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</span></span> <span data-ttu-id="6cffe-184">实际上这意味着您可以指定是否允许删除操作在根元素和值将传播到所有子元素具有不是专门为其分配`false`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-184">In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-185">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-185">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-186">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-186">Identifier field</span></span>|<xref:System.Windows.UIElement.AllowDropProperty>|  
|<span data-ttu-id="6cffe-187">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-187">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-188">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-188">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-189">以下标记示例设置<xref:System.Windows.UIElement.AllowDrop%2A>属性`true`上使用特性<xref:System.Windows.Controls.TextBox>，以及一些其他设置相关属性的聚合中启用的<xref:System.Windows.Controls.TextBox>为目标的多行文本数据对象时拖动它。</span><span class="sxs-lookup"><span data-stu-id="6cffe-189">The following markup example sets the <xref:System.Windows.UIElement.AllowDrop%2A> property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in.</span></span> <span data-ttu-id="6cffe-190">有关完整示例，请参阅[加载删除文件示例](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-190">For the complete sample, see [Load a Dropped File Sample](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).</span></span>  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-191">标识 <see cref="P:System.Windows.UIElement.AllowDrop" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-191">Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cffe-192">将动画应用到此元素的指定依赖属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-192">Applies an animation to a specified dependency property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-193">此方法是密封的，不能对其进行重写。</span><span class="sxs-lookup"><span data-stu-id="6cffe-193">This method is sealed and cannot be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6cffe-194">要进行动画处理的属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-194">The identifier for the property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="6cffe-195">控制和声明动画的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="6cffe-195">The animation clock that controls and declares the animation.</span></span></param>
        <summary><span data-ttu-id="6cffe-196">将动画应用到此元素的指定依赖属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-196">Applies an animation to a specified dependency property on this element.</span></span> <span data-ttu-id="6cffe-197">任何现有动画均停止并替换为新动画。</span><span class="sxs-lookup"><span data-stu-id="6cffe-197">Any existing animations are stopped and replaced with the new animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-198">若要从属性中删除动画，指定为该属性的标识符`dp`并指定`clock`作为`null`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-198">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="6cffe-199">这会删除动画，动画的属性设置为其基值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-199">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="6cffe-200">但是，不会停止最初关联的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="6cffe-200">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="6cffe-201">其他任何分配给该时钟的动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="6cffe-201">Any other animations assigned to that clock will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-202">在以下示例中， <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle`有特定的时间的动画应用于它通过调用<xref:System.Windows.UIElement.ApplyAnimationClock%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-202">In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6cffe-203">要进行动画处理的属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-203">The property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="6cffe-204">控制和声明动画的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="6cffe-204">The animation clock that controls and declares the animation.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="6cffe-205">枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-205">A value of the enumeration.</span></span> <span data-ttu-id="6cffe-206">默认值为 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />，这会停止任何现有动画并将其替换为新动画。</span><span class="sxs-lookup"><span data-stu-id="6cffe-206">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span></span></param>
        <summary><span data-ttu-id="6cffe-207">向此元素的指定依赖属性应用动画，并且可以指定当该属性已有正在运行的动画时所要执行的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-207">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-208">若要从属性中删除动画，指定为该属性的标识符`dp`并指定`clock`作为`null`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-208">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="6cffe-209">这会删除动画，动画的属性设置为其基值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-209">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="6cffe-210">但是，不会停止最初关联的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="6cffe-210">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="6cffe-211">其他任何分配给该时钟的动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="6cffe-211">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-212">获取一个值，该值指示在此元素上是否至少捕获了一次触摸。</span><span class="sxs-lookup"><span data-stu-id="6cffe-212">Gets a value that indicates whether at least one touch is captured to this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-213">如果在此元素上至少捕获了一次触摸，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-213"><see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-214">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-214">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-215">获取一个值，该值指示在此元素或其可视化树中的任何子元素上是否至少捕获了一次触摸。</span><span class="sxs-lookup"><span data-stu-id="6cffe-215">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="6cffe-216">如果在此元素或其可视化树中的任何子元素上至少捕获了一次触摸，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-216"><see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-217">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-217">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-218">获取一个值，该值指示在此元素上是否至少按下了一次触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-218">Gets a value that indicates whether at least one touch is pressed over this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-219">如果在此元素上至少按下了一次触摸设备，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-219"><see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-220">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-220">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-221">获取一个值，该值指示在此元素或其可视化树中的任何子元素上是否至少按下了一次触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-221">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="6cffe-222">如果在此元素或其可视化树中的任何子元素上至少按下了一次触摸设备，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-222"><see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-223">标识 <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-223">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="6cffe-224">父元素为子元素计算的最终大小，表示为 <see cref="T:System.Windows.Rect" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-224">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</span></span></param>
        <summary><span data-ttu-id="6cffe-225">定位子元素，并确定 <see cref="T:System.Windows.UIElement" /> 的大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-225">Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="6cffe-226">父元素从它们的 <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> 实现（或者是 WPF 框架级别等效项）调用此方法，以便形成递归布局更新。</span><span class="sxs-lookup"><span data-stu-id="6cffe-226">Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</span></span> <span data-ttu-id="6cffe-227">此方法产生第二次布局更新。</span><span class="sxs-lookup"><span data-stu-id="6cffe-227">This method constitutes the second pass of a layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-228">对于 WPF 框架级元素派生方案，行为<xref:System.Windows.UIElement.Arrange%2A>更改不应 （和不能除非使用阴影）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-228">For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="6cffe-229">相反，应重写<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>在类中的实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-229">Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class.</span></span> <span data-ttu-id="6cffe-230">你<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>在内部调用实现<xref:System.Windows.UIElement.Arrange%2A>作为默认 WPF 框架级别的布局操作的一部分。</span><span class="sxs-lookup"><span data-stu-id="6cffe-230">Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="6cffe-231">你<xref:System.Windows.UIElement.ArrangeCore%2A>实现还应调用<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>每个子元素，如果具有子元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-231">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.</span></span>  
  
 <span data-ttu-id="6cffe-232">对于 WPF 核心级元素派生方案的行为<xref:System.Windows.UIElement.Arrange%2A>更改不应 （和不能除非使用阴影）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-232">For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="6cffe-233">相反，应重写<xref:System.Windows.UIElement.ArrangeCore%2A>在类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-233">Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class.</span></span> <span data-ttu-id="6cffe-234">你<xref:System.Windows.UIElement.ArrangeCore%2A>在内部调用实现<xref:System.Windows.UIElement.Arrange%2A>作为默认 WPF 框架级别的布局操作的一部分。</span><span class="sxs-lookup"><span data-stu-id="6cffe-234">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="6cffe-235">但是，这假定你使用的 WPF 框架级别的布局和通常不是这样，如果将特别派生元素出现在 WPF 核心级别从其布局系统<xref:System.Windows.UIElement>基元素类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-235">However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class.</span></span> <span data-ttu-id="6cffe-236">你<xref:System.Windows.UIElement.ArrangeCore%2A>实现还应调用<xref:System.Windows.UIElement.Arrange%2A>每个子元素，如果具有子元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-236">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements.</span></span> <span data-ttu-id="6cffe-237">请注意，WPF 核心级别方案意味着您不使用<xref:System.Windows.FrameworkElement>派生的类，因为<xref:System.Windows.FrameworkElement>印章并<xref:System.Windows.FrameworkElement.ArrangeCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-237">Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-238">WPF 框架级别中的布局位置计算[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]组成<xref:System.Windows.UIElement.Measure%2A>调用和<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-238">Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="6cffe-239">期间<xref:System.Windows.UIElement.Measure%2A>调用时，布局系统确定使用提供的元素的大小要求<xref:System.Windows.Size>(`availableSize`) 参数。</span><span class="sxs-lookup"><span data-stu-id="6cffe-239">During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument.</span></span> <span data-ttu-id="6cffe-240">期间<xref:System.Windows.UIElement.Arrange%2A>调用时，布局系统确定大小和位置的元素的边界框。</span><span class="sxs-lookup"><span data-stu-id="6cffe-240">During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.</span></span>  <span data-ttu-id="6cffe-241">请参阅[布局](~/docs/framework/wpf/advanced/layout.md)以了解详细信息。</span><span class="sxs-lookup"><span data-stu-id="6cffe-241">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
 <span data-ttu-id="6cffe-242">`availableSize` 可以是从零到无穷大的任意数字。</span><span class="sxs-lookup"><span data-stu-id="6cffe-242">`availableSize` can be any number from zero to infinity.</span></span> <span data-ttu-id="6cffe-243">元素的分布方式返回最小值<xref:System.Windows.Size>它们需要通过`availableSize`参数。</span><span class="sxs-lookup"><span data-stu-id="6cffe-243">Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.</span></span>  
  
 <span data-ttu-id="6cffe-244">当首次实例化一个布局时，它始终会接收<xref:System.Windows.UIElement.Measure%2A>之前调用<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-244">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="6cffe-245">但是之后第一个布局处理过程，, 它可能会收到<xref:System.Windows.UIElement.Arrange%2A>而无需调用<xref:System.Windows.UIElement.Measure%2A>; 这可以仅影响的属性时<xref:System.Windows.UIElement.Arrange%2A>更改 （如对齐方式），或者接收到父<xref:System.Windows.UIElement.Arrange%2A>而无需<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cffe-245">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="6cffe-246">一个<xref:System.Windows.UIElement.Measure%2A>调用将自动使失效<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-246">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="6cffe-247">以异步方式 （在由布局系统时间） 通常会发生布局更新。</span><span class="sxs-lookup"><span data-stu-id="6cffe-247">Layout updates generally occur asynchronously (at a time determined by the layout system).</span></span> <span data-ttu-id="6cffe-248">元素可能不会立即反映对影响元素大小的属性的更改 (如<xref:System.Windows.FrameworkElement.Width%2A>)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-248">An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cffe-249">可以通过强制布局更新<xref:System.Windows.UIElement.UpdateLayout%2A>方法; 但是，调用此函数不建议，因为它通常不需要可能会导致性能不佳。</span><span class="sxs-lookup"><span data-stu-id="6cffe-249">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</span></span> <span data-ttu-id="6cffe-250">在许多情况下，调用<xref:System.Windows.UIElement.UpdateLayout%2A>可能合适，布局系统可能已经在处理更新。</span><span class="sxs-lookup"><span data-stu-id="6cffe-250">In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates.</span></span> <span data-ttu-id="6cffe-251">布局系统可以处理作为包的一部分，可以优化所有必要的更新的方式的布局更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-251">The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</span></span>  
  
 <span data-ttu-id="6cffe-252">布局系统保留的无效布局，一个用于两个单独的队列<xref:System.Windows.UIElement.Measure%2A>，另一个用于<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-252">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="6cffe-253">布局队列是根据可视树中的元素的顺序排序的。</span><span class="sxs-lookup"><span data-stu-id="6cffe-253">The layout queue is sorted based upon the order of elements in the visual tree.</span></span> <span data-ttu-id="6cffe-254">在树中较高级别的元素是队列的顶部，是队列的为了避免冗余布局父级中的重复更改所造成的。</span><span class="sxs-lookup"><span data-stu-id="6cffe-254">Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="6cffe-255">自动从队列中删除重复项，如果它们是有效的元素会自动删除从队列。</span><span class="sxs-lookup"><span data-stu-id="6cffe-255">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</span></span>  
  
 <span data-ttu-id="6cffe-256">更新布局时，<xref:System.Windows.UIElement.Measure%2A>队列为空首先后, 跟<xref:System.Windows.UIElement.Arrange%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="6cffe-256">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="6cffe-257">中的元素<xref:System.Windows.UIElement.Arrange%2A>队列中的元素是否将永远不会进行排列<xref:System.Windows.UIElement.Measure%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="6cffe-257">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="6cffe-258">父级中应使用元素排列自身及其子元素的最终区域。</span><span class="sxs-lookup"><span data-stu-id="6cffe-258">The final area within the parent that element should use to arrange itself and its child elements.</span></span></param>
        <summary><span data-ttu-id="6cffe-259">定义 WPF 核心级别排列布局定义的模板。</span><span class="sxs-lookup"><span data-stu-id="6cffe-259">Defines the template for WPF core-level arrange layout definition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="6cffe-260">重写此方法才会适当派生在 WPF 核心级别，并且你未使用 WPF 框架级别的布局系统和<xref:System.Windows.FrameworkElement>派生的类，因为<xref:System.Windows.FrameworkElement>印章并<xref:System.Windows.FrameworkElement.ArrangeCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-260">Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span> <span data-ttu-id="6cffe-261">如果使用的 WPF 框架级别的布局系统，合适的方法来重写类特定于布局的排列行为是<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-261">If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-262"><xref:System.Windows.UIElement.ArrangeCore%2A> 实现应调用基实现返回一个大小，然后调用<xref:System.Windows.UIElement.Arrange%2A>方法的每个可见子元素，并且对这些返回的大小进行协调<xref:System.Windows.UIElement.Arrange%2A>调用基实现的大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-262"><xref:System.Windows.UIElement.ArrangeCore%2A> implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation.</span></span> <span data-ttu-id="6cffe-263">对帐方面的逻辑<xref:System.Windows.UIElement.ArrangeCore%2A>实现可能会有所不同，具体取决于您的元素的布局特征。</span><span class="sxs-lookup"><span data-stu-id="6cffe-263">The logic for the reconciliation aspect of a <xref:System.Windows.UIElement.ArrangeCore%2A> implementation might vary, depending on the layout characteristics of your element.</span></span> <span data-ttu-id="6cffe-264">在下面的示例模板中，`VisualChildren`是一个假想的属性，您的元素可能会定义以便枚举其内容;<xref:System.Windows.UIElement>未定义内容集合在此级别，WPF 框架级别体系结构将延迟等特定控件或控件基类的派生元素内容的行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-264">In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-265">如果正在开发的 WPF 核心级别处的元素，你应该重写此方法，从而使您的 WPF 核心级别元素的唯一排列布局行为，或使正确布局决策有关所选的元素的子元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-265">If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</span></span> <span data-ttu-id="6cffe-266">可能需要重写这些子元素不是从定义的模式识别如如果<see cref="T:System.Windows.Controls.ItemCollection" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-266">An override might be necessary if those child elements are not recognizable from a defined pattern such as an <see cref="T:System.Windows.Controls.ItemCollection" />.</span></span>  
  
<span data-ttu-id="6cffe-267">父元素必须调用特定于类的<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />上每个子元素，否则这些子元素不会呈现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-267">A parent element must call the class-specific <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child element, otherwise those child elements are not rendered.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cffe-268">为此元素的指定要进行动画处理的属性启动动画。</span><span class="sxs-lookup"><span data-stu-id="6cffe-268">Starts an animation for a specified animated property on this element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6cffe-269">要进行动画处理的属性，它被指定为依赖项属性标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-269">The property to animate, which is specified as a dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="6cffe-270">要启动的动画的时间线。</span><span class="sxs-lookup"><span data-stu-id="6cffe-270">The timeline of the animation to start.</span></span></param>
        <summary><span data-ttu-id="6cffe-271">为此元素的指定要进行动画处理的属性启动动画。</span><span class="sxs-lookup"><span data-stu-id="6cffe-271">Starts an animation for a specified animated property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-272">选中属性进行动画处理，请注意，动画将开始考虑经过动画处理的非动画的起始点以外的第一帧呈现时。</span><span class="sxs-lookup"><span data-stu-id="6cffe-272">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="6cffe-273">如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>有关`animation`是`null`，然后删除任何当前动画并保持的属性的当前值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-273">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="6cffe-274">如果整个`animation`值是`null`、 从属性中移除所有动画和属性值会恢复为其基值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-274">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="6cffe-275">但是，不会停止最初关联的动画时间线。</span><span class="sxs-lookup"><span data-stu-id="6cffe-275">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="6cffe-276">分配给该时间线中的其他任何动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="6cffe-276">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-277">下面的示例创建的动画，并为分配它，然后调用<xref:System.Windows.UIElement.BeginAnimation%2A>来启动它。</span><span class="sxs-lookup"><span data-stu-id="6cffe-277">The following example creates an animation, assigns it, and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> to start it.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6cffe-278">要进行动画处理的属性，它被指定为依赖项属性标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-278">The property to animate, which is specified as the dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="6cffe-279">要应用的动画的时间线。</span><span class="sxs-lookup"><span data-stu-id="6cffe-279">The timeline of the animation to be applied.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="6cffe-280">一个枚举值，用来指定新动画如何与已在影响属性值的任何当前（正在运行的）动画进行交互。</span><span class="sxs-lookup"><span data-stu-id="6cffe-280">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span></span></param>
        <summary><span data-ttu-id="6cffe-281">为此元素的指定要进行动画处理的属性启动特定的动画，并可以指定当该属性已有正在运行的动画时所要执行的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-281">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-282">选中属性进行动画处理，请注意，动画将开始考虑经过动画处理的非动画的起始点以外的第一帧呈现时。</span><span class="sxs-lookup"><span data-stu-id="6cffe-282">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="6cffe-283">如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>有关`animation`是`null`，然后删除任何当前动画并保持的属性的当前值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-283">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="6cffe-284">如果整个`animation`值是`null`、 从属性中移除所有动画和属性值会恢复为其基值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-284">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="6cffe-285">但是，不会停止最初关联的动画时间线。</span><span class="sxs-lookup"><span data-stu-id="6cffe-285">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="6cffe-286">分配给该时间线中的其他任何动画将继续运行。</span><span class="sxs-lookup"><span data-stu-id="6cffe-286">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-287">下面的示例实现的处理程序从一个资源，然后调用获取现有动画<xref:System.Windows.UIElement.BeginAnimation%2A>与指定的切换行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-287">The following example implements a handler that obtains an existing animation from a resource and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> with a specified handoff behavior.</span></span>  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-288">获取或设置一个位图效果，该效果将直接应用到此元素所呈现的内容。</span><span class="sxs-lookup"><span data-stu-id="6cffe-288">Gets or sets a bitmap effect that applies directly to the rendered content for this element.</span></span>  <span data-ttu-id="6cffe-289">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-289">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-290">要应用的位图效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-290">The bitmap effect to apply.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-291"><xref:System.Windows.Media.Effects.BitmapEffect> 为抽象类型，因此[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用法要求的已实现的派生的类<xref:System.Windows.Media.Effects.BitmapEffect>，如<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-291"><xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</span></span> <span data-ttu-id="6cffe-292">请注意，一个实现派生类是允许您指定多个连续的集合类型<xref:System.Windows.Media.Effects.BitmapEffect>，使用嵌入的标记语法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-292">Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.</span></span>  
  
 <span data-ttu-id="6cffe-293">无现有网关派生的类<xref:System.Windows.Media.Effects.BitmapEffect>支持的类型转换器，因此[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用此属性的语法通常是属性元素语法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-293">No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.</span></span>  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-294">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-294">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-295">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-295">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|<span data-ttu-id="6cffe-296">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-296">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-297">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-297">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-298">下面的示例设置位图效果，使用<xref:System.Windows.Media.Effects.BlurBitmapEffect>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-298">The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.</span></span>  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-299">获取或设置位图效果的输入源，该效果将直接应用到此元素所呈现的内容。</span><span class="sxs-lookup"><span data-stu-id="6cffe-299">Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</span></span>  <span data-ttu-id="6cffe-300">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-300">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-301">位图效果的源。</span><span class="sxs-lookup"><span data-stu-id="6cffe-301">The source for bitmap effects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-302">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-302">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-303">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-303">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|<span data-ttu-id="6cffe-304">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-304">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-305">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-305">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-306">标识 <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-306">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-307">标识 <see cref="P:System.Windows.UIElement.BitmapEffect" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-307">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-308">获取或设置 <see cref="T:System.Windows.UIElement" /> 的缓存表示形式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-308">Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <value><span data-ttu-id="6cffe-309"><see cref="T:System.Windows.Media.CacheMode" />，用于容纳 <see cref="T:System.Windows.UIElement" /> 的缓存表示形式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-309">A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-310">设置<xref:System.Windows.UIElement.CacheMode%2A>属性时需要较长时间进行呈现的内容的性能提高。</span><span class="sxs-lookup"><span data-stu-id="6cffe-310">Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render.</span></span> <span data-ttu-id="6cffe-311">有关详情，请参阅<xref:System.Windows.Media.BitmapCache>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-311">For more information, see <xref:System.Windows.Media.BitmapCache>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-312">标识 <see cref="P:System.Windows.UIElement.CacheMode" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-312">Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-313">尝试将鼠标强制捕获到此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-313">Attempts to force capture of the mouse to this element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-314">如果成功捕获了鼠标，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-314"><see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-315">若要捕获，必须启用一个元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-315">To be captured, an element must be enabled.</span></span> <span data-ttu-id="6cffe-316">检查是否<xref:System.Windows.UIElement.IsEnabled%2A>是`true`在调用之前<xref:System.Windows.UIElement.CaptureMouse%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-316">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-317">如果调用<xref:System.Windows.UIElement.CaptureMouse%2A>将返回`true`，然后<xref:System.Windows.UIElement.IsMouseCaptured%2A>也是`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-317">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="6cffe-318">如果调用<xref:System.Windows.UIElement.CaptureMouse%2A>返回`true`，然后<xref:System.Windows.UIElement.GotMouseCapture>并<xref:System.Windows.UIElement.IsMouseCapturedChanged>引发事件，与<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType>在事件数据报告为元素其中<xref:System.Windows.UIElement.CaptureMouse%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-318">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="6cffe-319">如果强制捕获，您可能会妨碍现有捕获-尤其是在使用与拖放鼠标捕获。</span><span class="sxs-lookup"><span data-stu-id="6cffe-319">If you force capture, you might interfere with existing captures - especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="6cffe-320">若要清除的所有元素的鼠标捕获，请调用<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>与`element`参数作为提供`null`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-320">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-321">下面的示例实现对鼠标和输入的组合键，将鼠标捕获 （和取消捕获） 的处理程序，并启用一种特殊的鼠标模式用于查看三维模型。</span><span class="sxs-lookup"><span data-stu-id="6cffe-321">The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-322">尝试将触笔强制捕获到此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-322">Attempts to force capture of the stylus to this element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-323">如果成功捕获了触笔，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-323"><see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-324">始终根据基础默认触笔设备的默认实现返回`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-324">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="6cffe-325">但是，如果你要扩展提供在输入系统的设备实现的输入的设备，就可以创建的系统可能会返回不同结果的替代触笔设备实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-325">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="6cffe-326">在元素捕获触笔，它会接收触笔输入，即使在触笔位于其边界外。</span><span class="sxs-lookup"><span data-stu-id="6cffe-326">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="6cffe-327">只有在拖放操作通常捕获触笔。</span><span class="sxs-lookup"><span data-stu-id="6cffe-327">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="6cffe-328">调用此方法调用一个基础的静态<xref:System.Windows.Input.Stylus>方法<xref:System.Windows.Input.Stylus.Capture%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-328">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="6cffe-329">由活动触笔设备实现实现的实际捕获行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-329">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="6cffe-330">若要捕获，必须启用一个元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-330">To be captured, an element must be enabled.</span></span> <span data-ttu-id="6cffe-331">检查是否<xref:System.Windows.UIElement.IsEnabled%2A>是`true`返回在调用之前<xref:System.Windows.UIElement.CaptureStylus%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-331">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-332">如果调用<xref:System.Windows.UIElement.CaptureStylus%2A>将返回`true`，<xref:System.Windows.UIElement.IsStylusCaptured%2A>也是`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-332">If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="6cffe-333">要捕获的设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-333">The device to capture.</span></span></param>
        <summary><span data-ttu-id="6cffe-334">尝试将触摸屏输入强制捕获到此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-334">Attempts to force capture of a touch to this element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-335">如果将指定触摸屏输入捕获到此元素，则为 <see langword="true" /> ；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-335"><see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-336"><xref:System.Windows.UIElement.CaptureTouch%2A> 将返回`false`如果<xref:System.Windows.Input.TouchDevice>当前捕获到另一个元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-336"><xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="6cffe-337">如果<xref:System.Windows.UIElement.CaptureTouch%2A>将返回`true`，则<xref:System.Windows.UIElement.GotTouchCapture>引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-337">If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="6cffe-338">若要释放的单个触摸屏输入从此元素的捕获，请使用<xref:System.Windows.UIElement.ReleaseTouchCapture%2A>方法并指定要发布的触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-338">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="6cffe-339">若要释放此元素上的所有触摸，使用<xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-339">To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cffe-340"><paramref name="touchDevice" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-340"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-341">获取或设置用于定义元素内容轮廓的几何图形。</span><span class="sxs-lookup"><span data-stu-id="6cffe-341">Gets or sets the geometry used to define the outline of the contents of an element.</span></span>  <span data-ttu-id="6cffe-342">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-342">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-343">用于剪裁区域大小的几何图形。</span><span class="sxs-lookup"><span data-stu-id="6cffe-343">The geometry to be used for clipping area sizing.</span></span> <span data-ttu-id="6cffe-344">默认值为 null <see cref="T:System.Windows.Media.Geometry" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-344">The default is a null <see cref="T:System.Windows.Media.Geometry" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-345">将在呈现的布局中直观地剪辑几何图形外部的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-345">Elements outside the geometry will be visually clipped in the rendered layout.</span></span> <span data-ttu-id="6cffe-346">几何图形没有为矩形。</span><span class="sxs-lookup"><span data-stu-id="6cffe-346">The geometry does not have to be rectangular.</span></span>  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-347">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-347">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-348">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-348">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipProperty>|  
|<span data-ttu-id="6cffe-349">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-349">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-350">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-350">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-351">此示例演示如何定义框架元素的<xref:System.Windows.UIElement.Clip%2A>区域。</span><span class="sxs-lookup"><span data-stu-id="6cffe-351">This example shows how to define a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="6cffe-352">若要定义一个剪辑，请使用<xref:System.Windows.Media.Geometry>(例如，<xref:System.Windows.Media.EllipseGeometry>元素的设置<xref:System.Windows.UIElement.Clip%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-352">To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry> to set the element's <xref:System.Windows.UIElement.Clip%2A> property.</span></span> <span data-ttu-id="6cffe-353">只是几何图形的区域内的区域将显示。</span><span class="sxs-lookup"><span data-stu-id="6cffe-353">Only the area that is within the region of the geometry will be visible.</span></span>  
  
 <span data-ttu-id="6cffe-354">下面的示例演示<xref:System.Windows.Controls.Image>而无需定义的剪辑区域的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-354">The following example shows an <xref:System.Windows.Controls.Image> element without a defined clip region.</span></span> <span data-ttu-id="6cffe-355">由于定义没有剪辑区域，则将显示整个图像。</span><span class="sxs-lookup"><span data-stu-id="6cffe-355">Because no clip region is defined, the entire image is displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 <span data-ttu-id="6cffe-356">![应用剪辑区域之前的对象](~/add/media/mil-task-clip-region-noclip.png "之前应用剪辑区域的对象")</span><span class="sxs-lookup"><span data-stu-id="6cffe-356">![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png "An object before applying a clip region")</span></span>  
<span data-ttu-id="6cffe-357">没有剪辑区域的图像</span><span class="sxs-lookup"><span data-stu-id="6cffe-357">Image with No Clip Region</span></span>  
  
 <span data-ttu-id="6cffe-358">在下一步的示例中，创建完全相同的映像，只不过它具有定义的剪辑区域。</span><span class="sxs-lookup"><span data-stu-id="6cffe-358">In the next example, an identical Image is created, except that it has a defined clip region.</span></span> <span data-ttu-id="6cffe-359">只有在区域内的图像的部分<xref:System.Windows.Media.EllipseGeometry>将显示。</span><span class="sxs-lookup"><span data-stu-id="6cffe-359">Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry> will be displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 <span data-ttu-id="6cffe-360">![经过剪辑的对象](~/add/media/mil-task-clip-region-ellispe.PNG "经过剪辑的对象")</span><span class="sxs-lookup"><span data-stu-id="6cffe-360">![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG "A clipped object")</span></span>  
<span data-ttu-id="6cffe-361">具有椭圆的剪辑区域的图像</span><span class="sxs-lookup"><span data-stu-id="6cffe-361">Image with an Elliptical Clip Region</span></span>  
  
 <span data-ttu-id="6cffe-362">下面的示例演示如何处理动画框架元素的<xref:System.Windows.UIElement.Clip%2A>区域。</span><span class="sxs-lookup"><span data-stu-id="6cffe-362">The following example shows how animate a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="6cffe-363">在此示例中，<xref:System.Windows.Media.EllipseGeometry>用于定义的椭圆的剪辑区域<xref:System.Windows.Controls.Image>元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-363">In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element.</span></span> <span data-ttu-id="6cffe-364">一个<xref:System.Windows.Media.Animation.PointAnimation>之间进行动画处理的椭圆几何图形<xref:System.Windows.Media.EllipseGeometry.Center%2A>属性从 （0，0） 到 （200，150）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-364">A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150).</span></span> <span data-ttu-id="6cffe-365">在动画开始播放后加载图像并无限期地重复。</span><span class="sxs-lookup"><span data-stu-id="6cffe-365">The animation starts playing after the image is loaded and repeats indefinitely.</span></span>  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 <span data-ttu-id="6cffe-366">有关完整示例，请参阅[剪辑区域示例](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-366">For the full sample, see the [Clip Region Sample](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-367">标识 <see cref="P:System.Windows.UIElement.Clip" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-367">Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-368">获取或设置一个值，该值指示是否剪切此元素的内容(或来自此元素的子元素的内容)使其适合包含元素的大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-368">Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</span></span>   <span data-ttu-id="6cffe-369">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-369">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-370">如果应剪切内容，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-370"><see langword="true" /> if the content should be clipped; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-371">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-371">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-372">子元素<xref:System.Windows.UIElement.ClipToBounds%2A>具有不同的效果，具体取决于是否高度和宽度的父元素正在由布局行为<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>或<xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cffe-372">For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span> <span data-ttu-id="6cffe-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> 而不考虑的值始终遵守的父元素<xref:System.Windows.UIElement.ClipToBounds%2A>和有效剪辑始终将剪辑内容根据这些最大值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums.</span></span> <span data-ttu-id="6cffe-374">父<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>设置不会剪裁内容时<xref:System.Windows.UIElement.ClipToBounds%2A>是`false`，但将剪辑内容如果<xref:System.Windows.UIElement.ClipToBounds%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-374">The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.</span></span>  
  
 <span data-ttu-id="6cffe-375">请注意，默认为`false`是在中实现的常规行为<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-375">Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="6cffe-376">很可能派生自任何给定元素<xref:System.Windows.UIElement>重写此属性默认为该实例中的依赖项属性元数据`true`相反。</span><span class="sxs-lookup"><span data-stu-id="6cffe-376">It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead.</span></span> <span data-ttu-id="6cffe-377">多个现有的派生的类重写此元数据和/或调整依赖项属性默认值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-377">Several existing derived classes override this metadata and/or adjust the dependency property default value.</span></span>  
  
 <span data-ttu-id="6cffe-378"><xref:System.Windows.Controls.InkCanvas><xref:System.Windows.Controls.InkPresenter>，并<xref:System.Windows.Controls.Primitives.Popup>每个重写此默认值为`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-378"><xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.</span></span>  
  
 <span data-ttu-id="6cffe-379"><xref:System.Windows.FrameworkElement> 重写此依赖项属性的元数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-379"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property.</span></span> <span data-ttu-id="6cffe-380">具体而言，<xref:System.Windows.FrameworkElement>指定此属性以允许属性值继承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`元数据中)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-380">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="6cffe-381">在此上下文中的属性值继承意味着，如果有与任何其他值的子元素<xref:System.Windows.UIElement.ClipToBounds%2A>通过本地值或样式，分配 （也是在样式中，默认情况下此值与最接近的父元素的值分配值，或本地值)，则从父元素的值将由属性系统分配给所有未分配的子元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-381">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="6cffe-382">实际上这意味着您可以指定是否允许剪切到边界在根元素和值将传播到所有子元素具有不是专门为其分配`false`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-382">In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-383">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-383">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-384">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-384">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|<span data-ttu-id="6cffe-385">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-385">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-386">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-386">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-387">标识 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-387">Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-388">获取与此元素关联的 <see cref="T:System.Windows.Input.CommandBinding" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-388">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span></span> <span data-ttu-id="6cffe-389"><see cref="T:System.Windows.Input.CommandBinding" /> 为此元素启用命令处理，并声明命令、命令的事件和由此元素附加的处理程序之间的链接。</span><span class="sxs-lookup"><span data-stu-id="6cffe-389">A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-390">所有 <see cref="T:System.Windows.Input.CommandBinding" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-390">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-391">另一种典型的方法来填充<xref:System.Windows.UIElement.CommandBindings%2A>集合是使用<xref:System.Windows.Input.CommandManager>方法以编程方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-391">Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6cffe-392">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="6cffe-392">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6cffe-393">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6cffe-393">XAML Values</span></span>  
 <span data-ttu-id="6cffe-394">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="6cffe-394">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="6cffe-395">一个或多个<xref:System.Windows.Input.CommandBinding>元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-395">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="6cffe-396">其中每项功能都应有<xref:System.Windows.Input.CommandBinding.Command%2A>属性设置为已知命令和属性设置为<xref:System.Windows.Input.CommandBinding.CanExecute>和<xref:System.Windows.Input.CommandBinding.Executed>的处理程序实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-396">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="6cffe-397">有关详细信息，请参阅 <xref:System.Windows.Input.CommandBinding>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-397">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-398">下面的示例添加<xref:System.Windows.Input.CommandBinding>到使用标记的窗口。</span><span class="sxs-lookup"><span data-stu-id="6cffe-398">The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup.</span></span> <span data-ttu-id="6cffe-399">请注意，在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，则<xref:System.Windows.Input.CommandBindingCollection>不为元素; 标记中声明的集合对象将该属性会采用，类型推断并填充一个或多个具有的属性元素<xref:System.Windows.Input.CommandBinding>元素：</span><span class="sxs-lookup"><span data-stu-id="6cffe-399">Note that in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 <span data-ttu-id="6cffe-400">有关详细信息[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法的集合，请参见[XAML 语法详述](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-400">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 <span data-ttu-id="6cffe-401">下面的示例执行在代码中实质上是相同的操作：</span><span class="sxs-lookup"><span data-stu-id="6cffe-401">The following example does essentially the same thing in code:</span></span>  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-402">获取在布局流程的度量传递过程中此元素计算所得的大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-402">Gets the size that this element computed during the measure pass of the layout process.</span></span></summary>
        <value><span data-ttu-id="6cffe-403">计算所得大小，它将成为排列过程所需的大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-403">The computed size, which becomes the desired size for the arrange pass.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-404">返回此属性的值才有效的度量单位，如果的值<xref:System.Windows.UIElement.IsMeasureValid%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-404">The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="6cffe-405"><xref:System.Windows.UIElement.DesiredSize%2A> 通常检查为其中一个的测量因素时实现的布局行为如重写<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>， <xref:System.Windows.FrameworkElement.MeasureOverride%2A>，或<xref:System.Windows.UIElement.OnRender%2A>(在<xref:System.Windows.UIElement.OnRender%2A>用例中，你可能会检查<xref:System.Windows.UIElement.RenderSize%2A>相反，但这取决于你实现）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-405"><xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation).</span></span> <span data-ttu-id="6cffe-406">根据方案，<xref:System.Windows.UIElement.DesiredSize%2A>可能会完全遵循你的实现逻辑，约束上<xref:System.Windows.UIElement.DesiredSize%2A>可能应用此类约束也可能更改的父元素或子元素的其他特征。</span><span class="sxs-lookup"><span data-stu-id="6cffe-406">Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</span></span> <span data-ttu-id="6cffe-407">例如，支持可滚动区域 （但选择不从已启用可滚动区域的 WPF 框架级别控件派生） 的控件无法比较可用大小与<xref:System.Windows.UIElement.DesiredSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-407">For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="6cffe-408">然后，该控件可以设置启用滚动条中的内部状态[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]为该控件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-408">The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control.</span></span> <span data-ttu-id="6cffe-409">或者，<xref:System.Windows.UIElement.DesiredSize%2A>可能还在某些情况下忽略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-409">Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-410">下面的示例演示<xref:System.Windows.UIElement.DesiredSize%2A>作为的一部分<xref:System.Windows.FrameworkElement.MeasureOverride%2A>实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-410">The following example shows <xref:System.Windows.UIElement.DesiredSize%2A> as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation.</span></span> <span data-ttu-id="6cffe-411">请注意如何<xref:System.Windows.UIElement.Measure%2A>获取前立即调用<xref:System.Windows.UIElement.DesiredSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-411">Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="6cffe-412">这可以确保<xref:System.Windows.UIElement.DesiredSize%2A>保存合法值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-412">This assures that <xref:System.Windows.UIElement.DesiredSize%2A> holds a legitimate value.</span></span>  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-413">在输入系统报告出现以此元素为拖动目标的基础拖动事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-413">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-414">此事件创建一个别名<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-414">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-415">事件处理程序附加到<xref:System.Windows.UIElement.DragEnter>事件附加到基础<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-415">Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-416">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-417">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-417">Identifier field</span></span>|<xref:System.Windows.UIElement.DragEnterEvent>|  
|<span data-ttu-id="6cffe-418">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-418">Routing strategy</span></span>|<span data-ttu-id="6cffe-419">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-419">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-420">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-420">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-421">相应的隧道事件是<xref:System.Windows.UIElement.PreviewDragEnter>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-421">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="6cffe-422">重写<xref:System.Windows.UIElement.OnDragEnter%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-422">Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-423">标识 <see cref="E:System.Windows.UIElement.DragEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-423">Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-424">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-424">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-425">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-425">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-426">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-426">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-427">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-427">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-428">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-428">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-429">在输入系统报告出现以此元素为拖动起点的基础拖动事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-429">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-430">此事件创建一个别名<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-430">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-431">事件处理程序附加到<xref:System.Windows.UIElement.DragLeave>事件附加到基础<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-431">Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-432">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-432">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-433">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-433">Identifier field</span></span>|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|<span data-ttu-id="6cffe-434">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-434">Routing strategy</span></span>|<span data-ttu-id="6cffe-435">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-435">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-436">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-436">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-437">相应的隧道事件是<xref:System.Windows.DragDrop.PreviewDragLeave>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-437">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="6cffe-438">重写<xref:System.Windows.UIElement.OnDragLeave%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-438">Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-439">标识 <see cref="E:System.Windows.UIElement.DragLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-439">Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-440">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-440">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-441">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-441">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-442">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-442">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-443">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-443">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-444">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-444">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-445">在输入系统报告出现以此元素为可能放置目标的基础拖动事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-445">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-446">即使拖动源自于的元素边界时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-446">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="6cffe-447">如果拖动边界之外启动，然后将移动内容，也会引发此事件，以及<xref:System.Windows.UIElement.DragEnter>和相关的预览事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-447">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="6cffe-448">此事件创建一个别名<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-448">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-449">事件处理程序附加到<xref:System.Windows.UIElement.DragOver>事件附加到基础<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-449">Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-450">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-450">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-451">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-451">Identifier field</span></span>|<xref:System.Windows.UIElement.DragOverEvent>|  
|<span data-ttu-id="6cffe-452">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-452">Routing strategy</span></span>|<span data-ttu-id="6cffe-453">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-453">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-454">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-454">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-455">相应的隧道事件是<xref:System.Windows.DragDrop.PreviewDragOver>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-455">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="6cffe-456">重写<xref:System.Windows.UIElement.OnDragOver%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-456">Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-457">标识 <see cref="E:System.Windows.UIElement.DragOver" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-457">Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-458">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-458">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-459">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-459">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-460">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-460">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-461">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-461">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-462">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-462">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-463">在输入系统报告出现将此元素作为放置目标的基础放置事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-463">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-464">此事件创建一个别名<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.Drop?displayProperty=nameWithType>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-464">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-465">事件处理程序附加到<xref:System.Windows.UIElement.Drop>事件附加到基础<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-465">Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-466">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-467">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-467">Identifier field</span></span>|<xref:System.Windows.UIElement.DropEvent>|  
|<span data-ttu-id="6cffe-468">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-468">Routing strategy</span></span>|<span data-ttu-id="6cffe-469">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-469">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-470">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-470">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-471">相应的隧道事件是<xref:System.Windows.UIElement.PreviewDrop>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="6cffe-472">重写<xref:System.Windows.UIElement.OnDrop%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-472">Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-473">标识 <see cref="E:System.Windows.UIElement.Drop" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-473">Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-474">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-475">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-476">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-477">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-478">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-479">获取或设置要应用于 <see cref="T:System.Windows.UIElement" /> 的位图效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-479">Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="6cffe-480">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-480">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-481">一个表示位图效果的 <see cref="T:System.Windows.Media.Effects.Effect" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-481">An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-482">使用<xref:System.Windows.UIElement.Effect%2A>属性，将应用到的位图效果<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-482">Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.</span></span>  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-483">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-483">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-484">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-484">Identifier field</span></span>|<xref:System.Windows.UIElement.EffectProperty>|  
|<span data-ttu-id="6cffe-485">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-485">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-486">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-486">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-487">以下 XAML 演示了如何分配一个自定义<xref:System.Windows.Media.Effects.ShaderEffect>到<xref:System.Windows.UIElement.Effect%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-487">The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the <xref:System.Windows.UIElement.Effect%2A> property.</span></span>  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-488">标识 <see cref="P:System.Windows.UIElement.Effect" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-488">Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-489">尝试将焦点设定到此元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-489">Attempts to set focus to this element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-490">如果键盘焦点和逻辑焦点同时设定到此元素上，则为 <see langword="true" />；如果只有逻辑焦点设定到此元素上或此方法调用未强制更改焦点，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-490"><see langword="true" /> if keyboard focus and logical focus were set to this element; <see langword="false" /> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-491">可获得焦点，<xref:System.Windows.UIElement.Focusable%2A>并<xref:System.Windows.UIElement.IsEnabled%2A>都必须`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-491">To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="6cffe-492">即使元素是特定树中的可获得焦点并已启用，事件处理，（例如，针对复合控件） 可能会响应预览焦点事件通过不允许焦点，因此此方法将返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-492">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="6cffe-493">焦点通常受两个不同的概念： 键盘焦点和逻辑焦点，并不总是相同。</span><span class="sxs-lookup"><span data-stu-id="6cffe-493">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span>  <span data-ttu-id="6cffe-494">有关详细信息，请参阅[焦点概述](~/docs/framework/wpf/advanced/focus-overview.md)或[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-494">For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="6cffe-495">如果调用<xref:System.Windows.UIElement.Focus%2A>将返回`true`，<xref:System.Windows.UIElement.IsKeyboardFocused%2A>并<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>还有`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-495">If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="6cffe-496">如果相关的属性不是已经`true`，则在调用<xref:System.Windows.UIElement.Focus%2A>，按以下顺序引发一个或多个以下事件： <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>， <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> （来源为新的焦点目标）， <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>， <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>，<xref:System.Windows.UIElement.LostKeyboardFocus>， <xref:System.Windows.UIElement.GotKeyboardFocus> （来源为新的焦点目标）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-496">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="6cffe-497">为了使此调用成功，应用程序中的某些其他元素需要以前具有焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-497">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-498">下面的示例将焦点设置到<xref:System.Windows.Controls.TextBox>所引用的<xref:System.Windows.FrameworkElement.Name%2A>，然后调整中光标的位置和<xref:System.Windows.Controls.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-498">The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-499">获取或设置一个值，该值指示元素能否得到焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-499">Gets or sets a value that indicates whether the element can receive focus.</span></span>  <span data-ttu-id="6cffe-500">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-500">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-501">如果元素能得到焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-501"><see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span></span> <span data-ttu-id="6cffe-502">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-502">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-503">具有焦点的元素接收键盘输入。</span><span class="sxs-lookup"><span data-stu-id="6cffe-503">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="6cffe-504"><xref:System.Windows.UIElement.Focusable%2A> 是[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]属性访问器，它实际上是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-504"><xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="6cffe-505">此特定的依赖项属性经常具有派生的元素类，尤其是在控件中以不同方式设置其原本"默认"值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-505">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</span></span> <span data-ttu-id="6cffe-506">这通常发生在两种方式之一：</span><span class="sxs-lookup"><span data-stu-id="6cffe-506">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="6cffe-507">由特定的派生类，继承依赖属性，但该派生类重写依赖属性的元数据，并更改属性的默认值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-507">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
-   <span data-ttu-id="6cffe-508">样式或模板应用于元素，从而以不同方式设置的依赖项属性值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-508">A style or template is applied to an element, which sets that dependency property value differently.</span></span>  
  
 <span data-ttu-id="6cffe-509">例如，明显"default"的<xref:System.Windows.UIElement.Focusable%2A>有关<xref:System.Windows.Controls.Button>控件将是`true`，即使<xref:System.Windows.Controls.Button>继承<xref:System.Windows.UIElement.Focusable%2A>作为[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]属性直接从<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-509">For example, the apparent "default" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="6cffe-510">这是因为应用元数据值<xref:System.Windows.UIElement.Focusable%2A>依赖项属性中的静态构造函数重写<xref:System.Windows.Controls.Control>基类，该基类位于之间<xref:System.Windows.Controls.Button>和<xref:System.Windows.UIElement>类层次结构中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-510">This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.</span></span>  
  
 <span data-ttu-id="6cffe-511">当由继承<xref:System.Windows.Controls.Control>或其派生的类，<xref:System.Windows.Controls.Control>重新定义为此属性的默认值`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-511">When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.</span></span>  
  
 <span data-ttu-id="6cffe-512">通过继承时<xref:System.Windows.Controls.Label>(即<xref:System.Windows.Controls.Control>派生的类)，默认值已再次重新定义为`false`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-512">When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-513">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-514">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-514">Identifier field</span></span>|<xref:System.Windows.UIElement.FocusableProperty>|  
|<span data-ttu-id="6cffe-515">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-515">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-516">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-516">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-517">下面的代码示例说明了特定的自定义控件，设置控件模板<xref:System.Windows.UIElement.Focusable%2A>`false`在模板中的元素之一。</span><span class="sxs-lookup"><span data-stu-id="6cffe-517">The following example code illustrates a control template for a particular custom control, which sets <xref:System.Windows.UIElement.Focusable%2A> `false` on one of the elements within the template.</span></span>  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-518">当派生自<see cref="T:System.Windows.UIElement" />直接 (而不是从<see cref="T:System.Windows.Controls.Control" />)，应考虑是否希望您获得焦点，因为默认情况下该元素将不能获得焦点的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-518">When deriving from <see cref="T:System.Windows.UIElement" /> directly (as opposed to from <see cref="T:System.Windows.Controls.Control" />), consider whether you wish your element to be focusable, because by default the element will not be focusable.</span></span> <span data-ttu-id="6cffe-519">如果你想您可获得焦点的元素，重写此属性类型的静态构造函数中的元数据，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6cffe-519">If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</span></span> 
<span data-ttu-id="6cffe-520">[！ 代码 csharp[CorePseudocode #UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [！ 代码 vb[CorePseudocode #UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span><span class="sxs-lookup"><span data-stu-id="6cffe-520">[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span></span> 
<span data-ttu-id="6cffe-521">其中<paramref name="myElement" />应该重写元数据值的类型的类名称。</span><span class="sxs-lookup"><span data-stu-id="6cffe-521">where <paramref name="myElement" /> should be the class name of the type that you are overriding the metadata value on.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-522">当 <see cref="P:System.Windows.UIElement.Focusable" /> 属性的值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-522">Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-523">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-523">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-524">标识 <see cref="P:System.Windows.UIElement.Focusable" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-524">Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="6cffe-525">要检查的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-525">The dependency property to check.</span></span></param>
        <summary><span data-ttu-id="6cffe-526">为此元素上的指定属性返回基属性值，忽略任何可能来自正在运行或已停止的动画的动画值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-526">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span></span></summary>
        <returns><span data-ttu-id="6cffe-527">就像没有动画被附加到指定的依赖属性一样的属性值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-527">The property value as if no animations are attached to the specified dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-528">如果没有动画附加到属性，则<xref:System.Windows.UIElement.GetAnimationBaseValue%2A>返回值也始终等于<xref:System.Windows.DependencyObject.GetValue%2A>返回值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-528">If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="6cffe-529">如果有附加的动画，然后所有可能的动画派生值包括开始和停止值将被忽略，并根据所有其他可能的输入确定的属性值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-529">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="6cffe-530">有关详细信息，请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-530">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-531">下面的示例实现的处理程序报告一个经过动画处理的基值<xref:System.Windows.FrameworkElement.Width%2A>属性上的<xref:System.Windows.Controls.Button>，以及一个转换，转换的基础价值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-531">The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize"><span data-ttu-id="6cffe-532">元素提供的可用大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-532">The available size provided by the element.</span></span></param>
        <summary><span data-ttu-id="6cffe-533">返回一个替代剪辑几何图形，它表示将 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 设置为 <see langword="true" /> 时要剪辑的区域。</span><span class="sxs-lookup"><span data-stu-id="6cffe-533">Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="6cffe-534">可能的剪辑几何图形。</span><span class="sxs-lookup"><span data-stu-id="6cffe-534">The potential clipping geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-535">默认实现将返回一个合法值，但不使用`layoutSlotSize`其计算中的参数。</span><span class="sxs-lookup"><span data-stu-id="6cffe-535">The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations.</span></span> <span data-ttu-id="6cffe-536">而是使用的值<xref:System.Windows.UIElement.RenderSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-536">Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-537">大量重写此方法直接派生的<xref:System.Windows.FrameworkElement>类，和<xref:System.Windows.FrameworkElement>重写生成对于一般的 WPF 框架级元素更为复杂的行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-537">This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements.</span></span> <span data-ttu-id="6cffe-538">有关详细信息，请参阅<xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-538">For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-539">在派生类中重写时，如果不存在可视父级，则返回其他[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 父级。</span><span class="sxs-lookup"><span data-stu-id="6cffe-539">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span></span></summary>
        <returns><span data-ttu-id="6cffe-540">如果派生类的实现具有要报告的替代父级连接，则为一个对象。</span><span class="sxs-lookup"><span data-stu-id="6cffe-540">An object, if implementation of a derived class has an alternate parent connection to report.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-541">此方法的默认虚拟实现返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-541">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="6cffe-542"><xref:System.Windows.FrameworkElement> 提供了实际的实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-542"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="6cffe-543">替代父级的用于事件路由，在其中元素创建的替代父结构以便将其事件路由有何区别路由到标准的父级，在可视树的标准模式的方式的情况下或在向下预览路由策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-543">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-544">在输入系统报告出现涉及此元素的基础拖放操作时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-544">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-545"><xref:System.Windows.UIElement.GiveFeedback>事件允许拖动事件，可以修改鼠标指针的外观，以便为用户可视反馈提供拖放操作期间的源。</span><span class="sxs-lookup"><span data-stu-id="6cffe-545">The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="6cffe-546">视觉反馈用于强调拖放操作正在进行。</span><span class="sxs-lookup"><span data-stu-id="6cffe-546">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="6cffe-547">此事件创建一个别名<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.GiveFeedback>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-547">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-548">事件处理程序附加到<xref:System.Windows.UIElement.GiveFeedback>事件附加到基础<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-548">Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-549">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-549">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-550">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-550">Identifier field</span></span>|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|<span data-ttu-id="6cffe-551">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-551">Routing strategy</span></span>|<span data-ttu-id="6cffe-552">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-552">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-553">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-553">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="6cffe-554">相应的隧道事件是<xref:System.Windows.UIElement.PreviewGiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-554">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="6cffe-555">重写<xref:System.Windows.UIElement.OnGiveFeedback%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-555">Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-556">标识 <see cref="E:System.Windows.UIElement.GiveFeedback" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-556">Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-557">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-557">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-558">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-558">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-559">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-559">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-560">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-560">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-561">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-561">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-562">在此元素获得逻辑焦点时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-562">Occurs when this element gets logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-563">如果焦点有意强制使用方法调用，但前一个键盘焦点位于不同的作用域将与键盘焦点不同逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-563">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="6cffe-564">在此方案中，键盘焦点将保持其所在位置和元素其中<xref:System.Windows.UIElement.Focus%2A>方法称为仍获得逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-564">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="6cffe-565">此事件的更精确地解释是它时引发的值<xref:System.Windows.UIElement.IsFocused%2A>路由中元素的属性有所不同`false`到`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-565">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="6cffe-566">此事件使用冒泡路由，因为接收焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-566">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-567">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际获得焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-567">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-568">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-568">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-569">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-569">Identifier field</span></span>|<xref:System.Windows.UIElement.GotFocusEvent>|  
|<span data-ttu-id="6cffe-570">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-570">Routing strategy</span></span>|<span data-ttu-id="6cffe-571">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-571">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-572">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-572">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="6cffe-573">没有相应的隧道事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-573">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="6cffe-574">重写<xref:System.Windows.UIElement.OnGotFocus%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-574">Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-575">标识 <see cref="E:System.Windows.UIElement.GotFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-575">Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-576">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-576">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-577">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-577">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-578">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-578">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-579">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-579">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-580">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-580">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-581">在此元素聚焦于键盘时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-581">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-582"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 是一个类似的事件，跟踪中维护一个元素; 的焦点状态的属性的状态更改<xref:System.Windows.UIElement.GotKeyboardFocus>中许多相同的情况下引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-582"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="6cffe-583">此事件使用冒泡路由，因为具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-583">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-584">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际具有焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-584">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="6cffe-585">此事件创建一个别名<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.GotKeyboardFocus>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-585">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-586">事件处理程序附加到<xref:System.Windows.UIElement.GotKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-586">Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-587">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-587">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-588">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-588">Identifier field</span></span>|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="6cffe-589">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-589">Routing strategy</span></span>|<span data-ttu-id="6cffe-590">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-590">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-591">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-591">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="6cffe-592">相应的隧道事件是<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-592">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="6cffe-593">重写<xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-593">Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-594">标识 <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-594">Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-595">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-595">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-596">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-596">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-597">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-597">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-598">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-598">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-599">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-599">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-600">在此元素捕获鼠标时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-600">Occurs when this element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-601">在元素捕获鼠标，它会接收鼠标输入，即使在鼠标指针位于其边界外。</span><span class="sxs-lookup"><span data-stu-id="6cffe-601">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="6cffe-602">鼠标通常仅在拖放操作期间捕获和保持捕获，直到发生拖放操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-602">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="6cffe-603">此事件使用冒泡路由，因为具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-603">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-604">检查<xref:System.Windows.RoutedEventArgs.Source%2A>在事件数据，以确定实际元素具有鼠标捕获。</span><span class="sxs-lookup"><span data-stu-id="6cffe-604">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="6cffe-605">此事件创建一个别名<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.GotMouseCapture>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-605">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-606">事件处理程序附加到<xref:System.Windows.UIElement.GotMouseCapture>事件附加到基础<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-606">Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-607">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-607">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-608">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-608">Identifier field</span></span>|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="6cffe-609">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-609">Routing strategy</span></span>|<span data-ttu-id="6cffe-610">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-610">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-611">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-611">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="6cffe-612">没有定义相应的隧道事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-612">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="6cffe-613">重写<xref:System.Windows.UIElement.OnGotMouseCapture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-613">Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-614">标识 <see cref="E:System.Windows.UIElement.GotMouseCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-614">Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-615">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-615">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-616">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-616">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-617">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-617">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-618">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-618">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-619">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-619">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-620">在此元素捕获触笔时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-620">Occurs when this element captures the stylus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-621">在元素捕获触笔，它会接收触笔输入，即使在指针位于其边界外。</span><span class="sxs-lookup"><span data-stu-id="6cffe-621">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="6cffe-622">在触笔通常仅在拖放操作期间捕获和捕获之前发生拖放操作的状态将保持。</span><span class="sxs-lookup"><span data-stu-id="6cffe-622">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="6cffe-623">此事件使用冒泡路由，因为具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-623">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-624">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据来确定具有捕获的实际元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-624">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="6cffe-625">此事件创建此类的附加事件的别名，以便<xref:System.Windows.UIElement.GotStylusCapture>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-625">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-626">事件处理程序附加到<xref:System.Windows.UIElement.GotStylusCapture>事件附加到基础<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-626">Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-627">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-627">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-628">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-628">Identifier field</span></span>|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="6cffe-629">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-629">Routing strategy</span></span>|<span data-ttu-id="6cffe-630">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-630">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-631">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-631">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-632">没有定义相应的隧道事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-632">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="6cffe-633">重写<xref:System.Windows.UIElement.OnGotStylusCapture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-633">Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-634">标识 <see cref="E:System.Windows.UIElement.GotStylusCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-634">Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-635">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-635">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-636">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-636">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-637">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-637">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-638">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-638">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-639">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-639">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-640">在此元素上捕获触摸屏输入时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-640">Occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-641">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-641">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-642">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-642">Identifier field</span></span>|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="6cffe-643">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-643">Routing strategy</span></span>|<span data-ttu-id="6cffe-644">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-644">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-645">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-645">Delegate</span></span>|<span data-ttu-id="6cffe-646"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-646"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-647">重写<xref:System.Windows.UIElement.OnGotTouchCapture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-647">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-648">标识 <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-648">Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-649">获取一个值，该值指示此元素是否具有任何进行动画处理的属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-649">Gets a value indicating whether this element has any animated properties.</span></span></summary>
        <value><span data-ttu-id="6cffe-650">如果此元素具有附加到其任何属性的动画，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-650"><see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-651">此属性返回`true`为永久性的 （无时间限制，始终运行的） 动画，或具有特定的时间线的动画。</span><span class="sxs-lookup"><span data-stu-id="6cffe-651">This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-652">获取一个值，该值指示 <see cref="T:System.Windows.UIElement" /> 是否具有焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-652">Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> has focus.</span></span></summary>
        <value><span data-ttu-id="6cffe-653">如果 <see cref="T:System.Windows.UIElement" /> 具有焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-653"><see langword="true" /> if the <see cref="T:System.Windows.UIElement" /> has focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-654">子类可以重写此属性指定当此元素具有键盘焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-654">Subclasses can override this property to specify when the element has keyboard focus.</span></span>  <span data-ttu-id="6cffe-655">这很有用时你<xref:System.Windows.UIElement>包含可以具有键盘焦点的元素，并且希望您对报表具有焦点的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-655">This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cffe-656">实现 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> 以提供基元素命中测试行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-656">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters"><span data-ttu-id="6cffe-657">描述要执行的命中测试，包括初始命中点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-657">Describes the hit test to perform, including the initial hit point.</span></span></param>
        <summary><span data-ttu-id="6cffe-658">实现 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> 以提供基元素命中测试行为（返回 <see cref="T:System.Windows.Media.GeometryHitTestResult" />）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-658">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</span></span></summary>
        <returns><span data-ttu-id="6cffe-659">测试结果，包括计算的几何图形。</span><span class="sxs-lookup"><span data-stu-id="6cffe-659">Results of the test, including the evaluated geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-660">请参阅原始虚拟方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>信息进一步重写此方法在派生类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-660">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="6cffe-661">请注意，几个特定控件 (<xref:System.Windows.Controls.TextBlock>，例如) 是否具有不同的实现，重写此。</span><span class="sxs-lookup"><span data-stu-id="6cffe-661">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.</span></span>  
  
 <span data-ttu-id="6cffe-662">此方法不是从应用程序代码中调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-662">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="6cffe-663">此方法支持在输入系统的各个方面 （无论是为例，鼠标指针位于元素上） 公开的内部命中测试行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-663">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters"><span data-ttu-id="6cffe-664">描述要执行的命中测试，包括初始命中点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-664">Describes the hit test to perform, including the initial hit point.</span></span></param>
        <summary><span data-ttu-id="6cffe-665">实现 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> 以提供基元素命中测试行为（返回 <see cref="T:System.Windows.Media.HitTestResult" />）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-665">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />).</span></span></summary>
        <returns><span data-ttu-id="6cffe-666">包括计算的点的测试结果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-666">Results of the test, including the evaluated point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-667">请参阅原始虚拟方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>信息进一步重写此方法在派生类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-667">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="6cffe-668">请注意，几个特定控件 (<xref:System.Windows.Controls.TextBlock>，例如) 执行操作有不同的实现，重写<xref:System.Windows.UIElement.HitTestCore%2A>定义的<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-668">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-669">此方法不是从应用程序代码中调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-669">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="6cffe-670">此方法支持在输入系统的各个方面 （无论是为例，鼠标指针位于元素上） 公开的内部命中测试行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-670">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-671">获取与此元素关联的输入绑定的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-671">Gets the collection of input bindings associated with this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-672">输入绑定的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-672">The collection of input bindings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-673">输入的绑定支持命令来输入设备的绑定。</span><span class="sxs-lookup"><span data-stu-id="6cffe-673">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="6cffe-674">例如，<xref:System.Windows.Input.MouseBinding>实现的输入包括特定于鼠标设备的属性的绑定。</span><span class="sxs-lookup"><span data-stu-id="6cffe-674">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="6cffe-675">适用于类型的输入的绑定以及声明的实例的输入的绑定，将包括输入绑定的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-675">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="6cffe-676">相关的属性， <xref:System.Windows.UIElement.CommandBindings%2A>，维护命令绑定的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-676">A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="6cffe-677">这些不同于输入绑定，因为它们表示下一级别的命令处理过程绑定到已知命令的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-677">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6cffe-678">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="6cffe-678">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6cffe-679">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6cffe-679">XAML Values</span></span>  
 <span data-ttu-id="6cffe-680">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="6cffe-680">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="6cffe-681">一个或多个<xref:System.Windows.Input.InputBinding>元素 (通常<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>派生类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-681">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="6cffe-682">其中每项功能都必须具有<xref:System.Windows.Input.InputBinding.Command%2A>和<xref:System.Windows.Input.InputBinding.Gesture%2A>属性设置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-682">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-683">下面的示例上填充此属性<xref:System.Windows.Window>，使用单个<xref:System.Windows.Input.KeyBinding>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-683">The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.</span></span>  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="6cffe-684">有关详细信息[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法的集合，请参见[XAML 语法详述](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-684">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="6cffe-685">此元素中的偏移坐标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-685">The offset coordinates within this element.</span></span></param>
        <summary><span data-ttu-id="6cffe-686">返回指定坐标上的当前元素中的输入元素（相对于当前元素的源）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-686">Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</span></span></summary>
        <returns><span data-ttu-id="6cffe-687">位于指定位置的子元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-687">The element child that is located at the given position.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-688"><xref:System.Windows.IInputElement> 返回作为返回类型，因为该类型是两个公共接口<xref:System.Windows.UIElement>和<xref:System.Windows.ContentElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-688"><xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="6cffe-689">然后，可以适当地强制转换返回类型，或使用定义的某些成员的接口实例<xref:System.Windows.IInputElement>接口。</span><span class="sxs-lookup"><span data-stu-id="6cffe-689">You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.</span></span>  
  
 <span data-ttu-id="6cffe-690">从应用程序代码通常不调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-690">This method typically is not called from your application code.</span></span> <span data-ttu-id="6cffe-691">调用此方法时才适合想要重新实现大量已存在，例如重新创建设备的鼠标逻辑的较低级别输入功能。</span><span class="sxs-lookup"><span data-stu-id="6cffe-691">Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</span></span>  
  
 <span data-ttu-id="6cffe-692"><xref:System.Windows.IContentHost> 协定<xref:System.Windows.IContentHost.InputHitTest%2A>具有相同的签名，某些元素选择显式实现该方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-692"><xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-693">使元素排列状态（布局）无效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-693">Invalidates the arrange state (layout) for the element.</span></span> <span data-ttu-id="6cffe-694">排列状态失效后，该元素将更新其布局，更新将以异步方式发生，除非随后由 <see cref="M:System.Windows.UIElement.UpdateLayout" /> 强制执行。</span><span class="sxs-lookup"><span data-stu-id="6cffe-694">After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-695">频繁调用<xref:System.Windows.UIElement.InvalidateArrange%2A>或在特定于<xref:System.Windows.UIElement.UpdateLayout%2A>有显著的性能影响。</span><span class="sxs-lookup"><span data-stu-id="6cffe-695">Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="6cffe-696">因此，避免调用此方法，除非绝对需要精确布局状态以便进行后续调用对其他[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]在代码中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-696">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span> <span data-ttu-id="6cffe-697">一种高级的方案，其中可能会调用<xref:System.Windows.UIElement.InvalidateArrange%2A>是如果你要创建<xref:System.Windows.PropertyChangedCallback>不在的依赖关系属性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>派生发生更改时仍会影响布局的排列处理过程的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-697">An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-698">使元素度量状态（布局）无效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-698">Invalidates the measurement state (layout) for the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-699">调用此方法还在调用<xref:System.Windows.UIElement.InvalidateArrange%2A>在内部，则无需调用<xref:System.Windows.UIElement.InvalidateMeasure%2A>和<xref:System.Windows.UIElement.InvalidateArrange%2A>连续。</span><span class="sxs-lookup"><span data-stu-id="6cffe-699">Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession.</span></span> <span data-ttu-id="6cffe-700">后失效，元素将具有其布局更新，这将以异步方式发生，除非<xref:System.Windows.UIElement.UpdateLayout%2A>调用以强制进行同步的布局更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-700">After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.</span></span>  
  
 <span data-ttu-id="6cffe-701">WPF 框架级别的布局系统会自行处理的一个元素的可视化树中的更改并在最常见布局失效的情况下布局系统时调用此方法在必要时等效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-701">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</span></span> <span data-ttu-id="6cffe-702">如果你生成一个完整布局实现，直接操作的元素树中，或类似的高级方案，应只调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-702">You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</span></span> <span data-ttu-id="6cffe-703">其中一种高级的方案是如果你要创建<xref:System.Windows.PropertyChangedCallback>不在的依赖关系属性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>派生发生更改时仍会影响布局的测量处理的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-703">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.</span></span>  
  
 <span data-ttu-id="6cffe-704">频繁调用<xref:System.Windows.UIElement.InvalidateMeasure%2A>或在特定于<xref:System.Windows.UIElement.UpdateLayout%2A>有显著的性能影响。</span><span class="sxs-lookup"><span data-stu-id="6cffe-704">Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="6cffe-705">因此，避免调用此方法，除非绝对需要精确布局状态以便进行后续调用对其他[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]在代码中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-705">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-706">使元素的呈现失效，并强制执行完整的新布局处理过程。</span><span class="sxs-lookup"><span data-stu-id="6cffe-706">Invalidates the rendering of the element, and forces a complete new layout pass.</span></span> <span data-ttu-id="6cffe-707">完成布局循环后调用 <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-707"><see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-708">此方法调用<xref:System.Windows.UIElement.InvalidateArrange%2A>在内部。</span><span class="sxs-lookup"><span data-stu-id="6cffe-708">This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.</span></span>  
  
 <span data-ttu-id="6cffe-709">通常通过应用程序代码不调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-709">This method is not generally called from your application code.</span></span> <span data-ttu-id="6cffe-710">WPF 框架级别的布局系统会自行处理一个元素的可视化树中的更改并会调用此方法在必要时的等效项已。</span><span class="sxs-lookup"><span data-stu-id="6cffe-710">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</span></span> <span data-ttu-id="6cffe-711">调用此方法是只需将高级的方案。</span><span class="sxs-lookup"><span data-stu-id="6cffe-711">Calling this method is necessary only for advanced scenarios.</span></span> <span data-ttu-id="6cffe-712">其中一种高级的方案是如果你要创建<xref:System.Windows.PropertyChangedCallback>不在的依赖关系属性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>派生发生更改时仍会影响布局的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-712">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-713">获取一个值，该值指示此元素布局中的子元素的计算大小和位置是否有效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-713">Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</span></span></summary>
        <value><span data-ttu-id="6cffe-714">如果布局的大小和位置都有效，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-714"><see langword="true" /> if the size and position of layout are valid; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-715">您可以强制排列方式，可以通过调用失效<xref:System.Windows.UIElement.InvalidateArrange%2A>此元素 （或其父项）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-715">You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents).</span></span> <span data-ttu-id="6cffe-716">在布局系统确定如次时，此标志重新组合的布局。</span><span class="sxs-lookup"><span data-stu-id="6cffe-716">This flags the layout for recomposition at such time as the layout system determines.</span></span> <span data-ttu-id="6cffe-717">或者，直接调用到<xref:System.Windows.UIElement.UpdateLayout%2A>无法进行，但应仅进行此操作确定，没有其他挂起的 （大量不必要的强制更新具有性能产生负面影响）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-717">Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</span></span>  
  
 <span data-ttu-id="6cffe-718"><xref:System.Windows.UIElement.IsArrangeValid%2A> 不能`true`除非<xref:System.Windows.UIElement.IsMeasureValid%2A>也是`true`（在布局过程中，排列方式不能为有效而无需第一次进行有效的度量）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-718"><xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-719">获取或设置一个值，该值指示是否 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中启用此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-719">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="6cffe-720">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-720">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-721">如果启用此元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-721"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-722">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-722">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-723">请注意，此属性是特定于类的实现<xref:System.Windows.UIElement.IsEnabledCore%2A>在特定元素，通常在运行时上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-723">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="6cffe-724">因此，此处列出的默认值有时不是有效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-724">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="6cffe-725">例如，<xref:System.Windows.Controls.Primitives.ScrollBar>将是<xref:System.Windows.UIElement.IsEnabled%2A>`false`时确定是否有无需支持滚动条。</span><span class="sxs-lookup"><span data-stu-id="6cffe-725">For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar.</span></span> <span data-ttu-id="6cffe-726">尝试设置此值将还可能会重写返回的值<xref:System.Windows.UIElement.IsEnabledCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-726">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-727">未启用的元素不参与命中测试或焦点，因此不将输入事件的源。</span><span class="sxs-lookup"><span data-stu-id="6cffe-727">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-728">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-728">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-729">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-729">Identifier field</span></span>|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|<span data-ttu-id="6cffe-730">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-730">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-731">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-731">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-732">下面的示例演示一个处理程序上一个按钮时执行的将设置<xref:System.Windows.UIElement.IsEnabled%2A>`false`另一个命名按钮上`b1`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-732">The following example shows a handler on one button that when executed will set <xref:System.Windows.UIElement.IsEnabled%2A> `false` on another named button `b1`.</span></span>  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-733">在此元素的 <see cref="P:System.Windows.UIElement.IsEnabled" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-733">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-734">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-734">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-735">获取一个值，该值成为派生类中 <see cref="P:System.Windows.UIElement.IsEnabled" /> 的返回值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-735">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes.</span></span></summary>
        <value><span data-ttu-id="6cffe-736">如果启用此元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-736"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-737">此属性的默认实现缓存的值，也会计算是否启用此元素的父元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-737">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span></span> <span data-ttu-id="6cffe-738">(如果未启用父，子元素不能有效地启用中实际[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。)如果您选择重写此实现，请确保调用基实现，以保留此行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-738">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span></span>  
  
<span data-ttu-id="6cffe-739"><see cref="T:System.Windows.Controls.Primitives.ScrollBar" />类提供了此属性的现有重写实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-739">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class provides an existing override implementation of this property.</span></span> <span data-ttu-id="6cffe-740">此替代确定内容演示区域中的内容是否超出了可用区域。</span><span class="sxs-lookup"><span data-stu-id="6cffe-740">This override determines whether the content inside the content presentation area exceeds the available area.</span></span> <span data-ttu-id="6cffe-741">如果超出内容区域，则启用滚动条部分。</span><span class="sxs-lookup"><span data-stu-id="6cffe-741">If the content does exceed the area, the scrollbar portion is enabled.</span></span> <span data-ttu-id="6cffe-742">否则，不启用滚动条。</span><span class="sxs-lookup"><span data-stu-id="6cffe-742">Otherwise, the scrollbar is not enabled.</span></span></para></block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-743">标识 <see cref="P:System.Windows.UIElement.IsEnabled" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-743">Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-744">获取一个值，该值确定此元素是否具有逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-744">Gets a value that determines whether this element has logical focus.</span></span>  <span data-ttu-id="6cffe-745">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-745">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-746">如果此元素具有逻辑焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-746"><see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-747">如果应用程序具有多个焦点部门，如菜单的内容和应用程序的其余部分之间，可能与键盘焦点不同逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-747">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="6cffe-748">在此方案中，键盘焦点仅可对应用程序 UI 中的一个元素，但是，其他焦点分支中的某些元素仍可能会保留逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-748">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="6cffe-749">有关逻辑焦点的详细信息，请参阅[焦点概述](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-749">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="6cffe-750">通过设置此属性 （它是只读的） 未设置焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-750">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="6cffe-751">此属性的典型用法是使用为的依赖关系属性<xref:System.Windows.Setter>或<xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-751">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="6cffe-752">若要以编程方式设置焦点，请调用<xref:System.Windows.UIElement.Focus%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-752">To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>.</span></span> <span data-ttu-id="6cffe-753">由用户操作或控件实现，其中可能包括鼠标捕获行为，还可以设置焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-753">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-754">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-754">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-755">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-755">Identifier field</span></span>|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|<span data-ttu-id="6cffe-756">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-756">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-757">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-757">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-758">下面的示例是当它专注度时，更改控件的背景的代码处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-758">The following example is a code handler that changes the background of a control when it is focused.</span></span>  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 <span data-ttu-id="6cffe-759">另一种常见的方法来实现此相同的效果是放置<xref:System.Windows.Trigger>在<xref:System.Windows.Style>的控件，则这种方法不需要处理与隐藏代码的特定事件，允许设计器的交互式和图形性质的更多权限访问[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="6cffe-759">Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="6cffe-760">有关示例，请参阅[如何：创建的外发光效果](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-760">For an example, see [How to: Create an Outer Glow Effect](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-761">标识 <see cref="P:System.Windows.UIElement.IsFocused" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-761">Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-762">获取或设置一个值，该值声明是否可以返回此元素作为其呈现内容的某些部分的点击测试结果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-762">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span></span> <span data-ttu-id="6cffe-763">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-763">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-764">如果此元素可以从至少一个点作为命中测试结果返回，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-764"><see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-765">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-765">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-766">逻辑树中的命中测试的元素的相对位置会影响此属性的有效值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-766">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="6cffe-767">例如，如果一个元素的子元素的元素进行命中测试可见，子属性的有效值将始终`false`，即使尝试在本地设置该值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-767">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="6cffe-768">出于此原因，务必不要设置<xref:System.Windows.UIElement.IsHitTestVisible%2A>到`false`复合控件除非您不需要任何输入或对该控件进行命中测试。</span><span class="sxs-lookup"><span data-stu-id="6cffe-768">For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="6cffe-769">有关命中测试的详细信息，请参阅[可视化层中的命中测试](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-769">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-770">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-770">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-771">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-771">Identifier field</span></span>|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|<span data-ttu-id="6cffe-772">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-772">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-773">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-773">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-774">在此元素的 <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依赖项属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-774">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-775">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-775">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-776">标识 <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-776">Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-777">获取一个值，该值指示是否启用输入法系统（如 [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]）来处理此元素的输入。</span><span class="sxs-lookup"><span data-stu-id="6cffe-777">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-778">如果输入法处于活动状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-778"><see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-779">基础附加属性的默认值为 <see langword="true;" />；但在运行时该值会受到输入法实际状态的影响。</span><span class="sxs-lookup"><span data-stu-id="6cffe-779">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-780">此属性返回的附加属性返回的值<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType>的当前已启用输入法 （键盘、 语音和其他输入的设备）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-780">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-781">获取一个值，该值表示该元素是否具有键盘焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-781">Gets a value indicating whether this element has keyboard focus.</span></span>  <span data-ttu-id="6cffe-782">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-782">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-783">如果此元素具有键盘焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-783"><see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-784">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-784">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-785">为此属性确定值的更改可能伴随着与焦点相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-785">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="6cffe-786"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>通常用于在类事件处理程序中其他与输入相关的事件，例如以确定是否元素已经具有键盘焦点时，或者若要在事件和键盘事件一起出现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-786"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-787">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-787">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-788">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-788">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="6cffe-789">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-789">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-790">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-790">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-791">在此元素的 <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-791">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-792">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-792">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-793">标识 <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-793">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-794">获取一个值，该值指示键盘焦点是否位于元素或其可视化树子元素内的任意位置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-794">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span></span>  <span data-ttu-id="6cffe-795">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-795">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-796">如果键盘焦点在元素或其子元素上，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-796"><see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-797">更改此属性的值通常会引发<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件，除非在派生的类已重写<xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A>若要禁止显示该事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-797">Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="6cffe-798">不能直接，设置此属性，但您可以通过调用将焦点设置到元素<xref:System.Windows.UIElement.Focus%2A>，或通过使<xref:System.Windows.UIElement.MoveFocus%2A>请求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-798">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="6cffe-799">这些方法调用之一可能会更改此属性的值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-799">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="6cffe-800"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>通常用于在类事件处理程序中其他与输入相关的事件，例如以确定是否元素已经具有键盘焦点时，或者若要在事件和键盘事件一起出现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-800"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-801">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-801">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-802">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-802">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="6cffe-803">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-803">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-804">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-804">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-805">在此元素的 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-805">Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-806">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-806">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-807">标识 <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-807">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-808">获取或设置一个值，该值指示是否对此 <see cref="T:System.Windows.UIElement" /> 启用操作事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-808">Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <value><span data-ttu-id="6cffe-809">如果对此 <see cref="T:System.Windows.UIElement" /> 启用操作事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-809"><see langword="true" /> if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-810">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-810">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-811">设置此属性设置为 true，如果你想<xref:System.Windows.UIElement>接收<xref:System.Windows.UIElement.ManipulationStarting>， <xref:System.Windows.UIElement.ManipulationStarted>， <xref:System.Windows.UIElement.ManipulationDelta>， <xref:System.Windows.UIElement.ManipulationInertiaStarting>， <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>，和<xref:System.Windows.UIElement.ManipulationCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-811">Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events.</span></span> <span data-ttu-id="6cffe-812">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-812">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="6cffe-813">操作响应的应用程序的示例，请参阅[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-813">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-814">以下示例创建具有一个红色矩形的应用程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-814">The following example creates an application that has a red Rectangle.</span></span>  <span data-ttu-id="6cffe-815"><xref:System.Windows.UIElement.IsManipulationEnabled%2A>矩形的属性设置为 true，并且应用程序的窗口订阅<xref:System.Windows.UIElement.ManipulationStarting>， <xref:System.Windows.UIElement.ManipulationDelta>，和<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-815">The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events.</span></span> <span data-ttu-id="6cffe-816">此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-816">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-817">标识 <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-817">Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-818">获取一个值，该值指示布局测量返回的当前大小是否有效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-818">Gets a value indicating whether the current size returned by layout measure is valid.</span></span></summary>
        <value><span data-ttu-id="6cffe-819">如果布局的测量处理过程返回一个有效的当前值，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-819"><see langword="true" /> if the measure pass of layout returned a valid and current value; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-820">您可以强制测量和排列方式，可以通过调用失效<xref:System.Windows.UIElement.InvalidateMeasure%2A>此元素 （或可视化树上的任何父元素）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-820">You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree).</span></span> <span data-ttu-id="6cffe-821">这会指示布局以进行重新组合以异步方式发生在由布局系统的时间。</span><span class="sxs-lookup"><span data-stu-id="6cffe-821">This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</span></span> <span data-ttu-id="6cffe-822">或者，可以直接调用<xref:System.Windows.UIElement.UpdateLayout%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-822">Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>.</span></span> <span data-ttu-id="6cffe-823">但是，您应只调用<xref:System.Windows.UIElement.UpdateLayout%2A>如果则很可能，没有其他挂起的 （大量不必要的强制更新会对性能产生影响）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-823">However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</span></span>  
  
 <span data-ttu-id="6cffe-824">如果<xref:System.Windows.UIElement.IsMeasureValid%2A>是`false`，<xref:System.Windows.UIElement.IsArrangeValid%2A>也必须`false`（通过布局过程的执行逻辑，排列方式不能为有效而无需第一次进行有效的度量）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-824">If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-825">获取一个值，该值指示此元素是否捕获了鼠标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-825">Gets a value indicating whether the mouse is captured to this element.</span></span>  <span data-ttu-id="6cffe-826">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-826">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-827">如果元素具有鼠标捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-827"><see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-828">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-828">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-829">鼠标捕获状态相关于进程内拖放操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-829">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-830">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-830">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-831">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-831">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="6cffe-832">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-832">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-833">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-833">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-834">下面的示例将鼠标捕获状态打开或关闭基础上的元素是否已捕获鼠标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-834">The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</span></span>  
  
 <span data-ttu-id="6cffe-835">如果鼠标捕获在其他位置，鼠标捕获设置为该元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-835">If mouse capture is elsewhere, the mouse capture is set to that element.</span></span> <span data-ttu-id="6cffe-836">如果该元素具有鼠标捕获，它通过调用来清除<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>使用 null 输入。</span><span class="sxs-lookup"><span data-stu-id="6cffe-836">If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with a null input.</span></span>  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-837">在此元素的 <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-837">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-838">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-838">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-839">标识 <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-839">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-840">获取一个值，该值确定鼠标捕获是由此元素还是其可视化树中的子元素持有。</span><span class="sxs-lookup"><span data-stu-id="6cffe-840">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span></span> <span data-ttu-id="6cffe-841">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-841">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-842">如果此元素或包含的元素具有鼠标捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-842"><see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-843">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-843">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-844">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-844">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="6cffe-845">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-845">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-846">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-846">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-847">在此元素的 <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> 值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-847">Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-848">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-848">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-849">标识 <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-849">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-850">获取一个值，该值指示在考虑元素组合的情况下，鼠标指针的位置是否与命中测试结果相对应。</span><span class="sxs-lookup"><span data-stu-id="6cffe-850">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span></span>  <span data-ttu-id="6cffe-851">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-851">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-852">如果鼠标指针位于与命中测试相同的元素结果上，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-852"><see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-853">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-853">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-854">与不同<xref:System.Windows.UIElement.IsMouseOver%2A>，此属性才是`true`与命中测试如果将鼠标指针位于 literal 元素-。</span><span class="sxs-lookup"><span data-stu-id="6cffe-854">Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element - as it is for a hit test.</span></span> <span data-ttu-id="6cffe-855">而如果鼠标指针位于子元素上，特别是对所包含的元素的更深层的模板和组合的情况下，元素，此属性将为`false`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-855">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="6cffe-856">除非你知道如何控件的组合 （例如，使用此属性在自定义控件模板中定义的控件），此属性可能返回意外的结果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-856">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="6cffe-857">对于大多数情况下不创作控件的情况，请使用<xref:System.Windows.UIElement.IsMouseOver%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="6cffe-857">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="6cffe-858">如果此元素捕获鼠标，并且此属性是`true`在捕获时，此属性将继续返回`true`直到失去鼠标捕获，并且指针不是其边界上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-858">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-859">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-859">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-860">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-860">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="6cffe-861">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-861">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-862">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-862">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-863">在此元素的 <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-863">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-864">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-864">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-865">标识 <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-865">Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-866">获取一个值，该值指示鼠标指针是否位于此元素（包括可视化树中的子元素）的上方。</span><span class="sxs-lookup"><span data-stu-id="6cffe-866">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span></span>  <span data-ttu-id="6cffe-867">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-867">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-868">如果鼠标指针位于该元素或其子元素上方，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-868"><see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-869">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-869">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-870">通常情况下，控件都是复合，以便控件 （可视树） 中的各种元素都将报告包含控件的鼠标状态。</span><span class="sxs-lookup"><span data-stu-id="6cffe-870">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="6cffe-871">例如，<xref:System.Windows.Controls.ListBox>样式的控件将报告<xref:System.Windows.UIElement.IsMouseOver%2A>作为`true`如果鼠标的任何位置通过几何形状，包括任何<xref:System.Windows.Controls.ListBoxItem>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-871">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="6cffe-872">尽管类似"等效于"事件不存在，将通过几个类似的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-872">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="6cffe-873">例如，可以处理<xref:System.Windows.UIElement.MouseEnter>， <xref:System.Windows.UIElement.MouseMove>，和<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-873">For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="6cffe-874">如果此元素捕获鼠标时，此属性将保持`true`直到失去鼠标捕获并且鼠标指针离开元素边界。</span><span class="sxs-lookup"><span data-stu-id="6cffe-874">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="6cffe-875">某些控件有意捕获鼠标上不会显示直接涉及鼠标某些操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-875">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="6cffe-876">这可能会导致<xref:System.Windows.UIElement.IsMouseOver%2A>正在`true`即使看似未移动鼠标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-876">This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-877">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-877">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-878">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-878">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|<span data-ttu-id="6cffe-879">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-879">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-880">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-880">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-881">下面的示例引用此属性的属性类型为<xref:System.Windows.Trigger>，它属于\<Style.Triggers > 块。</span><span class="sxs-lookup"><span data-stu-id="6cffe-881">The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \<Style.Triggers> block.</span></span> <span data-ttu-id="6cffe-882">如果鼠标位于控件上，控件文本会变成蓝色，并且光标变成手的形状。</span><span class="sxs-lookup"><span data-stu-id="6cffe-882">If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</span></span>  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-883">标识 <see cref="P:System.Windows.UIElement.IsMouseOver" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-883">Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-884">获取一个值，该值表示此元素是否捕获了触笔。</span><span class="sxs-lookup"><span data-stu-id="6cffe-884">Gets a value indicating whether the stylus is captured by this element.</span></span>  <span data-ttu-id="6cffe-885">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-885">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-886">如果元素具有触笔捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-886"><see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-887">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-887">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-888">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-888">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-889">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-889">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-890">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-890">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-891">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-891">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="6cffe-892">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-892">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-893">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-893">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-894">在此元素的 <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-894">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-895">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-895">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-896">标识 <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-896">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-897">获取一个值，该值确定触笔捕获是由此元素还是由元素边界内的元素及其可视化树持有。</span><span class="sxs-lookup"><span data-stu-id="6cffe-897">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span></span> <span data-ttu-id="6cffe-898">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-898">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-899">如果此元素或包含的元素具有触笔捕获，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-899"><see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-900">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-900">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-901">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-901">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-902">有关详细信息，请参阅[Windows Vista 中的触摸屏输入支持](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)并[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-902">For more information, see [Touch Input Support in Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-903">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-903">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-904">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-904">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="6cffe-905">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-905">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-906">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-906">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-907">在此元素的 <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-907">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-908">这是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-908">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-909">标识 <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-909">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-910">获取一个值，该值指示在考虑元素组合的情况下，触笔的位置是否与命中测试结果相对应。</span><span class="sxs-lookup"><span data-stu-id="6cffe-910">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span></span>  <span data-ttu-id="6cffe-911">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-911">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-912">如果触笔指针位于与命中测试相同的元素结果上，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-912"><see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-913">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-913">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-914">与不同<xref:System.Windows.UIElement.IsStylusOver%2A>，此属性才是`true`如果触笔位于元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-914">Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="6cffe-915">如果触笔改为通过子元素或元素的元素的更深入地组合 （可视树） 的一部分，此属性将为`false`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-915">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="6cffe-916">除非你知道如何控件的组合 （例如，使用此属性在自定义控件模板中定义的控件），此属性可能返回意外的结果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-916">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="6cffe-917">对于大多数情况下不创作控件的情况，请使用<xref:System.Windows.UIElement.IsStylusOver%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="6cffe-917">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="6cffe-918">如果此元素具有触笔捕获，并且此属性是`true`捕获时，此属性将保持`true`直到触笔捕获，丢失和触笔不能通过其边界。</span><span class="sxs-lookup"><span data-stu-id="6cffe-918">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="6cffe-919">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-919">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-920">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-920">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-921">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-921">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-922">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-922">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="6cffe-923">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-923">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-924">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-924">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-925">在此元素的 <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-925">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-926">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-926">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-927">标识 <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-927">Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-928">获取一个值，该值指示触笔指针是否位于此元素（包括可视化子元素）的上方。</span><span class="sxs-lookup"><span data-stu-id="6cffe-928">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span></span>  <span data-ttu-id="6cffe-929">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-929">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-930">如果触笔光标位于元素或其子元素上方，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-930"><see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-931">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-931">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-932">如果此元素具有触笔捕获，此属性将继续返回`true`直到丢失触笔捕获并且鼠标指针离开其边界。</span><span class="sxs-lookup"><span data-stu-id="6cffe-932">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="6cffe-933">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-933">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-934">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-934">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-935">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-935">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-936">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-936">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|<span data-ttu-id="6cffe-937">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-937">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-938">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-938">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-939">标识 <see cref="P:System.Windows.UIElement.IsStylusOver" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-939">Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-940">获取一个值，该值指示此元素在[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中是否可见。</span><span class="sxs-lookup"><span data-stu-id="6cffe-940">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="6cffe-941">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-941">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-942">如果该元素可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-942"><see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-943">确定<xref:System.Windows.UIElement.IsVisible%2A>值将布局的所有因素考虑在内。</span><span class="sxs-lookup"><span data-stu-id="6cffe-943">Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account.</span></span> <span data-ttu-id="6cffe-944">与此相反， <xref:System.Windows.UIElement.Visibility%2A>，这是一个可设置属性，仅指示想要以编程方式使元素可见或不可见。</span><span class="sxs-lookup"><span data-stu-id="6cffe-944">In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="6cffe-945">元素的<xref:System.Windows.UIElement.IsVisible%2A>是`false`不参与输入的事件 （或命令），请执行不会影响度量值或排列过程的布局、 不是可获得焦点、 不是按选项卡顺序和命中测试中将不会报告。</span><span class="sxs-lookup"><span data-stu-id="6cffe-945">Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="6cffe-946">与之相反，元素的<xref:System.Windows.UIElement.IsEnabled%2A>是`false`仍将参与事件和命令，以及命中测试，但不还可获得焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-946">In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-947">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-947">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-948">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-948">Identifier field</span></span>|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|<span data-ttu-id="6cffe-949">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-949">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-950">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-950">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-951">在此元素的 <see cref="P:System.Windows.UIElement.IsVisible" /> 属性值更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-951">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-952">如果该元素未呈现由布局系统，而原因并非的值不会引发此事件<xref:System.Windows.UIElement.IsVisible%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-952">This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property.</span></span> <span data-ttu-id="6cffe-953">例如，元素可能具有相关联的视觉对象。</span><span class="sxs-lookup"><span data-stu-id="6cffe-953">For example, the element might not have an associated visual.</span></span>  
  
 <span data-ttu-id="6cffe-954">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-954">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-955">标识 <see cref="P:System.Windows.UIElement.IsVisible" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-955">Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-956">当焦点在该元素上时按下某个键后发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-956">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-957">密钥处理与其他平台功能，例如命令和文本组合进行交互。</span><span class="sxs-lookup"><span data-stu-id="6cffe-957">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="6cffe-958"><xref:System.Windows.UIElement.KeyDown>事件是一个较低级别的文本输入的事件，可能不会像预期某些控件上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-958">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="6cffe-959">这是文本的因为某些控件具有控件组合或提供更高级版本的类处理输入处理和相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-959">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="6cffe-960">此事件创建一个别名<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.KeyDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-960">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-961">事件处理程序附加到<xref:System.Windows.UIElement.KeyDown>事件附加到基础<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-961">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-962">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-962">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-963">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-963">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyDownEvent>|  
|<span data-ttu-id="6cffe-964">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-964">Routing strategy</span></span>|<span data-ttu-id="6cffe-965">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-965">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-966">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-966">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="6cffe-967">相应的隧道事件是<xref:System.Windows.UIElement.PreviewKeyDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-967">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-968">重写<xref:System.Windows.UIElement.OnKeyDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-968">Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-969">标识 <see cref="E:System.Windows.UIElement.KeyDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-969">Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-970">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-970">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-971">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-971">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-972">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-972">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-973">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-973">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-974">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-974">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-975">当焦点在该元素上时松开某个键后发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-975">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-976">此事件创建一个别名<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加的此类事件，以便<xref:System.Windows.UIElement.KeyUp>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-976">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-977">事件处理程序附加到<xref:System.Windows.UIElement.KeyUp>事件附加到基础<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-977">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-978">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-978">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-979">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-979">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyUpEvent>|  
|<span data-ttu-id="6cffe-980">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-980">Routing strategy</span></span>|<span data-ttu-id="6cffe-981">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-981">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-982">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-982">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="6cffe-983">相应的隧道事件是<xref:System.Windows.UIElement.PreviewKeyUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-983">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-984">重写<xref:System.Windows.UIElement.OnKeyUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-984">Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-985">标识 <see cref="E:System.Windows.UIElement.KeyUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-985">Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-986">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-986">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-987">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-987">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-988">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-988">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-989">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-989">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-990">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-990">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-991">在与当前 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的各种可视元素的布局更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-991">Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-992">布局更新会导致发生属性更改、 调整窗口大小或显式用户请求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-992">A layout update can occur as a result of a property change, a window resize, or an explicit user request.</span></span>  
  
 <span data-ttu-id="6cffe-993">此成员是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件、 不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-993">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-994">在此元素丢失逻辑焦点时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-994">Occurs when this element loses logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-995">如果有意通过某个方法调用强制失去了焦点，而前一个键盘焦点位于不同的范围内，则逻辑焦点将与键盘焦点不同。</span><span class="sxs-lookup"><span data-stu-id="6cffe-995">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="6cffe-996">在此方案，其中是键盘焦点将保留和元素其中<xref:System.Windows.UIElement.Focus%2A>方法称为仍获得逻辑焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-996">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="6cffe-997">此事件的更精确地解释是它时引发的值<xref:System.Windows.UIElement.IsFocused%2A>路由中的元素的属性从更改`true`到`false`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-997">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="6cffe-998">由于此事件使用冒泡路由，因此失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-998">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-999">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际获得焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-999">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1000">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1000">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1001">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1001">Identifier field</span></span>|<xref:System.Windows.UIElement.LostFocusEvent>|  
|<span data-ttu-id="6cffe-1002">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1002">Routing strategy</span></span>|<span data-ttu-id="6cffe-1003">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1003">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1004">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1004">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="6cffe-1005">没有相应的隧道事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1005">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="6cffe-1006">重写<xref:System.Windows.UIElement.OnLostFocus%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1006">Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1007">标识 <see cref="E:System.Windows.UIElement.LostFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1007">Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1008">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1008">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1009">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1009">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1010">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1010">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1011">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1011">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1012">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1012">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1013">在键盘焦点不再位于此元素上时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1013">Occurs when the keyboard is no longer focused on this element,.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1014">由于此事件使用冒泡路由，因此失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1014">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-1015">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据来确定实际失去焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1015">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="6cffe-1016">此事件创建一个别名<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.LostKeyboardFocus>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1016">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1017">事件处理程序附加到<xref:System.Windows.UIElement.LostKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1017">Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1018">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1018">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1019">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1019">Identifier field</span></span>|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="6cffe-1020">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1020">Routing strategy</span></span>|<span data-ttu-id="6cffe-1021">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1021">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1022">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1022">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="6cffe-1023">相应的隧道事件是<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1023">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="6cffe-1024">重写<xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1024">Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1025">标识 <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1025">Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1026">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1026">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1027">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1027">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1028">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1028">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1029">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1029">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1030">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1030">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1031">在此元素丢失鼠标捕获时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1031">Occurs when this element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1032">在元素捕获鼠标，它会接收鼠标输入，即使在指针位于其边界外。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1032">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="6cffe-1033">只有在拖放操作通常捕获鼠标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1033">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="6cffe-1034">此事件使用冒泡路由，因为丢失捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1034">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-1035">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据来确定实际失去捕获的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1035">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="6cffe-1036">此事件创建一个别名<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.LostMouseCapture>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1036">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1037">事件处理程序附加到<xref:System.Windows.UIElement.LostMouseCapture>事件附加到基础<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1037">Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1038">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1038">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1039">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1039">Identifier field</span></span>|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="6cffe-1040">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1040">Routing strategy</span></span>|<span data-ttu-id="6cffe-1041">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1041">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1042">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1042">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="6cffe-1043">没有定义相应的隧道事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1043">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="6cffe-1044">重写<xref:System.Windows.UIElement.OnLostMouseCapture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1044">Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1045">标识 <see cref="E:System.Windows.UIElement.LostMouseCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1045">Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1046">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1046">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1047">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1047">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1048">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1048">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1049">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1049">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1050">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1050">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1051">在此元素丢失触笔捕获时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1051">Occurs when this element loses stylus capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1052">在元素捕获触笔，它会接收触笔输入，即使在指针位于其边界外。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1052">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="6cffe-1053">只有在拖放操作通常捕获触笔。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1053">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="6cffe-1054">由于此事件使用冒泡路由，因此失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1054">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-1055">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据来确定实际失去焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1055">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="6cffe-1056">此事件创建一个别名<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.LostStylusCapture>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1056">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1057">事件处理程序附加到<xref:System.Windows.UIElement.LostStylusCapture>事件附加到基础<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1057">Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1058">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1058">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1059">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1059">Identifier field</span></span>|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="6cffe-1060">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1060">Routing strategy</span></span>|<span data-ttu-id="6cffe-1061">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1061">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1062">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1062">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-1063">没有定义相应的隧道事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1063">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="6cffe-1064">重写<xref:System.Windows.UIElement.OnLostStylusCapture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1064">Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1065">标识 <see cref="E:System.Windows.UIElement.LostStylusCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1065">Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1066">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1066">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1067">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1067">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1068">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1068">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1069">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1069">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1070">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1070">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1071">在此元素失去触摸屏输入捕获时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1071">Occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1072">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1072">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1073">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1073">Identifier field</span></span>|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="6cffe-1074">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1074">Routing strategy</span></span>|<span data-ttu-id="6cffe-1075">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1075">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1076">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1076">Delegate</span></span>|<span data-ttu-id="6cffe-1077"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1077"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-1078">重写<xref:System.Windows.UIElement.OnLostTouchCapture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1078">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1079">标识 <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1079">Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1080">当操作遇到边界时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1080">Occurs when the manipulation encounters a boundary.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1081">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1081">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1082">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1082">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|<span data-ttu-id="6cffe-1083">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1083">Routing strategy</span></span>|<span data-ttu-id="6cffe-1084">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1084">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1085">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1085">Delegate</span></span>|<span data-ttu-id="6cffe-1086"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1086"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1087">标识 <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1087">Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1088">对于 <see cref="T:System.Windows.UIElement" /> 对象的操作和延时完毕时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1088">Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1089">此事件可用于在其完成后获取有关操作的信息。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1089">You can use this event to get information about the manipulation when it completes.</span></span>  <span data-ttu-id="6cffe-1090">例如，可以使用<xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType>属性来确定总金额操作位置更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1090">For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> property to determine the total amount the position of the manipulation changed.</span></span>  
  
 <span data-ttu-id="6cffe-1091">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1091">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="6cffe-1092">操作响应的应用程序的示例，请参阅[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1092">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1093">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1093">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1094">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1094">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|<span data-ttu-id="6cffe-1095">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1095">Routing strategy</span></span>|<span data-ttu-id="6cffe-1096">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1096">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1097">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1097">Delegate</span></span>|<span data-ttu-id="6cffe-1098"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1098"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1099">标识 <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1099">Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1100">当输入设备在操作期间更改位置时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1100">Occurs when the input device changes position during a manipulation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1101"><xref:System.Windows.UIElement.ManipulationDelta>事件发生多次，当用户拖动手指在屏幕上在操作过程和再次发生惯性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1101">The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</span></span>  <span data-ttu-id="6cffe-1102">可以使用<xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>要检查是否在惯性期间发生的事件属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1102">You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.</span></span>  
  
 <span data-ttu-id="6cffe-1103">在具有的元素<xref:System.Windows.UIElement.ManipulationDelta>发生事件在事件发生时不受任何影响。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1103">The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.</span></span>  <span data-ttu-id="6cffe-1104">必须提供要操作的元素的逻辑。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1104">You must provide the logic to the element that is to be manipulated.</span></span>  <span data-ttu-id="6cffe-1105"><xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>并<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>属性，类型<xref:System.Windows.Input.ManipulationDelta>，包含有关该操作的位置更改的数据和解释为移动、 调整大小或旋转对象。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1105">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</span></span>  <span data-ttu-id="6cffe-1106">将该信息应用到要操作的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1106">You apply that information to the element that is to be manipulated.</span></span>  
  
 <span data-ttu-id="6cffe-1107">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1107">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="6cffe-1108">操作响应的应用程序的示例，请参阅[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1108">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1109">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1109">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1110">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1110">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|<span data-ttu-id="6cffe-1111">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1111">Routing strategy</span></span>|<span data-ttu-id="6cffe-1112">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1112">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1113">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1113">Delegate</span></span>|<span data-ttu-id="6cffe-1114"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationDeltaEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1114"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-1115">下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationDelta>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1115">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="6cffe-1116">该示例使用<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>属性来移动、 调整大小和旋转<xref:System.Windows.Shapes.Rectangle>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1116">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span>  <span data-ttu-id="6cffe-1117">该示例还会检查是否<xref:System.Windows.UIElement.ManipulationDelta>延时和矩形是否接触窗口边缘的过程中发生事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1117">The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span>  <span data-ttu-id="6cffe-1118">如果这种情况下均为 true，该应用程序将停止操作后，若要防止将应用程序的可见区域的矩形。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1118">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="6cffe-1119">此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1119">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1120">标识 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1120">Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1121">当输入设备在操作期间与 <see cref="T:System.Windows.UIElement" /> 对象失去联系且延时开始时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1121">Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1122"><xref:System.Windows.UIElement.ManipulationInertiaStarting>事件发生时在用户抬起手指从屏幕的所有在操作过程。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1122">The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation.</span></span> <span data-ttu-id="6cffe-1123">例如，如果用户"抛出"<xref:System.Windows.UIElement>表面，用户将触摸<xref:System.Windows.UIElement>要开始操作，请在一段短距离，屏幕上移动手指，然后释放<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1123">For example, if a user "throws" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="6cffe-1124">当用户释放该元素时，惯性开始和<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1124">When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.</span></span>  <span data-ttu-id="6cffe-1125"><xref:System.Windows.UIElement>继续接收<xref:System.Windows.UIElement.ManipulationDelta>事件指出在元素上发生了延时。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1125">The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.</span></span>  
  
 <span data-ttu-id="6cffe-1126">此事件可用于指定延时的行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1126">You can use this event to specify the behavior of the inertia.</span></span>  <span data-ttu-id="6cffe-1127">例如，可以设置惯性开始时使用的初始速度。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1127">For example, you can set the initial velocity that is used when inertia begins.</span></span>  <span data-ttu-id="6cffe-1128">通过设置预期的减速度或通过设置所需的位置，还可以指定延时的量。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1128">You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</span></span>  <span data-ttu-id="6cffe-1129">可以单独设置这些值对于每种类型的操作 （转换、 扩展或旋转）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1129">You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</span></span>  <span data-ttu-id="6cffe-1130">有关详情，请参阅<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1130">For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>  
  
 <span data-ttu-id="6cffe-1131">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1131">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="6cffe-1132">操作响应的应用程序的示例，请参阅[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1132">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1133">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1133">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1134">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1134">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|<span data-ttu-id="6cffe-1135">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1135">Routing strategy</span></span>|<span data-ttu-id="6cffe-1136">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1136">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1137">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1137">Delegate</span></span>|<span data-ttu-id="6cffe-1138"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1138"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-1139">下面的示例演示<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件处理程序，并设置预期的减速度转换、 扩展和旋转惯性期间使用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1139">The following example shows the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</span></span> <span data-ttu-id="6cffe-1140">此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1140">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1141">标识 <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1141">Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1142">当输入设备对 <see cref="T:System.Windows.UIElement" /> 对象开始操作时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1142">Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1143"><xref:System.Windows.UIElement.ManipulationStarted>事件发生后<xref:System.Windows.UIElement.ManipulationStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1143">The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span>  <span data-ttu-id="6cffe-1144">您可以执行以下操作<xref:System.Windows.Input.ManipulationStartedEventArgs>:</span><span class="sxs-lookup"><span data-stu-id="6cffe-1144">You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span></span>  
  
-   <span data-ttu-id="6cffe-1145">获取操作的位置是相对于使用的元素<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1145">Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="6cffe-1146">使用获取操作的原点<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1146">Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.</span></span>  
  
-   <span data-ttu-id="6cffe-1147">通过调用来取消该操作<xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1147">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.</span></span>  
  
 <span data-ttu-id="6cffe-1148">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1148">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="6cffe-1149">操作响应的应用程序的示例，请参阅[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1149">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1150">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1150">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1151">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1151">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|<span data-ttu-id="6cffe-1152">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1152">Routing strategy</span></span>|<span data-ttu-id="6cffe-1153">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1153">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1154">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1154">Delegate</span></span>|<span data-ttu-id="6cffe-1155"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationStartedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1155"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1156">标识 <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1156">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1157">在首次创建操作处理器时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1157">Occurs when the manipulation processor is first created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1158"><xref:System.Windows.UIElement.ManipulationStarting>具有的元素上发生事件<xref:System.Windows.UIElement.IsManipulationEnabled%2A>属性设置为`true`时用户将手指放在其上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1158">The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it.</span></span> <span data-ttu-id="6cffe-1159">默认情况下，后续操作事件会报告的位置相对于元素具有操作<xref:System.Windows.UIElement.IsManipulationEnabled%2A>设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1159">By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.</span></span>  <span data-ttu-id="6cffe-1160">您可以指定位置应为相对于另一个元素通过设置<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1160">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="6cffe-1161">例如，可以相对于父元素的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1161">For example, you can make the manipulation relative to the parent of the element.</span></span>  
  
 <span data-ttu-id="6cffe-1162">此外可以执行的事件处理程序中的以下<xref:System.Windows.UIElement.ManipulationStarting>:</span><span class="sxs-lookup"><span data-stu-id="6cffe-1162">You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:</span></span>  
  
-   <span data-ttu-id="6cffe-1163">指定用户是否需要多个手指执行操作，通过设置<xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1163">Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="6cffe-1164">指定哪些类型的操作启用通过设置<xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType>属性设置为<xref:System.Windows.Input.ManipulationModes>枚举。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1164">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="6cffe-1165">通过设置指定的单指旋转中心<xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1165">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="6cffe-1166">通过调用来取消该操作<xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1166">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6cffe-1167">有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1167">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="6cffe-1168">操作响应的应用程序的示例，请参阅[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1168">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1169">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1169">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1170">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1170">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|<span data-ttu-id="6cffe-1171">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1171">Routing strategy</span></span>|<span data-ttu-id="6cffe-1172">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1172">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1173">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1173">Delegate</span></span>|<span data-ttu-id="6cffe-1174"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.ManipulationStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1174"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-1175">下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationStarting>事件和集<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>到接收操作事件，这样的操作坐标是相对于父元素的父元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1175">The following example shows the event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</span></span>  <span data-ttu-id="6cffe-1176">此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1176">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1177">标识 <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1177">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="6cffe-1178">父元素可以为子元素分配的可用空间。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1178">The available space that a parent element can allocate a child element.</span></span> <span data-ttu-id="6cffe-1179">子元素可以请求大于可用空间的空间；如果可在当前元素的内容模型中进行滚动，则提供的大小可以适应此空间。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1179">A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</span></span></param>
        <summary><span data-ttu-id="6cffe-1180">更新 <see cref="T:System.Windows.UIElement" /> 的 <see cref="P:System.Windows.UIElement.DesiredSize" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1180">Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="6cffe-1181">父元素从其自身的 <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> 实现调用此方法以形成递归布局更新。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1181">Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update.</span></span> <span data-ttu-id="6cffe-1182">调用此方法构成布局更新的第一个处理过程（“测量”处理过程）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1182">Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1183">中的布局位置计算[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]组成<xref:System.Windows.UIElement.Measure%2A>调用和<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1183">Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="6cffe-1184">期间<xref:System.Windows.UIElement.Measure%2A>调用中，元素确定其大小要求使用`availableSize`输入。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1184">During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input.</span></span> <span data-ttu-id="6cffe-1185">期间<xref:System.Windows.UIElement.Arrange%2A>完成调用时，元素大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1185">During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.</span></span>  
  
 <span data-ttu-id="6cffe-1186">`availableSize` 可以是从零到无穷大的任意数字。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1186">`availableSize` can be any number from zero to infinite.</span></span> <span data-ttu-id="6cffe-1187">参与布局的元素应返回最小值<xref:System.Windows.Size>它们需要的给定`availableSize`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1187">Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.</span></span>  
  
 <span data-ttu-id="6cffe-1188">当首次实例化一个布局时，它始终会接收<xref:System.Windows.UIElement.Measure%2A>之前调用<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1188">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="6cffe-1189">但是之后第一个布局处理过程，, 它可能会收到<xref:System.Windows.UIElement.Arrange%2A>而无需调用<xref:System.Windows.UIElement.Measure%2A>; 这可以仅影响的属性时<xref:System.Windows.UIElement.Arrange%2A>更改 （如对齐方式），或者接收到父<xref:System.Windows.UIElement.Arrange%2A>而无需<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cffe-1189">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="6cffe-1190">一个<xref:System.Windows.UIElement.Measure%2A>调用将自动使失效<xref:System.Windows.UIElement.Arrange%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1190">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="6cffe-1191">布局更新异步发生，以便在主线程不会等待每个可能的布局更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1191">Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</span></span> <span data-ttu-id="6cffe-1192">查询通过隐藏代码检查属性值的元素可能不会立即反映对大小调整或布局特征与之交互的属性的更改 (<xref:System.Windows.FrameworkElement.Width%2A>属性，例如)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1192">Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cffe-1193">可以通过强制布局更新<xref:System.Windows.UIElement.UpdateLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1193">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method.</span></span> <span data-ttu-id="6cffe-1194">但是，调用此方法通常不需要可能会导致性能不佳。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1194">However, calling this method is usually unnecessary and can cause poor performance.</span></span>  
  
 <span data-ttu-id="6cffe-1195">布局系统保留的无效布局，一个用于两个单独的队列<xref:System.Windows.UIElement.Measure%2A>，另一个用于<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1195">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="6cffe-1196">根据执行布局; 的元素的可视化树中元素的顺序排序布局队列在树中较高级别的元素位于队列，以避免在父级中的重复更改所造成的冗余布局的顶部。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1196">The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="6cffe-1197">自动从队列中删除重复项，如果他们已验证布局自动从队列删除元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1197">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</span></span>  
  
 <span data-ttu-id="6cffe-1198">更新布局时，<xref:System.Windows.UIElement.Measure%2A>队列为空首先后, 跟<xref:System.Windows.UIElement.Arrange%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1198">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="6cffe-1199">中的元素<xref:System.Windows.UIElement.Arrange%2A>队列中的元素是否将永远不会进行排列<xref:System.Windows.UIElement.Measure%2A>队列。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1199">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="6cffe-1200">父元素可以为子元素分配的可用大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1200">The available size that the parent element can allocate for the child.</span></span></param>
        <summary><span data-ttu-id="6cffe-1201">在派生类中重写时，提供测量逻辑来适当地调整此元素的大小，兼顾任何子元素内容的大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1201">When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</span></span></summary>
        <returns><span data-ttu-id="6cffe-1202">此元素在布局中的所需大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1202">The desired size of this element in layout.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1203">它是更常见的派生元素<xref:System.Windows.FrameworkElement>而非<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1203">It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="6cffe-1204">如果派生自<xref:System.Windows.FrameworkElement>，请注意，重写<xref:System.Windows.UIElement.MeasureCore%2A>上<xref:System.Windows.FrameworkElement>印章并<xref:System.Windows.UIElement.MeasureCore%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1204">If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method.</span></span> <span data-ttu-id="6cffe-1205">因此，您只能重写<xref:System.Windows.UIElement.MeasureCore%2A>作为一种方式来更改布局测量特征，如果从派生<xref:System.Windows.UIElement>通过不包括继承<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1205">Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="6cffe-1206">如果您尝试构建您自己的实现，这可能是这种情况[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]核心级别。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1206">This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level.</span></span> <span data-ttu-id="6cffe-1207">否则为如果派生自<xref:System.Windows.FrameworkElement>，则度量值的行为的实现模板<xref:System.Windows.FrameworkElement>的实现。<xref:System.Windows.FrameworkElement.MeasureOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1207">Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-1208">具有子元素的父元素必须调用<xref:System.Windows.UIElement.Measure%2A>在每个的子活动，否则为这些子元素不调整大小或排列和有效地将从布局中消失。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1208">A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-1209">典型重写<xref:System.Windows.UIElement.MeasureCore%2A>遵循这种近似模式 (不是一个名为的内置集合`VisualChildren`;`VisualChildren`是一个占位符，表示将元素维护任何子集合)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1209">A typical override of <xref:System.Windows.UIElement.MeasureCore%2A> follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   <span data-ttu-id="6cffe-1210">必须调用<xref:System.Windows.UIElement.Measure%2A>每个子元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1210">You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
-   <span data-ttu-id="6cffe-1211">通常情况下，您的实现应缓存之间的度量信息<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>方法调用的同一元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1211">Generally, your implementation should cache measurement information between the <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.</span></span>  
  
-   <span data-ttu-id="6cffe-1212">调用的基实现<xref:System.Windows.UIElement.MeasureCore%2A>不是必需的但可能适用如果基实现提供所需的布局功能。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1212">Calling base implementations of <xref:System.Windows.UIElement.MeasureCore%2A> is not required, but might be appropriate if the base implementation provides a desired layout capability.</span></span>  
  
-   <span data-ttu-id="6cffe-1213">调用<xref:System.Windows.UIElement.Measure%2A>在子元素应通过属于相同`availableSize`作为父项或在区域的子集，具体取决于布局的类型的父元素支持。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1213">Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports.</span></span> <span data-ttu-id="6cffe-1214">例如，它将有效以删除特定于元素的边框或填充、 滚动条，或自定义控件的区域。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1214">For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-1215">实现必须能够处理提供的值<paramref name="availableSize" />的是无限期。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1215">Implementations must be able to process a value provided for <paramref name="availableSize" /> that is infinite.</span></span> <span data-ttu-id="6cffe-1216">无限值指示没有请求的约束，并有效地将推迟到父元素，通过递归调用度量值的度量值选择。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1216">An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</span></span>  
  
<span data-ttu-id="6cffe-1217">实现可以考虑为提供的值<paramref name="availableSize" />是软约束。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1217">Implementations can consider the value provided for <paramref name="availableSize" /> to be a soft constraint.</span></span> <span data-ttu-id="6cffe-1218">子元素可能指定更大大小，即使应用程序代码的其他方面能够确定父元素的当前实际大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1218">The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</span></span> <span data-ttu-id="6cffe-1219">大型大小请求是一个约定，指示子元素查询父元素是否可以支持内容的显示区域内的内容滚动。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1219">The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1220">在指针位于此元素上并且按下任意鼠标按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1220">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1221">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1221">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1222">事件处理程序附加到<xref:System.Windows.UIElement.MouseDown>事件附加到基础<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1222">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-1223"><xref:System.Windows.UIElement.MouseDown>任意一个协同通常引发事件<xref:System.Windows.UIElement.MouseLeftButtonDown>或<xref:System.Windows.UIElement.MouseRightButtonDown>，对应于一个两个标准鼠标按钮按下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1223">The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="6cffe-1224"><xref:System.Windows.UIElement.MouseLeftButtonDown> 并<xref:System.Windows.UIElement.MouseRightButtonDown>也是路由的事件，但它们是直接路由的事件，并引发相应的特定于按钮的事件时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1224"><xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="6cffe-1225">请参阅备注<xref:System.Windows.UIElement.MouseLeftButtonDown>或<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1225">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cffe-1226">某些控件可能具有固有的鼠标按钮事件处理的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1226">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="6cffe-1227">鼠标左键按下事件是最有可能的事件，以便使类处理在控件中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1227">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="6cffe-1228">类通常处理标记基础<xref:System.Windows.Input.Mouse>为已处理的类事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1228">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="6cffe-1229">一旦该事件标记为已处理，其他实例处理程序附加到该元素通常不会引发。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1229">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="6cffe-1230">通常也不会引发的任何其他类或实例处理程序附加到针对 UI 树的根节点的浮升方向中的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1230">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="6cffe-1231">您可以解决的问题，在前面的重要说明中所述和仍接收<xref:System.Windows.UIElement.MouseDown>鼠标左键按下具有类处理通过使用这些解决方案的派生类上的事件的事件：</span><span class="sxs-lookup"><span data-stu-id="6cffe-1231">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="6cffe-1232">附加处理程序<xref:System.Windows.UIElement.PreviewMouseDown>未标记为已由控件处理的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1232">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="6cffe-1233">请注意，由于这是预览事件，该路由从根开始，隧道下行控件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1233">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="6cffe-1234">虽然通过调用注册该控件上的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，然后选择使处理程序以侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1234">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1235">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1235">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1236">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1236">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseDownEvent>|  
|<span data-ttu-id="6cffe-1237">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1237">Routing strategy</span></span>|<span data-ttu-id="6cffe-1238">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1238">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1239">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1239">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-1240">相应的隧道事件是<xref:System.Windows.UIElement.PreviewMouseDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1240">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-1241">重写<xref:System.Windows.UIElement.OnMouseDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1241">Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1242">标识 <see cref="E:System.Windows.UIElement.MouseDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1242">Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1243">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1243">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1244">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1244">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1245">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1245">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1246">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1246">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1247">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1247">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1248">在鼠标指针进入此元素的边界时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1248">Occurs when the mouse pointer enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1249"><xref:System.Windows.UIElement.MouseEnter> 是，它使用直接事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1249"><xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="6cffe-1250">直接路由的事件不会引发在路由过程;相反，它们被处理的同一元素中引发位置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1250">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="6cffe-1251">但是，它们启用了路由的事件的行为，如在样式中的事件触发的其他方面。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1251">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="6cffe-1252">尽管<xref:System.Windows.UIElement.MouseEnter>跟踪当鼠标指针进入元素，此事件的多个边界确切地报告<xref:System.Windows.UIElement.IsMouseOver%2A>属性值已从`false`到`true`此元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1252">Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="6cffe-1253">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseEnter>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1253">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1254">事件处理程序附加到<xref:System.Windows.UIElement.MouseEnter>事件附加到基础<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1254">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-1255">一个<xref:System.Windows.Controls.Button>(或任何<xref:System.Windows.Controls.Primitives.ButtonBase>派生的类) 具有用于本机处理<xref:System.Windows.UIElement.KeyDown>事件时该按钮具有焦点，并按下的键是空格键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1255">A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar.</span></span> <span data-ttu-id="6cffe-1256">本机处理引发<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件使用按钮作为源，同时还捕获鼠标，尽管鼠标指针不会显示移动。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1256">The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</span></span> <span data-ttu-id="6cffe-1257">由于鼠标捕获，而<xref:System.Windows.UIElement.MouseEnter>与作为源的按钮也会引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1257">As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source.</span></span> <span data-ttu-id="6cffe-1258">通常，如果在元素捕获鼠标，然后<xref:System.Windows.UIElement.MouseEnter>引发时，以及<xref:System.Windows.UIElement.GotMouseCapture>和可能是其他特定于控件的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1258">In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1259">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1259">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1260">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1260">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|<span data-ttu-id="6cffe-1261">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1261">Routing strategy</span></span>|<span data-ttu-id="6cffe-1262">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-1262">Direct</span></span>|  
|<span data-ttu-id="6cffe-1263">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1263">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="6cffe-1264">重写<xref:System.Windows.UIElement.OnMouseEnter%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1264">Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1265">标识 <see cref="E:System.Windows.UIElement.MouseEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1265">Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1266">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1266">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1267">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1267">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1268">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1268">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1269">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1269">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1270">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1270">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1271">在鼠标指针离开此元素的边界时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1271">Occurs when the mouse pointer leaves the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1272"><xref:System.Windows.UIElement.MouseLeave> 是，它使用直接事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1272"><xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="6cffe-1273">直接路由的事件不会引发在路由过程;相反，它们被处理的同一元素中引发位置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1273">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="6cffe-1274">但是，它们启用了路由的事件的行为，如在样式中的事件触发的其他方面。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1274">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="6cffe-1275">尽管<xref:System.Windows.UIElement.MouseLeave>跟踪何时鼠标离开某个元素，此事件的详细信息按原义报告<xref:System.Windows.UIElement.IsMouseOver%2A>属性值已从`true`到`false`此元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1275">Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="6cffe-1276">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseLeave>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1276">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1277">事件处理程序附加到<xref:System.Windows.UIElement.MouseLeave>事件附加到基础<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1277">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1278">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1278">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1279">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1279">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|<span data-ttu-id="6cffe-1280">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1280">Routing strategy</span></span>|<span data-ttu-id="6cffe-1281">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-1281">Direct</span></span>|  
|<span data-ttu-id="6cffe-1282">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1282">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="6cffe-1283">重写<xref:System.Windows.UIElement.OnMouseLeave%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1283">Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1284">标识 <see cref="E:System.Windows.UIElement.MouseLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1284">Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1285">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1285">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1286">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1286">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1287">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1287">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1288">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1288">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1289">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1289">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1290">在鼠标指针位于此元素上并且按下鼠标左键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1290">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1291">尽管这看上去要遵循元素树的浮升路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1291">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-1292">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1292">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-1293">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1293">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-1294">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1294">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-1295">如果将标记<xref:System.Windows.UIElement.MouseLeftButtonDown>处理，在实质上标注<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1295">If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="6cffe-1296">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1296">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="6cffe-1297">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1297">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-1298">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1298">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-1299">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1299">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cffe-1300">某些控件类可能具有固有的类的鼠标按钮事件处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1300">Some control classes might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="6cffe-1301">鼠标左键按下事件是最有可能的事件，以便使类处理在控件中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1301">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="6cffe-1302">类通常处理标记基础<xref:System.Windows.Input.Mouse>为已处理的类事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1302">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="6cffe-1303">一旦该事件标记为已处理，其他实例处理程序附加到该元素通常不会引发。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1303">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="6cffe-1304">通常也不会引发的任何其他类或实例处理程序附加到针对 UI 树的根节点的浮升方向中的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1304">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="6cffe-1305">您可以解决的问题，在前面的重要说明中所述和仍接收<xref:System.Windows.UIElement.MouseLeftButtonDown>鼠标左键按下具有类处理通过使用这些解决方案的派生类上的事件的事件：</span><span class="sxs-lookup"><span data-stu-id="6cffe-1305">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="6cffe-1306">附加处理程序<xref:System.Windows.UIElement.PreviewMouseDown>未标记为已由控件处理的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1306">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="6cffe-1307">请注意，由于这是预览事件，该路由从根开始，隧道下行控件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1307">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="6cffe-1308">虽然通过调用注册该控件上的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，然后选择使处理程序以侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1308">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1309">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1309">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1310">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1310">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="6cffe-1311">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1311">Routing strategy</span></span>|<span data-ttu-id="6cffe-1312">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-1312">Direct</span></span>|  
|<span data-ttu-id="6cffe-1313">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1313">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-1314">重写<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1314">Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1315">标识 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1315">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1316">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1316">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1317">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1317">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1318">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1318">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1319">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1319">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1320">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1320">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1321">在鼠标指针位于此元素上并且松开鼠标左键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1321">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1322">尽管这看上去要遵循元素树的浮升路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1322">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-1323">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1323">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-1324">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1324">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-1325">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1325">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-1326">如果将标记<xref:System.Windows.UIElement.MouseLeftButtonUp>处理，在实质上标注<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1326">If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="6cffe-1327">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1327">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-1328">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1328">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-1329">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1329">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1330">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1330">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1331">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1331">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="6cffe-1332">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1332">Routing strategy</span></span>|<span data-ttu-id="6cffe-1333">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-1333">Direct</span></span>|  
|<span data-ttu-id="6cffe-1334">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1334">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-1335">重写<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1335">Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1336">标识 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1336">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1337">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1337">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1338">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1338">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1339">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1339">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1340">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1340">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1341">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1341">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1342">在鼠标指针位于此元素上并且移动鼠标指针时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1342">Occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1343">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseMove>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1343">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1344">事件处理程序附加到<xref:System.Windows.UIElement.MouseMove>事件附加到基础<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1344">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1345">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1345">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1346">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1346">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|<span data-ttu-id="6cffe-1347">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1347">Routing strategy</span></span>|<span data-ttu-id="6cffe-1348">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1348">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1349">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1349">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="6cffe-1350">相应的隧道事件是<xref:System.Windows.UIElement.PreviewMouseMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1350">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-1351">重写<xref:System.Windows.UIElement.OnMouseMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1351">Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1352">标识 <see cref="E:System.Windows.UIElement.MouseMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1352">Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1353">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1353">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1354">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1354">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1355">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1355">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1356">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1356">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1357">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1357">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1358">在鼠标指针位于此元素上并且按下鼠标右键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1358">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1359">尽管这看上去要遵循元素树的浮升路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1359">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-1360">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1360">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-1361">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1361">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-1362">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1362">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-1363">如果将标记<xref:System.Windows.UIElement.MouseRightButtonDown>处理，在实质上标注<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1363">If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="6cffe-1364">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1364">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="6cffe-1365">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1365">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-1366">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1366">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-1367">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1367">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-1368">右侧的按钮的鼠标事件中经常会有本机处理应用程序方案。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1368">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="6cffe-1369">例如，鼠标左键按下的可能会显示上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1369">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="6cffe-1370">请参阅[ContextMenu 概述](~/docs/framework/wpf/controls/contextmenu-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1370">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1371">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1371">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1372">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1372">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="6cffe-1373">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1373">Routing strategy</span></span>|<span data-ttu-id="6cffe-1374">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-1374">Direct</span></span>|  
|<span data-ttu-id="6cffe-1375">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1375">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-1376">重写<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1376">Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1377">标识 <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1377">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1378">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1378">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1379">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1379">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1380">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1380">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1381">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1381">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1382">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1382">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1383">在鼠标指针位于此元素上并且松开鼠标右键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1383">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1384">尽管这看上去要遵循元素树的浮升路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1384">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-1385">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1385">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-1386">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1386">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-1387">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1387">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-1388">如果将标记<xref:System.Windows.UIElement.MouseRightButtonUp>处理，在实质上标注<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1388">If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="6cffe-1389">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1389">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-1390">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1390">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-1391">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1391">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1392">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1392">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1393">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1393">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="6cffe-1394">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1394">Routing strategy</span></span>|<span data-ttu-id="6cffe-1395">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-1395">Direct</span></span>|  
|<span data-ttu-id="6cffe-1396">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1396">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-1397">重写<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1397">Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1398">标识 <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1398">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1399">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1399">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1400">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1400">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1401">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1401">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1402">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1402">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1403">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1403">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1404">在鼠标指针位于此元素上并且松开任意鼠标按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1404">Occurs when any mouse button is released over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1405">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseUp>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1405">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1406">事件处理程序附加到<xref:System.Windows.UIElement.MouseUp>事件附加到基础<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1406">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-1407"><xref:System.Windows.UIElement.MouseUp>任意一个协同通常引发事件<xref:System.Windows.UIElement.MouseLeftButtonUp>或<xref:System.Windows.UIElement.MouseRightButtonUp>，对应于版本的两个标准鼠标按钮之一。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1407">The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="6cffe-1408"><xref:System.Windows.UIElement.MouseLeftButtonUp> 并<xref:System.Windows.UIElement.MouseRightButtonUp>也是路由的事件，但它们是直接路由的事件，并引发相应的特定于按钮的事件时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1408"><xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="6cffe-1409">请参阅备注<xref:System.Windows.UIElement.MouseLeftButtonUp>或<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1409">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1410">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1410">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1411">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1411">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseUpEvent>|  
|<span data-ttu-id="6cffe-1412">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1412">Routing strategy</span></span>|<span data-ttu-id="6cffe-1413">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1413">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1414">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1414">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-1415">相应的隧道事件是<xref:System.Windows.UIElement.PreviewMouseUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1415">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-1416">重写<xref:System.Windows.UIElement.OnMouseUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1416">Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1417">标识 <see cref="E:System.Windows.UIElement.MouseUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1417">Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1418">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1418">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1419">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1419">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1420">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1420">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1421">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1421">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1422">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1422">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1423">在鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1423">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1424">焦点或鼠标捕获优先于在鼠标指针位于其中;因此，如果你收到<xref:System.Windows.UIElement.MouseWheel>从已设定焦点或捕获的元素的事件，鼠标指针可能实际上是另一个元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1424">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="6cffe-1425">此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.MouseWheel>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1425">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-1426">事件处理程序附加到<xref:System.Windows.UIElement.MouseWheel>事件附加到基础<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1426">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-1427">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-1427">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-1428">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-1428">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|<span data-ttu-id="6cffe-1429">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-1429">Routing strategy</span></span>|<span data-ttu-id="6cffe-1430">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-1430">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-1431">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-1431">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="6cffe-1432">相应的隧道事件是<xref:System.Windows.UIElement.PreviewMouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1432">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="6cffe-1433">重写<xref:System.Windows.UIElement.OnMouseWheel%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1433">Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-1434">标识 <see cref="E:System.Windows.UIElement.MouseWheel" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1434">Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1435">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1435">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-1436">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1436">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-1437">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1437">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-1438">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1438">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-1439">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1439">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="6cffe-1440">一个遍历请求，其中包含一个属性，该属性指示以现有 Tab 键顺序遍历的模式或视觉移动的方向。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1440">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span></span></param>
        <summary><span data-ttu-id="6cffe-1441">尝试将焦点从此元素移到其他元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1441">Attempts to move focus from this element to another element.</span></span> <span data-ttu-id="6cffe-1442">移动焦点的方向由指导方向指定，该方向在此元素的可视父级的组织结构中解释。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1442">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-1443">如果执行了请求的遍历，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1443"><see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1444">请务必检查此方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1444">Make sure you check the return value of this method.</span></span> <span data-ttu-id="6cffe-1445">返回值为`false`如果遍历遇到控件的组合所定义的制表位并且遍历请求未请求来包装可能会返回。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1445">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1446">访问键事件的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1446">The event data to the access key event.</span></span> <span data-ttu-id="6cffe-1447">事件数据报告哪个键被调用，并指示控制发送这些事件的 <see cref="T:System.Windows.Input.AccessKeyManager" /> 对象是否也将此访问键调用发送到其他元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1447">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span></span></param>
        <summary><span data-ttu-id="6cffe-1448">在调用对于此元素有意义的访问键时提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1448">Provides class handling for when an access key that is meaningful for this element is invoked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1449">在没有实际 AccessKey 事件<xref:System.Windows.UIElement>类，或其他位置，你可以引发或附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1449">There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="6cffe-1450">相反，事件是通过专用管理器类， <xref:System.Windows.Input.AccessKeyManager>，其中进行后续处理所有输入要搜索适用于整个输入模型的访问密钥。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1450">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-1451">在此方法的默认实现<see cref="T:System.Windows.UIElement" />设置键盘焦点设定到此元素 (通过调用<see cref="M:System.Windows.UIElement.Focus" />)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1451">The default implementation of this method in <see cref="T:System.Windows.UIElement" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement.Focus" />).</span></span> <span data-ttu-id="6cffe-1452">实现应保持此行为，它们是否可获得焦点，因为它是可访问性方案的预期的行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1452">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span></span> <span data-ttu-id="6cffe-1453">请注意，不执行任何操作传递的事件数据的基实现，并且不引发其他事件;它只需设置焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1453">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="6cffe-1454">重新调整其大小的子元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1454">The child element that is being resized.</span></span></param>
        <summary><span data-ttu-id="6cffe-1455">重新调整子元素的大小时支持布局行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1455">Supports layout behavior when a child element is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1456">应用程序代码通常不调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1456">This method is typically not called by your application code.</span></span> <span data-ttu-id="6cffe-1457">它公开使类可以进行进一步的派生的元素检查自己可能是无效的布局的状态。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1457">It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</span></span> <span data-ttu-id="6cffe-1458">类还可以尝试优化，以最大程度减少基于子元素的大小更改布局处理过程的处理时间。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1458">Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</span></span> <span data-ttu-id="6cffe-1459">示例派生实现的元素类<xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A>是<xref:System.Windows.Controls.Grid>控件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1459">An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-1460"><see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />方法已调用的默认实现<see cref="M:System.Windows.UIElement.InvalidateMeasure" />本身上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1460">The <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> method has the default implementation of calling <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> on itself.</span></span> <span data-ttu-id="6cffe-1461">典型的实现方法是： 执行您自己的元素的任何优化支持，，然后通常调用基<see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />从至少其中一个代码分支 （指示每个度量值缓存逻辑的"更新"状态的一个）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1461">A typical implementation would be: do whatever optimization your own element supports, and then typically call base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</span></span>  
  
<span data-ttu-id="6cffe-1462">仅在布局处理子元素自身产生的大小更改时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1462">This method is only called in the layout processing if it was the child itself that originated the size changes.</span></span> <span data-ttu-id="6cffe-1463">否则为如果启动了父元素<see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />传递，布局系统规则，根据父在重新计算布局。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1463">Otherwise, if the parent element initiates the <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> pass, according to the layout system rules, the parent is recalculating layout already.</span></span> <span data-ttu-id="6cffe-1464">布局系统处理顺序子级到父级的布局，因此从子元素布局调用没有返回到父元素调整大小是必需的。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1464">The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-1465">为 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构返回特定于类的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1465">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span></summary>
        <returns><span data-ttu-id="6cffe-1466">特定于类型的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1466">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-1467">此方法的实现通常是调用特定构造函数<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />实现中，并将其返回作为返回值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1467">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span></span>  
  
<span data-ttu-id="6cffe-1468">所有<see cref="T:System.Windows.UIElement" />派生的类应实现此方法以提供其各自的特定<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />实现到[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]基础结构。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1468">All <see cref="T:System.Windows.UIElement" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span> <span data-ttu-id="6cffe-1469">有关实现此模式的详细信息，请参阅<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1469">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1470">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1470">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1471">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragEnter" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1471">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1472">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1472">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1473">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1473">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1474">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1474">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1475">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1475">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1476">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1476">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1477">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1477">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1478">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1478">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1479">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1479">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1480">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1480">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1481">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1481">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1482">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1482">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1483">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragLeave" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1483">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1484">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1484">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1485">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1485">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1486">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1486">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1487">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1487">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1488">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1488">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1489">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1489">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1490">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1490">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1491">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1491">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1492">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1492">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1493">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1493">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1494">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1494">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1495">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragOver" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1495">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1496">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1496">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1497">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1497">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1498">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1498">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1499">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1499">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1500">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1500">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1501">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1501">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1502">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1502">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1503">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1503">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1504">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1504">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1505">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1505">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1506">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1506">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1507">当某个未处理的 <see cref="E:System.Windows.DragDrop.DragEnter" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1507">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1508">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1508">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1509">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1509">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1510">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1510">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1511">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1511">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1512">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1512">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1513">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1513">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1514">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1514">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1515">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1515">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1516">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1516">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1517">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1517">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1518">包含事件数据的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1518">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1519">当某个未处理的 <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1519">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1520">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1520">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1521">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1521">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1522">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1522">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1523">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1523">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1524">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1524">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1525">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1525">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1526">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1526">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1527">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1527">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1528">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1528">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1529">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1529">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1530">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1530">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="6cffe-1531">此事件数据必须包含 <see cref="E:System.Windows.UIElement.GotFocus" /> 事件的标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1531">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="6cffe-1532">使用所提供的事件数据引发 <see cref="E:System.Windows.UIElement.GotFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1532">Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1533">此方法，尽管虚拟的但有一个默认实现，引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1533">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="6cffe-1534">这在 \* 方法实现用于引发事件，并在内部调用此方法的实现来引发事件时<xref:System.Windows.UIElement.IsFocused%2A>属性值发生更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1534">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="6cffe-1535"><xref:System.Windows.UIElement.OnGotFocus%2A>实现不同于其他某些[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 实现，后者仅提供了方便地为该事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1535">The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-1536">除非你有有意或不寻常的需求不引发焦点事件，请确保您的实现将调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1536">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="6cffe-1537">否则为<see cref="E:System.Windows.UIElement.GotFocus" />通常将焦点设置到此元素的典型用户操作中不引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1537">Otherwise, the <see cref="E:System.Windows.UIElement.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="6cffe-1538">如果不想您可获得焦点的元素，您可以通过将阻止元素<see cref="P:System.Windows.UIElement.Focusable" />到<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1538">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1539">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1539">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1540">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1540">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1541">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1541">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1542">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1542">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1543">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1543">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1544">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1544">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1545">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1545">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1546">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1546">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1547">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1547">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1548">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1548">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1549">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1549">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1550">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1550">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1551">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1551">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1552">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1552">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1553">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1553">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1554">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1554">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1555">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1555">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1556">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1556">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1557">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1557">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1558">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1558">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1559">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1559">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1560">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1560">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1561">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1561">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1562">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1562">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1563">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1563">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1564">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1564">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1565">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1565">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1566">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1566">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1567">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1567">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1568">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1568">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1569">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1569">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1570">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1570">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1571">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1571">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1572">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1572">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1573">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1573">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1574">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1574">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1575">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1575">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1576">为在此元素上捕获触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1576">Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1577"><xref:System.Windows.UIElement.OnGotTouchCapture%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1577">The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1578">重写<xref:System.Windows.UIElement.OnGotTouchCapture%2A>中派生的类来处理<xref:System.Windows.UIElement.GotTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1578">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event.</span></span> <span data-ttu-id="6cffe-1579">请务必调用基类的<xref:System.Windows.UIElement.OnGotTouchCapture%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1579">Be sure to call the base class' <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1580">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1580">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1581">当针对此元素引发未处理的 <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> 事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1581">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="6cffe-1582">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1582">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1583">此虚方法引发时的值<xref:System.Windows.UIElement.IsKeyboardFocused%2A>依赖关系属性更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1583">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="6cffe-1584">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1584">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1585">然后<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1585">Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1586">请注意，<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1586">Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="6cffe-1587">因此，您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1587">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="6cffe-1588">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1588">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1589">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1589">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1590">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1590">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1591">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1591">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1592">在此元素即将引发 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 事件前调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1592">Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span></span> <span data-ttu-id="6cffe-1593">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1593">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1594">此虚方法引发时的值<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>依赖关系属性更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1594">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes .</span></span> <span data-ttu-id="6cffe-1595">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1595">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1596">然后<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1596">Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1597">请注意，<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1597">Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="6cffe-1598">因此，您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1598">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="6cffe-1599">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1599">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1600">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1600">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1601">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1601">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1602">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1602">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1603">当针对此元素引发未处理的 <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> 事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1603">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="6cffe-1604">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1604">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1605">此虚方法引发时的值<xref:System.Windows.UIElement.IsMouseCaptured%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1605">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="6cffe-1606">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1606">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1607">然后<xref:System.Windows.UIElement.IsMouseCapturedChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1607">Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1608">请注意，<xref:System.Windows.UIElement.IsMouseCapturedChanged>事件不是路由的事件。因此，您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1608">Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="6cffe-1609">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1609">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1610">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1610">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1611">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1611">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1612">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1612">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1613">当针对此元素引发未处理的 <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> 事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1613">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="6cffe-1614">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1614">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-1615">此虚方法引发时的值<see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1615">This virtual method is raised when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property changes its value.</span></span> <span data-ttu-id="6cffe-1616">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1616">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1617">然后<see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1617">Then the <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1618">请注意，事件不是路由的事件。因此，您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1618">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span></span>  
  
<span data-ttu-id="6cffe-1619">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1619">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1620">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1620">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1621">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1621">You may call base either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1622">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1622">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1623">当针对此元素引发未处理的 <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> 事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1623">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="6cffe-1624">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1624">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1625">此虚方法引发时的值<xref:System.Windows.UIElement.IsMouseDirectlyOver%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1625">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="6cffe-1626">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1626">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1627">然后<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1627">Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1628">请注意，<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1628">Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="6cffe-1629">因此，您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1629">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="6cffe-1630">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1630">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1631">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1631">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1632">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1632">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1633">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1633">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1634">当针对此元素引发未处理的 <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> 事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1634">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="6cffe-1635">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1635">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1636">此虚方法引发时的值<xref:System.Windows.UIElement.IsStylusCaptured%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1636">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="6cffe-1637">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1637">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1638">然后<xref:System.Windows.UIElement.IsStylusCapturedChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1638">Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1639">请注意，该事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1639">Notice that the event is not a routed event.</span></span> <span data-ttu-id="6cffe-1640">因此，您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1640">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="6cffe-1641">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1641">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1642">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1642">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1643">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1643">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1644">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1644">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1645">当针对此元素引发未处理的 <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> 事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1645">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="6cffe-1646">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1646">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1647">此虚方法引发时的值<xref:System.Windows.UIElement.IsStylusCaptureWithin%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1647">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="6cffe-1648">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1648">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1649">然后<xref:System.Windows.UIElement.IsStylusCaptureWithinChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1649">Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1650">请注意，该事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1650">Notice that the event is not a routed event.</span></span> <span data-ttu-id="6cffe-1651">因此，您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1651">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="6cffe-1652">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1652">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1653">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1653">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1654">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1654">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1655">包含事件数据的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1655">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1656">当针对此元素引发未处理的 <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> 事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1656">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="6cffe-1657">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1657">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1658">此虚方法引发时的值<xref:System.Windows.UIElement.IsStylusDirectlyOver%2A>依赖项属性更改其值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1658">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="6cffe-1659">虚拟方法首先引发，并可以处理在必要时的事件数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1659">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="6cffe-1660">然后<xref:System.Windows.UIElement.IsStylusDirectlyOverChanged>与该相同的事件数据实例引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1660">Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="6cffe-1661">请注意，该事件不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1661">Notice that the event is not a routed event.</span></span> <span data-ttu-id="6cffe-1662">因此您不能将其标记为已处理的类处理程序中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1662">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="6cffe-1663">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1663">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1664">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1664">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1665">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1665">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1666">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1666">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1667">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1667">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1668">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1668">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1669">击键通过专用的输入管理器进行处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1669">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="6cffe-1670">其他编程功能，依赖于击键，例如，输入和命令绑定，可能会在键击公开为常规击键之前处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1670">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="6cffe-1671">如果这些输入系统功能将事件标记为已处理，然后<xref:System.Windows.UIElement.OnKeyDown%2A>不调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1671">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1672">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1672">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1673">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1673">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1674">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1674">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1675">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1675">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1676">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1676">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1677">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1677">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1678">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1678">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1679">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1679">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1680">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1680">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1681">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1681">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1682">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1682">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1683">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1683">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1684">击键通过专用的输入管理器进行处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1684">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="6cffe-1685">其他编程功能，依赖于击键，例如，输入和命令绑定，可能会在键击公开为常规击键之前处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1685">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="6cffe-1686">如果这些输入系统功能将事件标记为已处理，然后<xref:System.Windows.UIElement.OnKeyUp%2A>不调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1686">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1687">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1687">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1688">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1688">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1689">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1689">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1690">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1690">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1691">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1691">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1692">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1692">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1693">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1693">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1694">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1694">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1695">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1695">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1696">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1696">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="6cffe-1697">此事件数据必须包含 <see cref="E:System.Windows.UIElement.LostFocus" /> 事件的标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1697">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="6cffe-1698">使用提供的事件数据引发 <see cref="E:System.Windows.UIElement.LostFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1698">Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1699">此方法，尽管虚拟的但有一个默认实现，引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1699">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="6cffe-1700">这在 \* 方法实现用于引发事件，并在内部调用此方法的实现来引发事件时<xref:System.Windows.UIElement.IsFocused%2A>属性值发生更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1700">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="6cffe-1701">此实现不同于其他某些[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 实现，后者仅提供了方便地为该事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1701">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-1702">除非你有有意或不寻常的需求不引发焦点事件，请确保您的实现将调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1702">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="6cffe-1703">否则为<see cref="E:System.Windows.UIElement.LostFocus" />通常将焦点设置到此元素的典型用户操作中不引发事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1703">Otherwise, the <see cref="E:System.Windows.UIElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="6cffe-1704">如果不想您可获得焦点的元素，您可以通过将阻止元素<see cref="P:System.Windows.UIElement.Focusable" />到<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1704">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1705">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1705">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1706">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1706">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1707">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1707">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1708">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1708">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1709">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1709">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1710">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1710">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1711">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1711">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1712">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1712">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1713">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1713">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1714">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1714">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1715">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1715">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1716">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1716">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1717">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1717">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1718">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1718">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1719">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1719">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1720">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1720">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1721">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1721">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1722">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1722">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1723">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1723">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1724">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1724">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1725">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1725">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1726">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1726">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1727">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1727">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1728">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1728">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1729">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1729">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1730">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1730">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1731">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1731">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1732">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1732">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1733">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1733">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1734">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1734">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1735">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1735">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1736">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1736">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1737">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1737">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1738">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1738">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1739">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1739">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1740">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1740">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1741">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1741">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1742">为在此元素失去触摸屏输入捕获时发生的 <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1742">Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1743"><xref:System.Windows.UIElement.OnLostTouchCapture%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1743">The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1744">重写<xref:System.Windows.UIElement.OnLostTouchCapture%2A>中派生的类来处理<xref:System.Windows.UIElement.LostTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1744">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event.</span></span> <span data-ttu-id="6cffe-1745">请务必调用基类的<xref:System.Windows.UIElement.OnLostTouchCapture%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1745">Be sure to call the base class' <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1746">事件的数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1746">The data for the event.</span></span></param>
        <summary><span data-ttu-id="6cffe-1747">在 <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 事件发生时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1747">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1748"><xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1748">The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1749">重写<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>中派生的类来处理<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1749">Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event.</span></span> <span data-ttu-id="6cffe-1750">请务必调用<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>，从而基本类的基类方法接收该事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1750">Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1751">事件的数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1751">The data for the event.</span></span></param>
        <summary><span data-ttu-id="6cffe-1752">在 <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 事件发生时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1752">Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1753"><xref:System.Windows.UIElement.OnManipulationCompleted%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1753">The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1754">重写<xref:System.Windows.UIElement.OnManipulationCompleted%2A>中派生的类来处理<xref:System.Windows.UIElement.ManipulationCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1754">Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event.</span></span> <span data-ttu-id="6cffe-1755">请务必调用<xref:System.Windows.UIElement.OnManipulationCompleted%2A>，从而基本类的基类方法接收该事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1755">Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1756">事件的数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1756">The data for the event.</span></span></param>
        <summary><span data-ttu-id="6cffe-1757">在 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 事件发生时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1757">Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1758"><xref:System.Windows.UIElement.OnManipulationDelta%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1758">The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1759">重写<xref:System.Windows.UIElement.OnManipulationDelta%2A>中派生的类来处理<xref:System.Windows.UIElement.ManipulationDelta>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1759">Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="6cffe-1760">请务必调用<xref:System.Windows.UIElement.OnManipulationDelta%2A>，从而基本类的基类方法接收该事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1760">Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1761">事件的数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1761">The data for the event.</span></span></param>
        <summary><span data-ttu-id="6cffe-1762">在 <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 事件发生时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1762">Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1763"><xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1763">The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1764">重写<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>中派生的类来处理<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1764">Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event.</span></span> <span data-ttu-id="6cffe-1765">请务必调用<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>，从而基本类的基类方法接收该事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1765">Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1766">事件的数据。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1766">The data for the event.</span></span></param>
        <summary><span data-ttu-id="6cffe-1767">在 <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 事件发生时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1767">Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1768"><xref:System.Windows.UIElement.OnManipulationStarted%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1768">The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1769">重写<xref:System.Windows.UIElement.OnManipulationStarted%2A>中派生的类来处理<xref:System.Windows.UIElement.ManipulationStarted>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1769">Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event.</span></span> <span data-ttu-id="6cffe-1770">请务必调用<xref:System.Windows.UIElement.OnManipulationStarted%2A>，从而基本类的基类方法接收该事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1770">Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1771">包含事件数据的 <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1771">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1772">为在首次创建操作处理器时发生的 <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1772">Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1773"><xref:System.Windows.UIElement.OnManipulationStarting%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1773">The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-1774">重写<xref:System.Windows.UIElement.OnManipulationStarting%2A>中派生的类来处理<xref:System.Windows.UIElement.ManipulationStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1774">Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span> <span data-ttu-id="6cffe-1775">请务必调用基类的<xref:System.Windows.UIElement.OnManipulationStarting%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1775">Be sure to call the base class' <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1776">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1776">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-1777">此事件数据报告有关按下鼠标按钮和已处理状态的详细信息。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1777">This event data reports details about the mouse button that was pressed and the handled state.</span></span></param>
        <summary><span data-ttu-id="6cffe-1778">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1778">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1779">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1779">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1780">处理鼠标按钮操作也是通过专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1780">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="6cffe-1781">公开为常规鼠标按钮操作之前，其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，可能会调用处理程序的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1781">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="6cffe-1782">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件处理，如<xref:System.Windows.UIElement.OnMouseDown%2A>不调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1782">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1783">如果使用此类处理程序将事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.MouseLeftButtonDown>和<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1783">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="6cffe-1784">上述任一事件可能会在接收元素上引发时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1784">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="6cffe-1785">如果标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们通过中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1785">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="6cffe-1786">除非您显式使用类处理在处理该事件时，如果不调用为子事件的实例处理<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`才能附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1786">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="6cffe-1787">类处理程序也不会调用与注册了这些类处理程序，除非<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>带签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1787">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="6cffe-1788">通过处理<xref:System.Windows.UIElement.OnMouseDown%2A>，则意味着你类处理负责所有可能的鼠标按钮按下操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1788">By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="6cffe-1789">此行为可能不需要;因此，此虚拟方法用于将事件标记为已处理时要格外小心。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1789">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="6cffe-1790">每个特定于按钮的直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些特定于按钮的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1790">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="6cffe-1791">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1791">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1792">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1792">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1793">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1793">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1794">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1794">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1795">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1795">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1796">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1796">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1797">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1797">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1798">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1798">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1799">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1799">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1800">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1800">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1801">当此元素引发未处理的 <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 附加事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1801">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span></span> <span data-ttu-id="6cffe-1802">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1802">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1803">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1803">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1804">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1804">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1805">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1805">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="6cffe-1806">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1806">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1807">在这种情况下匹配事件是路由的事件，具有直接的路由策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1807">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="6cffe-1808">将事件标记为已处理是仍有助于防止典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1808">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1809">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1809">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1810">当此元素引发未处理的 <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 附加事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1810">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span></span> <span data-ttu-id="6cffe-1811">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1811">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1812">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1812">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1813">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1813">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-1814">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1814">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="6cffe-1815">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1815">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1816">在这种情况下匹配事件是路由的事件，具有直接的路由策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1816">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="6cffe-1817">将事件标记为已处理是仍有助于防止典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1817">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1818">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1818">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-1819">事件数据报告称已按下鼠标左键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1819">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="6cffe-1820">当此元素引发未处理的 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 路由事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1820">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element.</span></span> <span data-ttu-id="6cffe-1821">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1821">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1822"><xref:System.Windows.UIElement.MouseLeftButtonDown>看起来进行浮升路由事件，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1822">The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-1823"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是基础事件是冒泡路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1823"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="6cffe-1824">尽管可以将标记<xref:System.Windows.UIElement.MouseLeftButtonDown>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1824">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-1825">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1825">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1826">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1826">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-1827">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1827">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-1828">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1828">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-1829">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1829">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-1830">或者，可以以更改的事件处理特定的鼠标状态来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1830">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="6cffe-1831">您是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1831">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="6cffe-1832">未能调用基禁用默认为基实现，也应调用该鼠标事件的输入的处理<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1832">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="6cffe-1833">例如，您可以从其中<xref:System.Windows.Controls.Button>并重写<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>在派生类而不会调用基实现; 但是，此重写禁用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1833">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1834">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1834">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-1835">事件数据报告称已松开鼠标左键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1835">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="6cffe-1836">当某个未处理的 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1836">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1837">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1837">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1838"><xref:System.Windows.UIElement.MouseLeftButtonUp>看起来进行浮升路由事件，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1838">The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-1839"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是基础事件是冒泡路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1839"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="6cffe-1840">尽管可以将标记<xref:System.Windows.UIElement.MouseLeftButtonUp>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1840">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-1841">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1841">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1842">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1842">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-1843">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1843">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-1844">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1844">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-1845">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1845">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1846">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1846">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1847">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1847">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1848">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1848">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1849">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1849">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1850">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1850">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1851">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1851">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1852">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1852">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1853">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1853">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1854">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1854">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1855">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1855">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1856">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1856">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1857">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1857">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1858">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1858">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-1859">事件数据报告称已按下鼠标右键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1859">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="6cffe-1860">当某个未处理的 <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1860">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1861">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1861">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1862"><xref:System.Windows.UIElement.MouseRightButtonDown>看起来进行浮升路由事件，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1862">The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-1863"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是基础事件是冒泡路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1863"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="6cffe-1864">尽管可以将标记<xref:System.Windows.UIElement.MouseRightButtonDown>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1864">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-1865">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1865">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1866">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1866">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-1867">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1867">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-1868">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1868">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-1869">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1869">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-1870">或者，可以以更改的事件处理特定的鼠标状态来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1870">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="6cffe-1871">您是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1871">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="6cffe-1872">未能调用基禁用默认为基实现，也应调用该鼠标事件的输入的处理<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1872">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="6cffe-1873">例如，您可以从其中<xref:System.Windows.Controls.Control>并重写<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>但是，而无需调用基实现; 在派生类中此替代禁用上下文菜单上的服务控件，都是一部分的<xref:System.Windows.Controls.Control>默认行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1873">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1874">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1874">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-1875">事件数据报告称已释放鼠标右键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1875">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="6cffe-1876">当某个未处理的 <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1876">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1877">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1877">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1878"><xref:System.Windows.UIElement.MouseRightButtonUp>看起来进行浮升路由事件，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1878">The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-1879"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是基础事件是冒泡路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1879"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="6cffe-1880">尽管可以将标记<xref:System.Windows.UIElement.MouseRightButtonUp>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1880">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-1881">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1881">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1882">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1882">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-1883">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1883">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-1884">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1884">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-1885">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1885">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1886">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1886">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-1887">事件数据将报告已松开了鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1887">The event data reports that the mouse button was released.</span></span></param>
        <summary><span data-ttu-id="6cffe-1888">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1888">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1889">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1889">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1890">处理鼠标按钮操作也是通过专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1890">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="6cffe-1891">公开为常规鼠标按钮操作之前，其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，可能会调用处理程序的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1891">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="6cffe-1892">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件处理，如<xref:System.Windows.UIElement.OnMouseUp%2A>不调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1892">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="6cffe-1893">如果使用此类处理程序将事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.MouseLeftButtonUp>和<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1893">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="6cffe-1894">上述任一事件可能会在接收元素上引发时<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1894">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="6cffe-1895">如果标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们通过中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1895">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="6cffe-1896">除非您显式使用类处理在处理该事件时，如果不调用为子事件的实例处理<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`才能附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1896">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="6cffe-1897">类处理程序也不会调用与注册了这些类处理程序，除非<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>带签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1897">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="6cffe-1898">通过处理<xref:System.Windows.UIElement.OnMouseUp%2A>，则意味着类处理负责操作的所有可能的鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1898">By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="6cffe-1899">此行为可能不需要;因此，此虚拟方法用于将事件标记为已处理时要格外小心。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1899">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="6cffe-1900">每个特定于按钮的直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些特定于按钮的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1900">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="6cffe-1901">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1901">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1902">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1902">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1903">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1903">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1904">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1904">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1905">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1905">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1906">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1906">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1907">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1907">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1908">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1908">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1909">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1909">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1910">包含事件数据的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1910">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1911">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1911">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1912">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1912">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1913">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1913">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1914">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1914">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1915">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1915">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1916">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1916">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1917">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1917">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1918">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1918">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1919">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1919">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1920">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1920">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1921">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1921">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1922">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1922">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1923">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1923">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1924">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1924">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1925">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1925">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1926">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1926">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1927">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1927">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1928">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1928">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1929">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1929">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1930">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1930">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1931">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1931">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1932">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1932">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1933">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1933">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-1934">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1934">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1935">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1935">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1936">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1936">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1937">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1937">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1938">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1938">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1939">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1939">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1940">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1940">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1941">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1941">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1942">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1942">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1943">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1943">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1944">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1944">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1945">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1945">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1946">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1946">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-1947">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1947">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1948">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1948">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1949">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1949">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1950">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1950">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1951">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1951">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1952">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1952">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1953">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1953">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1954">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1954">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1955">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1955">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1956">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1956">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1957">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1957">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1958">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1958">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1959">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1959">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-1960">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1960">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1961">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1961">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1962">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1962">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1963">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1963">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1964">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1964">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1965">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1965">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1966">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1966">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1967">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1967">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1968">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1968">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1969">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1969">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1970">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1970">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1971">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1971">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1972">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1972">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-1973">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1973">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1974">包含事件数据的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1974">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1975">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1975">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1976">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1976">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1977">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1977">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1978">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1978">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1979">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1979">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1980">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1980">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1981">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1981">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1982">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1982">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1983">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1983">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1984">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1984">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1985">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1985">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-1986">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1986">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-1987">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1987">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-1988">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1988">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-1989">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1989">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-1990">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1990">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-1991">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1991">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-1992">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1992">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-1993">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1993">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-1994">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1994">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-1995">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1995">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-1996">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1996">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-1997">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1997">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-1998">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1998">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-1999">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-1999">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2000">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2000">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2001">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2001">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2002">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2002">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2003">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2003">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2004">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2004">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2005">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2005">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2006">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2006">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2007">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2007">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2008">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2008">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2009">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2009">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2010">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2010">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2011">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2011">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2012">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2012">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2013">包含事件数据的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2013">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2014">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2014">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2015">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2015">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2016">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2016">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2017">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2017">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2018">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2018">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2019">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2019">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2020">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2020">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2021">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2021">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2022">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2022">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2023">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2023">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2024">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2024">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2025">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2025">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2026">包含事件数据的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2026">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2027">当某个未处理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2027">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2028">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2028">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2029">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2029">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2030">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2030">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2031">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2031">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2032">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2032">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2033">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2033">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2034">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2034">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2035">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2035">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2036">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2036">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2037">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2037">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2038">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2038">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2039">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2039">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-2040">事件数据报告称已按下一个或多个鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2040">The event data reports that one or more mouse buttons were pressed.</span></span></param>
        <summary><span data-ttu-id="6cffe-2041">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 附加路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2041">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2042">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2042">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2043">处理鼠标按钮操作也是通过专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2043">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="6cffe-2044">公开为常规鼠标按钮操作之前，其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，可能会调用处理程序的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2044">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="6cffe-2045">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件处理，如<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>不调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2045">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="6cffe-2046">如果使用此类处理程序将事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>和<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2046">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="6cffe-2047">上述任一事件可能会在接收元素上引发时<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2047">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="6cffe-2048">如果标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们通过中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2048">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="6cffe-2049">除非您显式使用类处理在处理该事件时，如果不调用为子事件的实例处理<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`才能附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2049">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="6cffe-2050">类处理程序也不会调用与注册了这些类处理程序，除非<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>带签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2050">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="6cffe-2051">通过处理<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>，则意味着你类处理负责所有可能的鼠标按钮按下操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2051">By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="6cffe-2052">此行为可能不需要;因此，此虚拟方法用于将事件标记为已处理时要格外小心。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2052">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="6cffe-2053">每个特定于按钮的直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些特定于按钮的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2053">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="6cffe-2054">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2054">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2055">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2055">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2056">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2056">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2057">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2057">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2058">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2058">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2059">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2059">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2060">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2060">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2061">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2061">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2062">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2062">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2063">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2063">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2064">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2064">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-2065">事件数据报告称已按下鼠标左键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2065">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="6cffe-2066">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2066">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2067">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2067">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2068"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>事件看起来进行隧道路由，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2068">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-2069"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 是的基础事件是隧道路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2069"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="6cffe-2070">尽管可以将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2070">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-2071">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2071">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-2072">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2072">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-2073">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2073">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-2074">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2074">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-2075">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2075">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-2076">或者，可以以更改的事件处理特定的鼠标状态来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2076">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="6cffe-2077">您是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2077">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="6cffe-2078">未能调用基禁用默认为基实现，也应调用该鼠标事件的输入的处理<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2078">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="6cffe-2079">例如，您可以从其中<xref:System.Windows.Controls.Button>并重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>在派生类而不会调用基实现; 但是，此重写禁用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2079">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2080">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2080">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-2081">事件数据报告称已松开鼠标左键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2081">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="6cffe-2082">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2082">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2083">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2083">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2084"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>事件看起来进行隧道路由，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2084">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-2085"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 是的基础事件是隧道路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2085"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="6cffe-2086">尽管可以将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2086">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-2087">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2087">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-2088">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2088">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-2089">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2089">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-2090">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2090">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-2091">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2091">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2092">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2092">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2093">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2093">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2094">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2094">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2095">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2095">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2096">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2096">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2097">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2097">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2098">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2098">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2099">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2099">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2100">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2100">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2101">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2101">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2102">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2102">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2103">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2103">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2104">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2104">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2105">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2105">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-2106">事件数据报告称已按下鼠标右键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2106">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="6cffe-2107">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2107">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2108">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2108">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2109"><xref:System.Windows.UIElement.PreviewMouseRightButtonDown>事件看起来进行隧道路由，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2109">The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-2110"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 是的基础事件是隧道路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2110"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="6cffe-2111">尽管可以将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2111">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-2112">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2112">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-2113">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2113">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-2114">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2114">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-2115">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2115">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-2116">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2116">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-2117">或者，可以以更改的事件处理特定的鼠标状态来重写此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2117">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="6cffe-2118">您是否选择调用基实现取决于你的方案。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2118">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="6cffe-2119">未能调用基禁用默认为基实现，也应调用该鼠标事件的输入的处理<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2119">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="6cffe-2120">例如，您可以从其中<xref:System.Windows.Controls.Control>并重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>但是，而无需调用基实现; 在派生类中此替代禁用上下文菜单上的服务控件，都是一部分的<xref:System.Windows.Controls.Control>默认行为。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2120">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2121">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2121">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-2122">事件数据报告称已释放鼠标右键。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2122">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="6cffe-2123">当某个未处理的 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 路由事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2123">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2124">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2124">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2125"><xref:System.Windows.UIElement.PreviewMouseRightButtonUp>事件看起来进行隧道路由，但实际上是以间接方式。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2125">The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="6cffe-2126"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 是的基础事件是隧道路由，并且每个<xref:System.Windows.UIElement>沿着事件路由使用相同的处理引发的直接路由的事件<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2126"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="6cffe-2127">尽管可以将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>为此元素的已处理的事件，处理的状态不会不保留到其他元素为由事件路由。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2127">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="6cffe-2128">但是，你可能想要将事件标记为已处理以防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2128">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="6cffe-2129">常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement>侦听<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>并将其转换为相应的本地事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2129">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="6cffe-2130">如果你想要覆盖此逻辑，必须创建派生的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2130">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="6cffe-2131">在派生类的静态构造函数，将注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2131">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cffe-2132">不能更改处理行为的鼠标<xref:System.Windows.UIElement>通过重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2132">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2133">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2133">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="6cffe-2134">事件数据将报告已释放了一个或多个鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2134">The event data reports that one or more mouse buttons were released.</span></span></param>
        <summary><span data-ttu-id="6cffe-2135">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2135">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2136">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2136">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2137">处理鼠标按钮操作也是通过专用的输入管理器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2137">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="6cffe-2138">公开为常规鼠标按钮操作之前，其他编程功能，依赖于鼠标按钮操作，例如输入和命令绑定，可能会调用处理程序的操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2138">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="6cffe-2139">如果这些输入系统功能标记<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件处理，如<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>不调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2139">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="6cffe-2140">如果使用此类处理程序将事件标记为已处理，则可能会影响以下事件：<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>和<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2140">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="6cffe-2141">上述任一事件可能会在接收元素上引发时<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2141">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="6cffe-2142">如果标记为已处理的类中处理此事件，则仍会引发子事件;但是，它们通过中的事件数据的处理的状态。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2142">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="6cffe-2143">除非您显式使用类处理在处理该事件时，如果不调用为子事件的实例处理<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>与`handledEventsToo``true`才能附加处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2143">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="6cffe-2144">类处理程序也不会调用与注册了这些类处理程序，除非<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>带签名`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2144">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="6cffe-2145">通过处理<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>，则意味着类处理负责操作的所有可能的鼠标按钮。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2145">By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="6cffe-2146">此行为可能不需要;因此，此虚拟方法用于将事件标记为已处理时要格外小心。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2146">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="6cffe-2147">每个特定于按钮的直接事件也有一个虚拟 On \* 方法;请考虑是否重写这些特定于按钮的类处理程序可能会更合适。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2147">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="6cffe-2148">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2148">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2149">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2149">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2150">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2150">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2151">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2151">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2152">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2152">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2153">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2153">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2154">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2154">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2155">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2155">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2156">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2156">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2157">包含事件数据的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2157">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2158">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2158">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2159">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2159">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2160">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2160">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2161">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2161">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2162">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2162">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2163">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2163">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2164">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2164">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2165">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2165">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2166">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2166">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2167">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2167">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2168">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2168">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2169">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2169">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2170">包含事件数据的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2170">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2171">当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2171">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2172">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2172">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2173">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2173">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2174">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2174">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2175">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2175">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2176">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2176">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2177">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2177">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2178">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2178">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2179">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2179">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2180">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2180">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2181">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2181">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2182">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2182">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2183">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2183">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2184">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2184">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2185">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2185">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2186">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2186">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2187">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2187">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2188">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2188">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2189">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2189">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2190">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2190">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2191">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2191">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2192">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2192">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2193">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2193">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2194">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2194">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2195">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2195">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2196">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2196">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2197">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2197">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2198">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2198">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2199">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2199">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2200">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2200">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2201">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2201">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2202">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2202">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2203">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2203">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2204">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2204">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2205">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2205">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2206">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2206">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2207">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2207">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2208">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2208">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2209">包含事件数据的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2209">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2210">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2210">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2211">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2211">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2212">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2212">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2213">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2213">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2214">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2214">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2215">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2215">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2216">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2216">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2217">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2217">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2218">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2218">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2219">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2219">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2220">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2220">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2221">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2221">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2222">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2222">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2223">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2223">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2224">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2224">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2225">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2225">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2226">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2226">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2227">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2227">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2228">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2228">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2229">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2229">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2230">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2230">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2231">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2231">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2232">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2232">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2233">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2233">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2234">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2234">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2235">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2235">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2236">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2236">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2237">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2237">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2238">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2238">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2239">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2239">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2240">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2240">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2241">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2241">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2242">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2242">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2243">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2243">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2244">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2244">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2245">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2245">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2246">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2246">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2247">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2247">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2248">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2248">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2249">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2249">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2250">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2250">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2251">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2251">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2252">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2252">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2253">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2253">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2254">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2254">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2255">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2255">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2256">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2256">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2257">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2257">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2258">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2258">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2259">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2259">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2260">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2260">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2261">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2261">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2262">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2262">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2263">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2263">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2264">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2264">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2265">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2265">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2266">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2266">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2267">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2267">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2268">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2268">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2269">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2269">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2270">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2270">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2271">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2271">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2272">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2272">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2273">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2273">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2274">包含事件数据的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2274">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2275">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2275">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2276">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2276">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2277">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2277">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2278">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2278">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2279">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2279">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2280">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2280">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2281">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2281">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2282">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2282">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2283">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2283">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2284">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2284">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2285">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2285">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2286">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2286">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2287">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2287">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2288">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2288">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2289">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2289">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2290">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2290">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2291">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2291">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2292">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2292">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2293">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2293">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2294">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2294">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2295">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2295">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2296">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2296">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2297">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2297">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2298">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2298">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2299">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2299">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2300">包含事件数据的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2300">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2301">当某个未处理的 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2301">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2302">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2302">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2303">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2303">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2304">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2304">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2305">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2305">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2306">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2306">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2307">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2307">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2308">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2308">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2309">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2309">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2310">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2310">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2311">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2311">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="6cffe-2312">专用于预览事件的另一个方案是将已处理，以便匹配冒泡类处理程序不会调用其标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2312">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2313">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2313">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2314">为在触摸屏输入按下此元素时发生的 <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2314">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2315"><xref:System.Windows.UIElement.OnPreviewTouchDown%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2315">The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2316">重写<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>中派生的类来处理<xref:System.Windows.UIElement.PreviewTouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2316">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="6cffe-2317">请务必调用基类的<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2317">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2318">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2318">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2319">为在此元素内部移动触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2319">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2320"><xref:System.Windows.UIElement.OnPreviewTouchMove%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2320">The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2321">重写<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>中派生的类来处理<xref:System.Windows.UIElement.PreviewTouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2321">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="6cffe-2322">请务必调用基类的<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2322">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2323">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2323">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2324">为在此元素内部释放触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2324">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2325"><xref:System.Windows.UIElement.OnPreviewTouchUp%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2325">The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2326">重写<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>中派生的类来处理<xref:System.Windows.UIElement.PreviewTouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2326">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="6cffe-2327">请务必调用基类的<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2327">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2328">包含事件数据的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2328">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2329">当某个未处理的 <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2329">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2330">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2330">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2331">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2331">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2332">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2332">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2333">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2333">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2334">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2334">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2335">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2335">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2336">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2336">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2337">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2337">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2338">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2338">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2339">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2339">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2340">包含事件数据的 <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2340">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2341">当某个未处理的 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2341">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2342">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2342">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2343">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2343">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2344">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2344">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2345">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2345">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2346">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2346">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2347">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2347">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2348">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2348">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2349">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2349">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2350">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2350">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2351">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2351">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext"><span data-ttu-id="6cffe-2352">特定元素的绘制指令。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2352">The drawing instructions for a specific element.</span></span> <span data-ttu-id="6cffe-2353">此上下文是为布局系统提供的。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2353">This context is provided to the layout system.</span></span></param>
        <summary><span data-ttu-id="6cffe-2354">在派生类中重写时，会参与由布局系统控制的呈现操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2354">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span></span> <span data-ttu-id="6cffe-2355">调用此方法时，不直接使用此元素的呈现指令，而是将其保留供布局和绘制在以后异步使用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2355">The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2356">此方法中具有默认实现<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2356">This method has no default implementation in the <xref:System.Windows.UIElement> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-2357">下面的代码示例显示了面板派生类的一个可能实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2357">The following code example shows a possible implementation for a panel derived class.</span></span>  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-2358"><see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />方法可以重写以添加更多 （以前没有在逻辑树中定义） 的图形元素到呈现的元素，例如效果或装饰器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2358">The <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</span></span> <span data-ttu-id="6cffe-2359">一个<see cref="T:System.Windows.Media.DrawingContext" />对象作为参数，它提供用于绘制形状、 文本、 图像或视频的方法传递。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2359">A <see cref="T:System.Windows.Media.DrawingContext" /> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="6cffe-2360">打包的参数 (<see cref="T:System.Windows.SizeChangedInfo" />)，其中包括新旧大小，其尺寸实际上发生了改变。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2360">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</span></span></param>
        <summary><span data-ttu-id="6cffe-2361">在派生类中重写时，会参与由布局系统控制的呈现操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2361">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span></span> <span data-ttu-id="6cffe-2362">如果元素的 <see cref="P:System.Windows.UIElement.RenderSize" /> 已因布局更新而更改，则在布局更新之后以及呈现之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2362">This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2363">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2363">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2364">典型的 WPF 框架级元素使用的重写实现从<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2364">A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="6cffe-2365"><xref:System.Windows.FrameworkElement>实现使失效<xref:System.Windows.FrameworkElement.Width%2A>和<xref:System.Windows.FrameworkElement.Height%2A>属性和句柄更新布局的基础知识。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2365">The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout.</span></span> <span data-ttu-id="6cffe-2366">重写<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>在<xref:System.Windows.UIElement>级别意味着元素实现特意不使用 WPF 框架级别的实现，并因此您的元素必须处理的布局逻辑更直接，通常通过编写替换布局系统。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2366">Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2367">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2367">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2368">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2368">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2369">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2369">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2370">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2370">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2371">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2371">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2372">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2372">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2373">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2373">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2374">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2374">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2375">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2375">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2376">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2376">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2377">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2377">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2378">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2378">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2379">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2379">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2380">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2380">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2381">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2381">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2382">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2382">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2383">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2383">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2384">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2384">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2385">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2385">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2386">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2386">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2387">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2387">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2388">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2388">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2389">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2389">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2390">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2390">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2391">包含事件数据的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2391">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2392">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2392">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2393">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2393">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2394">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2394">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2395">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2395">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2396">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2396">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2397">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2397">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2398">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2398">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2399">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2399">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2400">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2400">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2401">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2401">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2402">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2402">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2403">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2403">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2404">当此元素引发未处理的 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 附加事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2404">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span></span> <span data-ttu-id="6cffe-2405">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2405">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2406">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2406">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2407">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2407">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-2408">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2408">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="6cffe-2409">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2409">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2410">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2410">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2411">将事件标记为已处理是仍有助于防止典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2411">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2412">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2412">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2413">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2413">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2414">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2414">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2415">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2415">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2416">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2416">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2417">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2417">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2418">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2418">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2419">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2419">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2420">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2420">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2421">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2421">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2422">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2422">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2423">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2423">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2424">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2424">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2425">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2425">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2426">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2426">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2427">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2427">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2428">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2428">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2429">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2429">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2430">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2430">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2431">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2431">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2432">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2432">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2433">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2433">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2434">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2434">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2435">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2435">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2436">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2436">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2437">当此元素引发未处理的 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 附加事件时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2437">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span></span> <span data-ttu-id="6cffe-2438">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2438">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2439">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2439">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2440">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2440">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="6cffe-2441">您可以调用基之前或之后应用特殊处理，具体取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2441">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="6cffe-2442">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2442">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2443">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2443">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2444">将事件标记为已处理是仍有助于防止典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2444">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2445">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2445">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2446">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2446">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2447">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2447">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2448">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2448">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2449">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2449">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2450">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2450">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2451">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2451">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2452">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2452">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2453">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2453">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2454">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2454">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2455">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2455">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2456">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2456">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2457">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2457">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2458">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2458">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2459">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2459">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2460">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2460">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2461">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2461">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2462">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2462">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2463">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2463">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2464">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2464">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2465">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2465">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2466">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2466">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2467">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2467">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2468">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2468">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2469">包含事件数据的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2469">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2470">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2470">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2471">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2471">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2472">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2472">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2473">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2473">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2474">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2474">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2475">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2475">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2476">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2476">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2477">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2477">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2478">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2478">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2479">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2479">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2480">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2480">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2481">包含事件数据的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2481">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2482">当某个未处理的 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2482">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2483">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2483">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2484">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2484">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2485">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2485">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2486">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2486">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2487">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2487">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2488">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2488">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2489">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2489">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2490">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2490">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2491">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2491">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2492">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2492">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2493">包含事件数据的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2493">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2494">当某个未处理的 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2494">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="6cffe-2495">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2495">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2496">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2496">This method has no default implementation.</span></span> <span data-ttu-id="6cffe-2497">因为中间类继承中的可能会实现此方法，我们建议在实现中调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2497">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="6cffe-2498">此方法的用途是类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 此方法提供了通过建立类处理程序而不是实例处理程序来处理从派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2498">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="6cffe-2499">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2499">In this case the matching event is a routed event.</span></span> <span data-ttu-id="6cffe-2500">On \* 方法的实现模式是不同的路由事件，因为可以由子元素，它不一定是将调用处理程序的元素引发路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2500">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="6cffe-2501">因此，您的实现需要检查的事件数据源属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2501">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="6cffe-2502">它不应尝试再次引发该事件在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2502">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="6cffe-2503">通过重写此方法或通过注册类处理程序替换<xref:System.Windows.EventManager.RegisterClassHandler%2A>，派生类的<xref:System.Windows.UIElement>为由事件路由收到事件时，可以调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2503">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="6cffe-2504">类处理是相应的一种方案是操作事件数据并将路由的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2504">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2505">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2505">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2506">为在此元素内按下触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.TouchDown" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2506">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2507"><xref:System.Windows.UIElement.OnTouchDown%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2507">The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2508">重写<xref:System.Windows.UIElement.OnTouchDown%2A>中派生的类来处理<xref:System.Windows.UIElement.TouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2508">Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event.</span></span> <span data-ttu-id="6cffe-2509">请务必调用基类的<xref:System.Windows.UIElement.OnTouchDown%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2509">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2510">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2510">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2511">为在触摸屏输入从此元素边界外部移动到其内部时发生的 <see cref="E:System.Windows.UIElement.TouchEnter" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2511">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2512"><xref:System.Windows.UIElement.OnTouchEnter%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2512">The <xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2513">重写<xref:System.Windows.UIElement.OnTouchEnter%2A>中派生的类来处理<xref:System.Windows.UIElement.TouchEnter>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2513">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event.</span></span> <span data-ttu-id="6cffe-2514">请务必调用基类的<xref:System.Windows.UIElement.OnTouchEnter%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2514">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2515">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2515">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2516">为在触摸屏输入从此 <see cref="E:System.Windows.UIElement.TouchLeave" /> 边界内部移动到其外部时发生的 <see cref="T:System.Windows.UIElement" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2516">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2517"><xref:System.Windows.UIElement.OnTouchLeave%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2517">The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2518">重写<xref:System.Windows.UIElement.OnTouchLeave%2A>中派生的类来处理<xref:System.Windows.UIElement.TouchLeave>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2518">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event.</span></span> <span data-ttu-id="6cffe-2519">请务必调用基类的<xref:System.Windows.UIElement.OnTouchLeave%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2519">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2520">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2520">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2521">为在此元素内部移动触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.TouchMove" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2521">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2522"><xref:System.Windows.UIElement.OnTouchMove%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2522">The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2523">重写<xref:System.Windows.UIElement.OnTouchMove%2A>中派生的类来处理<xref:System.Windows.UIElement.TouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2523">Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event.</span></span> <span data-ttu-id="6cffe-2524">请务必调用基类的<xref:System.Windows.UIElement.OnTouchMove%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2524">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-2525">包含事件数据的 <see cref="T:System.Windows.Input.TouchEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2525">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="6cffe-2526">为在此元素内部释放触摸屏输入时发生的 <see cref="E:System.Windows.UIElement.TouchUp" /> 路由事件提供类处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2526">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2527"><xref:System.Windows.UIElement.OnTouchUp%2A>方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2527">The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="6cffe-2528">重写<xref:System.Windows.UIElement.OnTouchUp%2A>中派生的类来处理<xref:System.Windows.UIElement.TouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2528">Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event.</span></span> <span data-ttu-id="6cffe-2529">请务必调用基类的<xref:System.Windows.UIElement.OnTouchUp%2A>方法，从而基本类接收事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2529">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="6cffe-2530">先前的父项。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2530">The previous parent.</span></span> <span data-ttu-id="6cffe-2531">如果 <see cref="T:System.Windows.DependencyObject" /> 先前不具有父元素，则此项可以提供为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2531">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span></span></param>
        <summary><span data-ttu-id="6cffe-2532">在此 <see cref="T:System.Windows.UIElement" /> 的父元素报告其基础可视父元素发生更改时，调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2532">Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6cffe-2533">如果重写此方法，均应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2533">If you override this method, always call the base implementation.</span></span> <span data-ttu-id="6cffe-2534">默认的基实现执行某些内部维护的反向继承属性状态。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2534">The default base implementation performs some internal maintenance of reverse-inherited property state.</span></span> <span data-ttu-id="6cffe-2535">无法调用基实现将使此状态无效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2535">Failing to call the base implementation will invalidate this state.</span></span>  
  
<span data-ttu-id="6cffe-2536">此方法重写 <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2536">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="6cffe-2537"><see cref="T:System.Windows.FrameworkElement" /> 并<see cref="T:System.Windows.Window" />也都重写<see cref="T:System.Windows.UIElement" />的实现<see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />，和<see cref="T:System.Windows.Window" />对其进行密封。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2537"><see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement" /> implementation of <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2538">获取或设置当 <see cref="T:System.Windows.UIElement" /> 在 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中呈现时为其整体应用的不透明度因子。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2538">Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="6cffe-2539">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2539">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-2540">不透明度因子。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2540">The opacity factor.</span></span> <span data-ttu-id="6cffe-2541">默认不透明度为 1.0。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2541">Default opacity is 1.0.</span></span> <span data-ttu-id="6cffe-2542">值应介于 0.0 和 1.0 之间。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2542">Expected values are between 0.0 and 1.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2543">1.0 的默认值是通过此依赖属性的初始元数据提供默认<xref:System.Windows.UIElement>类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2543">The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="6cffe-2544">其他派生的类可能可以通过重写其类构造函数中的元数据的更改此默认值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2544">Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</span></span>  
  
 <span data-ttu-id="6cffe-2545">值<xref:System.Windows.UIElement.Opacity%2A>不会应用于实际布局中，除非该元素也将可见 (<xref:System.Windows.UIElement.IsVisible%2A>是`true`)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2545">The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).</span></span>  
  
 <span data-ttu-id="6cffe-2546"><xref:System.Windows.UIElement.Opacity%2A> 上应用了从父元素在元素树中自上而下到子元素，但嵌套的不透明度设置不单个子元素的属性值中所示的可视效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2546"><xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</span></span> <span data-ttu-id="6cffe-2547">例如，如果列表中有 50%(0.5) 不透明度的一个列表项具有自己的不透明度设置为 20%(0.2)，该列表项的净不透明度将呈现，就好像 10%(0.1)，但属性值的列表项的<xref:System.Windows.UIElement.Opacity%2A>属性仍将为 0.2 查询时。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2547">For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.</span></span>  
  
 <span data-ttu-id="6cffe-2548">即使声明或计算的不透明度为 0，元素仍出现在中，输入的事件和命令，并能够获得焦点。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2548">Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</span></span> <span data-ttu-id="6cffe-2549">此方面可能很有用，例如可用于不透明度为零的对象 （如形状） 屏蔽透明元素具有的基础对象。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2549">This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</span></span> <span data-ttu-id="6cffe-2550">然后，不透明度为零的对象可以处理所有输入的事件处理基础范围。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2550">The opacity-zero object can then handle all the input event processing for an underlying area.</span></span> <span data-ttu-id="6cffe-2551">但是，`Background`或`Fill`对象或形状的应设置为一个值，即使它是<xref:System.Windows.Media.Brushes.Transparent%2A>，否则不启用命中测试，并且会接收任何事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2551">However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.</span></span>  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-2552">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2552">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2553">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2553">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityProperty>|  
|<span data-ttu-id="6cffe-2554">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-2554">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-2555">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-2555">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2556">获取或设置一个作为 <see cref="T:System.Windows.Media.Brush" /> 实现的不透明蒙板，该蒙板可应用到此元素所呈现内容的任何 Alpha 通道蒙板。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2556">Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.</span></span>  <span data-ttu-id="6cffe-2557">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2557">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-2558">要用于不透明蒙板的画笔。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2558">The brush to use for opacity masking.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2559">此属性仅使用 alpha 通道值是具有提供的任何<xref:System.Windows.Media.Brush>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2559">This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>.</span></span> <span data-ttu-id="6cffe-2560">其他通道<xref:System.Windows.Media.Brush>的呈现内容 （红色、 绿色还是蓝色） 将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2560">The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.</span></span>  
  
 <span data-ttu-id="6cffe-2561">最典型<xref:System.Windows.Media.Brush>的目的就是<xref:System.Windows.Media.ImageBrush>，可以用于各种照片蒙板虚光照等技术。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2561">The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette.</span></span> <span data-ttu-id="6cffe-2562">但任何定义<xref:System.Windows.Media.Brush>(如<xref:System.Windows.Media.LinearGradientBrush>) 可用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2562">But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.</span></span>  
  
 <span data-ttu-id="6cffe-2563">在中[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]，此属性的值可以使用特定于的每个实现的内联语法<xref:System.Windows.Media.Brush>抽象类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2563">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class.</span></span> <span data-ttu-id="6cffe-2564">有关详细信息，请参阅[使用纯色和渐变概述进行绘制](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2564">For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-2565">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2565">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2566">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2566">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|<span data-ttu-id="6cffe-2567">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-2567">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-2568">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-2568">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-2569">以下标记示例演示<xref:System.Windows.Media.ImageBrush>应用于另一个不透明蒙板<xref:System.Windows.Controls.Image>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2569">The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.</span></span>  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2570">标识 <see cref="P:System.Windows.UIElement.OpacityMask" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2570">Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2571">标识 <see cref="P:System.Windows.UIElement.Opacity" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2571">Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2572">获取一个唯一标识此元素的值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2572">Gets a value that uniquely identifies this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-2573">此元素的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2573">The unique identifier for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2574"><xref:System.Windows.UIElement.PersistId%2A> 唯一地标识每个元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2574"><xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element.</span></span> <span data-ttu-id="6cffe-2575">某个元素范围保持不变<xref:System.Windows.UIElement.PersistId%2A>每次相同[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]加载 （包括二进制表示形式）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2575">An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations).</span></span> <span data-ttu-id="6cffe-2576">此标识符用于内部加载、 分析和序列化要求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2576">This identifier is used for internal loading, parsing and serialization requirements.</span></span> <span data-ttu-id="6cffe-2577">它不是由应用程序代码使用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2577">It is not intended to be used by your application code.</span></span>  
  
 <span data-ttu-id="6cffe-2578">此属性与没有任何关系<xref:System.Object.GetHashCode%2A>对于任何给定的实例的结果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2578">This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="6cffe-2579">请求的焦点遍历的方向。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2579">The direction of the requested focus traversal.</span></span></param>
        <summary><span data-ttu-id="6cffe-2580">当在派生类中重写时，返回将按指定焦点遍历方向接收焦点的元素，而不用实际将焦点移至该元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2580">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-2581">如果实际调用了 <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />，则为接收焦点的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2581">The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2582">此方法在此类中的默认实现不完整，并始终返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2582">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2583">在输入系统报告出现以此元素为拖动目标的基础拖动事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2583">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2584">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDragEnter>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2584">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2585">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDragEnter>事件附加到基础<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2585">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2586">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2586">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2587">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2587">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="6cffe-2588">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2588">Routing strategy</span></span>|<span data-ttu-id="6cffe-2589">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2589">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2590">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2590">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-2591">相应的浮升事件是<xref:System.Windows.UIElement.DragEnter>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2591">The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="6cffe-2592">重写<xref:System.Windows.UIElement.OnPreviewDragEnter%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2592">Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2593">标识 <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2593">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2594">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2594">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2595">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2595">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2596">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2596">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2597">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2597">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2598">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2598">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2599">在输入系统报告出现以此元素为拖动起点的基础拖动事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2599">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2600">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDragLeave>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2600">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2601">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDragLeave>事件附加到基础<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2601">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2602">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2602">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2603">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2603">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="6cffe-2604">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2604">Routing strategy</span></span>|<span data-ttu-id="6cffe-2605">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2605">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2606">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2606">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-2607">相应的浮升事件是<xref:System.Windows.UIElement.DragLeave>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2607">The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="6cffe-2608">重写<xref:System.Windows.UIElement.OnPreviewDragLeave%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2608">Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2609">标识 <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2609">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2610">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2610">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2611">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2611">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2612">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2612">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2613">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2613">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2614">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2614">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2615">在输入系统报告出现以此元素为可能放置目标的基础拖动事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2615">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2616">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDragOver>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2616">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2617">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDragOver>事件附加到基础<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2617">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2618">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2618">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2619">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2619">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|<span data-ttu-id="6cffe-2620">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2620">Routing strategy</span></span>|<span data-ttu-id="6cffe-2621">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2621">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2622">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2622">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-2623">相应的浮升事件是<xref:System.Windows.UIElement.DragOver>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2623">The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="6cffe-2624">重写<xref:System.Windows.UIElement.OnPreviewDragOver%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2624">Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2625">标识 <see cref="E:System.Windows.UIElement.PreviewDragOver" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2625">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2626">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2626">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2627">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2627">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2628">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2628">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2629">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2629">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2630">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2630">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2631">在输入系统报告出现将此元素作为放置目标的基础放置事件时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2631">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2632">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewDrop>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2632">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2633">事件处理程序附加到<xref:System.Windows.UIElement.PreviewDrop>事件附加到基础<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2633">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2634">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2634">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2635">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2635">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|<span data-ttu-id="6cffe-2636">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2636">Routing strategy</span></span>|<span data-ttu-id="6cffe-2637">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2637">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2638">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2638">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="6cffe-2639">相应的浮升事件是<xref:System.Windows.UIElement.Drop>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2639">The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.</span></span>  
  
-   <span data-ttu-id="6cffe-2640">重写<xref:System.Windows.UIElement.OnPreviewDrop%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2640">Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2641">标识 <see cref="E:System.Windows.UIElement.PreviewDrop" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2641">Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2642">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2642">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2643">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2643">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2644">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2644">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2645">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2645">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2646">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2646">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2647">在开始拖放操作时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2647">Occurs when a drag-and-drop operation is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2648"><xref:System.Windows.UIElement.PreviewGiveFeedback>事件允许拖动事件，可以修改鼠标指针的外观，以便为用户可视反馈提供拖放操作期间的源。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2648">The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="6cffe-2649">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewGiveFeedback>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2649">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2650">事件处理程序附加到<xref:System.Windows.UIElement.PreviewGiveFeedback>事件附加到基础<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2650">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2651">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2651">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2652">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2652">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="6cffe-2653">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2653">Routing strategy</span></span>|<span data-ttu-id="6cffe-2654">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2654">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2655">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2655">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="6cffe-2656">相应的浮升事件是<xref:System.Windows.UIElement.GiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2656">The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="6cffe-2657">重写<xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2657">Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2658">标识 <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2658">Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2659">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2659">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2660">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2660">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2661">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2661">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2662">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2662">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2663">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2663">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2664">在此元素聚焦于键盘时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2664">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2665">由于此事件使用隧道路由，因此具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2665">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-2666">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际具有焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2666">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="6cffe-2667">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2667">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2668">事件处理程序附加到<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2668">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2669">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2669">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2670">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2670">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="6cffe-2671">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2671">Routing strategy</span></span>|<span data-ttu-id="6cffe-2672">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2672">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2673">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2673">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="6cffe-2674">相应的浮升事件是<xref:System.Windows.UIElement.GotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2674">The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="6cffe-2675">重写<xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2675">Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2676">标识 <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2676">Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2677">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2677">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2678">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2678">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2679">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2679">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2680">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2680">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2681">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2681">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2682">当焦点在该元素上时按下某个键后发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2682">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2683">密钥处理与其他平台功能，例如命令和文本组合进行交互。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2683">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="6cffe-2684"><xref:System.Windows.UIElement.KeyDown>事件是一个较低级别的文本输入的事件，可能不会像预期某些控件上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2684">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="6cffe-2685">这是文本的因为某些控件具有控件组合或提供更高级版本的类处理输入处理和相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2685">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="6cffe-2686">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewKeyDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2686">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2687">事件处理程序附加到<xref:System.Windows.UIElement.PreviewKeyDown>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2687">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2688">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2688">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2689">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2689">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="6cffe-2690">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2690">Routing strategy</span></span>|<span data-ttu-id="6cffe-2691">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2691">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2692">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2692">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="6cffe-2693">相应的浮升事件是<xref:System.Windows.UIElement.KeyDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2693">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-2694">重写<xref:System.Windows.UIElement.OnPreviewKeyDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2694">Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2695">标识 <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2695">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2696">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2696">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2697">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2697">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2698">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2698">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2699">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2699">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2700">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2700">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2701">当焦点在该元素上时松开某个键后发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2701">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2702">密钥处理与其他平台功能，例如命令和文本组合进行交互。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2702">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="6cffe-2703"><xref:System.Windows.UIElement.KeyUp>事件是一个较低级别的文本输入的事件，可能不会像预期某些控件上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2703">The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="6cffe-2704">这是文本的因为某些控件具有控件组合或提供更高级版本的类处理输入处理和相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2704">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="6cffe-2705">有关详细信息，请检查各个控件的文档。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2705">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="6cffe-2706">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewKeyUp>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2706">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2707">事件处理程序附加到<xref:System.Windows.UIElement.PreviewKeyUp>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2707">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2708">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2708">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2709">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2709">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="6cffe-2710">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2710">Routing strategy</span></span>|<span data-ttu-id="6cffe-2711">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2711">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2712">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2712">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="6cffe-2713">相应的浮升事件是<xref:System.Windows.UIElement.KeyUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2713">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-2714">重写<xref:System.Windows.UIElement.OnPreviewKeyUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2714">Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2715">标识 <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2715">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2716">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2716">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2717">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2717">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2718">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2718">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2719">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2719">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2720">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2720">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2721">在此元素不再聚焦于键盘时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2721">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2722">由于此事件使用隧道路由，因此失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2722">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="6cffe-2723">检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据来确定实际失去焦点的元素中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2723">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="6cffe-2724">此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2724">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2725">事件处理程序附加到<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>事件附加到基础<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2725">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2726">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2726">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2727">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2727">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="6cffe-2728">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2728">Routing strategy</span></span>|<span data-ttu-id="6cffe-2729">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2729">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2730">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2730">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="6cffe-2731">相应的浮升事件是<xref:System.Windows.UIElement.LostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2731">The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="6cffe-2732">重写<xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2732">Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2733">标识 <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2733">Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2734">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2734">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2735">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2735">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2736">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2736">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2737">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2737">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2738">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2738">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2739">在指针位于此元素上并且按下任意鼠标按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2739">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2740">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2740">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2741">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseDown>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2741">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-2742"><xref:System.Windows.UIElement.PreviewMouseDown>任意一个协同通常引发事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>，对应于一个两个标准鼠标按钮按下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2742">The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="6cffe-2743"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 并<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>也是路由的事件，但它们是直接路由的事件，并引发相应的特定于按钮的事件时<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2743"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="6cffe-2744">请参阅备注<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2744">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2745">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2745">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2746">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2746">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="6cffe-2747">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2747">Routing strategy</span></span>|<span data-ttu-id="6cffe-2748">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2748">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2749">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2749">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2750">相应的浮升事件是<xref:System.Windows.UIElement.MouseDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2750">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-2751">重写<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2751">Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2752">标识 <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2752">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2753">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2753">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2754">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2754">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2755">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2755">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2756">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2756">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2757">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2757">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2758">在鼠标指针位于此元素上并且按下鼠标左键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2758">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2759">尽管这看上去要遵循元素树的隧道路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2759">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-2760">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2760">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-2761">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2761">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-2762">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2762">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-2763">如果将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>处理，在实质上标注<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2763">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="6cffe-2764">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2764">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="6cffe-2765">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2765">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-2766">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2766">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-2767">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2767">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2768">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2768">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2769">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2769">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="6cffe-2770">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2770">Routing strategy</span></span>|<span data-ttu-id="6cffe-2771">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-2771">Direct</span></span>|  
|<span data-ttu-id="6cffe-2772">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2772">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2773">重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2773">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2774">标识 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2774">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2775">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2775">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2776">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2776">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2777">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2777">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2778">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2778">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2779">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2779">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2780">在鼠标指针位于此元素上并且松开鼠标左键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2780">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2781">尽管这看上去要遵循元素树的隧道路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2781">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-2782">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2782">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-2783">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2783">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-2784">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2784">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-2785">如果将标记<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>处理，在实质上标注<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2785">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="6cffe-2786">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2786">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-2787">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2787">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-2788">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2788">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2789">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2789">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2790">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2790">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="6cffe-2791">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2791">Routing strategy</span></span>|<span data-ttu-id="6cffe-2792">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-2792">Direct</span></span>|  
|<span data-ttu-id="6cffe-2793">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2793">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2794">重写<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2794">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2795">标识 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2795">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2796">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2796">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2797">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2797">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2798">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2798">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2799">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2799">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2800">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2800">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2801">在鼠标指针位于此元素上并且移动鼠标指针时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2801">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2802">都会发生此事件时鼠标指针第一次进入元素边界，并还在鼠标指针移动时仍剩余元素的边界内。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2802">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="6cffe-2803">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseMove>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2803">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2804">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseMove>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2804">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2805">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2805">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2806">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2806">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="6cffe-2807">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2807">Routing strategy</span></span>|<span data-ttu-id="6cffe-2808">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2808">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2809">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2809">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="6cffe-2810">相应的浮升事件是<xref:System.Windows.UIElement.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2810">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-2811">重写<xref:System.Windows.UIElement.OnPreviewMouseMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2811">Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2812">标识 <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2812">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2813">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2813">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2814">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2814">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2815">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2815">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2816">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2816">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2817">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2817">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2818">在鼠标指针位于此元素上并且按下鼠标右键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2818">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2819">尽管这看上去要遵循元素树的隧道路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2819">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-2820">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2820">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-2821">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2821">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-2822">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2822">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-2823">如果将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>处理，在实质上标注<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2823">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="6cffe-2824">这可能包括类处理程序生成事件，如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2824">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="6cffe-2825">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2825">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-2826">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2826">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-2827">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2827">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2828">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2828">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2829">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2829">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="6cffe-2830">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2830">Routing strategy</span></span>|<span data-ttu-id="6cffe-2831">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-2831">Direct</span></span>|  
|<span data-ttu-id="6cffe-2832">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2832">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2833">重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2833">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2834">标识 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2834">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2835">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2835">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2836">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2836">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2837">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2837">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2838">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2838">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2839">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2839">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2840">在鼠标指针位于此元素上并且松开鼠标右键时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2840">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2841">尽管这看上去要遵循元素树的隧道路由，它实际上是引发并由每个重新沿元素树的直接路由的事件<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2841">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-2842">此事件是一个报告基础的鼠标按钮具体情况的多个相关事件<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，它是由在事件路由的每个元素处理附加的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2842">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="6cffe-2843">此事件的事件数据的基础的事件数据公开<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2843">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="6cffe-2844">如果该事件被标记为已处理事件路由过程，则仍会引发鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将该事件的侦听器。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2844">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="6cffe-2845">如果将标记<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>处理，在实质上标注<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>处理沿路由的所有其他侦听器和所有相关的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2845">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="6cffe-2846">从概念上讲，将此事件 (和其他鼠标事件<xref:System.Windows.UIElement>) 为鼠标"服务"(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2846">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="6cffe-2847">事件添加了方便的不需要检查原始的鼠标事件在事件数据中的鼠标按钮状态 （左-右、 向上向下）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2847">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="6cffe-2848">对于更高级的方案，例如非标准按钮的状态检查，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>而不是这些类上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2848">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2849">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2849">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2850">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2850">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="6cffe-2851">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2851">Routing strategy</span></span>|<span data-ttu-id="6cffe-2852">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-2852">Direct</span></span>|  
|<span data-ttu-id="6cffe-2853">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2853">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2854">重写<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2854">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2855">标识 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2855">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2856">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2856">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2857">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2857">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2858">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2858">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2859">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2859">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2860">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2860">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2861">在鼠标指针位于此元素上并且松开任意鼠标按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2861">Occurs when any mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2862">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseUp>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2862">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2863">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseUp>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2863">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-2864"><xref:System.Windows.UIElement.PreviewMouseUp>任意一个协同通常引发事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>，对应于一个两个标准鼠标按钮按下。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2864">The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="6cffe-2865"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 并<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>也是路由的事件，但它们是直接路由的事件，并引发相应的特定于按钮的事件时<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件到达事件路由中的此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2865"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="6cffe-2866">请参阅备注<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2866">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2867">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2867">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2868">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2868">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="6cffe-2869">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2869">Routing strategy</span></span>|<span data-ttu-id="6cffe-2870">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2870">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2871">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2871">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2872">相应的浮升事件是<xref:System.Windows.UIElement.MouseUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2872">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-2873">重写<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2873">Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2874">标识 <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2874">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2875">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2875">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2876">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2876">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2877">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2877">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2878">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2878">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2879">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2879">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2880">在鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2880">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2881">焦点或鼠标捕获优先于在鼠标指针位于其中;因此，如果您收到此事件的已设定焦点或捕获的元素，将鼠标指针实际上可能是另一个元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2881">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="6cffe-2882">此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewMouseMove>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2882">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2883">事件处理程序附加到<xref:System.Windows.UIElement.PreviewMouseMove>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2883">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2884">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2884">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2885">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2885">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="6cffe-2886">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2886">Routing strategy</span></span>|<span data-ttu-id="6cffe-2887">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2887">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2888">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2888">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="6cffe-2889">相应的浮升事件是<xref:System.Windows.UIElement.MouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2889">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="6cffe-2890">重写<xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2890">Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2891">标识 <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2891">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2892">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2892">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2893">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2893">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2894">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2894">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2895">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2895">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2896">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2896">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2897">在拖放操作期间键盘或鼠标按钮的状态改变时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2897">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2898"><xref:System.Windows.UIElement.PreviewQueryContinueDrag>事件允许拖动源来声明是否应取消拖放操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2898">The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="6cffe-2899">此事件创建一个别名<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewQueryContinueDrag>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2899">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2900">事件处理程序附加到<xref:System.Windows.UIElement.PreviewQueryContinueDrag>事件附加到基础<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2900">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2901">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2901">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2902">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2902">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="6cffe-2903">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2903">Routing strategy</span></span>|<span data-ttu-id="6cffe-2904">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2904">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2905">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2905">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="6cffe-2906">相应的浮升事件是<xref:System.Windows.UIElement.QueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2906">The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="6cffe-2907">重写<xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2907">Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2908">标识 <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2908">Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2909">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2909">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2910">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2910">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2911">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2911">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2912">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2912">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2913">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2913">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2914">在指针位于此元素上并且按下触笔按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2914">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2915">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusButtonDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2915">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2916">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusButtonDown>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2916">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-2917">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2917">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-2918">有关详细信息，请参阅[Windows Vista 中的触摸屏输入支持](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)并[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2918">For more information, see [Touch Input Support in Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2919">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2919">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2920">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2920">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="6cffe-2921">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2921">Routing strategy</span></span>|<span data-ttu-id="6cffe-2922">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2922">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2923">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2923">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2924">相应的浮升事件是<xref:System.Windows.UIElement.StylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2924">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-2925">重写<xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2925">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2926">标识 <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2926">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2927">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2927">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2928">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2928">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2929">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2929">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2930">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2930">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2931">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2931">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2932">在指针位于此元素上并且松开触笔按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2932">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2933">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusButtonUp>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2933">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2934">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusButtonUp>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2934">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-2935">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2935">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-2936">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2936">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2937">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2937">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2938">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2938">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="6cffe-2939">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2939">Routing strategy</span></span>|<span data-ttu-id="6cffe-2940">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2940">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2941">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2941">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-2942">相应的浮升事件是<xref:System.Windows.UIElement.StylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2942">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-2943">重写<xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2943">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2944">标识 <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2944">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2945">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2945">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2946">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2946">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2947">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2947">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2948">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2948">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2949">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2949">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2950">当触笔位于元素上且触及数字化器时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2950">Occurs when the stylus touches the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2951">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2951">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2952">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusDown>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2952">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-2953">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2953">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-2954">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2954">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2955">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2955">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2956">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2956">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="6cffe-2957">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2957">Routing strategy</span></span>|<span data-ttu-id="6cffe-2958">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2958">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2959">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2959">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="6cffe-2960">相应的浮升事件是<xref:System.Windows.UIElement.StylusDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2960">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-2961">重写<xref:System.Windows.UIElement.OnPreviewStylusDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2961">Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2962">标识 <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2962">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2963">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2963">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2964">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2964">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2965">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2965">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2966">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2966">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2967">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2967">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2968">在触笔掠过元素但并未实际接触数字化器时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2968">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2969">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusInAirMove>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2969">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2970">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusInAirMove>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2970">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-2971">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2971">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-2972">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2972">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2973">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2973">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2974">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2974">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="6cffe-2975">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2975">Routing strategy</span></span>|<span data-ttu-id="6cffe-2976">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2976">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2977">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2977">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-2978">相应的浮升事件是<xref:System.Windows.UIElement.StylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2978">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-2979">重写<xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2979">Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2980">标识 <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2980">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2981">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2981">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-2982">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2982">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-2983">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2983">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-2984">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2984">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-2985">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2985">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2986">在触笔位于此元素上并且触笔与数字化器之间的距离近到足以检测到触笔时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2986">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2987">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusInRange>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2987">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-2988">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusInRange>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2988">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-2989">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2989">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-2990">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2990">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-2991">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-2991">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-2992">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-2992">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="6cffe-2993">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-2993">Routing strategy</span></span>|<span data-ttu-id="6cffe-2994">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-2994">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-2995">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-2995">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-2996">相应的浮升事件是<xref:System.Windows.UIElement.StylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2996">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="6cffe-2997">重写<xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2997">Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-2998">标识 <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2998">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-2999">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-2999">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3000">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3000">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3001">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3001">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3002">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3002">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3003">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3003">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3004">在触笔位于元素上并且移动触笔时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3004">Occurs when the stylus moves while over the element.</span></span> <span data-ttu-id="6cffe-3005">数字化器在检测触笔时，触笔必须处于移动状态才会引发此事件，否则将改为引发 <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3005">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3006">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusMove>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3006">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3007">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusMove>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3007">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3008">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3008">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3009">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3009">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3010">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3010">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3011">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3011">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="6cffe-3012">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3012">Routing strategy</span></span>|<span data-ttu-id="6cffe-3013">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3013">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3014">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3014">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3015">相应的浮升事件是<xref:System.Windows.UIElement.StylusMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3015">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-3016">重写<xref:System.Windows.UIElement.OnPreviewStylusMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3016">Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3017">标识 <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3017">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3018">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3018">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3019">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3019">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3020">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3020">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3021">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3021">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3022">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3022">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3023">在触笔与数字化仪之间的距离太远以致无法检测到触笔时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3023">Occurs when the stylus is too far from the digitizer to be detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3024">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusOutOfRange>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3024">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3025">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusOutOfRange>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3025">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3026">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3026">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3027">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3027">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3028">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3028">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3029">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3029">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="6cffe-3030">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3030">Routing strategy</span></span>|<span data-ttu-id="6cffe-3031">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3031">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3032">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3032">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3033">相应的浮升事件是<xref:System.Windows.UIElement.StylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3033">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="6cffe-3034">重写<xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3034">Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3035">标识 <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3035">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3036">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3036">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3037">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3037">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3038">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3038">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3039">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3039">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3040">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3040">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3041">在用户采用某一种触笔笔势时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3041">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3042">有关触笔笔势的信息，请参阅<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3042">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="6cffe-3043">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusSystemGesture>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3043">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3044">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusSystemGesture>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3044">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3045">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3045">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3046">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3046">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3047">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3047">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3048">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3048">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="6cffe-3049">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3049">Routing strategy</span></span>|<span data-ttu-id="6cffe-3050">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3050">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3051">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3051">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="6cffe-3052">相应的浮升事件是<xref:System.Windows.UIElement.StylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3052">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="6cffe-3053">重写<xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3053">Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3054">标识 <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3054">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3055">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3055">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3056">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3056">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3057">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3057">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3058">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3058">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3059">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3059">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3060">当触笔位于此元素上并且用户将触笔抬离数字化器时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3060">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3061">此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewStylusDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3061">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3062">事件处理程序附加到<xref:System.Windows.UIElement.PreviewStylusDown>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3062">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3063">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3063">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3064">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3064">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3065">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3065">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3066">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3066">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="6cffe-3067">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3067">Routing strategy</span></span>|<span data-ttu-id="6cffe-3068">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3068">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3069">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3069">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3070">相应的浮升事件是<xref:System.Windows.UIElement.StylusUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3070">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-3071">重写<xref:System.Windows.UIElement.OnPreviewStylusUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3071">Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3072">标识 <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3072">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3073">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3073">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3074">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3074">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3075">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3075">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3076">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3076">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3077">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3077">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3078">在此元素以设备无关模式获取文本时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3078">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3079"><xref:System.Windows.UIElement.PreviewTextInput>事件允许组件或应用程序以与设备无关的方式侦听文本输入。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3079">The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="6cffe-3080">键盘是主要的方式<xref:System.Windows.UIElement.PreviewTextInput>; 但语音、 手写和其他输入的设备也可以生成<xref:System.Windows.UIElement.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3080">The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="6cffe-3081">由于键组合的默认键盘或输入的法编辑器的多个关键事件可能会引发一个文本输入的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3081">Because of key combinations - either in default keyboards or through input method editors - multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="6cffe-3082">此事件创建一个别名<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.PreviewTextInput>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3082">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3083">事件处理程序附加到<xref:System.Windows.UIElement.PreviewTextInput>事件附加到基础<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3083">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3084">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3084">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3085">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3085">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|<span data-ttu-id="6cffe-3086">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3086">Routing strategy</span></span>|<span data-ttu-id="6cffe-3087">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3087">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3088">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3088">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="6cffe-3089">相应的浮升事件是<xref:System.Windows.UIElement.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3089">The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="6cffe-3090">重写<xref:System.Windows.UIElement.OnPreviewTextInput%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3090">Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3091">标识 <see cref="E:System.Windows.UIElement.PreviewTextInput" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3091">Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3092">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3092">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3093">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3093">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3094">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3094">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3095">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3095">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3096">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3096">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3097">当悬停在此元素上方的手指触摸屏幕时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3097">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3098">默认情况下<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>手指触摸屏幕，并将移动之前不会发生的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3098">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="6cffe-3099">手指在屏幕上按住它而无需移动它会导致按下并保存的行为<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3099">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="6cffe-3100">按下并保持行为等同于鼠标右键单击。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3100">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="6cffe-3101">若要使<xref:System.Windows.UIElement.PreviewTouchDown>并<xref:System.Windows.UIElement.TouchDown>事件发生只要上方的手指触摸屏幕上，设置<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>附加到属性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3101">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3102">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3102">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3103">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3103">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="6cffe-3104">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3104">Routing strategy</span></span>|<span data-ttu-id="6cffe-3105">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3105">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3106">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3106">Delegate</span></span>|<span data-ttu-id="6cffe-3107"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3107"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3108">相应的浮升事件是<xref:System.Windows.UIElement.TouchDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3108">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-3109">重写<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3109">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3110">标识 <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3110">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3111">当悬停在此元素上方的手指在屏幕上移动时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3111">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3112">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3112">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3113">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3113">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="6cffe-3114">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3114">Routing strategy</span></span>|<span data-ttu-id="6cffe-3115">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3115">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3116">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3116">Delegate</span></span>|<span data-ttu-id="6cffe-3117"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3117"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3118">相应的浮升事件是<xref:System.Windows.UIElement.TouchMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3118">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-3119">重写<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3119">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3120">标识 <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3120">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3121">当悬停在此元素上方的手指从屏幕上移开时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3121">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3122">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3122">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3123">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3123">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="6cffe-3124">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3124">Routing strategy</span></span>|<span data-ttu-id="6cffe-3125">隧道</span><span class="sxs-lookup"><span data-stu-id="6cffe-3125">Tunneling</span></span>|  
|<span data-ttu-id="6cffe-3126">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3126">Delegate</span></span>|<span data-ttu-id="6cffe-3127"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3127"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3128">相应的浮升事件是<xref:System.Windows.UIElement.TouchUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3128">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-3129">重写<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3129">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3130">标识 <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3130">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3131">在拖放操作期间键盘或鼠标按钮的状态改变时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3131">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3132"><xref:System.Windows.UIElement.QueryContinueDrag>事件允许拖动源确定是否应取消拖放操作。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3132">The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="6cffe-3133">此事件创建一个别名<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.QueryContinueDrag>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3133">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3134">事件处理程序附加到<xref:System.Windows.UIElement.QueryContinueDrag>事件附加到基础<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3134">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3135">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3135">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3136">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3136">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|<span data-ttu-id="6cffe-3137">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3137">Routing strategy</span></span>|<span data-ttu-id="6cffe-3138">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3138">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3139">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3139">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="6cffe-3140">相应的隧道事件是<xref:System.Windows.UIElement.PreviewQueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3140">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="6cffe-3141">重写<xref:System.Windows.UIElement.OnQueryContinueDrag%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3141">Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3142">标识 <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3142">Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3143">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3143">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3144">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3144">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3145">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3145">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3146">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3146">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3147">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3147">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3148">当请求显示光标时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3148">Occurs when the cursor is requested to display.</span></span> <span data-ttu-id="6cffe-3149">每次鼠标指针移至新位置时都会在一个元素上引发此事件，这意味着光标对象可能需要根据其新位置进行更改。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3149">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3150">此事件创建一个别名<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.QueryCursor>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3150">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3151">事件处理程序附加到<xref:System.Windows.UIElement.QueryCursor>事件附加到基础<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3151">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3152">此事件的名称引用游标不一定是文本光标 （有时称为插入点）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3152">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="6cffe-3153">相反，此上下文中的光标是声明与多个可能的输入相关的设备或 Windows 编程中的概念相关的屏幕图形显示的对象。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3153">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="6cffe-3154">该对象表示由<xref:System.Windows.Input.Cursor>在 WPF 中的类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3154">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="6cffe-3155">WPF 输入的系统，可更改此光标时它表示鼠标指针的屏幕上的位置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3155">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="6cffe-3156">可以使用预定义的值从<xref:System.Windows.Input.Cursors>枚举，也可以声明自定义光标为图像文件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3156">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="6cffe-3157">侦听<xref:System.Windows.UIElement.QueryCursor>事件不是游标管理的有效技术。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3157">Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="6cffe-3158">相反，每个元素应定义自己使用的游标行为<xref:System.Windows.FrameworkContentElement.Cursor%2A>和<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3158">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="6cffe-3159">您应仅依赖于<xref:System.Windows.UIElement.QueryCursor>如果不使用 WPF 框架级别的基本元素，或中的特殊情况下，在每个元素的基础上定义游标的行为不符合你的需求。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3159">You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="6cffe-3160">有关详细信息在响应中实现的游标行为<xref:System.Windows.UIElement.QueryCursor>，请参阅<xref:System.Windows.Input.QueryCursorEventHandler>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3160">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3161">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3161">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3162">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3162">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|<span data-ttu-id="6cffe-3163">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3163">Routing strategy</span></span>|<span data-ttu-id="6cffe-3164">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3164">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3165">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3165">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="6cffe-3166">没有定义相应的隧道事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3166">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="6cffe-3167">重写<xref:System.Windows.UIElement.OnQueryCursor%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3167">Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3168">标识 <see cref="E:System.Windows.UIElement.QueryCursor" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3168">Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3169">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3169">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3170">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3170">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3171">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3171">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3172">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3172">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3173">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3173">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="6cffe-3174">一个 <see cref="T:System.Windows.RoutedEventArgs" />，其中包含事件数据并标识要引发的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3174">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span></span></param>
        <summary><span data-ttu-id="6cffe-3175">引发特定路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3175">Raises a specific routed event.</span></span> <span data-ttu-id="6cffe-3176">在提供的 <see cref="T:System.Windows.RoutedEventArgs" /> 实例内标识将引发的 <see cref="T:System.Windows.RoutedEvent" />（作为该事件数据的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 属性）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3176">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3177">`e`参数的类型为路由的事件的所有数据的公共基类型; 但是，应作为最具体的事件数据类型，是适用于要引发的事件，因为给定的事件数据<xref:System.Windows.RoutedEventArgs>派生的类包含适用于特定事件时将引发此事件的实际的特定数据属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3177">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="6cffe-3178"><xref:System.Windows.RoutedEventArgs> 不只是事件; 的状态属性它还标识要引发的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3178"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="6cffe-3179">此事件引发模式和路由的事件数据均不同于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件和数据类，通常只包含与事件相关的属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3179">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-3180">下面的示例创建事件数据，将事件标识符追加到数据，然后使用事件数据实例来引发自定义的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3180">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-3181">从此元素中释放所有捕获的触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3181">Releases all captured touch devices from this element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-3182">如果此元素具有鼠标捕获，则释放该捕获。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3182">Releases the mouse capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3183">如果此元素不保存捕获，调用此方法无效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3183">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="6cffe-3184">请考虑检查的值<xref:System.Windows.UIElement.IsMouseCaptured%2A>之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3184">Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-3185">下面的示例是与提供的示例并行<xref:System.Windows.UIElement.CaptureMouse%2A>： 它处理以释放鼠标捕获鼠标并重新启用移动鼠标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3185">The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-3186">如果此元素具有触笔设备捕获，则释放该捕获。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3186">Releases the stylus device capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3187">如果此元素不保存捕获，调用此方法无效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3187">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="6cffe-3188">请考虑检查的值<xref:System.Windows.UIElement.IsStylusCaptured%2A>之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3188">Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="6cffe-3189">要释放的设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3189">The device to release.</span></span></param>
        <summary><span data-ttu-id="6cffe-3190">尝试从此元素释放指定触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3190">Attempts to release the specified touch device from this element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-3191">如果释放了触摸设备，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3191"><see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6cffe-3192"><paramref name="touchDevice" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3192"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="6cffe-3193">附加了处理程序的路由事件的标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3193">The identifier of the routed event for which the handler is attached.</span></span></param>
        <param name="handler"><span data-ttu-id="6cffe-3194">要从此元素的事件处理程序集合中删除的特定处理程序实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3194">The specific handler implementation to remove from the event handler collection on this element.</span></span></param>
        <summary><span data-ttu-id="6cffe-3195">从此元素中删除指定的路由事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3195">Removes the specified routed event handler from this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3196">使用此的最常见情形[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]是实现时[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]自定义的路由事件，特别是，当您实现在处理程序的"删除"逻辑与相关联的"包装器"事件[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]级别。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3196">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="6cffe-3197">以下示例中此部分说明了这种情况下的备注。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3197">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="6cffe-3198">如果存在任何与条件相匹配的输入的参数的方法调用注册的处理程序调用此方法起不起作用。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3198">Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="6cffe-3199">如果多个处理程序附加事件移除处理程序存储区中匹配的条件，仅第一个处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3199">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="6cffe-3200">此行为是与一致[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]的行为`-=`运算符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3200">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="6cffe-3201">既不`routedEvent`也不`handler`可能`null`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3201">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="6cffe-3202">在尝试提供上述任意值作为`null`将引发异常。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3202">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="6cffe-3203">此方法将忽略`handledEventsToo`与第一个处理程序时提供的参数信息添加<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>签名，它使已处理事件的处理。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3203">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="6cffe-3204">删除任一类型的处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3204">Either type of handler is removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-3205">下面的示例使用<xref:System.Windows.UIElement.RemoveHandler%2A>作为事件包装器定义的一部分。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3205">The following example uses <xref:System.Windows.UIElement.RemoveHandler%2A> as part of an event wrapper definition.</span></span>  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3206">获取（或设置）此元素的最终呈现大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3206">Gets (or sets) the final render size of this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-3207">此元素的呈现大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3207">The rendered size for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cffe-3208">不要尝试设置此属性，在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]或在代码中，如果使用的 WPF 框架级别的布局系统。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3208">Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system.</span></span> <span data-ttu-id="6cffe-3209">几乎所有典型的应用程序方案将使用此布局系统。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3209">Nearly all typical application scenarios will use this layout system.</span></span> <span data-ttu-id="6cffe-3210">布局系统都不会遵循在中设置的大小<xref:System.Windows.UIElement.RenderSize%2A>直接属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3210">The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly.</span></span> <span data-ttu-id="6cffe-3211"><xref:System.Windows.UIElement.RenderSize%2A>属性声明为可写只是为了支持某些 WPF 核心级桥接有意避开典型布局协议，例如支持的情况下<xref:System.Windows.Documents.Adorner>类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3211">The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.</span></span>  
  
 <span data-ttu-id="6cffe-3212">此属性可用于检查布局系统中的适用呈现大小如替代<xref:System.Windows.UIElement.OnRender%2A>或<xref:System.Windows.UIElement.GetLayoutClip%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3212">This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.</span></span>  
  
 <span data-ttu-id="6cffe-3213">处理更通用的方案<xref:System.Windows.FrameworkElement.SizeChanged>事件和类处理程序重写或<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3213">A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.</span></span>  
  
## Examples  
 <span data-ttu-id="6cffe-3214">下面的示例演示如何使用自定义装饰器<xref:System.Windows.UIElement.RenderSize%2A>值，以便创建并设置其大小的矩形图形定义装饰器，作为的一部分，其<xref:System.Windows.UIElement.OnRender%2A>实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3214">The following example shows how a custom adorner uses the <xref:System.Windows.UIElement.RenderSize%2A> value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A> implementation.</span></span>  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3215">获取或设置影响此元素的呈现位置的转换信息。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3215">Gets or sets transform information that affects the rendering position of this element.</span></span>  <span data-ttu-id="6cffe-3216">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3216">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-3217">描述所需呈现转换的细节。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3217">Describes the specifics of the desired render transform.</span></span> <span data-ttu-id="6cffe-3218">默认值为 <see cref="P:System.Windows.Media.Transform.Identity" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3218">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3219">呈现转换不会重新生成布局大小或呈现大小信息。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3219">A render transform does not regenerate layout size or render size information.</span></span> <span data-ttu-id="6cffe-3220">呈现转换通常用于进行动画处理，或者向元素应用临时效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3220">Render transforms are typically intended for animating or applying a temporary effect to an element.</span></span> <span data-ttu-id="6cffe-3221">例如，元素可以在缩放时已设定焦点或鼠标悬停，或可能会在加载要绘制到的该部分的眼睛抖动[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3221">For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-3222">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3222">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3223">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3223">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|<span data-ttu-id="6cffe-3224">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-3224">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-3225">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-3225">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3226">获取或设置由 <see cref="P:System.Windows.UIElement.RenderTransform" /> 声明的任何可能呈现转换的中心点，相对于元素的边界。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3226">Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.</span></span>  <span data-ttu-id="6cffe-3227">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3227">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-3228">声明呈现转换的值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3228">The value that declares the render transform.</span></span> <span data-ttu-id="6cffe-3229">默认值是一个坐标为 (0,0) 的 <see cref="T:System.Windows.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3229">The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3230"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> 已使用某种程度上使用了非标准的<xref:System.Windows.Point>结构中的值<xref:System.Windows.Point>不表示的坐标系统中的绝对位置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3230"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system.</span></span> <span data-ttu-id="6cffe-3231">相反，介于 0 和 1 之间的值被解释为范围中每对 x，y 轴的当前元素的一个因素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3231">Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</span></span> <span data-ttu-id="6cffe-3232">例如，(0.5，0.5) 将导致呈现转换要在元素上居中或 (1，1) 会将呈现转换在底部右下角的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3232">For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</span></span> <span data-ttu-id="6cffe-3233"><xref:System.Double.NaN> 不是一个可接受的值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3233"><xref:System.Double.NaN> is not an accepted value.</span></span>  
  
 <span data-ttu-id="6cffe-3234">0 和 1 以外的值也接受，并将导致更多的不寻常的转换效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3234">Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</span></span> <span data-ttu-id="6cffe-3235">例如，如果您设置<xref:System.Windows.UIElement.RenderTransformOrigin%2A>(5，5)，并将<xref:System.Windows.Media.RotateTransform>，旋转点将是元素本身边界之外。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3235">For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself.</span></span> <span data-ttu-id="6cffe-3236">转换将旋转您围绕远在右下方的大圆的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3236">The transform will spin your element around in a big circle that originates beyond bottom right.</span></span> <span data-ttu-id="6cffe-3237">原点某个位置可能在其父元素内，并可能位于可能是框架或视图之外。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3237">The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</span></span> <span data-ttu-id="6cffe-3238">负的点值类似，这将超出左上边界。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3238">Negative point values are similar, these will go beyond the top left bounds.</span></span>  
  
 <span data-ttu-id="6cffe-3239">呈现转换不会影响布局，并通常用于执行动画或向元素应用临时效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3239">Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</span></span>  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6cffe-3240">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="6cffe-3240">XAML Attribute Usage</span></span>  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="6cffe-3241">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="6cffe-3241">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6cffe-3242">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6cffe-3242">XAML Values</span></span>  
 <span data-ttu-id="6cffe-3243">*xOrigin*</span><span class="sxs-lookup"><span data-stu-id="6cffe-3243">*xOrigin*</span></span>  
 <span data-ttu-id="6cffe-3244">水平起点的系数。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3244">The horizontal origin factor.</span></span> <span data-ttu-id="6cffe-3245">这通常指定为介于 0 和 1 之间的值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3245">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="6cffe-3246">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3246">See Remarks.</span></span>  
  
 <span data-ttu-id="6cffe-3247">*yOrigin*</span><span class="sxs-lookup"><span data-stu-id="6cffe-3247">*yOrigin*</span></span>  
 <span data-ttu-id="6cffe-3248">垂直起点的系数。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3248">The vertical origin factor.</span></span> <span data-ttu-id="6cffe-3249">这通常指定为介于 0 和 1 之间的值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3249">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="6cffe-3250">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3250">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-3251">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3251">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3252">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3252">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|<span data-ttu-id="6cffe-3253">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-3253">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-3254">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-3254">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-3255">下面的示例代码中的元素构建，适用<xref:System.Windows.UIElement.RenderTransformOrigin%2A>，然后将应用<xref:System.Windows.UIElement.RenderTransform%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3255">The following example builds up elements in code, applies a <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.</span></span>  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3256">标识 <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3256">Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3257">标识 <see cref="P:System.Windows.UIElement.RenderTransform" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3257">Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-3258">返回序列化进程是否应在此类的实例上序列化 <see cref="P:System.Windows.UIElement.CommandBindings" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3258">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="6cffe-3259">如果应当序列化 <see cref="P:System.Windows.UIElement.CommandBindings" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3259"><see langword="true" /> if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3260">这将返回`true`如果<xref:System.Windows.UIElement.CommandBindings%2A>本地设置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3260">This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="6cffe-3261">这`ShouldSerialize`提供方法，因为<xref:System.Windows.UIElement.CommandBindings%2A>属性不具有简单的默认值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3261">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="6cffe-3262">此方法指示属性是否已从其默认值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3262">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="6cffe-3263">如果你要开发一个设计器或开发您自己控件包含通常调用此方法<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3263">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-3264">有关详细信息，请参阅[使用 ShouldSerialize 和重置方法定义默认值](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3264">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-3265">返回序列化进程是否应在此类的实例上序列化 <see cref="P:System.Windows.UIElement.InputBindings" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3265">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="6cffe-3266">如果应当序列化 <see cref="P:System.Windows.UIElement.InputBindings" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3266"><see langword="true" /> if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3267">这将返回`true`如果<xref:System.Windows.UIElement.InputBindings%2A>本地设置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3267">This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="6cffe-3268">这`ShouldSerialize`提供方法，因为<xref:System.Windows.UIElement.InputBindings%2A>属性不具有简单的默认值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3268">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="6cffe-3269">此方法指示属性是否已从其默认值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3269">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="6cffe-3270">如果你要开发一个设计器或开发您自己控件包含通常调用此方法<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3270">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="6cffe-3271">有关详细信息，请参阅[使用 ShouldSerialize 和重置方法定义默认值](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3271">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3272">获取或设置一个值，该值确定在呈现过程中，此元素的呈现是否应使用特定于设备的像素设置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3272">Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</span></span>  <span data-ttu-id="6cffe-3273">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3273">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-3274">如果元素应按照设备像素呈现，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3274"><see langword="true" /> if the element should render in accordance to device pixels; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cffe-3275">在 <see cref="T:System.Windows.UIElement" /> 上声明的默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3275">The default as declared on <see cref="T:System.Windows.UIElement" /> is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3276">可以将此属性设置为`true`上您的根元素以启用像素对齐渲染整个 UI。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3276">You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI.</span></span> <span data-ttu-id="6cffe-3277">对于运行在大于 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]，像素对齐渲染可以尽量减少在单实线附近出现的抗锯齿视觉效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3277">For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</span></span>  
  
 <span data-ttu-id="6cffe-3278">当由继承<xref:System.Windows.FrameworkElement>或任何可能派生类中，<xref:System.Windows.FrameworkElement>重写要设置此依赖项属性的元数据<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>元数据属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3278">When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`.</span></span> <span data-ttu-id="6cffe-3279">这实现了，只有最外层元素子树中的需要指定<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>作为`true`，然后将报告所有子元素的子树<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>作为`true`并且将具有<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>视觉效果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3279">What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.</span></span>  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-3280">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3280">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3281">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3281">Identifier field</span></span>|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|<span data-ttu-id="6cffe-3282">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-3282">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-3283">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-3283">None</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/aa970908(v=vs.90)"><span data-ttu-id="6cffe-3284">像素对齐在 WPF 应用程序中</span><span class="sxs-lookup"><span data-stu-id="6cffe-3284">Pixel Snapping in WPF Applications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3285">标识 <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3285">Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3286">在指针位于此元素上并且按下触笔按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3286">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3287">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusButtonDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3287">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3288">事件处理程序附加到<xref:System.Windows.UIElement.StylusButtonDown>事件附加到基础<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3288">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3289">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3289">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3290">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3290">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3291">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3291">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3292">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3292">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|<span data-ttu-id="6cffe-3293">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3293">Routing strategy</span></span>|<span data-ttu-id="6cffe-3294">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3294">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3295">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3295">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-3296">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3296">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-3297">重写<xref:System.Windows.UIElement.OnStylusButtonDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3297">Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3298">标识 <see cref="E:System.Windows.UIElement.StylusButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3298">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3299">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3299">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3300">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3300">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3301">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3301">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3302">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3302">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3303">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3303">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3304">在指针位于此元素上并且松开触笔按钮时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3304">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3305">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusButtonUp>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3305">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3306">事件处理程序附加到<xref:System.Windows.UIElement.StylusButtonUp>事件附加到基础<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3306">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3307">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3307">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3308">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3308">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3309">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3309">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3310">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3310">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|<span data-ttu-id="6cffe-3311">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3311">Routing strategy</span></span>|<span data-ttu-id="6cffe-3312">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3312">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3313">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3313">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="6cffe-3314">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3314">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-3315">重写<xref:System.Windows.UIElement.OnStylusButtonUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3315">Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3316">标识 <see cref="E:System.Windows.UIElement.StylusButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3316">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3317">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3317">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3318">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3318">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3319">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3319">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3320">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3320">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3321">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3321">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3322">在触笔位于此元素上且同时触及数字化器时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3322">Occurs when the stylus touches the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3323">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusDown>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3323">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3324">事件处理程序附加到<xref:System.Windows.UIElement.StylusDown>事件附加到基础<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3324">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3325">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3325">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3326">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3326">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3327">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3327">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3328">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3328">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusDownEvent>|  
|<span data-ttu-id="6cffe-3329">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3329">Routing strategy</span></span>|<span data-ttu-id="6cffe-3330">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3330">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3331">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3331">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="6cffe-3332">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3332">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-3333">重写<xref:System.Windows.UIElement.OnStylusDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3333">Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3334">标识 <see cref="E:System.Windows.UIElement.StylusDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3334">Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3335">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3335">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3336">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3336">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3337">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3337">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3338">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3338">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3339">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3339">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3340">在触笔进入此元素的边界时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3340">Occurs when the stylus enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3341"><xref:System.Windows.UIElement.StylusEnter> 是，它使用直接事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3341"><xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="6cffe-3342">直接路由的事件不会引发在路由过程;相反，它们被处理的同一元素中引发位置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3342">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="6cffe-3343">但是，它们启用了路由的事件的行为，如在样式中的事件触发的其他方面。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3343">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="6cffe-3344">尽管<xref:System.Windows.UIElement.StylusEnter>跟踪当触笔进入的边界的元素，此事件能够更确切地报告<xref:System.Windows.UIElement.IsStylusOver%2A>属性值已从`false`到`true`此元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3344">Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="6cffe-3345">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusEnter>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3345">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3346">事件处理程序附加到<xref:System.Windows.UIElement.StylusEnter>事件附加到基础<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3346">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3347">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3347">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3348">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3348">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3349">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3349">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3350">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3350">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|<span data-ttu-id="6cffe-3351">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3351">Routing strategy</span></span>|<span data-ttu-id="6cffe-3352">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-3352">Direct</span></span>|  
|<span data-ttu-id="6cffe-3353">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3353">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3354">重写<xref:System.Windows.UIElement.OnStylusEnter%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3354">Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3355">标识 <see cref="E:System.Windows.UIElement.StylusEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3355">Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3356">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3356">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3357">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3357">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3358">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3358">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3359">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3359">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3360">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3360">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3361">在触笔掠过元素但并未实际接触数字化器时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3361">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3362">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusInAirMove>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3362">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3363">事件处理程序附加到<xref:System.Windows.UIElement.StylusInAirMove>事件附加到基础<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3363">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3364">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3364">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3365">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3365">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3366">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3366">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3367">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3367">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="6cffe-3368">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3368">Routing strategy</span></span>|<span data-ttu-id="6cffe-3369">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3369">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3370">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3370">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3371">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3371">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-3372">重写<xref:System.Windows.UIElement.OnStylusInAirMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3372">Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3373">标识 <see cref="E:System.Windows.UIElement.StylusInAirMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3373">Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3374">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3374">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3375">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3375">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3376">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3376">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3377">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3377">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3378">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3378">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3379">在触笔位于此元素上并且触笔与数字化器之间的距离近到足以检测到触笔时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3379">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3380">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusInRange>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3380">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3381">事件处理程序附加到<xref:System.Windows.UIElement.StylusInRange>事件附加到基础<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3381">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3382">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3382">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3383">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3383">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3384">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3384">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3385">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3385">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|<span data-ttu-id="6cffe-3386">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3386">Routing strategy</span></span>|<span data-ttu-id="6cffe-3387">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3387">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3388">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3388">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3389">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3389">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="6cffe-3390">重写<xref:System.Windows.UIElement.OnStylusInRange%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3390">Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3391">标识 <see cref="E:System.Windows.UIElement.StylusInRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3391">Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3392">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3392">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3393">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3393">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3394">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3394">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3395">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3395">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3396">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3396">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3397">在触笔离开元素的边界时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3397">Occurs when the stylus leaves the bounds of the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3398"><xref:System.Windows.UIElement.StylusLeave> 是，它使用直接事件处理路由策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3398"><xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="6cffe-3399">直接路由的事件不会引发在路由过程;相反，它们被处理的同一元素中引发位置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3399">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="6cffe-3400">但是，它们启用了路由的事件的行为，如在样式中的事件触发的其他方面。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3400">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="6cffe-3401">尽管<xref:System.Windows.UIElement.StylusLeave>跟踪当触笔离开元素，此事件的边界的详细信息按原义报告<xref:System.Windows.UIElement.IsStylusOver%2A>属性值已从`true`到`false`此元素上。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3401">Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="6cffe-3402">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusLeave>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3402">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3403">事件处理程序附加到<xref:System.Windows.UIElement.StylusLeave>事件附加到基础<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3403">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3404">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3404">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3405">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3405">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3406">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3406">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3407">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3407">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|<span data-ttu-id="6cffe-3408">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3408">Routing strategy</span></span>|<span data-ttu-id="6cffe-3409">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-3409">Direct</span></span>|  
|<span data-ttu-id="6cffe-3410">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3410">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3411">重写<xref:System.Windows.UIElement.OnStylusLeave%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3411">Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3412">标识 <see cref="E:System.Windows.UIElement.StylusLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3412">Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3413">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3413">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3414">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3414">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3415">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3415">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3416">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3416">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3417">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3417">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3418">在触笔移到此元素上时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3418">Occurs when the stylus moves over this element.</span></span> <span data-ttu-id="6cffe-3419">触笔必须在位于数字化器上时移动，才会引发此事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3419">The stylus must move while on the digitizer to raise this event.</span></span> <span data-ttu-id="6cffe-3420">否则将改为引发 <see cref="E:System.Windows.UIElement.StylusInAirMove" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3420">Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3421">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusMove>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3421">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3422">事件处理程序附加到<xref:System.Windows.UIElement.StylusMove>事件附加到基础<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3422">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3423">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3423">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3424">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3424">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3425">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3425">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3426">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3426">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|<span data-ttu-id="6cffe-3427">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3427">Routing strategy</span></span>|<span data-ttu-id="6cffe-3428">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3428">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3429">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3429">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3430">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3430">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-3431">重写<xref:System.Windows.UIElement.OnStylusMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3431">Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3432">标识 <see cref="E:System.Windows.UIElement.StylusMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3432">Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3433">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3433">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3434">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3434">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3435">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3435">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3436">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3436">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3437">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3437">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3438">在触笔位于此元素上并且触笔与数字化器之间的距离太远以致无法检测到触笔时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3438">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3439">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusOutOfRange>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3439">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3440">事件处理程序附加到<xref:System.Windows.UIElement.StylusOutOfRange>事件附加到基础<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3440">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3441">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3441">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3442">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3442">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3443">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3443">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3444">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3444">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="6cffe-3445">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3445">Routing strategy</span></span>|<span data-ttu-id="6cffe-3446">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3446">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3447">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3447">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3448">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3448">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="6cffe-3449">重写<xref:System.Windows.UIElement.OnStylusOutOfRange%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3449">Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3450">标识 <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3450">Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3451">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3451">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3452">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3452">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3453">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3453">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3454">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3454">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3455">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3455">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3456">获取与此元素关联的所有触笔插件（自定义）对象的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3456">Gets a collection of all stylus plug-in (customization) objects associated with this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-3457">触笔插件的集合，作为专用集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3457">The collection of stylus plug-ins, as a specialized collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3458">使用此集合来填充控件的一个示例是<xref:System.Windows.Controls.InkCanvas>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3458">An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>.</span></span> <span data-ttu-id="6cffe-3459"><xref:System.Windows.Controls.InkCanvas> 将添加<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>作为收集项，这允许<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>与触笔输入进行交互并生成响应触笔驱动事件中的唯一呈现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3459"><xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.</span></span>  
  
 <span data-ttu-id="6cffe-3460">创建自定义插件的信息可以接收和解释触笔输入，请参阅[截获触笔输入](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3460">For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-3461">下面的示例创建<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>实例，并将其添加到<xref:System.Windows.UIElement.StylusPlugIns%2A>自定义墨迹处理控件的集合。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3461">The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the <xref:System.Windows.UIElement.StylusPlugIns%2A> collection for a custom ink handling control.</span></span>  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3462">在用户采用某一种触笔笔势时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3462">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3463">有关触笔笔势的详细信息，请参阅<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3463">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="6cffe-3464">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusSystemGesture>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3464">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3465">事件处理程序附加到<xref:System.Windows.UIElement.StylusSystemGesture>事件附加到基础<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3465">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3466">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3466">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3467">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3467">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3468">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3468">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3469">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3469">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="6cffe-3470">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3470">Routing strategy</span></span>|<span data-ttu-id="6cffe-3471">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3471">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3472">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3472">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="6cffe-3473">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3473">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="6cffe-3474">重写<xref:System.Windows.UIElement.OnStylusSystemGesture%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3474">Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3475">标识 <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3475">Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3476">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3476">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3477">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3477">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3478">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3478">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3479">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3479">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3480">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3480">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3481">当触笔位于此元素上并且用户将触笔抬离数字化器时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3481">Occurs when the user raises the stylus off the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3482">此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.StylusUp>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3482">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3483">事件处理程序附加到<xref:System.Windows.UIElement.StylusUp>事件附加到基础<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3483">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="6cffe-3484">触摸、 鼠标和触笔输入中的特定关系存在。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3484">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="6cffe-3485">有关详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3485">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3486">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3486">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3487">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3487">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusUpEvent>|  
|<span data-ttu-id="6cffe-3488">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3488">Routing strategy</span></span>|<span data-ttu-id="6cffe-3489">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3489">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3490">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3490">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="6cffe-3491">相应的隧道事件是<xref:System.Windows.UIElement.PreviewStylusUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3491">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-3492">重写<xref:System.Windows.UIElement.OnStylusUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3492">Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3493">标识 <see cref="E:System.Windows.UIElement.StylusUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3493">Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3494">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3494">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3495">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3495">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3496">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3496">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3497">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3497">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3498">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3498">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3499">在此元素以设备无关模式获取文本时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3499">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cffe-3500">此事件可能已被标记处理由复合控件的内部实现。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3500">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="6cffe-3501">请参阅下面的备注。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3501">See Remark below.</span></span>  
  
 <span data-ttu-id="6cffe-3502"><xref:System.Windows.UIElement.TextInput>事件可能已被处理的复合控件的内部实现标记。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3502">The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="6cffe-3503">例如，<xref:System.Windows.Controls.TextBox>是一个复合控件，其中<xref:System.Windows.UIElement.TextInput>事件已标记为已处理; 其组成中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3503">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="6cffe-3504">这么做是因为该控件需要解释某些类型的输入，如箭头键，为具有对该控件的特殊含义。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3504">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="6cffe-3505">如果使用<xref:System.Windows.UIElement.PreviewTextInput>作为附加文本输入的处理程序的位置的事件，可能会收到更好的结果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3505">If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="6cffe-3506">该技术可以应对大多数情况下，其中控件组合已经此事件标记为已处理并且会阻止您的处理程序接收事件路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3506">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="6cffe-3507"><xref:System.Windows.UIElement.TextInput>事件允许组件或应用程序以与设备无关的方式侦听文本输入。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3507">The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="6cffe-3508">键盘是主要的方式<xref:System.Windows.UIElement.TextInput>，但语音、 手写和其他输入的设备也可以引发<xref:System.Windows.UIElement.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3508">The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
 <span data-ttu-id="6cffe-3509">由于键组合的默认键盘或输入的法编辑器的多个关键事件可能会引发只是一个文本输入的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3509">Because of key combinations - either in default keyboards or through input method editors - multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="6cffe-3510">此事件创建一个别名<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件对于此类，以便<xref:System.Windows.UIElement.TextInput>属于类的成员列出时<xref:System.Windows.UIElement>作为基元素继承。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3510">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="6cffe-3511">事件处理程序附加到<xref:System.Windows.UIElement.TextInput>事件附加到基础<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件，并接收相同的事件数据实例。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3511">Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3512">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3512">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3513">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3513">Identifier field</span></span>|<xref:System.Windows.UIElement.TextInputEvent>|  
|<span data-ttu-id="6cffe-3514">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3514">Routing strategy</span></span>|<span data-ttu-id="6cffe-3515">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3515">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3516">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3516">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="6cffe-3517">相应的隧道事件是<xref:System.Windows.UIElement.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3517">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="6cffe-3518">重写<xref:System.Windows.UIElement.OnTextInput%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3518">Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3519">标识 <see cref="E:System.Windows.UIElement.TextInput" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3519">Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3520">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3520">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="6cffe-3521">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3521">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="6cffe-3522">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3522">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="6cffe-3523">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3523">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="6cffe-3524">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3524">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3525">当悬停在此元素上方的手指触摸屏幕时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3525">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3526">默认情况下<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>手指触摸屏幕，并将移动之前不会发生的事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3526">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="6cffe-3527">手指在屏幕上按住它而无需移动它会导致按下并保存的行为<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3527">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="6cffe-3528">按下并保持行为等同于鼠标右键单击。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3528">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="6cffe-3529">若要使<xref:System.Windows.UIElement.PreviewTouchDown>并<xref:System.Windows.UIElement.TouchDown>事件发生只要上方的手指触摸屏幕上，设置<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>附加到属性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3529">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3530">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3530">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3531">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3531">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchDownEvent>|  
|<span data-ttu-id="6cffe-3532">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3532">Routing strategy</span></span>|<span data-ttu-id="6cffe-3533">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3533">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3534">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3534">Delegate</span></span>|<span data-ttu-id="6cffe-3535"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3535"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3536">相应的隧道事件是<xref:System.Windows.UIElement.PreviewTouchDown>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3536">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="6cffe-3537">重写<xref:System.Windows.UIElement.OnTouchDown%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3537">Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3538">标识 <see cref="E:System.Windows.UIElement.TouchDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3538">Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3539">在触摸屏输入从此元素边界外部移动到其内部时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3539">Occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3540">始终引发此事件，指示此元素上捕获触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3540">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3541">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3541">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3542">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3542">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|<span data-ttu-id="6cffe-3543">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3543">Routing strategy</span></span>|<span data-ttu-id="6cffe-3544">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-3544">Direct</span></span>|  
|<span data-ttu-id="6cffe-3545">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3545">Delegate</span></span>|<span data-ttu-id="6cffe-3546"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3546"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3547">重写<xref:System.Windows.UIElement.OnTouchEnter%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3547">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3548">标识 <see cref="E:System.Windows.UIElement.TouchEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3548">Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3549">获取在此元素上捕获的所有触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3549">Gets all touch devices that are captured to this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-3550">在此元素上捕获的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3550">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3551">获取在此元素或其可视化树中的任何子元素上捕获的所有触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3551">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="6cffe-3552">在此元素或其可视化树中的任何子元素上捕获的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3552">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3553">获取此元素上的所有触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3553">Gets all touch devices that are over this element.</span></span></summary>
        <value><span data-ttu-id="6cffe-3554">位于此元素上的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3554">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3555">获取在此元素或其可视化树中的任何子元素上的所有触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3555">Gets all touch devices that are over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="6cffe-3556">在此元素或其可视化树中的任何子元素上的 <see cref="T:System.Windows.Input.TouchDevice" /> 对象的枚举。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3556">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3557">在触摸屏输入从此元素边界内部移动到其外部时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3557">Occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3558">始终引发此事件，指示此元素上捕获触摸设备。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3558">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3559">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3559">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3560">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3560">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|<span data-ttu-id="6cffe-3561">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3561">Routing strategy</span></span>|<span data-ttu-id="6cffe-3562">直接</span><span class="sxs-lookup"><span data-stu-id="6cffe-3562">Direct</span></span>|  
|<span data-ttu-id="6cffe-3563">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3563">Delegate</span></span>|<span data-ttu-id="6cffe-3564"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3564"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3565">重写<xref:System.Windows.UIElement.OnTouchLeave%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3565">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3566">标识 <see cref="E:System.Windows.UIElement.TouchLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3566">Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3567">当悬停在此元素上方的手指在屏幕上移动时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3567">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3568">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3568">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3569">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3569">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|<span data-ttu-id="6cffe-3570">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3570">Routing strategy</span></span>|<span data-ttu-id="6cffe-3571">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3571">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3572">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3572">Delegate</span></span>|<span data-ttu-id="6cffe-3573"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3573"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3574">相应的隧道事件是<xref:System.Windows.UIElement.PreviewTouchMove>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3574">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="6cffe-3575">重写<xref:System.Windows.UIElement.OnTouchMove%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3575">Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3576">标识 <see cref="E:System.Windows.UIElement.TouchMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3576">Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3577">当悬停在此元素上方的手指从屏幕上移开时发生。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3577">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="6cffe-3578">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3578">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3579">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3579">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchUpEvent>|  
|<span data-ttu-id="6cffe-3580">路由策略</span><span class="sxs-lookup"><span data-stu-id="6cffe-3580">Routing strategy</span></span>|<span data-ttu-id="6cffe-3581">浮升</span><span class="sxs-lookup"><span data-stu-id="6cffe-3581">Bubbling</span></span>|  
|<span data-ttu-id="6cffe-3582">委托</span><span class="sxs-lookup"><span data-stu-id="6cffe-3582">Delegate</span></span>|<span data-ttu-id="6cffe-3583"><xref:System.EventHandler%601>类型<xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3583"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="6cffe-3584">相应的隧道事件是<xref:System.Windows.UIElement.PreviewTouchUp>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3584">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="6cffe-3585">重写<xref:System.Windows.UIElement.OnTouchUp%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3585">Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3586">标识 <see cref="E:System.Windows.UIElement.TouchUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3586">Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="6cffe-3587">相对于此元素的点值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3587">The point value, as relative to this element.</span></span></param>
        <param name="relativeTo"><span data-ttu-id="6cffe-3588">给定点转换后的元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3588">The element to translate the given point into.</span></span></param>
        <summary><span data-ttu-id="6cffe-3589">将相对于此元素的点转换为相对于指定元素的坐标。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3589">Translates a point relative to this element to coordinates that are relative to the specified element.</span></span></summary>
        <returns><span data-ttu-id="6cffe-3590">相对于目标元素而不是此源元素的点值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3590">A point value, now relative to the target element rather than this source element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3591">传递`null`为`relativeTo`允许的并指示坐标应相对于此元素所属的逻辑树中根元素。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3591">Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</span></span>  
  
 <span data-ttu-id="6cffe-3592">此方法用于转换命中测试点值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3592">This method is used for translating hit test point values.</span></span> <span data-ttu-id="6cffe-3593">如果您创作的控件，并且需要处理较低级别的输入，则调用此方法是主要相关。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3593">Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</span></span> <span data-ttu-id="6cffe-3594">如果使用现有的控件，一般可以假定已完成的控件将报告正确翻译后的命中的测试结果。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3594">If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3595">获取或设置此元素的唯一标识符（用于本地化）。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3595">Gets or sets the unique identifier (for localization) for this element.</span></span> <span data-ttu-id="6cffe-3596">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3596">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-3597">一个字符串，该字符串是此元素的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3597">A string that is the unique identifier for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3598">设计器用于获取`x:Uid`值 (请参阅[WPF 全球化和本地化概述](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)有关详细信息)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3598">Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-3599">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3599">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3600">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3600">Identifier field</span></span>|<xref:System.Windows.UIElement.UidProperty>|  
|<span data-ttu-id="6cffe-3601">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-3601">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-3602">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-3602">None</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/81defade-483b-4a89-b76d-9b25bba34010"><span data-ttu-id="6cffe-3603">X:uid 特性</span><span class="sxs-lookup"><span data-stu-id="6cffe-3603">x:Uid Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3604">标识 <see cref="P:System.Windows.UIElement.Uid" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3604">Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cffe-3605">请确保此元素的所有可视子元素都正确地进行了布局更新。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3605">Ensures that all visual child elements of this element are properly updated for layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3606">当调用此方法具有的元素<xref:System.Windows.UIElement.IsMeasureValid%2A>`false`或<xref:System.Windows.UIElement.IsArrangeValid%2A>`false`将调用特定于元素<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>方法，这会强制布局更新，并将验证所有的计算的大小。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3606">When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.</span></span>  
  
 <span data-ttu-id="6cffe-3607">调用此方法不起如果布局保持不变，或布局的排列方式既不度量状态无效。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3607">Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</span></span> <span data-ttu-id="6cffe-3608">但是，如果布局中任一方面无效<xref:System.Windows.UIElement.UpdateLayout%2A>调用会将整个布局重做。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3608">However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout.</span></span> <span data-ttu-id="6cffe-3609">因此，应避免调用<xref:System.Windows.UIElement.UpdateLayout%2A>元素树中每个增量和次要更改后。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3609">Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree.</span></span> <span data-ttu-id="6cffe-3610">布局系统将执行元素布局，以延迟方式，使用一种算法，可平衡性能与货币和延迟到根更改，直到所有子元素都是有效的权重策略。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3610">The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</span></span> <span data-ttu-id="6cffe-3611">应只调用<xref:System.Windows.UIElement.UpdateLayout%2A>如果您绝对需要更新的大小和位置，并且您仅可以确信您控制的和可能会影响布局的属性的所有更改都已都完成。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3611">You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3612">获取或设置此元素的 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 可见性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3612">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span></span>  <span data-ttu-id="6cffe-3613">这是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3613">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="6cffe-3614">枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3614">A value of the enumeration.</span></span> <span data-ttu-id="6cffe-3615">默认值为 <see cref="F:System.Windows.Visibility.Visible" />。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3615">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cffe-3616">设置此属性的值将影响<xref:System.Windows.UIElement.IsVisible%2A>，这又可能会引发<xref:System.Windows.UIElement.IsVisibleChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3616">Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event.</span></span> <span data-ttu-id="6cffe-3617">但是，<xref:System.Windows.UIElement.IsVisible%2A>有其他影响的因素，例如包含它的父项的可见性设置。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3617">However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="6cffe-3618">元素的<xref:System.Windows.UIElement.Visibility%2A>不是<xref:System.Windows.Visibility.Visible>不参与输入事件 （或命令）、 不会影响布局的测量或排列处理过程，不是按选项卡顺序和命中测试中将不会报告。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3618">Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</span></span>  
  
 <span data-ttu-id="6cffe-3619">当由继承<xref:System.Windows.Window>或其派生的类，<xref:System.Windows.Window>重新定义为此属性的默认值<xref:System.Windows.Visibility.Collapsed>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3619">When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="6cffe-3620">此操作将不运行在最初创建布局的测量处理过程的<xref:System.Windows.Window>，和<xref:System.Windows.UIElement.RenderSize%2A>返回 (0，0)。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3620">This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0).</span></span> <span data-ttu-id="6cffe-3621">有关详细信息，请参阅<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3621">For details, see <xref:System.Windows.Window>.</span></span> <span data-ttu-id="6cffe-3622"><xref:System.Windows.Controls.Primitives.Popup> 此外会重新定义此默认值为<xref:System.Windows.Visibility.Collapsed>，使用相似的结果行为<xref:System.Windows.Controls.Primitives.Popup>及其派生类。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3622"><xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6cffe-3623">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="6cffe-3623">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6cffe-3624">标识符字段</span><span class="sxs-lookup"><span data-stu-id="6cffe-3624">Identifier field</span></span>|<xref:System.Windows.UIElement.VisibilityProperty>|  
|<span data-ttu-id="6cffe-3625">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="6cffe-3625">Metadata properties set to `true`</span></span>|<span data-ttu-id="6cffe-3626">无</span><span class="sxs-lookup"><span data-stu-id="6cffe-3626">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cffe-3627">下面的示例实现引用都应是用户界面中的互斥对的两个不同的命名的按钮的处理程序。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3627">The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</span></span> <span data-ttu-id="6cffe-3628">在运行之前与该按钮关联的实际的程序逻辑，按钮本身设置为<xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>，并对中的其他按钮将设置为<xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3628">Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, and the other button in the pair is set to <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cffe-3629">标识 <see cref="P:System.Windows.UIElement.Visibility" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="6cffe-3629">Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>